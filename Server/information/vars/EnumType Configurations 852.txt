
case 13:
	enumType.valueMap = {223=1001, 95=1015, 224=1017, 33=1025, 34=1011, 228=1007, 36=1019, 38=1009, 39=1012, 231=1016, 40=1013, 232=1014, 233=1010, 41=1018, 42=1022, 43=1005, 45=1003, 109=1020, 48=25, 49=16, 50=17, 51=18, 180=1002, 52=19, 53=20, 246=1008, 54=21, 55=22, 56=23, 249=1021, 57=24, 58=1024, 59=1023, 60=1004, 252=1006};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = unknownScriptVarType4698;
	enumType.size = 35;
	break;

case 14:
	enumType.valueMap = {223=?, 95=_, 224=?, 33=!, 34=", 228=?, 36=$, 38=&, 39=', 231=?, 40=(, 232=?, 233=?, 41=), 42=*, 43=+, 45=-, 109=m, 48=0, 49=1, 50=2, 51=3, 180=?, 52=4, 53=5, 246=?, 54=6, 55=7, 56=8, 249=?, 57=9, 58=:, 59=;, 60=<, 252=?};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = unknownScriptVarType4698;
	enumType.size = 35;
	break;

case 15:
	enumType.valueMap = {1024=58, 1025=33, 16=49, 17=50, 18=51, 19=52, 20=53, 21=54, 22=55, 23=56, 24=57, 25=48, 1001=223, 1002=180, 1003=45, 1004=60, 1005=43, 1006=252, 1007=228, 1008=246, 1009=38, 1010=233, 1011=34, 1012=39, 1013=40, 1014=232, 1015=95, 1016=231, 1017=224, 1018=41, 1019=36, 1020=109, 1021=249, 1022=42, 1023=59};
	enumType.valueType = unknownScriptVarType4698;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 35;
	break;

case 27:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4315, 4317, 4319, 4321, 4323, 4325, 4327, 4329, 4331, 4333, 4335, 4337, 4339, 4341, 4343, 4345, 4347, 4349, 4351, 4353, 4355, 4357, 4359, 4361, 4363, 4365, 4367, 4369, 4371, 4373, 4375, 4377, 4379, 4381, 4383, 4385, 4387, 4389, 4391, 4393, 4395, 4397, 4399, 4401, 4403, 4405, 4407, 4409, 4411, 4413];
	enumType.size = 50;
	break;

case 29:
	enumType.valueType = OBJ;
	enumType.defaultint = 4069;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4069, 4504, 4509, 18706];
	enumType.size = 4;
	break;

case 30:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2412, 2413, 2414];
	enumType.size = 3;
	break;

case 31:
	enumType.valueMap = {4=30887};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 55:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Worm, Maggot, Cricket, Locust, Shrimp, Crayfish, Green moth, Grey moth];
	enumType.size = 8;
	break;

case 62:
	enumType.valueMap = {6529=TokKul, 31337=magic beans, 6306=trade sticks, 34338=zemomarks, 8951=pieces of eight};
	enumType.valueType = STRING;
	enumType.defaultstr = "coins";
	enumType.keyType = OBJ;
	enumType.size = 5;
	break;

case 73:
	enumType.valueMap = {1747=black dragonhide, 24372=royal dragonhide, 1749=red dragonhide, 1751=blue dragonhide, 7801=snake hide, 1753=green dragonhide, 1739=cowhide, 6287=snake hide};
	enumType.valueType = STRING;
	enumType.defaultstr = "hide";
	enumType.keyType = OBJ;
	enumType.size = 8;
	break;

case 74:
	enumType.valueMap = {1747=black dragonhides, 24372=royal dragonhides, 1749=red dragonhides, 1751=blue dragonhides, 7801=snake hides, 1753=green dragonhides, 1739=cowhides, 6287=snake hides};
	enumType.valueType = STRING;
	enumType.defaultstr = "hides";
	enumType.keyType = OBJ;
	enumType.size = 8;
	break;

case 75:
	enumType.valueMap = {6289=snakeskins, 1745=green dragon leather, 24374=royal dragon leather, 2505=blue dragon leather, 2507=red dragon leather, 1741=soft leather, 2509=black dragon leather, 1743=hard leather};
	enumType.valueType = STRING;
	enumType.defaultstr = "leather";
	enumType.keyType = OBJ;
	enumType.size = 8;
	break;

case 83:
	enumType.valueMap = {2625=3477, 15041=15042, 19266=19269, 19203=19206, 5576=23122, 19401=19404, 19338=19339, 19211=19213, 9676=9678, 19343=19344, 19217=19219, 19224=19227, 19416=19419, 2585=3472, 9945=9946, 3483=3485, 2655=3478, 19232=19234, 2593=3473, 6625=6627, 19169=19171, 19238=19240, 2663=3479, 19175=19177, 19431=19434, 2601=3474, 19245=19248, 19182=19185, 2671=3480, 15023=15024, 2609=3475, 15029=15030, 19253=19255, 19190=19192, 2617=3476, 15035=15036, 19259=19261, 19196=19198};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 38;
	break;

case 108:
	enumType.valueType = STRING;
	enumType.defaultstr = "this skill";
	enumType.keyType = INT;
	enumType.valueArray = [null, Attack, Strength, Ranged, Magic, Defence, Constitution, Prayer, Agility, Herblore, Thieving, Crafting, Runecrafting, Mining, Smithing, Fishing, Cooking, Firemaking, Woodcutting, Fletching, Slayer, Farming, Construction, Hunter, Summoning, Dungeoneering, Divination];
	enumType.size = 26;
	break;

case 136:
	enumType.valueType = OBJ;
	enumType.defaultint = 6797;
	enumType.keyType = INT;
	enumType.valueArray = [null, 5331, 5333, 5334, 5335, 5336, 5337, 5338, 5339, 5340, 18682];
	enumType.size = 10;
	break;

case 169:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 508];
	enumType.size = 1;
	break;

case 172:
	enumType.valueType = OBJ;
	enumType.defaultint = 7096;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7096, 7097, 7098, 7099, 7100, 7101, 7102, 7103, 7104, 7105, 7106, 7107];
	enumType.size = 12;
	break;

case 197:
	enumType.valueType = INT;
	enumType.defaultint = 296;
	enumType.keyType = INT;
	enumType.valueArray = [296, 296, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200];
	enumType.size = 101;
	break;

case 198:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97];
	enumType.size = 101;
	break;

case 199:
	enumType.valueMap = {6529=1, 31337=1, 6306=1, 34338=1, 995=1, 8951=1};
	enumType.valueType = BOOLEAN;
	enumType.keyType = OBJ;
	enumType.size = 6;
	break;

case 200:
	enumType.valueMap = {6529=2183, 31337=22207, 6306=2182, 34338=20215, 995=2181, 8951=2184};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 2181;
	enumType.keyType = OBJ;
	enumType.size = 6;
	break;

case 201:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [908, 830, 831, 833, 834, 836, 837, 838, 839, 841, 840, 842, 844, 843, 963, 1009, 2430, 2840, 2858];
	enumType.size = 19;
	break;

case 205:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Guide Prices: Ores, Guide Prices: Runes, Guide Prices: Logs, Guide Prices: Herbs, Guide Prices: Armour and Weapons];
	enumType.size = 5;
	break;

case 208:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32826, 32830, 32828, 32825, 32821, 32820];
	enumType.size = 6;
	break;

case 209:
	enumType.valueMap = {5=26003, 3=26001};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 223:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
	enumType.size = 10;
	break;

case 224:
	enumType.valueType = INT;
	enumType.keyType = INT;
	break;

case 238:
	enumType.valueType = INT;
	enumType.defaultint = 1000;
	enumType.keyType = INT;
	enumType.valueArray = [null, 500, 1000, 1000, 3000, 3000, 5000, 5000, 10000, 500];
	enumType.size = 9;
	break;

case 274:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2246, 2249, 2251];
	enumType.size = 3;
	break;

case 287:
	enumType.valueMap = {6289=snakeskins, 1745=green dragon leather, 24374=royal dragon leather, 2505=blue dragon leather, 2507=red dragon leather, 1741=soft leather, 2509=black dragon leather, 1743=hard leather};
	enumType.valueType = STRING;
	enumType.defaultstr = "leather";
	enumType.keyType = OBJ;
	enumType.size = 8;
	break;

case 334:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 10302, 10313, 10324, 10323, 10326, 10327, 10325, 10328];
	enumType.size = 8;
	break;

case 335:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 10302, 10303, 10304, 10305, 10306, 10307, 10308, 10309, 10310, 10311, 10312];
	enumType.size = 11;
	break;

case 365:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27174, 27178, null, null, 27175, null, null, 27176, null, null, 27177];
	enumType.size = 5;
	break;

case 368:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Mystical Gaze, Vernal Gaze, Nocturnal Gaze, Abyssal Gaze, Serene Gaze, Divine Gaze, Blazing Gaze, Infernal Gaze];
	enumType.size = 8;
	break;

case 370:
	enumType.valueMap = {0=1, 4=1, 120=1, 26=1, 27=1, 28=1, 29=1, 30=1, 31=1};
	enumType.valueType = BOOLEAN;
	enumType.keyType = INT;
	enumType.size = 9;
	break;

case 371:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 197;
	enumType.keyType = INT;
	enumType.valueArray = [1818, 197, 198, 200, 202, 199, 203, 201, 204, 205, 206, 207, 215, 209, 210, 211, 212, 213, 214, 208, 216, 217, 221, 220, 222, 3028, 9170, null, null, null, 1817];
	enumType.size = 28;
	break;

case 374:
	enumType.valueType = STRING;
	enumType.defaultstr = "None";
	enumType.keyType = INT;
	enumType.valueArray = [0, 1000, 5000, 10000, 25000, 50000, 75000, 100000];
	enumType.size = 8;
	break;

case 375:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1000, 5000, 10000, 25000, 50000, 75000, 100000];
	enumType.size = 8;
	break;

case 376:
	enumType.valueType = NPC;
	enumType.defaultint = 21051;
	enumType.keyType = INT;
	enumType.valueArray = [21051, 21052, 21053, 21054, 21051, 21052, 21053, 21054, 21051, 21052, 21053, 21054, 21051, 21052, 21053, 21054, 21055];
	enumType.size = 17;
	break;

case 377:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Spawn NPCs, Spawn Elites, Kill NPCs];
	enumType.size = 3;
	break;

case 378:
	enumType.valueMap = {29185=29186, 29188=29186, 12169=12170, 10639=9748, 10640=9751, 10641=9754, 10642=9757, 9747=9748, 10643=9760, 10644=9763, 10645=9766, 9750=9751, 10646=9949, 10647=9769, 10648=9772, 9753=9754, 10649=9775, 10650=9778, 10651=9781, 9756=9757, 10652=9784, 10653=9787, 10654=9790, 9759=9760, 10655=9793, 10656=9796, 10657=9799, 9762=9763, 10658=9802, 10659=9805, 10660=9808, 9765=9766, 10661=9811, 9768=9769, 9771=9772, 9774=9775, 9777=9778, 9780=9781, 9783=9784, 9786=9787, 9789=9790, 9792=9793, 9795=9796, 9798=9799, 34246=34247, 34248=34249, 9801=9802, 34250=34251, 9804=9805, 18508=18509, 34252=34253, 34254=34255, 9807=9808, 34256=34257, 9810=9811, 34258=34259, 34260=34261, 34262=34263, 34264=34265, 34266=34267, 15706=18509, 9948=9949, 34268=34269, 34270=34271, 34272=34273, 34274=34275, 34276=34277, 34278=34279, 34280=34281, 34282=34283, 34284=34285, 12524=12170, 34286=34287, 34288=34289, 34290=34291, 34292=34293, 34294=34295, 34296=34297};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 78;
	break;

case 379:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1438, 1448, 1444, 1440, 1442, 1446, 1454, 1452, 1462, 1458];
	enumType.size = 10;
	break;

case 380:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13619, 13614, 13624, 13622, 13617, 13627, 13620, 13615, 13625, 13623, 13618, 13628, 21517, 21516, 21518, 21519];
	enumType.size = 16;
	break;

case 421:
	enumType.valueMap = {10049=Requires any 1 graahk hide, 10051=Requires 1 good graahk hide, 10053=Requires 2 common kebbit furs, 10055=Require 2 common kebbit furs, 10057=Requires 2 Feldip weasel furs, 10059=Require 2 Feldip weasel furs, 10061=Requires 2 desert devil furs, 10063=Require 2 desert devil furs, 10065=Requires 2 polar kebbit furs, 10067=Require 2 polar kebbit furs, 10035=Require any 1 kyatt fur, 10037=Requires any 1 kyatt fur, 10069=Requires 2 spotted kebbit furs, 10039=Requires 1 good kyatt fur, 10071=Requires 2 dashing kebbit furs, 10041=Require any 1 larupia fur, 10043=Requires any 1 larupia fur, 10075=Require 2 dark kebbit furs, 10045=Requires 1 good larupia fur, 10047=Require any 1 graahk hide};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = OBJ;
	enumType.size = 20;
	break;

case 422:
	enumType.valueMap = {10049=10097, 10051=10099, 10053=10121, 10055=10121, 10057=10119, 10059=10119, 10061=10123, 10063=10123, 10065=10117, 10067=10117, 10035=10101, 10037=10101, 10069=10125, 10039=10103, 10071=10127, 10041=10093, 10043=10093, 10075=10115, 10045=10095, 10047=10097};
	enumType.valueType = OBJ;
	enumType.defaultint = 526;
	enumType.keyType = OBJ;
	enumType.size = 20;
	break;

case 423:
	enumType.valueMap = {10049=10099, 10041=10095, 10043=10095, 10035=10103, 10037=10103, 10047=10099};
	enumType.valueType = OBJ;
	enumType.defaultint = 526;
	enumType.keyType = OBJ;
	enumType.size = 6;
	break;

case 424:
	enumType.valueMap = {10065=2, 10067=2, 10053=2, 10069=2, 10055=2, 10071=2, 10057=2, 10059=2, 10075=2, 10061=2, 10063=2};
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = OBJ;
	enumType.size = 11;
	break;

case 425:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6881368, 6881373, 6881367, 6881375, 6881376, 6881383, 6881534, 6881551, 6881377];
	enumType.size = 9;
	break;

case 442:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1, 1, 10, 15, 20, 23, 25, 32, 36, 38, 38, 40, 45, 45, 53, 55, 55, 65, 65, 70, 75, 80, 85, 90, 1, 91, 93, 95, 97, 92, 94, 96, 98, 1];
	enumType.size = 34;
	break;

case 443:
	enumType.valueMap = {25=You oaf. Begone!, 34=Uhhhhhhh..., 10=Cor blimey, mate! What are ye doing in me pockets?, 11=Cor blimey, mate! What are ye doing in me pockets?};
	enumType.valueType = STRING;
	enumType.defaultstr = "What do you think you're doing?";
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 445:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 30, 30, 40, 40, 50, 10, null, null, null, null, null, null, null, null, 10];
	enumType.size = 26;
	break;

case 450:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [12451858, 12451859, 12451860, 12451861, 12451862, 12451863];
	enumType.size = 6;
	break;

case 465:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	break;

case 580:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28838, 28843, null, null, 28839, null, null, 28840, null, 28841, 28842];
	enumType.size = 6;
	break;

case 583:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29461, null, null, null, 29462, null, null, 29463, null, 29464, 29465];
	enumType.size = 5;
	break;

case 584:
	enumType.valueMap = {5=29467, 3=29466};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 585:
	enumType.valueMap = {14930=21284, 14931=21287, 14932=21286, 14933=21286, 14937=21286, 14939=21283, 14942=21285};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 21282;
	enumType.keyType = STRUCT;
	enumType.size = 7;
	break;

case 595:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7953, 7954, 7955, 7956, 7957];
	enumType.size = 5;
	break;

case 615:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 14221337, 14221346, 14221357, 14221368, 14221379, 14221390];
	enumType.size = 6;
	break;

case 616:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Anyone, Any friends, Recruit+, Corporal+, Sergeant+, Lieutenant+, Captain+, General+, Only me];
	enumType.size = 9;
	break;

case 680:
	enumType.valueType = STRING;
	enumType.defaultstr = "this skill";
	enumType.keyType = SKILL;
	enumType.valueArray = [Attack, Defence, Strength, Constitution, Ranged, Prayer, Magic, Cooking, Woodcutting, Fletching, Fishing, Firemaking, Crafting, Smithing, Mining, Herblore, Agility, Thieving, Slayer, Farming, Runecrafting, Hunter, Construction, Summoning, Dungeoneering, Divination];
	enumType.size = 26;
	break;

case 681:
	enumType.valueType = SKILL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 0, 2, 4, 6, 1, 3, 5, 16, 15, 17, 12, 20, 14, 13, 10, 7, 11, 8, 9, 18, 19, 22, 21, 23, 24, 25];
	enumType.size = 26;
	break;

case 683:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28846, 28851, null, null, 28847, null, null, 28848, null, 28849, 28850];
	enumType.size = 6;
	break;

case 684:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28854, null, null, null, 28855, null, null, 28856, null, 28857, 28858];
	enumType.size = 5;
	break;

case 689:
	enumType.valueType = STRING;
	enumType.defaultstr = "Retro casual";
	enumType.keyType = INT;
	enumType.valueArray = [Retro workman's halfcoat, Retro merryman top, Retro meshed crew neck, Retro waxed tunic, Retro tunic and half-apron, Retro farming cowl, Retro assassin gear, Retro crafter's blouson, Retro athlete's tabard, Retro nettle-weave jacket, Retro lumberer's tunic, Retro wolf-fur vest, Retro smither's kurta, Retro bearskin, Retro hunter's bandolier, Retro combat jacket, Retro belted tunic, Retro swordarm sash, Retro sleeveless cowl, Retro ranger gear, Retro longstride top, Retro cook's overalls, Retro collared robe top, Retro archmage smock, Retro warlock doublet, Retro moleskin, Retro shouldercoat, Retro wanderlust vest, Retro crew neck and sash, Retro rugged dustcoat, Retro timeworn polo, Retro missionary tunic, Retro striped sweater, Retro woollen vest, Retro princely doublet, Retro tattered waistcoat, Retro fine shirt, Retro waistcoat, Retro plain top, Retro light buttons, Retro dark buttons, Retro jacket, Retro shirt, Retro stitching, Retro ragged top, Retro two-toned, Workman's halfcoat, Cook's overalls, Waxed tunic, Nettle-weave jacket, Hunter's bandolier, Archmage smock, Warlock doublet, Meshed crew neck, Missionary tunic, Longstride top, Ranger gear, Bearskin, Smither's kurta, Wolf-fur vest, Assassin gear, Tunic and studded belt];
	enumType.size = 62;
	break;

case 690:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 471;
	enumType.keyType = INT;
	enumType.valueArray = [457, 445, 459, 460, 461, 462, 452, 463, 464, 446, 465, 466, 467, 451, 468, 453, 454, 455, 469, 470, 450, 458, 447, 448, 449, 471, 443, 472, 473, 444, 474, 456, 111, 113, 114, 115, 112, 116, 18, 19, 20, 21, 22, 23, 24, 25, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881];
	enumType.size = 62;
	break;

case 692:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [ALL, 90%, 80%, 70%, 60%, 50%, 40%, 30%, 20%, 10%, 0%];
	enumType.size = 11;
	break;

case 693:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 147;
	enumType.keyType = INT;
	enumType.valueArray = [147, 150, 148, 149, 151, 152, 64, 61, 63, 65, 62];
	enumType.size = 11;
	break;

case 695:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Evil tree, Evil oak tree, Evil willow tree, Evil maple tree, Evil yew tree, Evil magic tree, Evil elder tree];
	enumType.size = 7;
	break;

case 696:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, kbase/view.ws?guid=melee_the_basics#training_attack, kbase/view.ws?guid=melee_the_basics#training_strength, kbase/view.ws?guid=ranged_the_basics, kbase/view.ws?guid=magic_the_basics, kbase/view.ws?guid=melee_the_basics#training_defence, kbase/view.ws?guid=fighting_the_basics#hitpoints, kbase/view.ws?guid=prayer_the_basics, kbase/view.ws?guid=agility_the_basics, kbase/view.ws?guid=herblore_the_basics, kbase/view.ws?guid=thieving_the_basics, kbase/view.ws?guid=crafting_the_basics, kbase/view.ws?guid=runecrafting_the_basics, kbase/view.ws?guid=mining_the_basics, kbase/view.ws?guid=smithing_the_basics, kbase/view.ws?guid=fishing_the_basics, kbase/view.ws?guid=cooking_the_basics, kbase/view.ws?guid=firemaking_the_basics, kbase/view.ws?guid=woodcutting_the_basics, kbase/view.ws?guid=fletching_the_basics, kbase/view.ws?guid=slayer_the_basics, kbase/view.ws?guid=farming_the_basics, kbase/view.ws?guid=construction_the_basics, kbase/view.ws?guid=hunter_getting_started, kbase/view.ws?guid=summoning_the_basics, kbase/view.ws?guid=dungeoneering_the_basics];
	enumType.size = 25;
	break;

case 702:
	enumType.valueType = STRING;
	enumType.defaultstr = "Patterned Sweater";
	enumType.keyType = INT;
	enumType.valueArray = [Striped arms, Princely sleeves, Fine cuffs, Woollen sleeves, Ragged arms, Tattered sleeves, Loose sleeves, Regular, Musclebound, Large cuffed, Thin sleeved, Shoulder pads];
	enumType.size = 12;
	break;

case 703:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 14;
	enumType.keyType = INT;
	enumType.valueArray = [14, 13, 98, 308, 305, 307, 10, 15, 16, 100, 12, 11, 102, 306, 99, 101, 104, 17, 103, 666, 667, 740, 741];
	enumType.size = 23;
	break;

case 704:
	enumType.valueMap = {69009468=1146, 69009471=1148, 69009470=1147, 69009465=1144, 69009466=1145, 69009460=1141, 69009463=1143, 69009462=1142, 69009459=1140, 69009490=1139, 69009476=1151, 69009472=1149, 69009474=1150};
	enumType.valueType = STRUCT;
	enumType.defaultint = 1138;
	enumType.keyType = INTERFACE;
	enumType.size = 13;
	break;

case 706:
	enumType.valueType = INT;
	enumType.defaultint = 167;
	enumType.keyType = INT;
	enumType.valueArray = [167, 166, 165, 163, 162, 160, 159, 157, 156, 154, 153, 151, 150, 148, 147, 145, 144, 142, 141, 139, 138, 136, 135, 133, 132, 130, 129, 128, 126, 125, 123, 122, 120, 119, 117, 116, 114, 113, 111, 110, 108, 107, 105, 104, 102, 101, 99, 98, 96, 95, 93, 92, 91, 89, 88, 86, 85, 83, 82, 80, 79, 77, 76, 74, 73, 71, 70, 68, 67, 65, 64, 62, 61, 59, 58, 56, 55, 54, 52, 51, 49, 48, 46, 45, 43, 42, 40, 39, 37, 36, 34, 33, 31, 30, 28, 27, 25, 24, 22, 21, 19];
	enumType.size = 101;
	break;

case 707:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 38, 39, 41, 42, 44, 45, 47, 48, 50, 51, 53, 54, 56, 57, 59, 60, 62, 63, 65, 66, 68, 69, 71, 72, 74, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 93, 94, 96, 97, 99, 100, 102, 103, 105, 106, 108, 109, 111, 112, 113, 115, 116, 118, 119, 121, 122, 124, 125, 127, 128, 130, 131, 133, 134, 136, 137, 139, 140, 142, 143, 145, 146, 148];
	enumType.size = 101;
	break;

case 708:
	enumType.valueType = unknownScriptVarType4677;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28, 31, 17, 18, 12, 1, 26, 21, 23, 13, 19, 5, 4, 20, 27, 22, 9, 24, 30, 25, 15, 16, 3, 0, 8, 14, 29, 2, 6, 118, 35, 36, 39, 40, 43, 41, 45, 42, 231, 682];
	enumType.size = 40;
	break;

case 711:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 105;
	enumType.keyType = INT;
	enumType.valueArray = [105, 108, 106, 107, 109, 110, 28, 26, 27, 29, 30, 31];
	enumType.size = 12;
	break;

case 716:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 0, 83, 174, 276, 388, 512, 650, 801, 969, 1154, 1358, 1584, 1833, 2107, 2411, 2746, 3115, 3523, 3973, 4470, 5018, 5624, 6291, 7028, 7842, 8740, 9730, 10824, 12031, 13363, 14833, 16456, 18247, 20224, 22406, 24815, 27473, 30408, 33648, 37224, 41171, 45529, 50339, 55649, 61512, 67983, 75127, 83014, 91721, 101333, 111945, 123660, 136594, 150872, 166636, 184040, 203254, 224466, 247886, 273742, 302288, 333804, 368599, 407015, 449428, 496254, 547953, 605032, 668051, 737627, 814445, 899257, 992895, 1096278, 1210421, 1336443, 1475581, 1629200, 1798808, 1986068, 2192818, 2421087, 2673114, 2951373, 3258594, 3597792, 3972294, 4385776, 4842295, 5346332, 5902831, 6517253, 7195629, 7944614, 8771558, 9684577, 10692629, 11805606, 13034431, 14391160, 15889109, 17542976, 19368992, 21385073, 23611006, 26068632, 28782069, 31777943, 35085654, 38737661, 42769801, 47221641, 52136869, 57563718, 63555443, 70170840, 77474828, 85539082, 94442737, 104273167, 115126838, 127110260, 140341028, 154948977, 171077457, 188884740, 208545572, 230252886, 254219702, 280681209, 309897078, 342154009, 377768545, 417090179, 460504778, 508438379, 561361362, 619793069, 684306901, 755535943];
	enumType.size = 140;
	break;

case 723:
	enumType.valueType = INT;
	enumType.defaultint = 226;
	enumType.keyType = INT;
	enumType.valueArray = [115, 115, 115, 115, 115, 115, 127, 138, 149, 160, 171, 182, 193, 204, 215, 226, 215, 204, 193, 182, 171, 160, 149, 138, 127, 115, 115, 115, 115, 115, 115];
	enumType.size = 31;
	break;

case 727:
	enumType.valueMap = {3=26005};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 728:
	enumType.valueMap = {5=26009, 3=26007};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 729:
	enumType.valueMap = {5=26013, 3=26011};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 730:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 23848;
	enumType.keyType = INT;
	enumType.valueArray = [null, 23848];
	enumType.size = 1;
	break;

case 731:
	enumType.valueMap = {554=26, 555=26, 556=26, 557=26, 558=26, 559=24, 560=465, 561=558, 562=210, 9075=330, 563=567, 564=348, 565=825, 566=615};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 14;
	break;

case 732:
	enumType.valueMap = {560=18, 562=9};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 2;
	break;

case 733:
	enumType.valueMap = {8449=100000, 8451=5000, 1539=52, 15237=18000, 8453=10000, 15239=45000, 8455=15000, 8457=5000, 8459=10000, 8461=15000, 8784=130000, 8786=325000, 4819=7, 4820=33, 8788=975000, 8790=650, 12183=25, 32665=50000, 8794=13, 3420=21, 19805=2000, 15262=125000, 19808=2000, 8417=1000, 8419=2000, 8421=5000, 8423=10000, 8425=15000, 8427=20000, 8429=50000, 8431=1000, 1391=7000, 8433=5000, 8435=10000, 8437=5000, 8439=10000, 8441=15000, 8443=20000, 8445=25000, 8447=50000};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 40;
	break;

case 735:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 3126, 3127, 3128];
	enumType.size = 3;
	break;

case 736:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 3123, 3124, 3125];
	enumType.size = 3;
	break;

case 737:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [57999362, 57999363, 57999364, 57999365, 57999366, 57999367, 57999368, 57999369, 57999370, 57999371, 57999372, 57999373, 57999374, 57999375, 57999376, 57999377, 57999378, 57999379, 57999380, 57999381, 57999382, 57999383, 57999384, 57999385, 57999386, 57999387, 57999388, 57999389, 57999390, 57999391, 57999392];
	enumType.size = 31;
	break;

case 738:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [436, 438, 440, 442, 444, 447, 449, 451, 453];
	enumType.size = 9;
	break;

case 739:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1436, 7936, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 9075];
	enumType.size = 16;
	break;

case 740:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1511, 2862, 1521, 1519, 6333, 1517, 6332, 10810, 12581, 1515, 1513, 29556];
	enumType.size = 12;
	break;

case 741:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [249, 251, 253, 255, 257, 2998, 259, 12172, 261, 263, 3000, 265, 2481, 267, 269, 14854, 21624];
	enumType.size = 17;
	break;

case 742:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11834, 11838, 11842, 11864, 11870, 11846, 11848, 11850, 11856, 11732, 4151, 11235, 6739, 4587, 4153];
	enumType.size = 15;
	break;

case 743:
	enumType.valueMap = {5=26017, 3=26015};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 744:
	enumType.valueType = SKILL;
	enumType.defaultint = -1;
	enumType.keyType = SKILL;
	enumType.valueArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, null, 10, 11, 12, 13, 14, null, null, null, null, null, 20, null, null, null, 24];
	enumType.size = 16;
	break;

case 745:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 1478;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1478, 1479, 1481, 1483, 1480, 1484, 1482, 1485, 1486, 1487, 1488, 1496, 1490, 1491, 1492, 1493, 1494, 1495, 1489, 1497, 1498, 1502, 1501, 1503, 3032, 9204];
	enumType.size = 26;
	break;

case 746:
	enumType.valueType = INT;
	enumType.defaultint = 10780509;
	enumType.keyType = INT;
	enumType.valueArray = [14274247, 13546657, 14002565, 12291946, 10780509, 10385993, 9334338, 7952426, 6573604, 3550213, 5323010, 1839627];
	enumType.size = 12;
	break;

case 747:
	enumType.valueType = STRING;
	enumType.defaultstr = "Choose a skin colour";
	enumType.keyType = INT;
	break;

case 748:
	enumType.valueType = INT;
	enumType.defaultint = 4;
	enumType.keyType = INT;
	enumType.valueArray = [9, 8, 7, 0, 1, 2, 3, 4, 5, 6, 10, 11];
	enumType.size = 12;
	break;

case 749:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 34;
	enumType.keyType = INT;
	enumType.valueArray = [34, 33, 84, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126];
	enumType.size = 13;
	break;

case 750:
	enumType.valueType = STRING;
	enumType.defaultstr = "Bare arms";
	enumType.keyType = INT;
	enumType.valueArray = [Bare arms, Silver wristguards, Gold wristguards, Silver clasps, Gold clasps, Silver bangles, Gold bangles, Silver banding, Gold banding, Silver bands, Gold bands, Silver armguards, Gold armguards];
	enumType.size = 13;
	break;

case 751:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 68;
	enumType.keyType = INT;
	enumType.valueArray = [68, 67, 127, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168];
	enumType.size = 13;
	break;

case 753:
	enumType.valueType = INT;
	enumType.defaultint = 3678223;
	enumType.keyType = INT;
	enumType.valueArray = [5922150, 12629411, 5008751, 4665648, 4065794, 7628660, 10390641, 1640199, 3678223, 2500097, 6705973, 1644054, 4859661, 4144952, 5572098, 9374468, 7079939, 8128772, 6293251, 7810828, 7609859, 4722695, 12661254, 3803142, 6622730, 10688272, 4924949, 2625287, 6575388, 8795405, 9059865, 11430917, 12079667, 14591309, 14983687, 9401092, 5718076, 10376197, 2630415, 7353867, 6562563, 8405539, 4528924, 4855309, 3543553, 2164486, 2360084, 4065794, 6631434, 9919260, 1642503, 4143137, 3023105, 3809286, 3020801, 5584130, 4795942, 5582082, 4141080, 4137240, 8409891, 4859677, 8742470, 7756349, 4077314, 1250084, 1781812, 7356171, 6176009, 8875572, 9265178, 5193992, 11508036, 7035960, 11769709, 12831350, 14862433, 12495449, 3493441, 9481283, 11050840, 10392381, 9012318, 2500097, 6776092, 11579239, 3684111, 4801830, 8291877, 11585392, 12303260, 3705895, 4350275, 7761725, 152836, 6721818, 5477710, 3952392, 7967565, 5002040, 1977857, 2178577, 1584921, 2637601, 1323817, 921138, 598306, 76290, 2758168, 993296, 2039297, 2966079, 3044702, 2178367, 2576484, 11779251, 7189404, 4490094, 1846327, 2052160, 7515317, 8620924, 1329519, 7439262, 5338831, 138309, 9143420, 6977401, 8686483, 5202292, 6591171, 1384566, 1600131, 988984, 5476540, 4019062, 1386870, 9804706, 6124714, 12507613, 3110264, 6776692, 9013655, 8817557, 2304052, 3163483, 144709, 1216437, 4742840, 2834544, 4414336, 6067647, 1447466, 1588311, 397370, 9276826, 4212603, 2239353, 3098536, 4074352, 1124158, 4728676, 6698314, 7948427, 10508115, 7279717, 4522533, 4141127, 1903946, 1581119, 5721916, 12132976, 3741006, 15060155, 2434870, 4798288, 1907226, 6839387, 5265755, 5721420, 532233, 6842203, 4868673, 1644054, 4866378, 7957354, 1707290, 7625551, 4010026, 1838863, 2171158, 3090456, 2567993, 2103343, 2830379, 3685183, 3025426, 1507336, 5589842, 2171158, 4667440, 2762021, 1380882, 1380882, 6707802];
	enumType.size = 205;
	break;

case 755:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 69271586;
	enumType.keyType = INT;
	enumType.valueArray = [null, 69271553, 69271555, 69271557, 69271559, 69271561];
	enumType.size = 5;
	break;

case 762:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13719, 13720, 13721, 13722];
	enumType.size = 4;
	break;

case 763:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13723, 13724, 13725, 13726];
	enumType.size = 4;
	break;

case 764:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13709, 13710, 13711, 13712, 13713, 13714, 13715, 13716, 13717, 13718];
	enumType.size = 10;
	break;

case 796:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24431, 24432, 24433, 24434, 24436, 24437, null, 24438, null, 24439, 24440, null, 24435, 24441, 24442, 24443];
	enumType.size = 13;
	break;

case 797:
	enumType.valueMap = {3904=4671, 3968=4679, 3906=4672, 3970=4680, 3908=4673, 3972=4681, 3910=4674, 3974=4682, 3912=4675, 3976=4683, 3914=4676, 3978=4684, 3916=4677, 3980=4685, 3918=4678, 3982=4686, 3920=4679, 3984=4687, 3922=4680, 3986=4688, 3924=4681, 3988=4689, 3926=4682, 3990=4690, 3928=4683, 3992=4691, 3930=4684, 3994=4692, 3932=4685, 3996=4693, 3934=4686, 3998=4694, 3936=4687, 3938=4688, 3940=4689, 3942=4690, 3944=4691, 3946=4692, 3948=4693, 3950=4694, 3952=4671, 3954=4672, 3956=4673, 3958=4674, 3960=4675, 3962=4676, 3964=4677, 3966=4678};
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 48;
	break;

case 798:
	enumType.valueMap = {18808861=24, 18808860=23, 18808859=22, 18808858=21, 18808857=20, 18808856=19, 18808855=18, 18808854=17, 18808853=16, 18808852=15, 18808851=14, 18808850=13, 18808849=12, 18808848=11, 18808847=10, 18808846=9, 18808845=8, 18808844=7, 18808843=6, 18808842=5, 18808841=4, 18808840=3, 18808839=2, 18808838=1, 18808837=0};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 25;
	break;

case 799:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18808837, 18808838, 18808839, 18808840, 18808841, 18808842, 18808843, 18808844, 18808845, 18808846, 18808847, 18808848, 18808849, 18808850, 18808851, 18808852, 18808853, 18808854, 18808855, 18808856, 18808857, 18808858, 18808859, 18808860, 18808861];
	enumType.size = 25;
	break;

case 800:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [801, 802, 803, 804, 805];
	enumType.size = 5;
	break;

case 801:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18808837, 18808838, 18808839, 18808840, 18808841];
	enumType.size = 5;
	break;

case 802:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18808842, 18808843, 18808844, 18808845, 18808846];
	enumType.size = 5;
	break;

case 803:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18808847, 18808848, 18808849, 18808850, 18808851];
	enumType.size = 5;
	break;

case 804:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18808852, 18808853, 18808854, 18808855, 18808856];
	enumType.size = 5;
	break;

case 805:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18808857, 18808858, 18808859, 18808860, 18808861];
	enumType.size = 5;
	break;

case 808:
	enumType.valueType = STRING;
	enumType.defaultstr = "99";
	enumType.keyType = INT;
	enumType.valueArray = [null, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99];
	enumType.size = 98;
	break;

case 812:
	enumType.valueType = unknownScriptVarType4659;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 6, 51, 207, 66, 15, 137, 72, 152, 60, 219, 27, 186, null, 185, 63, 132, 179, 43, 57, 102, 128, 0, 44, 158, 104, 92, 26, 13, 140, 135, 123, 69, 111, 34, 75, 149, 8, 94, 97, 107, 143, 73, 154, 116, 136, 106, 76, 98, 50, 93, 118, 138, 82, 134, 3, 65, 150, 120, 125, 38, 112, 105, 141, 21, 19, 59, 119, 42, 37, 24, 124, 108, 130, 147, 151, 156, 129, 28, 22, 133, 54, 146, 58, 9, 68, 67, 30, 62, 100, 110, 127, 101, 2, 121, 12, 10, 71, 39, 70, 36, 46, 48, 89, 45, 81, 126, 157, 113, 7, 78, 40, 90, 85, 31, 103, 16, 145, 148, 1, 88, 144, 153, 155, 79, 32, 61, 5, 49, 91, 25, 52, 41, 23, 96, 47, 109, 139, 80, 4, 14, 142, 29, 95, 56, 86, 87, 131, 74, 115, 18, 122, 114, 20, 33, 77, 117, 168, 175, 214, 35, 167, 170, 169, null, 171, null, 174, 11, null, 172, 177, 176, 83, 180, 206, 194, 205, 203, 183, 187, 188, 191, 192, 193, null, null, 196, 200, null, 201, 199, 202, 204, 208, 209, 210, 212, 213, 215, 216, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232];
	enumType.size = 207;
	break;

case 828:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995];
	enumType.size = 18;
	break;

case 833:
	enumType.valueMap = {257=I've cleaned your ranarr weed., 259=I've cleaned your irit leaf., 261=I've cleaned your avantoe., 14854=I've cleaned your wergali., 263=I've cleaned your kwuarm., 265=I've cleaned your cadantine., 267=I've cleaned your dwarf weed., 269=I've cleaned your torstol., 2481=I've cleaned your lantadyme., 2998=I've cleaned your toadflax., 3000=I've cleaned your snapdragon., 249=I've cleaned your guam leaf., 251=I've cleaned your marrentill., 253=I've cleaned your tarromin., 255=I've cleaned your harralander.};
	enumType.valueType = STRING;
	enumType.defaultstr = "I've cleaned your herb.";
	enumType.keyType = OBJ;
	enumType.size = 15;
	break;

case 834:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Leprechaun, Earth warrior, Ghoul, Giant, Goblin, Hobgoblin, Imp, Jogre, Lesser demon, Skeleton, Zombie, Human, Banshee, Aberrant spectre, Mummy, Gnome];
	enumType.size = 16;
	break;

case 836:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Number of champions defeated, Earth warrior, Ghoul, Giant, Goblin, Hobgoblin, Imp, Jogre, Lesser demon, Skeleton, Zombie, Human, Banshee, Aberrant spectre, Mummy, Gnome];
	enumType.size = 16;
	break;

case 837:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Number of champions defeated, Earth warrior, Ghoul, Giant, Goblin, Hobgoblin, Imp, Jogre, Lesser demon, Skeleton, Zombie, Human, Banshee, Aberrant spectre, Mummy, Gnome];
	enumType.size = 16;
	break;

case 838:
	enumType.valueType = MODEL;
	enumType.defaultint = 50419;
	enumType.keyType = INT;
	enumType.valueArray = [50419, 50420, 50423, 50399, 50401, 50407, 50393, 50405, 50402, 50408, 50424, 50394, 50416, 50396, 50421, 50417];
	enumType.size = 16;
	break;

case 839:
	enumType.valueType = MODEL;
	enumType.defaultint = 50419;
	enumType.keyType = INT;
	enumType.valueArray = [null, 50422, 50404, 50398, 50412, 50395, 50415, 50413, 50411, 50409, 50414, 50406, 50403, 50410, 50397, 50418];
	enumType.size = 15;
	break;

case 840:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];
	enumType.size = 24;
	break;

case 844:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Scout, Foot Soldier, Halberdier, Archer, Mage, Knight, Champion];
	enumType.size = 7;
	break;

case 845:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 501, 502, 503, 740, 768, 769, 770, 771, 772, 828, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 969, 970, 971, 1026, 1027, 523, 1681, 1734, 1732, 1730, 1731, 1810, 1811, 2647, 2755, 2648, 2649, 2842, 2843, 2844, 7318, 7330, 10497, 10498, 10499, 10500, 10528, 11450, 11451, 11500, 11501, 11502, 11503, 11504, 13862, 14287, 9926, 9927, 9928, 19657, 19696, 19425, 19426, 19697, 19698, 19699, 19700, 19688, 19690, 19689, 23224, 24026, 24161, 26593, 26601, 26642, 26643, 26644, 26645, 26646, 26647, 26648, 26649, 26650, 26651, 26652, 26653, 26654, 26655, 26656, 28102, 28103, 28274, 28362, 28541, 28542, 24251, 24375, 24376, 24377, 29634, 30376, 31706, 31905, 31906, 31907, 31908, 31909, 345];
	enumType.size = 167;
	break;

case 862:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907];
	enumType.size = 20;
	break;

case 863:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907];
	enumType.size = 20;
	break;

case 866:
	enumType.valueType = STRING;
	enumType.defaultstr = "N/A";
	enumType.keyType = INT;
	enumType.valueArray = [Low, Medium, High, Highest];
	enumType.size = 4;
	break;

case 867:
	enumType.valueType = STRING;
	enumType.defaultstr = "N/A";
	enumType.keyType = INT;
	enumType.valueArray = [Very low, Low, Normal, High, Maximum];
	enumType.size = 5;
	break;

case 869:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 950, 966, 1767, 7325, 7326, 11463, 29188, 949];
	enumType.size = 22;
	break;

case 875:
	enumType.valueType = INT;
	enumType.defaultint = 500;
	enumType.keyType = INT;
	break;

case 876:
	enumType.valueType = INT;
	enumType.defaultint = 400;
	enumType.keyType = INT;
	break;

case 877:
	enumType.valueType = INT;
	enumType.defaultint = 500;
	enumType.keyType = INT;
	break;

case 878:
	enumType.valueType = INT;
	enumType.defaultint = 100;
	enumType.keyType = INT;
	break;

case 879:
	enumType.valueType = INT;
	enumType.defaultint = 400;
	enumType.keyType = INT;
	break;

case 880:
	enumType.valueMap = {325=1, 326=1, 327=1};
	enumType.valueType = BOOLEAN;
	enumType.keyType = TYPE_39;
	enumType.size = 3;
	break;

case 884:
	enumType.valueType = STRING;
	enumType.defaultstr = "Boo!";
	enumType.keyType = INT;
	enumType.valueArray = [null, Ebenezer Scourge, Tiny Thom, Cook, Louis the Camel, Jack Frost, Queen of Snow, Gielinor, General Bentnoze, General Wartface, Sir Amik Varze];
	enumType.size = 10;
	break;

case 885:
	enumType.valueType = STRING;
	enumType.defaultstr = "RuneScape";
	enumType.keyType = INT;
	enumType.valueArray = [null, chains and bedsheets, chains, bedsheets];
	enumType.size = 3;
	break;

case 886:
	enumType.valueType = TILE;
	enumType.defaultint = 30968938;
	enumType.keyType = INT;
	enumType.valueArray = [30870630, 30887014, 30919782, 30936166, 30887013, 30903397, 30919781, 30870628, 30887012, 30903396, 30919780, 30936164, 30887011, 30903395, 30919779, 30870626, 30887010, 30903394, 30919778, 30936162, 30887009, 30903393, 30919777, 30870624, 30887008, 30903392, 30919776, 30936160, 30887007, 30903391, 30919775, 30870622, 30887006, 30903390, 30919774, 30936158, 31001702, 31018086, 31050854, 31067238, 31018085, 31034469, 31050853, 31001700, 31018084, 31034468, 31050852, 31067236, 31018083, 31034467, 31050851, 31001698, 31018082, 31034466, 31050850, 31067234, 31018081, 31034465, 31050849, 31001696, 31018080, 31034464, 31050848, 31067232, 31018079, 31034463, 31050847, 31001694, 31018078, 31034462, 31050846, 31067230];
	enumType.size = 72;
	break;

case 887:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 36, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41];
	enumType.size = 42;
	break;

case 888:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26422, 26427, 26428, 26429, 26430, 26431, 26563, 26564, 26565, 26566, 26567, 26568, 26585, 27583, 27584, 1666, 1653, 28111, 1659, 1667, 1679, 28112, 11514, 1650, 1668, 1675, 1674, 1660, 3107, 1676, 1658, 1664, 24123, 28262, 28263, 28264, 26426, 28049, 27585, 29737, 31648, 31934];
	enumType.size = 42;
	break;

case 889:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7, 0, 2, 1, 3, 4, 5];
	enumType.size = 7;
	break;

case 903:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51734, 51723, 51728, 51721, 51716, 51720, 51733, 51732, 51735];
	enumType.size = 9;
	break;

case 904:
	enumType.valueType = INT;
	enumType.defaultint = 3145728;
	enumType.keyType = INT;
	enumType.valueArray = [65280, 0, 16776960, 65535, 16777215, 16711680, 255, 16711935, 16776960];
	enumType.size = 9;
	break;

case 905:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [356, 356, 308, 404, 356, 308, 404, 404, 308];
	enumType.size = 9;
	break;

case 906:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [55, 151, 151, 55, 103, 55, 151, 103, 103];
	enumType.size = 9;
	break;

case 911:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Berserker, Deflect Magic, Deflect Melee, Deflect Missiles, Deflect Summoning, Leech Attack, Leech Defence, Leech Energy, Leech Magic, Leech Ranged, Leech Special Attack, Leech Strength, Protect Item, Sap Mage, Sap Ranger, Sap Spirit, Sap Warrior, Soul Split, Turmoil, Wrath];
	enumType.size = 20;
	break;

case 912:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z];
	enumType.size = 26;
	break;

case 913:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z];
	enumType.size = 26;
	break;

case 914:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [triple charm drops, summoning secondaries];
	enumType.size = 2;
	break;

case 921:
	enumType.valueMap = {256=1, 513=1, 641=1, 3=1, 643=1, 4=1, 389=1, 645=1, 391=1, 647=1, 264=1, 649=1, 138=1, 139=1, 651=1, 13=1, 653=1, 654=1, 655=1, 656=1, 17=1, 145=1, 18=1, 658=1, 148=1, 660=1, 23=1, 279=1, 24=1, 536=1, 31=1, 159=1, 416=1, 160=1, 34=1, 38=1, 41=1, 301=1, 174=1, 47=1, 57=1, 441=1, 442=1, 61=1, 62=1, 575=1, 576=1, 65=1, 577=1, 578=1, 70=1, 455=1, 456=1, 204=1, 83=1, 211=1, 214=1, 343=1, 227=1, 235=1, 622=1, 628=1, 630=1, 632=1, 633=1, 635=1, 637=1, 254=1, 383=1, 255=1, 639=1};
	enumType.valueType = INT;
	enumType.keyType = TYPE_39;
	enumType.size = 71;
	break;

case 923:
	enumType.valueMap = {6529=TokKul, 31337=magic bean, 6306=trade stick, 34338=zemomark, 8951=piece of eight};
	enumType.valueType = STRING;
	enumType.defaultstr = "coin";
	enumType.keyType = OBJ;
	enumType.size = 5;
	break;

case 924:
	enumType.valueMap = {1057=1, 962=1, 1989=1, 1959=1, 1961=1, 1038=1, 1040=1, 1042=1, 1044=1, 981=1, 1046=1, 1048=1, 1050=1, 1053=1, 1055=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 15;
	break;

case 925:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 31195136;
	enumType.keyType = INT;
	enumType.valueArray = [null, 31195149, 31195150, 31195148, 31195151, 31195147, 31195152];
	enumType.size = 6;
	break;

case 926:
	enumType.valueMap = {31195148=31195155, 31195149=31195156, 31195150=31195157, 31195151=31195158, 31195152=31195159, 31195147=31195154};
	enumType.valueType = INTERFACE;
	enumType.defaultint = 31195136;
	enumType.keyType = INTERFACE;
	enumType.size = 6;
	break;

case 927:
	enumType.valueType = NPC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 9559, 9563, 9567, 9571, 9575, 9579, 9583, 9587, 9591, 9595, 9599, 9603];
	enumType.size = 12;
	break;

case 928:
	enumType.valueMap = {9472=5, 9473=6, 9474=7, 9475=8, 9476=9, 9477=10, 9478=11, 9479=12, 9480=13, 9481=14, 9482=15, 9483=16, 9484=17, 9485=18, 9486=19, 9487=20, 9488=21, 9489=22, 9490=23, 9491=24, 9468=1, 9469=2, 9470=3, 9471=4};
	enumType.valueType = INT;
	enumType.keyType = NPC;
	enumType.size = 24;
	break;

case 929:
	enumType.valueType = NPC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 9468, 9469, 9470, 9471, 9472, 9473, 9474, 9475, 9476, 9477, 9478, 9479, 9480, 9481, 9482, 9483, 9484, 9485, 9486, 9487, 9488, 9489, 9490, 9491];
	enumType.size = 24;
	break;

case 930:
	enumType.valueMap = {9472=Albino rat, 9473=Compost mound, 9474=Vampyre bat, 9475=Beaver, 9476=Void ravager, 9477=Pyrelord, 9478=Spirit kyatt, 9479=Spirit larupia, 9480=Karamthulhu overlord, 9481=Spirit cobra, 9482=Barker toad, 9483=War tortoise, 9484=Ravenous locust, 9485=Obsidian golem, 9486=Forge regent, 9487=Fire titan, 9488=Hydra, 9489=Lava titan, 9490=Geyser titan, 9491=Pack yak, 9468=Spirit wolf, 9469=Thorny snail, 9470=Desert wyrm, 9471=Spirit Tz-Kih};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = NPC;
	enumType.size = 24;
	break;

case 931:
	enumType.valueMap = {9472=albino rat, 9473=compost mound, 9474=vampyre bat, 9475=beaver, 9476=void ravager, 9477=pyrelord, 9478=spirit kyatt, 9479=spirit larupia, 9480=karamthulhu overlord, 9481=spirit cobra, 9482=barker toad, 9483=war tortoise, 9484=ravenous locust, 9485=obsidian golem, 9486=forge regent, 9487=fire titan, 9488=hydra, 9489=lava titan, 9490=geyser titan, 9491=pack yak, 9468=spirit wolf, 9469=thorny snail, 9470=desert wyrm, 9471=spirit Tz-Kih};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = NPC;
	enumType.size = 24;
	break;

case 932:
	enumType.valueMap = {9472=2446, 9473=2447, 9474=2448, 9475=2449, 9476=2450, 9477=2451, 9478=2452, 9479=2453, 9480=2454, 9481=2455, 9482=2456, 9483=2457, 9484=2458, 9485=2459, 9486=2460, 9487=2461, 9488=2462, 9489=2463, 9490=2464, 9491=2465, 9468=2442, 9469=2443, 9470=2444, 9471=2445};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = NPC;
	enumType.size = 24;
	break;

case 933:
	enumType.valueMap = {9571=2471, 9587=2475, 9603=2479, 9559=2468, 9575=2472, 9591=2476, 9563=2469, 9579=2473, 9595=2477, 9567=2470, 9583=2474, 9599=2478};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = NPC;
	enumType.size = 12;
	break;

case 934:
	enumType.valueMap = {9472=51945, 9473=51888, 9474=51946, 9475=51927, 9603=51868, 9476=51931, 9477=32695, 9478=51875, 9479=51873, 9480=51929, 9481=51935, 9482=51933, 9483=51944, 9484=51930, 9485=51942, 9486=51939, 9487=51937, 9488=51928, 9489=51941, 9490=51940, 9491=51869, 9559=51904, 9563=51889, 9567=51905, 9571=51916, 9575=51883, 9579=51882, 9583=51876, 9587=51909, 9591=51895, 9595=51917, 9468=51934, 9469=51902, 9470=51936, 9471=51938, 9599=51896};
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = NPC;
	enumType.size = 36;
	break;

case 935:
	enumType.valueMap = {9472=4932, 9473=7772, 9474=8271, 9475=7718, 9603=5785, 9476=8089, 9477=8077, 9478=5225, 9479=5225, 9480=7968, 9481=8155, 9482=7258, 9483=8284, 9484=7992, 9485=8047, 9486=7867, 9487=7831, 9488=7938, 9489=7978, 9490=7876, 9491=5785, 9559=8146, 9563=7772, 9567=8171, 9571=8246, 9575=7760, 9579=7751, 9583=5225, 9587=8204, 9591=7849, 9595=8186, 9468=8297, 9469=8146, 9470=7793, 9471=8255, 9599=8021};
	enumType.valueType = ANIMATION;
	enumType.defaultint = -1;
	enumType.keyType = NPC;
	enumType.size = 36;
	break;

case 936:
	enumType.valueMap = {9472=2024, 9473=3048, 9474=2048, 9475=1128, 9476=3703, 9477=3176, 9478=3048, 9479=3048, 9480=1640, 9481=1896, 9482=1128, 9483=2792, 9484=1512, 9485=2920, 9486=1850, 9487=3360, 9488=2000, 9489=3200, 9490=3200, 9491=2944, 9468=3360, 9469=1696, 9470=928, 9471=2536};
	enumType.valueType = INT;
	enumType.keyType = NPC;
	enumType.size = 24;
	break;

case 937:
	enumType.valueMap = {9472=1815, 9473=0, 9474=1255, 9475=1299, 9476=1684, 9477=0, 9478=1728, 9479=1728, 9480=0, 9481=1882, 9482=1882, 9483=1926, 9484=1728, 9485=0, 9486=0, 9487=0, 9488=0, 9489=0, 9490=0, 9491=1827, 9468=1500, 9469=1500, 9470=22, 9471=77};
	enumType.valueType = INT;
	enumType.keyType = NPC;
	enumType.size = 24;
	break;

case 941:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [59375776, 59375777, 59375778, 59375779, 59375780, 59375781];
	enumType.size = 6;
	break;

case 947:
	enumType.valueMap = {15626=2346, 15627=2347, 15628=2348, 15629=2349, 15630=2350, 15631=2351, 15632=2352, 15633=2353, 15634=2354, 15635=2355, 15636=2356, 15637=2357, 15638=2358, 15639=2359, 15483=2308};
	enumType.valueType = SPOT;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 15;
	break;

case 949:
	enumType.valueMap = {5=26021, 3=26019};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 950:
	enumType.valueType = STRING;
	enumType.defaultstr = "January";
	enumType.keyType = INT;
	enumType.valueArray = [January, February, March, April, May, June, July, August, September, October, November, December];
	enumType.size = 12;
	break;

case 951:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Standard, Slim, Large, Double, Wooden, Bone];
	enumType.size = 6;
	break;

case 953:
	enumType.valueType = STRING;
	enumType.defaultstr = "Afghanistan";
	enumType.keyType = INT;
	enumType.valueArray = [Afghanistan, Albania, Algeria, American Samoa, Andorra, Angola, Anguilla, Antarctica, Antigua and Barbuda, Argentina, Armenia, Aruba, Australia, Austria, Azerbaijan, Bahamas, Bahrain, Bangladesh, Barbados, Belarus, Belgium, Belize, Benin, Bermuda, Bhutan, Bolivia, Bosnia and Herzegovina, Botswana, Bouvet Island, Brazil, British Indian Ocean Territory, Brunei Darussalam, Bulgaria, Burkina Faso, Burundi, Cambodia, Cameroon, Canada, Cape Verde, Cayman Islands, Central African Republic, Chad, Chile, China, Christmas Island, Cocos (Keeling) Islands, Colombia, Comoros, Congo, Congo, The Democratic Republic of the, Cook Islands, Costa Rica, Cote D'Ivoire, Croatia, Cuba, Cyprus, Czech Republic, Denmark, Djibouti, Dominica, Dominican Republic, East Timor, Ecuador, Egypt, El Salvador, Equatorial Guinea, Eritrea, Estonia, Ethiopia, Falkland Islands (Malvinas), Faroe Islands, Fiji, Finland, France, French Guiana, French Polynesia, French Southern Territories, Gabon, Gambia, Georgia, Germany, Ghana, Gibraltar, Greece, Greenland, Grenada, Guadeloupe, Guam, Guatemala, Guinea, Guinea-Bissau, Guyana, Haiti, Heard Island and McDonald Islands, Holy See (Vatican City State), Honduras, Hong Kong, Hungary, Iceland, India, Indonesia, Iran, Islamic Republic of, Iraq, Ireland, Israel, Italy, Jamaica, Japan, Jordan, Kazakstan, Kenya, Kiribati, Korea, Democratic People's Republic of, Korea, Republic of, Kuwait, Kyrgyzstan, Lao People's Democratic Republic, Latvia, Lebanon, Lesotho, Liberia, Libyan Arab Jamahiriya, Liechtenstein, Lithuania, Luxembourg, Macau, Macedonia, the Former Yugoslav Republic of, Madagascar, Malawi, Malaysia, Maldives, Mali, Malta, Marshall Islands, Martinique, Mauritania, Mauritius, Mayotte, Mexico, Micronesia, Federated States of, Moldova, Republic of, Monaco, Mongolia, Montenegro, Montserrat, Morocco, Mozambique, Myanmar, Namibia, Nauru, Nepal, Netherlands, Netherlands Antilles, New Caledonia, New Zealand, Nicaragua, Niger, Nigeria, Niue, Norfolk Island, Northern Mariana Islands, Norway, Oman, Pakistan, Palau, Palestinian Territory, Occupied, Panama, Papua New Guinea, Paraguay, Peru, Philippines, Pitcairn, Poland, Portugal, Puerto Rico, Qatar, Reunion, Romania, Russian Federation, Rwanda, Saint Helena, Saint Kitts and Nevis, Saint Lucia, Saint Pierre and Miquelon, Saint Vincent and the Grenadines, Samoa, San Marino, Sao Tome and Principe, Saudi Arabia, Senegal, Serbia, Seychelles, Sierra Leone, Singapore, Slovakia, Slovenia, Solomon Islands, Somalia, South Africa, South Georgia and the South Sandwich Islands, South Sudan, Spain, Sri Lanka, Sudan, Suriname, Svalbard and Jan Mayen, Swaziland, Sweden, Switzerland, Syrian Arab Republic, Taiwan, Tajikistan, Tanzania, United Republic of, Thailand, Togo, Tokelau, Tonga, Trinidad and Tobago, Tunisia, Turkey, Turkmenistan, Turks and Caicos Islands, Tuvalu, Uganda, Ukraine, United Arab Emirates, United Kingdom, United States, United States Minor Outlying Islands, Uruguay, Uzbekistan, Vanuatu, Venezuela, Vietnam, Virgin Islands, British, Virgin Islands, U.S., Wallis and Futuna, Western Sahara, Yemen, Zambia, Zimbabwe];
	enumType.size = 241;
	break;

case 954:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5, 8, 61, 14, 3, 11, 7, 12, 6, 13, 9, 17, 16, 15, 18, 32, 25, 21, 20, 36, 22, 37, 27, 28, 33, 30, 19, 35, 34, 31, 104, 29, 24, 23, 26, 114, 47, 38, 52, 121, 41, 207, 46, 48, 53, 39, 49, 116, 42, 40, 45, 50, 44, 97, 51, 54, 55, 58, 57, 59, 60, 216, 62, 64, 203, 87, 66, 63, 68, 71, 73, 70, 69, 74, 80, 170, 208, 76, 84, 79, 56, 81, 82, 88, 83, 78, 86, 91, 90, 85, 92, 93, 98, 95, 228, 96, 94, 99, 107, 103, 100, 106, 105, 101, 102, 108, 109, 111, 110, 122, 112, 115, 118, 119, 120, 113, 123, 132, 124, 129, 128, 133, 126, 130, 131, 143, 139, 137, 151, 153, 150, 140, 148, 138, 145, 146, 149, 238, 152, 72, 136, 135, 142, 242, 147, 134, 154, 141, 155, 164, 163, 161, 10, 156, 166, 160, 157, 159, 165, 158, 144, 162, 167, 173, 180, 178, 168, 171, 181, 169, 172, 176, 174, 179, 177, 182, 183, 184, 185, 186, 193, 117, 125, 175, 229, 236, 198, 202, 187, 199, 239, 189, 197, 192, 196, 194, 188, 200, 240, 89, 254, 67, 127, 190, 201, 195, 205, 191, 43, 204, 220, 211, 221, 210, 209, 212, 215, 218, 214, 217, 213, 206, 219, 223, 222, 4, 77, 225, 224, 226, 227, 234, 230, 233, 231, 232, 235, 65, 237, 241, 243];
	enumType.size = 241;
	break;

case 955:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Dock, Beach, River, Lake];
	enumType.size = 4;
	break;

case 956:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 303, 305, 307, 309, 1585, 11323, 311, 10129, 14109, 14101, 301, 20891, 20892, 3157, 3159, 13431, 20322, 20328, 20334, 20340, 20346];
	enumType.size = 21;
	break;

case 957:
	enumType.valueMap = {20322=17, 20328=18, 301=11, 20334=19, 303=1, 305=2, 1585=5, 10129=8, 307=3, 20340=20, 309=4, 14101=10, 3157=14, 311=7, 3159=15, 13431=16, 20346=21, 11323=6, 20891=12, 20892=13, 14109=9};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 21;
	break;

case 958:
	enumType.valueMap = {1=313, 2=314, 3=10087, 4=11334, 14=15263};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 5;
	break;

case 959:
	enumType.valueMap = {313=1, 314=2, 11334=4, 10087=3, 15263=14};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 5;
	break;

case 960:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 12860, 12861, 775, 35348, 35349, 35350];
	enumType.size = 6;
	break;

case 961:
	enumType.valueMap = {12860=1, 35348=4, 12861=2, 35349=5, 35350=6, 775=3};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 6;
	break;

case 962:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [60555267, 60555269, 60555271, 60555273, 60555275, 60555278, 60555280, 60555282, 60555285, 60555287, 60555290, 60555293, 60555295, 60555297, 60555299];
	enumType.size = 15;
	break;

case 963:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [956, 956, 956, 956, 956, 958, 958, 958, 960, 960, 2119, 5874, 5876, 5878, 5880];
	enumType.size = 15;
	break;

case 964:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [60555268, 60555270, 60555272, 60555274, 60555276, 60555279, 60555281, 60555283, 60555286, 60555288, 60555291, 60555294, 60555296, 60555298, 60555300];
	enumType.size = 15;
	break;

case 965:
	enumType.valueMap = {389=4, 775=3, 7944=4, 5001=4, 395=4, 21520=4, 10129=1, 35348=3, 14101=1, 35349=3, 35350=3, 10138=4, 20891=1, 20892=1, 14109=1, 15263=2, 15264=4, 15270=4, 34727=4, 301=1, 303=1, 305=1, 1585=1, 307=1, 3379=4, 309=1, 311=1, 313=2, 314=2, 11323=1, 12860=3, 12861=3, 317=4, 11328=4, 321=4, 11330=4, 11332=4, 11334=2, 3142=4, 327=4, 331=4, 3150=4, 335=4, 3157=1, 341=4, 3159=1, 345=4, 349=4, 353=4, 20322=1, 2148=4, 10087=2, 359=4, 20328=1, 363=4, 19947=4, 24427=5, 24428=6, 24429=7, 20334=1, 24430=8, 371=4, 20340=1, 13431=1, 377=4, 20346=1, 13435=4, 383=4};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 68;
	break;

case 966:
	enumType.valueMap = {389=389, 775=775, 7944=7944, 5001=5001, 395=395, 21520=21520, 10129=10129, 35348=35348, 14101=14101, 35349=35349, 35350=35350, 10138=10138, 20891=20891, 20892=20892, 14109=14109, 15263=15263, 15264=15264, 15270=15270, 34727=34727, 301=301, 303=303, 305=305, 1585=1585, 307=307, 3379=3379, 309=309, 311=311, 313=313, 314=314, 11323=11323, 12860=12860, 12861=12861, 317=317, 11328=11328, 321=321, 11330=11330, 11332=11332, 11334=11334, 3142=3142, 327=327, 331=331, 3150=3150, 335=335, 3157=3157, 341=341, 3159=3159, 345=345, 349=349, 353=353, 20322=20322, 2148=2148, 10087=10087, 359=359, 20328=20328, 363=363, 19947=19947, 24427=24427, 24428=24428, 24429=24429, 20334=20334, 24430=24430, 371=371, 20340=20340, 13431=13431, 377=377, 20346=20346, 13435=13435, 383=383};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 68;
	break;

case 967:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 5, 6, 7, 8];
	enumType.size = 15;
	break;

case 968:
	enumType.valueMap = {389=2120, 775=961, 7944=2120, 5001=2120, 395=2120, 21520=2120, 10129=957, 35348=961, 14101=957, 35349=961, 35350=961, 10138=2120, 20891=957, 20892=957, 14109=957, 15264=2120, 15270=2120, 34727=2120, 301=957, 303=957, 305=957, 1585=957, 307=957, 3379=2120, 309=957, 311=957, 313=959, 314=959, 11323=957, 12860=961, 12861=961, 317=2120, 11328=2120, 321=2120, 11330=2120, 11332=2120, 3142=2120, 327=2120, 331=2120, 3150=2120, 335=2120, 3157=957, 341=2120, 3159=957, 345=2120, 349=2120, 353=2120, 20322=957, 2148=2120, 10087=959, 359=2120, 20328=957, 363=2120, 19947=2120, 24427=5875, 24428=5877, 24429=5879, 20334=957, 24430=5881, 371=2120, 20340=957, 13431=957, 377=2120, 20346=957, 13435=2120, 383=2120};
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 66;
	break;

case 969:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 957, 959, 961, 2120, 5875, 5877, 5879, 5881];
	enumType.size = 8;
	break;

case 973:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 15662;
	enumType.keyType = INT;
	enumType.valueArray = [15662, 15697, 15709, 15669];
	enumType.size = 4;
	break;

case 974:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11194, 11195, 11195, 11195, 11196, 11196, 11196, 11197, 11197, 11197, 11198, 11198, 11198, 11199, 11199, 11199, 11200, 11201, 11203, 11204, 11205, 11206, 11207, 11208, 11209, 11210, 11211, 11212, 11213, 11214, 11215, 11216, 11217, 11218, 11219, 11220, 11221, 11221, 11222, 11222, 11223, 11224, 11224, 11225, 11225, 11225, 11226, 11227, 11228, 11229, 11230, 11231, 11232, 11233, 11234, 11235, 11236, 11237, 11238, 11239, 11240, 11241, 11242, 11243, 11244, 11245, 11246, 11247, 11248, 11249, 11250, 11252, 11253, 11254, 11255, 11256, 11257, 11258, 11258, 11259, 11259, 11260, 11260, 11261, 11261, 11262, 11262, 11251, 11263, 11263, 11264];
	enumType.size = 91;
	break;

case 977:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [very close to the shore, quite close to the shore, a medium distance from the shore, quite far from the shore, as far as possible from the shore];
	enumType.size = 5;
	break;

case 978:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26043, null, null, null, 26045, null, null, 26047, null, 26049, 26051];
	enumType.size = 5;
	break;

case 979:
	enumType.valueMap = {3=26053};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 980:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 26071, null, null, 26063, null, null, 26065, null, 26067, 26069];
	enumType.size = 5;
	break;

case 981:
	enumType.valueMap = {3=26073};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 988:
	enumType.valueMap = {131=1, 134=1, 7=1, 9=1, 10=1, 11=1, 139=1, 140=1, 12=1, 14=1, 142=1, 145=1, 147=1, 22=1, 151=1, 153=1, 154=1, 26=1, 155=1, 28=1, 29=1, 157=1, 30=1, 158=1, 33=1, 34=1, 37=1, 39=1, 40=1, 168=1, 43=1, 46=1, 47=1, 48=1, 51=1, 52=1, 54=1, 56=1, 59=1, 64=1, 65=1, 69=1, 76=1, 84=1, 85=1, 88=1, 91=1, 92=1, 94=1, 95=1, 97=1, 98=1, 106=1, 108=1, 112=1, 113=1, 114=1, 117=1, 118=1, 120=1, 126=1, 127=1};
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.size = 62;
	break;

case 995:
	enumType.valueType = STRING;
	enumType.defaultstr = " ";
	enumType.keyType = INT;
	enumType.valueArray = [null, C, C#, D, D#, E, F, F#, G, G#, A, A#, B, null, null, null, null, null, null, null, Rune-note chart, Water Surge runes];
	enumType.size = 14;
	break;

case 998:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26124, 26126, 26128, 26130, 26132, 26134, 26136, 26138, 26140];
	enumType.size = 9;
	break;

case 999:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26158, null, null, null, 26160, null, null, 26162, null, 26164, 26166];
	enumType.size = 5;
	break;

case 1000:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26170, null, null, null, 26172, null, null, 26174, null, 26176, 26178];
	enumType.size = 5;
	break;

case 1001:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26182, null, null, null, 26184, null, null, 26186, null, 26188, 26190];
	enumType.size = 5;
	break;

case 1010:
	enumType.valueType = STRUCT;
	enumType.defaultint = 16591;
	enumType.keyType = INT;
	enumType.valueArray = [16591, 16592, 16593, 16594, 16595, 16596, 16597, 16598, 16599, 16600, 16601, 16602, 16603, 26370, 26371];
	enumType.size = 15;
	break;

case 1011:
	enumType.valueType = STRUCT;
	enumType.defaultint = 16604;
	enumType.keyType = INT;
	enumType.valueArray = [16604, 16605, 16606, 16607, 16608, 16609, 16610, 16611, 16612, 16613, 16614, 16615, 16616, 16617, 16618, 16619, 16620, 16621, 16622, 16623, 26374, 26372, 26373];
	enumType.size = 23;
	break;

case 1012:
	enumType.valueType = STRUCT;
	enumType.defaultint = 16624;
	enumType.keyType = INT;
	enumType.valueArray = [16624, 16625, 16626, 16627, 16628, 16629, 16630, 26375, 26376];
	enumType.size = 9;
	break;

case 1013:
	enumType.valueType = STRUCT;
	enumType.defaultint = 16631;
	enumType.keyType = INT;
	enumType.valueArray = [16631, 16632, 16633, 16634, 16635, 16636, 16637, 16638, 16639, 16640, 16641, 16642, 16643, 26377, 26378];
	enumType.size = 15;
	break;

case 1014:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [, H.M.S. , V.C. , P.T.K. , D.L.V. , Longship , G.R.V. , U.S.S. , S.S. , The ];
	enumType.size = 10;
	break;

case 1015:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [, Adamant , All-powerful , Alright Ship , Angry , Armadyl's , Ascended , Bacon , Bad Ship , Bandos's , Bane of , Beached , Beautiful , Black , Blasted , Bloody , Blue , Brassica , Brave , Broken , Bronze , Brown , Burning , Cantankerous , Challenge of , Cheeky , Classy , Clever , Cloud , Cold , Creaking , Creaky , Crimson , Crippled , Crusade of , Cursed , Dainty , Dark , Dawn , Daylight , Deadly , Death , Death of , Defence of , Demise of , Despair , Destroyer of , Disgraceful , Dream , Drunken , Earnest , Easterly , Element of , Elf , Enigmatic , Evening , Excessive , Extreme , Fabulous , Faerie , Fail , Fateful , Fear of , Fearful , Fervent , Fierce , Filthy , Final , Fine , First , Flying , Fog , Foul , Frivolous , Funky , Gallant , Gangrenous , Ghost , Ghostly , Giant , Goblin , Golden , Good Ship , Gorgeous , Greed of , Green , Grey , Grim , Grumpy , Hammer of , Happy , Harbinger of , Holy , Honest , Hope , Hot , Human , Illustrious , Implacable , Indomitable , Insightful , Iron , Jaunty , Jolly , Kharshai's , King , Lady , Laughing , Leaky , Light , Light of , Little , Lonely , Loose?, Lord , Love , Lunar , Lusty , Mad , Mary , Massive , Merry , Might of , Mighty , Mist , Misty , Mithril , Monkey , Moon , Morbid , Naughty , Nervous , Night , Nightmare , Noisome , Northerly , Obvious , Ocean , Omnipotent , Omniscient , Papa?, Piebald , Pink , Plundering , Prancing , Prime , Prince , Princess , Problem , Professional , Proud , Pug , Pure , Purple , Queen , Rabid , Raging , Rain , Rainbow , Rampaging , Red , Reeking , Revenge of , Ribald , Rising , Rune , Rusty , Sad , Salty , Saradomin's , Saucy , Savage , Scornful , Scourge of , Screaming , Scurvy , Sea , Seasick , Second , Serene , Shadow , Shadow of , Shameful , Skilled , Sliske's , Smashing , Smiling , Solar , Southerly , Special , Spirit of , Steel , Stone of , Storm , Storm of , Sturdy , Sun , Swift , Terrible , Terrifying , Third , Threadbare , Thunder , Tide , Toothless , Tree of , Troll , Trusty , Twilight , Ultimate , Unbearable , Unholy , Unimaginable , Unsinkable , Unwanted , Vampyre , Vibrant , Vile , Vision of , Void , Wandering , Wave , Weeping , Westerly , Wheel of , Whimsical , White , Wily , Wind , Winged , Wisdom of , Wooden , Word of , Yellow , Zamorak's , Zaros's ];
	enumType.size = 236;
	break;

case 1016:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 8, 1, 1, 2, 6, 1, 8, 1, 6, 6, 1, 1, 4, 1, 1, 4, 5, 2, 1, 8, 4, 1, 2, 6, 2, 2, 2, 8, 1, 1, 1, 4, 1, 6, 1, 2, 1, 8, 8, 1, 8, 6, 6, 6, 8, 6, 1, 8, 1, 1, 1, 6, 7, 2, 8, 1, 1, 1, 7, 1, 1, 6, 2, 1, 1, 1, 1, 1, 1, 3, 8, 1, 1, 2, 1, 1, 8, 1, 1, 7, 4, 1, 1, 6, 4, 4, 2, 2, 6, 2, 6, 1, 2, 8, 1, 7, 1, 1, 1, 2, 8, 2, 2, 6, 5, 5, 3, 1, 8, 6, 1, 2, 1, 5, 8, 1, 1, 1, 5, 1, 2, 6, 1, 8, 1, 8, 7, 8, 2, 1, 2, 8, 8, 1, 1, 1, 8, 1, 1, 5, 1, 4, 1, 3, 1, 5, 5, 1, 1, 2, 8, 1, 4, 5, 1, 3, 8, 8, 3, 4, 3, 6, 1, 1, 8, 1, 2, 1, 6, 2, 2, 1, 6, 3, 1, 8, 1, 1, 2, 1, 6, 1, 1, 6, 3, 3, 1, 1, 1, 6, 8, 6, 8, 6, 1, 8, 1, 1, 3, 1, 1, 8, 8, 1, 6, 7, 1, 8, 1, 1, 1, 1, 1, 1, 7, 1, 1, 6, 1, 3, 8, 3, 1, 6, 2, 4, 2, 8, 1, 6, 1, 6, 4, 6, 6];
	enumType.size = 236;
	break;

case 1017:
	enumType.valueType = STRING;
	enumType.defaultstr = "Filter by...";
	enumType.keyType = INT;
	enumType.valueArray = [General, Properties/Attributes, Personality/Mood, Actions, Colours, Names/People/Professions, Attributions/Dedications, Sentient Races, Nouns, various];
	enumType.size = 9;
	break;

case 1018:
	enumType.valueType = STRING;
	enumType.defaultstr = "Ship";
	enumType.keyType = INT;
	enumType.valueArray = [Ship, Acrobat, Aegis, Aeon, Age, Alchemist, Almighty, Amascut, Anchor, Anchovy, Angel, Apmeken, Ardougne, Armadyl, Ascension, Axe, Bacon, Bandos, Bane, Barnacle, Bass, Beard, Beast, Behemoth, Blood, Blow, Bounty, Brimhaven, Buccaneer, Builder, Buoys, Cabbage, Calm, Camel, Cannon, Cat, Catcher, Challenge, Challenger, Chameleon, Chaos, Chaser, Child, Chinchompa, Clam, Claws, Clipper, Cloud, Coral, Corsair, Craft, Crafter, Crondis, Crow, Crusader, Crusher, Dagger, Dasher, Death, Defiant, Demand, Demon, Devil, Diamond, Disgrace, Diver, Diviner, Dog, Doom, Dragon, Drakewing, Dreadnaught, Duck, Dungeoneer, Dwarf, Earl, Elf, Elidinis, Ellie, Emerald, Engine, Enterprise, Epoch, Excess, Explorer, Face, Faerie, Falador, Farmer, Firemaker, Flatpack, Fletcher, Flyer, Fury, Gammon, Gent, Ghorrock, Gibbon, Gielinor, Girl, Glimmer, Glow, Gnome, Godless, Gods, Grace, Guthix, Hammer, Harmony, Heart, Het, Hind, Hulk, Human, Hunter, Hunter, Icthlarin, Illustrious, Implacable, Indomitable, Innuendo, Intrepid, Inventor, Jack, Jackdaw, Jas, Joker, Jumper, Kharshai, Kharyrll, Killer, King, Kitten, Knave, Knife, Knight, Lament, Lass, Law, Leech, Lion, Lletya, Lobster, Lollipop, Loner, Lumbridge, Machine, Madam, Mage, Mambo, Manta, Mare, Marimbo, Marrow, Mary, Mind, Miner, Mirage, Mole?, Monkey, Monster, Moon, Musa, Narwhal, Nigel, Ocean, Octopus, Officer, Old Soul, Oyster, Pearl, Penguin, Phoenix, Pig, Pride, Priest, Prime, Prince, Princess, Promise, Queen, Rage, Raider, Rain, Raktuber, Ramen, Ranger, Raven, Reaver, Revenge, Revenge, Roger, Rose, Ruby, Runecrafter, RuneScape, Salmon, Sapphire, Saradomin, Sarim, Scabaras, Schooner, Sea Dog, Sea, Seaborn, Seren, Serenity, Serpent, Servant, Shark, Shine, Siren, Slayer, Sliske, Smith, Smuggler, Sparkle, Squid, Staff, Stallion, Star, Storm, Strumpet, Submarine, Summoner, Sun, Susan, Sword, Swordfish, Tentacle, Terror, Thief, Tide, Time, Treader, Troll, Tumeken, Tuna, Tuska, Unimaginable, Unsinkable, Vampyre, Varrock, Wanderer, Warrior, Wave, Wench, Whip, Wind, Woodcutter, Wreck, Zamorak, Zaros];
	enumType.size = 253;
	break;

case 1019:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 2, 9, 9, 9, 2, 4, 1, 3, 6, 8, 1, 7, 1, 9, 3, 3, 1, 4, 6, 6, 9, 6, 6, 9, 9, 4, 7, 2, 2, 3, 9, 5, 6, 9, 6, 5, 9, 4, 6, 9, 5, 2, 6, 6, 3, 9, 9, 9, 2, 3, 2, 1, 6, 2, 3, 3, 5, 9, 4, 5, 8, 8, 3, 5, 2, 2, 6, 5, 6, 6, 4, 6, 2, 8, 2, 8, 1, 1, 3, 3, 4, 9, 5, 2, 3, 8, 7, 2, 2, 3, 2, 5, 5, 9, 2, 7, 6, 7, 2, 9, 9, 8, 2, 8, 5, 1, 3, 4, 3, 2, 6, 3, 8, 2, 2, 1, 4, 4, 4, 9, 4, 2, 1, 6, 1, 2, 9, 1, 7, 2, 2, 6, 2, 3, 2, 5, 2, 9, 6, 6, 7, 6, 9, 5, 7, 3, 2, 2, 1, 6, 6, 1, 3, 1, 9, 2, 9, 6, 6, 9, 9, 7, 6, 1, 9, 6, 2, 2, 6, 3, 6, 6, 6, 5, 2, 9, 2, 2, 5, 2, 5, 2, 9, 9, 3, 2, 6, 2, 5, 4, 1, 1, 3, 2, 7, 6, 3, 1, 7, 2, 9, 6, 9, 8, 1, 4, 6, 2, 6, 9, 8, 2, 1, 2, 2, 9, 6, 3, 6, 3, 9, 2, 3, 2, 9, 1, 3, 6, 6, 5, 2, 9, 9, 5, 8, 1, 6, 1, 4, 4, 8, 7, 5, 2, 9, 2, 3, 9, 2, 3, 1, 1];
	enumType.size = 253;
	break;

case 1020:
	enumType.valueType = STRING;
	enumType.defaultstr = "Filter by...";
	enumType.keyType = INT;
	enumType.valueArray = [General, Names, People/Professions, Items/Objects, Classics, Properties/Attributes, Animals, Places, Sentient Races, Nouns, various];
	enumType.size = 10;
	break;

case 1022:
	enumType.valueMap = {0=17069, 1=16866, 2=16867, 3=16868, 4=16869, 5=16870, 6=16871, 7=16872, 8=16873, 9=16874, 10=16875, 11=16876, 12=16877, 13=16878, 14=16879, 15=16880, 16=16881, 17=16882, 18=16883, 19=16884, 20=16885, 21=16886, 22=16887, 23=16888, 24=16889, 25=16890, 26=16891, 27=16892, 28=16893, 29=16894, 30=16895, 31=16896, 32=16897, 33=16898, 34=16899, 35=16900, 36=16776, 37=16777, 38=16778, 39=16779, 40=16780, 41=16781, 42=16782, 43=16783, 44=16784, 45=16901, 46=16936, 47=16937, 48=16938, 49=16939, 50=16940, 51=16941, 52=16942, 53=16943, 54=16944, 55=16945, 56=16946, 57=16947, 58=16948, 59=16949, 60=16950, 61=16951, 62=16952, 63=16953, 64=16954, 65=16955, 66=16956, 67=16957, 68=16958, 69=16959, 70=16960, 71=16961, 72=16962, 73=16963, 74=16964, 75=16965, 76=16966, 77=16967, 78=16968, 79=16969, 80=16970, 81=16971, 82=17008, 83=17009, 84=17010, 85=17011, 86=17012, 87=17013, 88=17014, 89=17015, 90=17016, 91=17017, 92=17018, 93=17019, 94=17020, 95=17021, 96=17022, 97=16972, 98=16973, 99=16789, 100=16790, 101=16791, 102=16792, 103=16793, 104=16794, 105=16795, 106=16796, 107=16797, 108=16798, 109=16799, 110=16800, 111=16801, 112=16802, 113=16803, 114=16804, 115=16805, 116=16806, 117=16807, 118=16808, 119=16809, 120=16810, 121=16811, 122=16812, 123=16813, 124=16814, 125=16815, 126=16816, 127=16817, 128=16818, 129=16819, 130=16820, 131=16821, 132=16822, 133=16823, 134=16824, 135=16825, 136=16826, 137=16827, 138=16828, 139=16829, 140=17092, 141=17093, 142=17094, 143=17095, 144=17096, 145=17097, 146=17098, 147=17099, 148=17100, 149=17101, 150=17102, 151=17103, 152=17104, 153=17105, 154=17106, 155=16830, 156=16831, 157=17073, 158=17074, 159=17075, 160=17076, 161=17077, 162=17078, 163=17079, 164=17080, 165=17081, 166=17082, 167=17083, 168=17084, 169=17085, 170=17086, 171=17087, 172=17088, 173=17089, 174=17090, 175=16689, 176=16690, 177=16691, 178=16692, 179=16693, 180=16694, 181=16695, 182=16696, 183=16697, 184=16698, 185=16699, 186=16700, 187=16701, 188=16702, 189=16703, 190=16704, 191=16705, 192=16706, 193=16707, 194=16708, 195=16709, 196=16710, 197=16711, 198=16712, 199=16713, 200=16714, 201=16715, 202=16716, 203=16717, 204=16718, 205=16719, 206=16720, 207=16721, 208=16722, 209=16723, 210=16724, 211=16725, 212=16726, 213=16727, 214=16728, 215=16729, 216=16993, 217=16994, 218=16995, 219=16996, 220=16997, 221=16998, 222=16999, 223=17000, 224=17001, 225=17002, 226=17003, 227=17004, 228=17005, 229=17006, 230=17007, 231=16730, 232=16731, 233=16732, 234=16733, 235=16974, 236=16975, 237=16976, 238=16977, 239=16978, 240=16979, 241=16980, 242=16981, 243=16982, 244=16983, 245=16984, 246=16985, 247=16986, 248=16987, 249=16988, 250=16989, 251=16990, 252=16991, 253=17024, 254=17025, 255=17026, 256=17027, 257=17028, 258=17029, 259=17030, 260=17031, 261=17032, 262=17033, 263=17034, 264=17035, 265=17036, 266=17037, 267=17038, 268=17039, 269=17040, 270=17041, 271=17042, 272=17043, 273=17044, 274=17045, 275=17046, 276=17047, 277=17048, 278=17049, 279=17050, 280=17051, 281=17052, 282=17053, 283=17054, 284=17055, 285=17056, 286=17057, 287=17058, 288=17059, 289=17060, 290=17061, 291=17062, 292=17063, 293=17064, 294=16921, 295=16922, 296=16923, 297=16924, 298=16925, 299=16926, 300=16927, 301=16928, 302=16929, 303=16930, 304=16931, 305=16932, 306=16933, 307=16934, 308=16935, 309=17065, 310=17066, 311=17067, 312=17068, 313=16902, 314=16903, 315=16904, 316=16905, 317=16906, 318=16907, 319=16908, 320=16909, 321=16910, 322=16911, 323=16912, 324=16913, 325=16914, 326=16915, 327=16916, 328=16917, 329=16918, 330=16919, 331=16644, 332=16645, 333=16646, 334=16647, 335=16648, 336=16649, 337=16650, 338=16651, 339=16652, 340=16653, 341=16654, 342=16655, 343=16656, 344=16657, 345=16658, 346=16659, 347=16660, 348=16661, 349=16662, 350=16663, 351=16664, 352=16665, 353=16666, 354=16667, 355=16668, 356=16669, 357=16670, 358=16671, 359=16672, 360=16673, 361=16674, 362=16675, 363=16676, 364=16677, 365=16678, 366=16679, 367=16680, 368=16681, 369=16682, 370=16683, 371=16684, 372=16851, 373=16852, 374=16853, 375=16854, 376=16855, 377=16856, 378=16857, 379=16858, 380=16859, 381=16860, 382=16861, 383=16862, 384=16863, 385=16864, 386=16865, 387=16685, 388=16686, 389=16687, 390=16688, 391=16832, 392=16833, 393=16834, 394=16835, 395=16836, 396=16837, 397=16838, 398=16839, 399=16840, 400=16841, 401=16842, 402=16843, 403=16844, 404=16845, 405=16846, 406=16847, 407=16848, 408=16849, 409=16785, 410=17023, 411=17091, 412=16992, 413=16920, 414=16850, 415=16786, 416=16787, 417=16788, 418=25864, 419=25865, 420=25866, 421=25867, 422=25868, 423=25869, 424=25870, 425=25871, 426=25872, 427=25873, 428=25874, 429=25875, 430=25876, 431=25877, 432=25878, 433=25879, 434=25880, 435=25881, 436=25882, 437=25883, 438=25884, 439=25885, 440=25886, 441=25887, 442=25888, 443=25889, 444=25890, 445=25891, 446=25892, 447=25893, 448=25894, 449=25895, 450=25896, 451=25897, 452=25898, 453=25899, 454=25900, 455=25901, 456=25902, 457=25903, 458=25950, 459=25951, 460=25952, 461=25953, 462=25954, 463=25955, 464=25956, 465=25957, 466=25958, 467=25959, 468=25960, 469=25961, 470=25962, 471=25963, 472=25964, 473=25965, 474=25966, 475=25967, 476=25968, 477=25969, 478=25970, 479=25971, 480=25972, 481=25973, 482=25919, 483=25920, 484=25921, 485=25922, 486=25923, 487=25924, 488=25925, 489=25926, 490=25927, 491=25928, 492=25929, 493=25930, 494=25931, 495=25932, 496=25933, 497=25934, 498=25935, 499=25936, 500=25937, 501=25938, 502=25939, 503=25940, 504=25941, 505=25942, 506=25943, 507=25944, 508=25945, 509=25946, 510=25947, 511=25948, 512=25816, 513=25817, 514=25818, 515=25819, 516=25820, 517=25821, 518=25822, 519=25823, 520=25824, 521=25825, 522=25826, 523=25827, 524=25828, 525=25829, 526=25830, 527=25831, 528=25832, 529=25833, 530=25834, 531=25835, 532=25836, 533=25837, 534=25838, 535=25839, 536=25840, 537=25841, 538=25842, 539=25843, 540=25844, 541=25845, 542=25846, 543=25847, 544=25848, 545=25849, 546=25850, 547=25851, 548=25852, 549=25853, 550=25854, 551=25855, 552=26104, 553=26105, 554=26106, 555=26107, 556=26108, 557=26109, 558=26110, 559=26111, 560=26112, 561=26113, 562=26114, 563=26115, 564=26116, 565=26117, 566=26118, 567=26119, 568=26120, 569=26121, 570=26122, 571=26123, 572=26124, 573=26125, 574=26126, 575=26127, 576=26073, 577=26074, 578=26075, 579=26076, 580=26077, 581=26078, 582=26079, 583=26080, 584=26081, 585=26082, 586=26083, 587=26084, 588=26085, 589=26086, 590=26087, 591=26088, 592=26089, 593=26090, 594=26091, 595=26092, 596=26093, 597=26094, 598=26095, 599=26096, 600=26097, 601=26098, 602=26099, 603=26100, 604=26101, 605=26102, 606=25949, 607=26103, 608=25911, 609=25912, 610=25913, 611=25914, 612=25915, 613=25916, 614=26062, 615=26063, 616=26064, 617=26065, 618=26066, 619=26067, 620=26068, 621=26069, 622=26070, 623=25986, 624=25987, 625=25988, 626=25989, 627=25990, 628=25991, 629=25992, 630=25993, 631=25994, 632=25974, 633=25975, 634=25976, 635=25977, 636=25978, 637=25979, 638=25980, 639=25981, 640=25982, 641=25983, 642=25984, 643=25985, 644=26053, 645=26054, 646=26055, 647=26056, 648=26057, 649=26058, 650=26059, 651=26060, 652=26061, 653=26041, 654=26042, 655=26043, 656=26044, 657=26045, 658=26046, 659=26047, 660=26048, 661=26049, 662=26050, 663=26051, 664=26052, 665=25807, 666=25808, 667=25809, 668=25810, 669=25811, 670=25812, 671=25813, 672=25814, 673=25815, 674=25795, 675=25796, 676=25797, 677=25798, 678=25799, 679=25800, 680=25801, 681=25802, 682=25803, 683=25804, 684=25805, 685=25806, 686=26032, 687=26033, 688=26034, 689=26035, 690=26036, 691=26037, 692=26038, 693=26039, 694=26040, 695=26020, 696=26021, 697=26022, 698=26023, 699=26024, 700=26025, 701=26026, 702=26027, 703=26028, 704=26029, 705=26030, 706=26031, 707=26071, 708=26072, 709=25995, 710=25996, 711=25917, 712=25918, 713=25997, 714=25998, 715=25904, 716=25905, 717=25856, 718=25857, 719=25906, 720=25907, 721=25908, 722=25909, 723=25910, 724=25858, 725=25859, 726=25860, 727=25861, 728=25862, 729=25863, 730=30210, 731=30219, 732=30240, 733=30261, 734=30282, 735=30303, 736=30324, 737=30345, 738=30211, 739=30220, 740=30241, 741=30262, 742=30283, 743=30304, 744=30325, 745=30346, 746=30212, 747=30221, 748=30242, 749=30263, 750=30284, 751=30305, 752=30326, 753=30347, 754=30213, 755=30222, 756=30243, 757=30264, 758=30285, 759=30306, 760=30327, 761=30348, 762=30214, 763=30223, 764=30244, 765=30265, 766=30286, 767=30307, 768=30328, 769=30349, 770=30215, 771=30224, 772=30245, 773=30266, 774=30287, 775=30308, 776=30329, 777=30350, 778=30231, 779=30252, 780=30273, 781=30294, 782=30315, 783=30336, 784=30232, 785=30253, 786=30274, 787=30295, 788=30316, 789=30337, 790=30233, 791=30254, 792=30275, 793=30296, 794=30317, 795=30338, 796=30234, 797=30255, 798=30276, 799=30297, 800=30318, 801=30339, 802=30235, 803=30256, 804=30277, 805=30298, 806=30319, 807=30340, 808=30236, 809=30257, 810=30278, 811=30299, 812=30320, 813=30341, 814=30225, 815=30246, 816=30267, 817=30288, 818=30309, 819=30330, 820=30226, 821=30247, 822=30268, 823=30289, 824=30310, 825=30331, 826=30227, 827=30248, 828=30269, 829=30290, 830=30311, 831=30332, 832=30228, 833=30249, 834=30270, 835=30291, 836=30312, 837=30333, 838=30229, 839=30250, 840=30271, 841=30292, 842=30313, 843=30334, 844=30230, 845=30251, 846=30272, 847=30293, 848=30314, 849=30335, 850=30216, 851=30237, 852=30258, 853=30279, 854=30300, 855=30321, 856=30342, 857=30217, 858=30238, 859=30259, 860=30280, 861=30301, 862=30322, 863=30343, 864=30218, 865=30239, 866=30260, 867=30281, 868=30302, 869=30323, 870=30344, 873=30169, 874=30170, 875=30171, 876=30172, 877=30173, 878=30174, 879=30175, 880=30176, 881=30177, 882=30178, 883=30179, 884=30180, 885=30181, 886=30182, 887=30183, 888=30184, 889=30185, 890=30186, 891=30187, 892=30188, 893=30189, 894=30190, 895=30191, 896=30192, 897=30193, 898=30194, 899=30195, 900=30196, 901=30197, 902=30198, 903=30199, 904=30200, 905=30201, 906=30202, 907=30203, 908=30204, 909=30205, 910=30206, 911=30207, 912=30208, 913=30209, 32680=30371, 32681=30370, 32682=30369, 32683=30368, 32684=30365, 32685=30362, 32686=30359, 32687=30356, 32688=30353, 32689=30367, 32690=30364, 32691=30361, 32692=30358, 32693=30355, 32694=30352, 32695=30366, 32696=30363, 32697=30360, 32698=30357, 32699=30354, 32700=30351, 32701=26019, 32702=26018, 32703=26017, 32704=26016, 32705=26013, 32706=26010, 32707=26007, 32708=26004, 32709=26001, 32710=26015, 32711=26012, 32712=26009, 32713=26006, 32714=26003, 32715=26000, 32716=26014, 32717=26011, 32718=26008, 32719=26005, 32720=26002, 32721=25999, 32722=17072, 32723=17070, 32724=17071, 32725=16775, 32726=16774, 32727=16773, 32728=16772, 32729=16771, 32730=16770, 32731=16769, 32732=16763, 32733=16757, 32734=16751, 32735=16745, 32736=16739, 32737=16768, 32738=16762, 32739=16756, 32740=16750, 32741=16744, 32742=16738, 32743=16765, 32744=16759, 32745=16753, 32746=16747, 32747=16741, 32748=16735, 32749=16764, 32750=16758, 32751=16752, 32752=16746, 32753=16740, 32754=16734, 32755=16767, 32756=16761, 32757=16755, 32758=16749, 32759=16743, 32760=16737, 32761=16766, 32762=16760, 32763=16754, 32764=16748, 32765=16742, 32766=16736};
	enumType.valueType = STRUCT;
	enumType.defaultint = 17069;
	enumType.keyType = INT;
	enumType.size = 999;
	break;

case 1023:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1, 3, 11, 9, 7, 13, 15, 12, 45, 24, 18, 14, 30, 2, 21];
	enumType.size = 15;
	break;

case 1024:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 15673, 15674, 15677, 15675, 15678, 15679, 15676, 21916, 21917, 15685, 15680, 15681, 15682, 15683, 15684, 21915, 21914, 15685, 15687, 15688, 15685, 15689, 15695, 15689, 15691, 15690, 21918, 15696, 15694, 15697, 21920, 22053, 21919, 21913, 21912];
	enumType.size = 35;
	break;

case 1025:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [null, Chimes, Bamboo, Gunpowder, Slate, Cherrywood, Jade, Steel, Terracotta, Azure, Random resource, Ancient bones, Plate, Spices, Lacquer, Chi globes, Eastern pearls, Koi scales, Random trade goods, Experience tome, Eastern scroll, Bonus item, New crewman, Special reward, null, Story progress, Island discovery, Clue progress, Ration packs, Powder kegs, Bottled seasinger's cry, Worldbearer ring, Trait removal, Gift of Gu, Gemstone kaseki, Tengu tsuba];
	enumType.size = 34;
	break;

case 1026:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1027, 1028, 1029, 1030, 1031, 1032, 8306, 8307, 8308, 9626, 9627, 9628];
	enumType.size = 12;
	break;

case 1027:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1033, 1039, 1042, 1048, 1051, 1061, 1133, 9632, 9638, 9644, 9652];
	enumType.size = 11;
	break;

case 1028:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1034, 1039, 1043, 1048, 1052, 1061, 1169, 8313, 8319, 8325];
	enumType.size = 10;
	break;

case 1029:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1035, 1041, 1044, 1050, 1053, 1132, 1170, 9633, 9639, 9645];
	enumType.size = 10;
	break;

case 1030:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1036, 1040, 1045, 1049, 1058, 1086, 1171, 8312, 8318, 8324];
	enumType.size = 10;
	break;

case 1031:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1037, 1040, 1046, 1049, 1059, 1086, 1468, 9634, 9640, 9646];
	enumType.size = 10;
	break;

case 1032:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1038, 1041, 1047, 1050, 1060, 1132, 1469, 8314, 8320, 8326];
	enumType.size = 10;
	break;

case 1033:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 37, 89, 147, 223, 301, 379, 468, 562];
	enumType.size = 8;
	break;

case 1034:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 36, 88, 146, 222, 300, 378, 467, 561];
	enumType.size = 8;
	break;

case 1035:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 40, 92, 150, 226, 304, 382, 471, 565];
	enumType.size = 8;
	break;

case 1036:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 38, 90, 148, 224, 302, 380, 469, 563];
	enumType.size = 8;
	break;

case 1037:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 39, 91, 149, 225, 303, 381, 470, 564];
	enumType.size = 8;
	break;

case 1038:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 41, 93, 151, 227, 305, 383, 472, 566];
	enumType.size = 8;
	break;

case 1039:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 42, 94, 152, 228, 306, 384, 476, 570];
	enumType.size = 8;
	break;

case 1040:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 43, 95, 153, 229, 307, 385, 477, 571];
	enumType.size = 8;
	break;

case 1041:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 44, 96, 154, 230, 308, 386, 478, 572];
	enumType.size = 8;
	break;

case 1042:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 167, 245, 323, 401, 498, 592];
	enumType.size = 6;
	break;

case 1043:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 166, 244, 322, 400, 497, 591];
	enumType.size = 6;
	break;

case 1044:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 170, 248, 326, 404, 501, 595];
	enumType.size = 6;
	break;

case 1045:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 168, 246, 324, 402, 499, 593];
	enumType.size = 6;
	break;

case 1046:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 169, 247, 325, 403, 500, 594];
	enumType.size = 6;
	break;

case 1047:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 171, 249, 327, 405, 502, 596];
	enumType.size = 6;
	break;

case 1048:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 172, 250, 328, 406, 506, 600];
	enumType.size = 6;
	break;

case 1049:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 173, 251, 329, 407, 507, 601];
	enumType.size = 6;
	break;

case 1050:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 174, 252, 330, 408, 508, 602];
	enumType.size = 6;
	break;

case 1051:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 158, 236, 314, 392, 483, 577];
	enumType.size = 6;
	break;

case 1052:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 157, 235, 313, 391, 482, 576];
	enumType.size = 6;
	break;

case 1053:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 161, 239, 317, 395, 486, 580];
	enumType.size = 6;
	break;

case 1058:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 159, 237, 315, 393, 484, 578];
	enumType.size = 6;
	break;

case 1059:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 160, 238, 316, 394, 485, 579];
	enumType.size = 6;
	break;

case 1060:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 162, 240, 318, 396, 487, 581];
	enumType.size = 6;
	break;

case 1061:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 163, 241, 319, 397, 491, 585];
	enumType.size = 6;
	break;

case 1071:
	enumType.valueType = SKILL;
	enumType.keyType = INT;
	enumType.valueArray = [23, 0, 2, 1, 4, 6, 16, 22, 7, 12, 19, 11, 10, 9, 15, 21, 14, 5, 20, 18, 13, 17, 8, 24, 25];
	enumType.size = 25;
	break;

case 1073:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6881297, 6881298, 6881299, 6881300, 6881301, 6881302, 6881303, 6881304, 6881305];
	enumType.size = 9;
	break;

case 1074:
	enumType.valueMap = {18=30044};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 1075:
	enumType.valueMap = {18=30046};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 1076:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6881370, 6881374, 6881369, 6881486, 6881502, 6881518, 6881535, 6881552];
	enumType.size = 8;
	break;

case 1077:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 6881499, 6881515, 6881531, 6881548, 6881565, 6881382];
	enumType.size = 6;
	break;

case 1078:
	enumType.valueType = TYPE_39;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [517, 518, 519, 520, 521, 522, 781, 782];
	enumType.size = 8;
	break;

case 1079:
	enumType.valueType = TYPE_39;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [523, 524, 525, 526, 527, 528, 783, 784];
	enumType.size = 8;
	break;

case 1080:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7143438, 7143436, 7143434, 7143431, 7143428, 7143425, 7143486, 7143491];
	enumType.size = 8;
	break;

case 1081:
	enumType.valueMap = {18=30050};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 1082:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 7143432, 7143429, 7143426, 7143487, 7143492];
	enumType.size = 5;
	break;

case 1083:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6946822, 6946837, 6946852, 6946870, 6946888, 6946906];
	enumType.size = 6;
	break;

case 1084:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6946824, 6946839, 6946854, 6946872, 6946890, 6946908];
	enumType.size = 6;
	break;

case 1085:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 6946867, 6946885, 6946903, 6946921];
	enumType.size = 4;
	break;

case 1086:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 164, 242, 320, 398, 492, 586];
	enumType.size = 6;
	break;

case 1087:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [11814, 11816, 11818, 11820, 11822, 11824, 11826, 11828, 11830, 11832, 11834, 11836, 11838, 11840, 11842, 11844, 14529, 14531, 11846, 11848, 11850, 11852, 11854, 11856, 21768, 11858, 11860, 11862, 19580, 11864, 11866, 11868, 11870, 24386, 11872, 11960, 11962, 11874, 11876, 19520, 19530, 19522, 19532, 19524, 19534, 19526, 19536, 19528, 19538, 11878, 11880, 11882, 11884, 19540, 19550, 19542, 19552, 19544, 19554, 19546, 19556, 19548, 19558, 11886, 11888, 11890, 11892, 19560, 19570, 19562, 19572, 19564, 19574, 19566, 19576, 19568, 19578, 11894, 11896, 11898, 11900, 11902, 11904, 11906, 11908, 11910, 11912, 11914, 11916, 11918, 11920, 11922, 11924, 19582, 19586, 19584, 11926, 11932, 11928, 11934, 11930, 11936, 19592, 19594, 19588, 19590, 19596, 19598, 11938, 11940, 11942, 11944, 11946, 11967, 14525, 14527, 30901, 30903, 30905];
	enumType.size = 119;
	break;

case 1088:
	enumType.valueMap = {21768=This item set is made up of Akrisae's hood, robe top, robe skirt and mace., 11814=This item set is made up of a bronze full helm, platebody, legs and kiteshield., 11816=This item set is made up of a bronze full helm, platebody, skirt and kiteshield., 11818=This item set is made up of an iron full helm, platebody, legs and kiteshield., 11820=This item set is made up of an iron full helm, platebody, skirt and kiteshield., 11822=This item set is made up of a steel full helm, platebody, legs and kiteshield., 11824=This item set is made up of a steel full helm, platebody, skirt and kiteshield., 11826=This item set is made up of a black full helm, platebody, legs and kiteshield., 11828=This item set is made up of a black full helm, platebody, skirt and kiteshield., 11830=This item set is made up of a mithril full helm, platebody, legs and kiteshield., 11832=This item set is made up of a mithril full helm, platebody, skirt and kiteshield., 11834=This item set is made up of an adamant full helm, platebody, legs and kiteshield., 11836=This item set is made up of an adamant full helm, platebody, skirt and kiteshield., 11838=This item set is made up of a rune full helm, platebody, legs and kiteshield., 11840=This item set is made up of a rune full helm, platebody, skirt and kiteshield., 19520=This item set is made up of a full helm, platebody, legs and kiteshield., 11842=This item set is made up of a dragon helm, chainbody, legs., 24386=This item set is made up of a body, chaps and vambraces., 19522=This item set is made up of a full helm, platebody, legs and kiteshield., 11844=This item set is made up of a dragon helm, chainbody, skirt., 19524=This item set is made up of a full helm, platebody, legs and kiteshield., 11846=This item set is made up of Ahrim's hood, robe top, robe skirt and staff., 19526=This item set is made up of a full helm, platebody, legs and kiteshield., 11848=This item set is made up of Dharok's helm, body, legs and greataxe., 19528=This item set is made up of a full helm, platebody, legs and kiteshield., 11850=This item set is made up of Guthan's helm, body, chainskirt and spear., 19530=This item set is made up of a full helm, platebody, skirt and kiteshield., 11852=This item set is made up of Karil's coif, leather top, leather skirt and crossbow., 19532=This item set is made up of a full helm, platebody, skirt and kiteshield., 11854=This item set is made up of Torag's helm, body, legs and hammers., 19534=This item set is made up of a full helm, platebody, skirt and kiteshield., 11856=This item set is made up of Verac's helm, brassard, plateskirt and flail., 19536=This item set is made up of a full helm, platebody, skirt and kiteshield., 11858=This item set is made up of a helm, body, legs and shield., 19538=This item set is made up of a full helm, platebody, skirt and kiteshield., 11860=This item set is made up of a coif, body, chaps and vambraces., 19540=This item set is made up of a full helm, platebody, legs and kiteshield., 11862=This item set is made up of a body, legs, amulet and hat., 19542=This item set is made up of a full helm, platebody, legs and kiteshield., 11864=This item set is made up of a body, chaps and vambraces., 19544=This item set is made up of a full helm, platebody, legs and kiteshield., 11866=This item set is made up of a body, chaps and vambraces., 19546=This item set is made up of a full helm, platebody, legs and kiteshield., 11868=This item set is made up of a body, chaps and vambraces., 19548=This item set is made up of a full helm, platebody, legs and kiteshield., 11870=This item set is made up of a body, chaps and vambraces., 19550=This item set is made up of a full helm, platebody, skirt and kiteshield., 11872=This item set is made up of a hat, top, bottoms, gloves and boots., 19552=This item set is made up of a full helm, platebody, skirt and kiteshield., 11874=This item set is made up of a hat, top, bottoms, gloves and boots., 19554=This item set is made up of a full helm, platebody, skirt and kiteshield., 11876=This item set is made up of a helm, body, boots, gauntlets and legs., 19556=This item set is made up of a full helm, platebody, skirt and kiteshield., 11878=This item set is made up of a full helm, platebody, legs and kiteshield., 19558=This item set is made up of a full helm, platebody, skirt and kiteshield., 11880=This item set is made up of a full helm, platebody, skirt and kiteshield., 19560=This item set is made up of a full helm, platebody, legs and kiteshield., 11882=This item set is made up of a full helm, platebody, legs and kiteshield., 19562=This item set is made up of a full helm, platebody, legs and kiteshield., 11884=This item set is made up of a full helm, platebody, skirt and kiteshield., 19564=This item set is made up of a full helm, platebody, legs and kiteshield., 11886=This item set is made up of a full helm, platebody, legs and kiteshield., 19566=This item set is made up of a full helm, platebody, legs and kiteshield., 11888=This item set is made up of a full helm, platebody, skirt and kiteshield., 19568=This item set is made up of a full helm, platebody, legs and kiteshield., 11890=This item set is made up of a full helm, platebody, legs and kiteshield., 19570=This item set is made up of a full helm, platebody, skirt and kiteshield., 11892=This item set is made up of a full helm, platebody, skirt and kiteshield., 19572=This item set is made up of a full helm, platebody, skirt and kiteshield., 19574=This item set is made up of a full helm, platebody, skirt and kiteshield., 11894=This item set is made up of a full helm, platebody, legs and kiteshield., 19576=This item set is made up of a full helm, platebody, skirt and kiteshield., 11896=This item set is made up of a full helm, platebody, skirt and kiteshield., 19578=This item set is made up of a full helm, platebody, skirt and kiteshield., 11898=This item set is made up of a full helm, platebody, legs and kiteshield., 19580=This item set is made up of a cloak, wreath, top and bottoms., 11900=This item set is made up of a full helm, platebody, skirt and kiteshield., 11902=This item set is made up of a hat, robe top and bottoms., 19582=This item set is made up of a body, chaps, bracers and coif., 11904=This item set is made up of a hat, robe top and bottoms., 19584=This item set is made up of a body, chaps, bracers and coif., 11906=This item set is made up of a hat, robe top and bottoms., 19586=This item set is made up of a body, chaps, bracers and coif., 11908=This item set is made up of a body and chaps., 19588=This item set is made up of a full helm, platebody, legs and kiteshield., 11910=This item set is made up of a body and chaps., 19590=This item set is made up of a full helm, platebody, skirt and kiteshield., 11912=This item set is made up of a body and chaps., 19592=This item set is made up of a full helm, platebody, legs and kiteshield., 11914=This item set is made up of a body and chaps., 19594=This item set is made up of a full helm, platebody, skirt and kiteshield., 11916=This item set is made up of a body and chaps., 19596=This item set is made up of a full helm, platebody, legs and kiteshield., 11918=This item set is made up of a body and chaps., 19598=This item set is made up of a full helm, platebody, skirt and kiteshield., 11920=This item set is made up of a body, chaps, bracers and coif., 11922=This item set is made up of a body, chaps, bracers and coif., 11924=This item set is made up of a body, chaps, bracers and coif., 11926=This item set is made up of a full helm, platebody, legs and kiteshield., 11928=This item set is made up of a full helm, platebody, legs and kiteshield., 11930=This item set is made up of a full helm, platebody, legs and kiteshield., 11932=This item set is made up of a full helm, platebody, skirt and kiteshield., 11934=This item set is made up of a full helm, platebody, skirt and kiteshield., 11936=This item set is made up of a full helm, platebody, skirt and kiteshield., 11938=This item set is made up of a full helm, platebody, legs and kiteshield., 11940=This item set is made up of a full helm, platebody, skirt and kiteshield., 11942=This item set is made up of a helm, platebody, legs, boots and gloves., 11944=This item set is made up of a helm, body, chaps, boots and gloves., 11946=This item set is made up of a helm, top, bottoms, boots and gloves., 30901=This item set is made up of a full helm, platebody, platelegs, gloves and boots., 30903=This item set is made up of a mask, robe top, robe legs, gloves and boots., 11960=This item set is made up of a hat, top, bottoms, gloves and boots., 30905=This item set is made up of a cowl, body, chaps, gloves and boots., 11962=This item set is made up of a hat, top, bottoms, gloves and boots., 14525=This item set is made up of a hat, top and bottoms., 11967=This item set is made up of a cannon base, stand, barrels and furnace., 14527=This item set is made up of an elite black full helm, platebody and legs., 14529=This item set is made up of a dragon full helm, platebody, legs., 14531=This item set is made up of a dragon full helm, platebody, skirt.};
	enumType.valueType = STRING;
	enumType.defaultstr = "shop_dummy";
	enumType.keyType = OBJ;
	enumType.size = 119;
	break;

case 1089:
	enumType.valueMap = {21768=This item set is made up of Akrisae's hood, robe top, robe skirt and mace., 11814=This item set is made up of bronze full helm, platebody, legs and kiteshield., 11816=This item set is made up of bronze full helm, platebody, skirt and kiteshield., 11818=This item set is made up of iron full helm, platebody, legs and kiteshield., 11820=This item set is made up of iron full helm, platebody, skirt and kiteshield., 11822=This item set is made up of steel full helm, platebody, legs and kiteshield., 11824=This item set is made up of steel full helm, platebody, skirt and kiteshield., 11826=This item set is made up of black full helm, platebody, legs and kiteshield., 11828=This item set is made up of black full helm, platebody, skirt and kiteshield., 11830=This item set is made up of mithril full helm, platebody, legs and kiteshield., 11832=This item set is made up of mithril full helm, platebody, skirt and kiteshield., 11834=This item set is made up of adamant full helm, platebody, legs and kiteshield., 11836=This item set is made up of adamant full helm, platebody, skirt and kiteshield., 11838=This item set is made up of rune full helm, platebody, legs and kiteshield., 11840=This item set is made up of rune full helm, platebody, skirt and kiteshield., 19520=This item set is made up of full helm, platebody, legs and kiteshield., 11842=This item set is made up of dragon helm, chainbody, legs., 24386=This item set is made up of body, chaps and vambraces., 19522=This item set is made up of full helm, platebody, legs and kiteshield., 11844=This item set is made up of dragon helm, chainbody, skirt., 19524=This item set is made up of full helm, platebody, legs and kiteshield., 11846=This item set is made up of Ahrim's hood, robe top, robe skirt and staff., 19526=This item set is made up of full helm, platebody, legs and kiteshield., 11848=This item set is made up of Dharok's helm, body, legs and greataxe., 19528=This item set is made up of full helm, platebody, legs and kiteshield., 11850=This item set is made up of Guthan's helm, body, chainskirt and spear., 19530=This item set is made up of full helm, platebody, skirt and kiteshield., 11852=This item set is made up of Karil's coif, leather top, leather skirt and crossbow., 19532=This item set is made up of full helm, platebody, skirt and kiteshield., 11854=This item set is made up of Torag's helm, body, legs and hammers., 19534=This item set is made up of full helm, platebody, skirt and kiteshield., 11856=This item set is made up of Verac's helm, brassard, plateskirt and flail., 19536=This item set is made up of full helm, platebody, skirt and kiteshield., 11858=This item set is made up of helm, body, legs and shield., 19538=This item set is made up of full helm, platebody, skirt and kiteshield., 11860=This item set is made up of coif, body, chaps and vambraces., 19540=This item set is made up of full helm, platebody, legs and kiteshield., 11862=This item set is made up of body, legs, amulet and hat., 19542=This item set is made up of full helm, platebody, legs and kiteshield., 11864=This item set is made up of body, chaps and vambraces., 19544=This item set is made up of full helm, platebody, legs and kiteshield., 11866=This item set is made up of body, chaps and vambraces., 19546=This item set is made up of full helm, platebody, legs and kiteshield., 11868=This item set is made up of body, chaps and vambraces., 19548=This item set is made up of full helm, platebody, legs and kiteshield., 11870=This item set is made up of body, chaps and vambraces., 19550=This item set is made up of full helm, platebody, skirt and kiteshield., 11872=This item set is made up of hat, top, bottoms, gloves and boots., 19552=This item set is made up of full helm, platebody, skirt and kiteshield., 11874=This item set is made up of hat, top, bottoms, gloves and boots., 19554=This item set is made up of full helm, platebody, skirt and kiteshield., 11876=This item set is made up of helm, body, boots, gauntlets and legs., 19556=This item set is made up of full helm, platebody, skirt and kiteshield., 11878=This item set is made up of full helm, platebody, legs and kiteshield., 19558=This item set is made up of full helm, platebody, skirt and kiteshield., 11880=This item set is made up of full helm, platebody, skirt and kiteshield., 19560=This item set is made up of full helm, platebody, legs and kiteshield., 11882=This item set is made up of full helm, platebody, legs and kiteshield., 19562=This item set is made up of full helm, platebody, legs and kiteshield., 11884=This item set is made up of full helm, platebody, skirt and kiteshield., 19564=This item set is made up of full helm, platebody, legs and kiteshield., 11886=This item set is made up of full helm, platebody, legs and kiteshield., 19566=This item set is made up of full helm, platebody, legs and kiteshield., 11888=This item set is made up of full helm, platebody, skirt and kiteshield., 19568=This item set is made up of full helm, platebody, legs and kiteshield., 11890=This item set is made up of full helm, platebody, legs and kiteshield., 19570=This item set is made up of full helm, platebody, skirt and kiteshield., 11892=This item set is made up of full helm, platebody, skirt and kiteshield., 19572=This item set is made up of full helm, platebody, skirt and kiteshield., 19574=This item set is made up of full helm, platebody, skirt and kiteshield., 11894=This item set is made up of full helm, platebody, legs and kiteshield., 19576=This item set is made up of full helm, platebody, skirt and kiteshield., 11896=This item set is made up of full helm, platebody, skirt and kiteshield., 19578=This item set is made up of full helm, platebody, skirt and kiteshield., 11898=This item set is made up of full helm, platebody, legs and kiteshield., 19580=This item set is made up of cloak, wreath, top and bottoms., 11900=This item set is made up of full helm, platebody, skirt and kiteshield., 11902=This item set is made up of hat, robe top and bottoms., 19582=This item set is made up of body, chaps, bracers and coif., 11904=This item set is made up of hat, robe top and bottoms., 19584=This item set is made up of body, chaps, bracers and coif., 11906=This item set is made up of hat, robe top and bottoms., 19586=This item set is made up of body, chaps, bracers and coif., 11908=This item set is made up of body and chaps., 19588=This item set is made up of full helm, platebody, legs and kiteshield., 11910=This item set is made up of body and chaps., 19590=This item set is made up of full helm, platebody, skirt and kiteshield., 11912=This item set is made up of body and chaps., 19592=This item set is made up of full helm, platebody, legs and kiteshield., 11914=This item set is made up of body and chaps., 19594=This item set is made up of full helm, platebody, skirt and kiteshield., 11916=This item set is made up of body and chaps., 19596=This item set is made up of full helm, platebody, legs and kiteshield., 11918=This item set is made up of body and chaps., 19598=This item set is made up of full helm, platebody, skirt and kiteshield., 11920=This item set is made up of body, chaps, bracers and coif., 11922=This item set is made up of body, chaps, bracers and coif., 11924=This item set is made up of body, chaps, bracers and coif., 11926=This item set is made up of full helm, platebody, legs and kiteshield., 11928=This item set is made up of full helm, platebody, legs and kiteshield., 11930=This item set is made up of full helm, platebody, legs and kiteshield., 11932=This item set is made up of full helm, platebody, skirt and kiteshield., 11934=This item set is made up of full helm, platebody, skirt and kiteshield., 11936=This item set is made up of full helm, platebody, skirt and kiteshield., 11938=This item set is made up of full helm, platebody, legs and kiteshield., 11940=This item set is made up of full helm, platebody, skirt and kiteshield., 11942=This item set is made up of helm, platebody, legs, boots and gloves., 11944=This item set is made up of helm, body, chaps, boots and gloves., 11946=This item set is made up of helm, top, bottoms, boots and gloves., 30901=This item set is made up of a full helm, platebody, platelegs, gloves and boots., 30903=This item set is made up of a mask, robe top, robe legs, gloves and boots., 11960=This item set is made up of hat, top, bottoms, gloves and boots., 30905=This item set is made up of a cowl, body, chaps, gloves and boots., 11962=This item set is made up of hat, top, bottoms, gloves and boots., 14525=This item set is made up of hat, top and bottoms., 11967=This item set is made up of cannon base, stand, barrels and furnace., 14527=This item set is made up of Elite black full helm, platebody and legs., 14529=This item set is made up of dragon full helm, platebody, legs., 14531=This item set is made up of dragon full helm, platebody, skirt.};
	enumType.valueType = STRING;
	enumType.defaultstr = "shop_dummy";
	enumType.keyType = OBJ;
	enumType.size = 119;
	break;

case 1090:
	enumType.valueType = INT;
	enumType.defaultint = 114;
	enumType.keyType = INT;
	enumType.valueArray = [114, 114, 114, 113, 112, 112, 111, 110, 109, 108, 108, 107, 106, 105, 105, 104, 103, 102, 101, 101, 100, 99, 98, 98, 97, 96, 95, 94, 94, 93, 92, 91, 91, 90, 89, 88, 87, 87, 86, 85, 84, 84, 83, 82, 81, 80, 80, 79, 78, 77, 76, 76, 75, 74, 73, 73, 72, 71, 70, 69, 69, 68, 67, 66, 66, 65, 64, 63, 62, 62, 61, 60, 59, 59, 58, 57, 56, 55, 55, 54, 53, 52, 52, 51, 50, 49, 48, 48, 47, 46, 45, 45, 44, 43, 42, 41, 41, 40, 39, 38, 37];
	enumType.size = 101;
	break;

case 1091:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 1, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12, 13, 14, 14, 15, 16, 17, 17, 18, 19, 20, 21, 21, 22, 23, 24, 24, 25, 26, 27, 28, 28, 29, 30, 31, 31, 32, 33, 34, 35, 35, 36, 37, 38, 39, 39, 40, 41, 42, 42, 43, 44, 45, 46, 46, 47, 48, 49, 49, 50, 51, 52, 53, 53, 54, 55, 56, 56, 57, 58, 59, 60, 60, 61, 62, 63, 63, 64, 65, 66, 67, 67, 68, 69, 70, 70, 71, 72, 73, 74, 74, 75, 76, 77, 78];
	enumType.size = 101;
	break;

case 1092:
	enumType.valueMap = {8240=98697232, 8242=98697232, 8244=98697232, 8246=98697232, 8248=98697232, 14912=98697232, 6991=98697232, 6992=98697232, 6994=98697232, 20306=98697232, 11106=98697232, 21092=98697232, 11108=98697232, 14950=98697232, 11110=98697232, 11112=98697232, 14954=98697232, 11114=98697232, 11116=98697232, 14958=98697232, 11118=98697232, 11120=98697232, 14962=98697232, 11122=98697232, 11124=98697232, 11126=98697232, 11640=98697232, 11128=98697232, 11130=98697232, 11132=98697232, 11134=98697232, 8575=98697232, 11136=98697232, 11138=98697232, 11140=98697232, 11142=98697232, 11144=98697232, 6794=98697232, 11146=98697232, 6796=98697232, 11148=98697232, 6798=98697232, 11150=98697232, 6800=98697232, 11152=98697232, 6802=98697232, 11154=98697232, 6804=98697232, 11156=98697232, 6806=98697232, 11158=98697232, 6808=98697232, 11160=98697232, 6809=98697232, 11162=98697232, 6811=98697232, 13979=98697232, 11164=98697232, 6813=98697232, 11166=98697232, 6815=98697232, 11168=98697232, 6817=98697232, 7329=98697232, 6818=98697232, 11170=98697232, 7331=98697232, 6820=98697232, 11172=98697232, 7333=98697232, 6822=98697232, 11174=98697232, 7335=98697232, 6824=98697232, 11176=98697232, 6825=98697232, 7337=98697232, 11178=98697232, 6827=98697232, 7339=98697232, 11180=98697232, 6829=98697232, 7341=98697232, 11182=98697232, 6831=98697232, 7343=98697232, 11184=98697232, 6833=98697232, 7345=98697232, 11186=98697232, 6835=98697232, 7347=98697232, 11188=98697232, 6837=98697232, 7349=98697232, 11190=98697232, 7351=98697232, 6839=98697232, 11192=98697232, 6841=98697232, 7353=98697232, 11194=98697232, 6843=98697232, 7355=98697232, 11196=98697232, 6845=98697232, 7357=98697232, 11198=98697232, 6847=98697232, 7359=98697232, 11200=98697232, 7361=98697232, 6849=98697232, 11202=98697232, 6851=98697232, 7363=98697232, 11204=98697232, 7365=98697232, 6853=98697232, 11206=98697232, 7367=98697232, 6855=98697232, 11208=98697232, 6857=98697232, 7370=98697232, 11210=98697232, 6859=98697232, 7372=98697232, 11212=98697232, 6861=98697232, 11214=98697232, 6863=98697232, 7375=98697232, 11216=98697232, 7377=98697232, 6865=98697232, 11218=98697232, 6867=98697232, 11220=98697232, 6869=98697232, 11222=98697232, 6871=98697232, 11224=98697232, 6873=98697232, 6875=98697232, 6877=98697232, 6879=98697232, 6881=98697232, 6883=98697232, 6885=98697232, 6887=98697232, 6889=98697232, 17399=98697232, 17401=98697232, 17403=98697232};
	enumType.valueType = INTERFACE;
	enumType.defaultint = 98697230;
	enumType.keyType = NPC;
	enumType.size = 155;
	break;

case 1093:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [, <col=aa44aa>Junior Cadet </col>, <col=aa44aa>Serjeant </col>, <col=aa44aa>Commander </col>, <col=aa44aa>War-chief </col>, <col=c86400>Sir </col>, <col=c86400>Lord </col>, <col=c86400>Duderino </col>, <col=c86400>Lionheart </col>, <col=c86400>Hellraiser </col>, <col=c86400>Crusader </col>, <col=c86400>Desperado </col>, <col=c86400>Baron </col>, <col=c86400>Count </col>, <col=c86400>Overlord </col>, <col=c86400>Bandito </col>, <col=c86400>Duke </col>, <col=c86400>King </col>, <col=c86400>Big Cheese </col>, <col=c86400>Bigwig </col>, <col=c86400>Wunderkind </col>, <col=466afa>Vyreling </col>, <col=7d3fec>Vyre Grunt </col>, <col=6c0b2b>Vyrewatch </col>, <col=c12006>Vyrelord </col>, <col=c12006>Yt'Haar-</col>, <col=c86400>Emperor </col>, <col=c86400>Prince </col>, <col=c86400>Witch King </col>, <col=c86400>Archon </col>, <col=c86400>Justiciar </col>, <col=c86400>The Awesome </col>, <col=c86400> the Magnificent</col>, <col=c86400> the Undefeated</col>, <col=c86400> the Strange</col>, <col=c86400> the Divine</col>, <col=c86400> the Fallen</col>, <col=c86400> the Warrior</col>, <col=c86400>The Real </col>, <col=aa44aa>Cowardly </col>, <col=aa44aa> the Redundant</col>, <col=aa44aa>Everyone attack </col>, <col=aa44aa>Smelly </col>, <col=aa44aa> the Idiot</col>, <col=aa44aa>Sir Lame </col>, <col=aa44aa> the Flamboyant</col>, <col=aa44aa>Weakling </col>, <col=aa44aa> was punished</col>, <col=aa44aa> lost</col>, <col=aa44aa> ...you fail</col>, <col=aa44aa>No-mates </col>, <col=aa44aa> ate dirt</col>, <col=aa44aa>Delusional </col>, <col=aa44aa> the Respawner</col>, <col=aa44aa>Cutie-pie </col>, <col=aa44aa> the Fail Magnet</col>, <col=aa44aa> was terminated</col>, <col=aa44aa>Lazy </col>, <col=aa44aa> ? Who?</col>, <col=c86400> the Thrifty</col>, <col=c86400> the Handsome</col>, <col=c86400> the Suave</col>, <col=c86400> the Skilful</col>, <col=c86400> the Intimidating</col>, <col=c86400>The Mysterious </col>, <col=c86400> the Stylish </col>, <col=c86400>The Untouchable </col>, <col=c86400>The Outrageous </col>, <col=c86400>Cheerful </col>, <col=c86400>Grumpy </col>, <col=c86400>Assassin </col>, <col=c86400>Athlete </col>, <col=c86400> the Tanned</col>, <col=c86400> the Hot</col>, <col=c86400>The </col>, <col=c86400> Junior</col>, <col=c86400>Mr </col>, <col=c86400>Master </col>, <col=c86400> Esquire</col>, <col=c86400>Doctor </col>, <col=c12006>Artful Dodger </col>, <col=c12006> the Enforcer</col>, <col=c12006>Don </col>, <col=c12006> the Swindler</col>, <col=c86400> the Wild</col>, <col=c86400>The Adorable </col>, <col=c86400>The Mighty </col>, <col=c86400>Flyboy </col>, <col=c86400> the Stuffed</col>, <col=4040ff> the Blue</col>, <col=0fbd0f> the Green</col>, <col=f50202> the Red</col>, <col=6d6d75> the Grey</col>, <col=c12006>Archmage </col>, <col=c12006>TzHaar-</col>, <col=c12006> the Cabin Boy</col>, <col=c12006>Bo'sun </col>, <col=c12006>First Mate </col>, <col=c12006>Cap'n </col>, <col=c12006>Commodore </col>, <col=c12006>Admiral </col>, <col=9f2212>Santa </col>, ,<col=047f06> the World Guardian</col>, <col=8080ff> of Armadyl</col>, <col=047f06> of Bandos</col>, <col=4040ff> of Saradomin</col>, <col=00ffff> of Seren</col>, <col=047f06> of Sliske</col>, <col=c12006> of Zamorak</col>, <col=c120c1> of Zaros</col>, <col=c86400> of the Godless</col>, <col=2c7cae>Acolyte </col>, <col=2c7cae>High Priest </col>, <col=2c7cae>Hierophant </col>, <col=c63131>Acolyte </col>, <col=c63131>High Priest </col>, <col=c63131>Hierophant </col>, <col=2c7cae> the Virtuous</col>, <col=c63131> the Powerful</col>, <col=6f28c6> the Boundless</col>, <col=6f28c6> the Eternal</col>, <col=fab402> Slayer of Imps</col>, <col=fab402> Zilyana's Bane</col>, <col=fab402> Ruler of the Tower</col>, <col=fab402> Scourge of the Wild</col>, <col=fab402> Master of Clay</col>, <col=c12006> the Gallant</col>, <col=c12006> the Pious</col>, <col=c12006> the Brave</col>, <col=c12006> the Valiant</col>, <col=4040ff>Super </col>, <col=4040ff>Supervillain </col>, <col=4040ff>Super Super </col>, <col=4040ff>Super Supervillain </col>, <col=a6f9fd> the Defeater</col>, <col=c12006> of Daemonheim</col>, <col=fab402> Chroniclator</col>, <col=fab402> Slapsaroth</col>, <col=c86400> the Builder</col>, <col=c86400> the Philanthropist</col>, <col=c86400> the Wishful</col>, <col=c86400> the Generous</col>, <col=fab402> the Charitable</col>, <col=8080ff>Scout </col>, <col=8080ff>Wingman </col>, <col=8080ff>Wingleader </col>, <col=047f06>Grunt </col>, <col=047f06>Soldier </col>, <col=047f06>Veteran </col>, <col=8080ff>, Vanguard of Armadyl</col>, <col=047f06>, Warmaster of Bandos</col>, <col=8080ff>, Armadylean Warrior</col>, <col=06a010>, Bandosian Warrior</col>, <col=6060a0>, Armadylean Follower</col>, <col=106010>, Bandosian Follower</col>, <col=c12006>Admiral of the Fleet </col>, <col=dc2833> the Scrumptious</col>, <col=933cdb> the Forlorn</col>, <col=fab402>Piggy </col>, <col=fab402>, Scion of Viggora</col>, <col=c120c1>Pontifex </col>, <col=c120c1>Legatus </col>, <col=8904b1> the Annihilator</col>, <col=c12006>Maxed </col>, <col=f7fe2e> the Completionist</col>, <col=fab402> the Supreme</col>, <col=6d6d75> Slayer of Imps</col>, <col=f334c4> the Naabe</col>, <col=bae7fd> the Bloodchiller</col>, <col=d7f388> the Riftsplitter</col>, <col=faac59> the Pummeller</col>, <col=795daa> the Thunderous</col>, <col=d8432b> the Warmonger</col>, <col=047f06> the Champion</col>, <col=6d6d75> Slapsaroth</col>, <col=fab402>Undertaker </col>, <col=6d6d75>Undertaker </col>, <col=00ffff> of the Elves</col>, <col=1d689e> the Reaper</col>, <col=ba061f>Final Boss </col>, <col=c12006>Attacker </col>, <col=4040ff>Defender </col>, <col=d7f388>Collector </col>, <col=047f06>Healer </col>, <col=c12006>Supreme Attacker </col>, <col=4040ff>Supreme Defender </col>, <col=d7f388>Supreme Collector </col>, <col=047f06>Supreme Healer </col>, <col=c86400> the Penance Slayer</col>, <col=c120c1> the Empty</col>, <col=c120c1> the Shadow</col>, <col=c120c1>Praetor </col>, <col=c120c1> Dream of Mah</col>, <col=c120c1> of Senntisten</col>, <col=c120c1> of the Second Age</col>, <col=c120c1> the Betrayed</col>, <col=c120c1> the Muspah</col>, <col=c120c1> the Nihil</col>, <col=6d6d75> Zilyana's Bane</col>, <col=fab402> the Gardener</col>, <col=6d6d75> the Gardener</col>, <col=787878>Peg Leg </col>, <col=960f05>Cutthroat </col>, <col=cc0099> the Swashbuckler</col>, <col=729de4>One-Eyed </col>, <col=048f06>Dread Pirate </col>, <col=c80000>Red-Hand </col>, <col=323232> Blackbeard</col>, <col=63e2f3> Runebeard</col>, <col=da6924> the Rum Thief</col>, <col=1a1c91>Pirate King </col>, <col=df01a5> of the Trahaearn</col>, <col=2d2d2d> of the Iorwerth</col>, <col=04b431> of the Cadarn</col>, <col=dbd838> of the Crwys</col>, <col=0080ff> of the Amlodd</col>, <col=ebf7f1> of the Ithell</col>, <col=d80010> of the Hefin</col>, <col=2efef7> of the Meilyr</col>, <col=df7401> the Elven</col>, <col=0b610b>Dark Elf </col>, <col=0b610b> of Tarddiad</col>, <col=8904b1>Lorehound </col>, <col=df7401> the Statuesque</col>, <col=0b610b> of the Naragi</col>, <col=0c868a>Lord of the Wait </col>, <col=513a33> the Mourner</col>, <col=8a0808>Dark Lord </col>, <col=8a0808> the Fractured</col>, <col=8a0808> the Corrupted</col>, <col=df01d7> the Elfborne</col>, <col=8904b1> the Ravensworn</col>, <col=8a0808> the Stupendous</col>, <col=8a0808> the Meandering</col>, <col=df7401>The Famous </col>, <col=d8432b>The Abyssal </col>, <col=d8432b>The Dark </col>, <col=d8432b>The Beast </col>, <col=d8432b>Slayer Master </col>, <col=6d6d75>Ironman </col>, <col=6d6d75> the Ironman</col>, <col=ba061f>Hardcore Ironman </col>, <col=ba061f> the Hardcore Ironman</col>, <col=bae7fd>Ghost Hunter </col>, <col=c12006> the Trickster</col>, <col=c12006> the Treated</col>, <col=808080> the Ghostly</col>, <col=c86400> the Millionaire</col>, <col=fab402> the Billionaire</col>, <col=6d6d75> Ruler of the Tower</col>, <col=6d6d75> Scourge of the Wild</col>, <col=8a0808> the Coedensworn </col>, <col=8a0808> the Hunter</col>, <col=10cff8>Sword Artist </col>, <col=8a0808> the Challenged</col>, <col=8904b1>Sneaky </col>, <col=8a0808>Sweet Tooth </col>, <col=893d89> the Troublesome</col>, <col=860111> the Thanksgiver</col>, <col=c81e1e> the Festive</col>, <col=c12006> the Survivor</col>, <col=fab402> the Puzzle Hunter</col>, <col=6d6d75> the Puzzle Hunter</col>, <col=fab402>The Late </col>, <col=6d6d75>The Late </col>, <col=c12006>Portmaster </col>, <col=0f5c0f>General </col>, <col=8c1111>Executioner </col>, <col=572714>Castellan </col>, <col=ded82f>Deacon </col>, <col=eda011> the Blazing</col>, <col=309e2b> the Corrupting</col>, <col=2cc6e8> the Frostborn</col>, <col=e3e020> the Glorious</col>, <col=b02600> the Infernal</col>, <col=949a9c> the Obscured</col>, <col=21751d> the Pestilent</col>, <col=851b1b> the Rending</col>, <col=1ec8c8> the Shattering</col>, <col=949a9c> the Terrifying</col>, <col=fab402>Final Boss </col>, <col=6d6d75> Master of Clay</col>, <col=fab402> the Delver</col>, <col=6d6d75> the Delver</col>, <col=c81e1e> the Master</col>, <col=c81414> the Gamebreaker</col>, <col=ffffff> the Gam<col=c81414>ebreaker</col>, <col=c81414> the Gaembreaker</col>, <col=c81414> le testeur b?ta</col>, <col=c81414> the Gamebreakr</col>, <col=c81414>the Gamebreaker </col>, <col=c81414> <str=14a914>the Gamebreaker</str></col>, <col=c81414> thE gAmEbrEAkEr</col>, <col=7fa9ff> the Gamebreaker</col>, <col=c81414>  the   Gamebreaker </col>, <col=ff4b0a> the Prepared</col>, <col=96c8ff> the Ultimate Quester</col>, <col=fab402>Questival King </col>, <col=32c832> the Egg-cellent</col>, <col=df7401>Champion of Champions </col>, <col=a4a4a4> the Detective</col>, <col=b432c9> the <col=ffff00>Distract<col=b432c9>ed</col>, <col=00ffff>Harbinger </col>, <col=047f06> of Gielinor</col>, <col=990000> the Beast Slayer</col>, <col=00ffff> the Tuska Raider</col>, <col=c86400> the Contender</col>, <col=6d6d75> the Loser</col>, <col=6d6d75> the Struggle</col>, <col=6d6d75> the Real Struggle</col>, <col=d7f388> the Victor</col>, <col=d7f388> the MVP</col>, <col=d7f388> the Real MVP</col>, <col=643200> the <col=6d6d75>Tool</col>, <col=c86400> of V</col>, <col=df7401> the Bronzed</col>, <col=c81414> the Sunburned</col>, <col=fab402>Beachcomber </col>, <col=c81414>Lif<col=ffffff>egu<col=c81414>ard </col>, <col=fadc02> the Quackers</col>, <col=fadc02> the Totally Quackers</col>, <col=b432c9> the Beachbum</col>, <col=96c8ff> the Chilled</col>, <col=6d6d75>Piggy </col>, <col=6d6d75>, Scion of Viggora</col>, <col=6d6d75> Chroniclator</col>, <col=3088f0> the Reputable</col>, <col=925b07> of the Goebies</col>, <col=8b0000> the Daredevil</col>, <col=df7401>, King of the Sandcastle</col>, <col=ebf7f1>, Snowy Assassin</col>, <col=c12006>, Stealth Predator</col>, <col=2e8b57>, King of the Jungle</col>];
	enumType.size = 333;
	break;

case 1094:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [10000, 30000, 50000, 80000];
	enumType.size = 4;
	break;

case 1095:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [437, 1522, 2350, 204, 995];
	enumType.size = 5;
	break;

case 1098:
	enumType.valueType = NPC;
	enumType.defaultint = 6565;
	enumType.keyType = INT;
	enumType.valueArray = [null, 6568, 6571, 6574, 6577, 6580, 6583, 6586, 6589, 6592, 6595, 6598, 6601, 13296];
	enumType.size = 13;
	break;

case 1099:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Memorial plaque, Flag, Small gravestone, Ornate gravestone, Font of Life, Stele, Symbol of Saradomin, Symbol of Zamorak, Symbol of Guthix, Symbol of Bandos, Symbol of Armadyl, Ancient symbol, Angel of Death, Royal dwarven gravestone];
	enumType.size = 14;
	break;

case 1100:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [A simple plaque, bearing the name of the deceased.<br><br>(Everyone has this by default.), A dignified little flag flutters in the breeze., A simple little gravestone., An ornately carved gravestone., An elaborate font. As water collects in the bowl, it symbolises new life and hope., A monolithic memorial stone bearing a selection of emblems., The four-pointed star is universally recognised as the symbol of Saradomin., This serpentine sigil represents the ruthless Zamorak., Favoured by humans of a mystical or druidic inclination., Followers of Bandos are now scarce, but this symbol is still used by those who remember that violent god., Armadyl's love of winged creatures is represented by this elegant symbol. Little else is remembered of him., Adventurers often request this symbol, although its origin and meaning have become obscure in the centuries since the god wars., The ultimate marker for a grave, this statue evokes intimations of mortality in all who are faced with it., The dwarves of Keldagrim are said to be the world's greatest sculptors, and a gravestone of dwarven design is an unparallelled work of art.];
	enumType.size = 14;
	break;

case 1101:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 50, 500, 5000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 500000, 500000];
	enumType.size = 14;
	break;

case 1105:
	enumType.valueType = INT;
	enumType.defaultint = 36;
	enumType.keyType = INT;
	enumType.valueArray = [9, 18, 27, 36, 45, 54];
	enumType.size = 6;
	break;

case 1106:
	enumType.valueType = INT;
	enumType.defaultint = 36;
	enumType.keyType = INT;
	enumType.valueArray = [6, 12, 15, 18, 24, 27, 30, 36, 45];
	enumType.size = 9;
	break;

case 1107:
	enumType.valueType = INT;
	enumType.defaultint = 36;
	enumType.keyType = INT;
	enumType.valueArray = [5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 21, 24, 25, 27, 30, 33, 36];
	enumType.size = 17;
	break;

case 1108:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 20512831;
	enumType.keyType = INT;
	enumType.valueArray = [null, 20512824, 20512825, 20512826, 20512827, 20512828, 20512829, 20512830];
	enumType.size = 7;
	break;

case 1109:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 20512907;
	enumType.keyType = INT;
	enumType.valueArray = [null, 20512900, 20512901, 20512902, 20512903, 20512904, 20512905, 20512906];
	enumType.size = 7;
	break;

case 1110:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 20512984;
	enumType.keyType = INT;
	enumType.valueArray = [null, 20512977, 20512978, 20512979, 20512980, 20512981, 20512982, 20512983];
	enumType.size = 7;
	break;

case 1132:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 165, 243, 321, 399, 493, 587];
	enumType.size = 6;
	break;

case 1133:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 83, 141, 217, 295, 373, 459, 553];
	enumType.size = 7;
	break;

case 1136:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 42;
	enumType.keyType = INT;
	enumType.valueArray = [427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 42, 43, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849];
	enumType.size = 34;
	break;

case 1137:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 79;
	enumType.keyType = INT;
	enumType.valueArray = [539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 79, 80, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865];
	enumType.size = 35;
	break;

case 1151:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 31039, 31035, 31042, 31050, 31051, 31029, 31032, 31043, 31031, 31049, 31060, 31033];
	enumType.size = 12;
	break;

case 1152:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 31036, 31046, 31056, 31027, 31026, 31045, 31048, 31058, 31028, 31041, 31044, 31057];
	enumType.size = 12;
	break;

case 1153:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 17629192, 17629193, 17629194, 17629195, 17629196, 17629197, 17629198, 17629199, 17629200, 17629201, 17629202, 17629203, 17629204, 17629205, 17629206, 17629207, 17629208, 17629209, 17629210, 17629211, 17629212, 17629213, 17629214, 17629215, 17629216, 17629217, 17629218, 17629219, 17629220, 17629221, 17629222, 17629223, 17629224, 17629225, 17629226, 17629227];
	enumType.size = 36;
	break;

case 1154:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17629186, 17629187, 17629188];
	enumType.size = 3;
	break;

case 1155:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31054, 31038, 31055];
	enumType.size = 3;
	break;

case 1156:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [80, 75, 60, 50];
	enumType.size = 4;
	break;

case 1157:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [10, 10, 10, 10];
	enumType.size = 4;
	break;

case 1158:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [95, 85, 75, 60];
	enumType.size = 4;
	break;

case 1159:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [10, 10, 15, 15];
	enumType.size = 4;
	break;

case 1160:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [70, 65, 55, 45];
	enumType.size = 4;
	break;

case 1161:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [10, 10, 10, 5];
	enumType.size = 4;
	break;

case 1162:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [10, 350, 700, 1050];
	enumType.size = 4;
	break;

case 1169:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 82, 140, 216, 294, 372, 458, 458];
	enumType.size = 7;
	break;

case 1170:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 86, 144, 220, 298, 376, 462, 556];
	enumType.size = 7;
	break;

case 1171:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 84, 142, 218, 296, 374, 460, 554];
	enumType.size = 7;
	break;

case 1182:
	enumType.valueMap = {1=12047, 2=12043, 3=12059, 4=12019, 5=12009, 6=12778, 7=12049, 8=12055, 9=12808, 10=12067, 11=12063, 12=12091, 13=12800, 14=12053, 15=12065, 16=12021, 17=12818, 18=12780, 19=12798, 20=12814, 21=12073, 22=12087, 23=12071, 24=12051, 25=12095, 26=12097, 1050=19622, 27=12099, 1051=21444, 28=12101, 29=12103, 30=12105, 31=12107, 32=12075, 33=12816, 34=12041, 35=12061, 36=12007, 37=12035, 38=12027, 39=12077, 40=12531, 41=12812, 42=12784, 43=12810, 44=12023, 45=12085, 46=12037, 47=12015, 48=12045, 49=12079, 50=12123, 51=12031, 52=12029, 53=12033, 54=12820, 55=12057, 56=14623, 57=12792, 58=12069, 59=12011, 60=12782, 61=12081, 62=12794, 63=12013, 64=12802, 65=12804, 66=12806, 67=12025, 68=12017, 69=12788, 70=12776, 71=12083, 72=12039, 73=12786, 74=12089, 75=12796, 76=12822, 1100=17935, 77=12093, 1101=17985, 78=12790, 1102=17945, 79=31328, 1103=17955, 80=31410, 1104=17975, 81=31412, 1105=17965, 82=31414, 1106=17936, 83=31416, 1107=17986, 84=32829, 1108=17946, 85=34137, 1109=17956, 86=34139, 1110=17976, 87=34141, 1111=17966, 88=34852, 1112=17937, 1113=17987, 1114=17947, 1115=17957, 1116=17977, 1117=17967, 1118=17938, 1119=17988, 1120=17948, 1121=17958, 1122=17978, 1123=17968, 1124=17939, 1125=17989, 1126=17949, 1127=17959, 1128=17979, 1129=17969, 1130=17940, 1131=17990, 1132=17950, 1133=17960, 1134=17980, 1135=17970, 1136=17941, 1137=17991, 1138=17951, 1139=17961, 1140=17981, 1141=17971, 1142=17942, 1143=17992, 1144=17952, 1145=17962, 1146=17982, 1147=17972, 1148=17943, 1149=17993, 1150=17953, 1151=17963, 1152=17983, 1153=17973, 1154=17944, 1155=17994, 1156=17954, 1157=17964, 1158=17984, 1159=17974, 1000=14422, 1001=14424, 1002=14426, 1003=14428, 1004=14430};
	enumType.valueType = OBJ;
	enumType.defaultint = 526;
	enumType.keyType = INT;
	enumType.size = 155;
	break;

case 1183:
	enumType.valueMap = {1=12231, 2=12225, 3=12236, 4=12255, 5=12226, 6=12286, 7=12256, 8=12240, 9=12290, 10=12245, 11=12241, 12=12237, 13=12276, 14=12227, 15=12246, 16=12232, 17=12282, 18=12284, 19=12285, 20=12283, 21=12264, 22=12243, 23=12228, 24=12229, 25=12266, 26=12266, 27=12266, 28=12266, 29=12266, 30=12266, 31=12266, 32=12264, 33=12288, 34=12235, 35=12259, 36=12238, 37=12258, 38=12257, 39=12264, 40=12233, 41=12274, 42=12289, 43=12275, 44=12267, 45=12239, 46=12234, 47=12254, 48=12265, 49=12264, 50=12252, 51=12253, 52=12262, 53=12230, 54=12244, 55=12249, 56=14625, 57=12279, 58=12242, 59=12247, 60=12291, 61=12264, 62=12261, 63=12269, 64=12271, 65=12273, 66=12272, 67=12263, 68=12260, 69=12277, 70=12270, 71=12264, 72=12250, 73=12280, 74=12268, 75=12281, 76=12287, 1100=18021, 77=12251, 1101=18022, 78=12278, 1102=18023, 79=31333, 1103=18024, 80=31405, 1104=18025, 81=31406, 1105=18026, 82=31407, 1106=18021, 83=31408, 1107=18022, 84=32831, 1108=18023, 85=34143, 1109=18024, 86=34144, 1110=18025, 87=34145, 1111=18026, 88=34854, 1112=18021, 1113=18022, 1114=18023, 1115=18024, 1116=18025, 1117=18026, 1118=18021, 1119=18022, 1120=18023, 1121=18024, 1122=18025, 1123=18026, 1124=18021, 1125=18022, 1126=18023, 1127=18024, 1128=18025, 1129=18026, 1130=18021, 1131=18022, 1132=18023, 1133=18024, 1134=18025, 1135=18026, 1136=18021, 1137=18022, 1138=18023, 1139=18024, 1140=18025, 1141=18026, 1142=18021, 1143=18022, 1144=18023, 1145=18024, 1146=18025, 1147=18026, 1148=18021, 1149=18022, 1150=18023, 1151=18024, 1152=18025, 1153=18026, 1154=18021, 1155=18022, 1156=18023, 1157=18024, 1158=18025, 1159=18026};
	enumType.valueType = OBJ;
	enumType.defaultint = 526;
	enumType.keyType = INT;
	enumType.size = 148;
	break;

case 1184:
	enumType.valueMap = {1=12377, 2=12293, 3=12353, 4=12359, 5=12355, 6=12409, 7=12381, 8=12357, 9=12415, 10=12351, 11=12327, 12=12313, 13=12395, 14=12375, 15=12321, 16=12303, 17=12407, 18=12407, 19=12407, 20=12407, 21=12341, 22=12301, 23=12335, 24=12371, 25=12311, 26=12311, 27=12311, 28=12311, 29=12311, 30=12311, 31=12311, 32=12341, 33=12411, 34=12337, 35=12347, 36=12345, 37=12299, 38=12325, 39=12341, 40=12363, 41=12391, 42=12419, 43=12393, 44=12329, 45=12317, 46=12297, 47=12361, 48=12365, 49=12341, 50=12367, 51=12369, 52=12309, 53=12319, 54=12333, 55=12349, 56=14620, 57=12401, 58=12331, 59=12339, 60=12417, 61=12341, 62=12343, 63=12385, 64=12389, 65=12389, 66=12389, 67=12323, 68=12295, 69=12397, 70=12387, 71=12341, 72=12373, 73=12405, 74=12379, 75=12403, 76=12413, 1100=18087, 77=12383, 1101=18088, 78=12399, 1102=18089, 79=31331, 1103=18090, 80=31403, 1104=18091, 81=31403, 1105=18092, 82=31403, 1106=18087, 83=31403, 1107=18088, 84=32833, 1108=18089, 85=34147, 1109=18090, 1110=18091, 1111=18092, 88=14620, 1112=18087, 1113=18088, 1114=18089, 1115=18090, 1116=18091, 1117=18092, 1118=18087, 1119=18088, 1120=18089, 1121=18090, 1122=18091, 1123=18092, 1124=18087, 1125=18088, 1126=18089, 1127=18090, 1128=18091, 1129=18092, 1130=18087, 1131=18088, 1132=18089, 1133=18090, 1134=18091, 1135=18092, 1136=18087, 1137=18088, 1138=18089, 1139=18090, 1140=18091, 1141=18092, 1142=18087, 1143=18088, 1144=18089, 1145=18090, 1146=18091, 1147=18092, 1148=18087, 1149=18088, 1150=18089, 1151=18090, 1152=18091, 1153=18092, 1154=18087, 1155=18088, 1156=18089, 1157=18090, 1158=18091, 1159=18092, 1000=14422, 1001=14424, 1002=14426, 1003=14428, 1004=14430};
	enumType.valueType = OBJ;
	enumType.defaultint = 526;
	enumType.keyType = INT;
	enumType.size = 151;
	break;

case 1185:
	enumType.valueMap = {12800=29, 12033=69, 12802=79, 12035=54, 12804=79, 12037=62, 12806=79, 12039=88, 12808=22, 12041=47, 12810=57, 12043=4, 12812=57, 12045=64, 12814=34, 12047=1, 17935=1, 12816=46, 17936=11, 12049=18, 17937=21, 12818=34, 17938=31, 12051=42, 17939=41, 12820=70, 17940=51, 12053=31, 17941=61, 12822=95, 17942=71, 12055=19, 17943=81, 17944=91, 28697=14, 12057=71, 17945=3, 28698=14, 17946=13, 12059=10, 28699=14, 17947=23, 17948=33, 12061=49, 17949=43, 17950=53, 12063=25, 14623=72, 17951=63, 17952=73, 12065=32, 17953=83, 17954=93, 12067=23, 17955=5, 34852=84, 17956=15, 12069=74, 17957=25, 17958=35, 12071=41, 17959=45, 17960=55, 12073=36, 17961=65, 17962=75, 12075=46, 17963=85, 17964=95, 12077=56, 17965=9, 17966=19, 12079=66, 17967=29, 17968=39, 12081=76, 17969=49, 17970=59, 12083=86, 17971=69, 17972=79, 12085=61, 17973=89, 17974=99, 12087=40, 17975=7, 17976=17, 12089=92, 17977=27, 17978=37, 12091=28, 17979=47, 17980=57, 12093=96, 17981=67, 32829=88, 17982=77, 12095=43, 17983=87, 17984=97, 12097=43, 17985=2, 17986=12, 12099=43, 17987=22, 17988=32, 12101=43, 17989=42, 17990=52, 12103=43, 17991=62, 17992=72, 12105=43, 17993=82, 17994=92, 12107=43, 14422=3, 14424=20, 34137=79, 14426=40, 12123=66, 34139=79, 14428=60, 34141=79, 14430=80, 31328=81, 19622=4, 31410=87, 31412=87, 31414=87, 31416=87, 21444=87, 12007=52, 12776=85, 12009=16, 12778=17, 12011=75, 12780=34, 12013=78, 12782=76, 12015=63, 12784=57, 12017=83, 12786=89, 12019=13, 12531=56, 12788=83, 12021=33, 12790=99, 12023=58, 12792=73, 12025=80, 12794=77, 12027=55, 12796=93, 12029=68, 12798=34, 12031=67};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 158;
	break;

case 1186:
	enumType.valueMap = {12800=This pouch requires 1 chinchompa, 1 blue charm and 84 spirit shards., 12033=This pouch requires 1 banana, 1 green charm and 130 spirit shards., 12802=This pouch requires 1 fire talisman, 1 blue charm and 198 spirit shards., 12035=This pouch requires 1 abyssal charm, 1 green charm and 106 spirit shards., 12804=This pouch requires 1 earth talisman, 1 blue charm and 202 spirit shards., 12292=This pouch is not yet available., 12037=This pouch requires 1 abyssal charm, 1 green charm and 119 spirit shards., 12806=This pouch requires 1 air talisman, 1 water talisman, 1 blue charm and 198 spirit shards., 12039=This pouch requires 1 unicorn horn, 1 green charm and 140 spirit shards., 12808=This pouch requires 1 obsidian charm, 1 crimson charm and 64 spirit shards., 12041=This pouch requires 1 gold ring, 1 green charm and 88 spirit shards., 12810=This pouch requires 1 perfect graahk fur, 1 blue charm and 154 spirit shards., 12043=This pouch requires 1 raw chicken, 1 gold charm and 8 spirit shards., 12812=This pouch requires 1 perfect kyatt fur, 1 blue charm and 153 spirit shards., 12045=This pouch requires 1 bagged plant 1, 1 crimson charm and 128 spirit shards., 12814=This pouch requires 1 shifter charm, 1 blue charm and 74 spirit shards., 12047=This pouch requires 1 set of wolf bones, 1 gold charm and 7 spirit shards., 17935=This pouch requires 1 novite ore and 1 gold charm., 12816=This pouch requires 1 tinderbox, 1 crimson charm and 111 spirit shards., 17936=This pouch requires 1 bathus ore and 1 gold charm., 12049=This pouch requires 1 bucket of sand, 1 green charm and 45 spirit shards., 17937=This pouch requires 1 marmaros ore and 1 gold charm., 12818=This pouch requires 1 ravager charm, 1 green charm and 74 spirit shards., 17938=This pouch requires 1 kratonite ore and 1 green charm., 12051=This pouch requires 1 carved evil turnip, 1 crimson charm and 104 spirit shards., 17939=This pouch requires 1 fractite ore and 1 green charm., 12820=This pouch requires 1 pot of flour, 1 crimson charm and 79 spirit shards., 17940=This pouch requires 1 zephyrium ore and 1 green charm., 12053=This pouch requires 1 vampyre dust, 1 crimson charm and 81 spirit shards., 17941=This pouch requires 1 argonite ore and 1 crimson charm., 12822=This pouch requires 1 iron platebody, 1 crimson charm and 198 spirit shards., 17942=This pouch requires 1 katagon ore and 1 crimson charm., 12055=This pouch requires 1 pair of bronze claws, 1 crimson charm and 57 spirit shards., 17943=This pouch requires 1 gorgonite ore and 1 blue charm., 17944=This pouch requires 1 promethium ore and 1 blue charm., 12057=This pouch requires 1 polar kebbit fur, 1 gold charm and 14 spirit shards., 17945=This pouch requires 1 salve nettle and 1 gold charm. , 17946=This pouch requires 1 wildercress and 1 gold charm. , 12059=This pouch requires 1 spider carcass, 1 gold charm and 8 spirit shards., 17947=This pouch requires 1 blightleaf and 1 gold charm. , 17948=This pouch requires 1 roseblood and 1 green charm. , 12061=This pouch requires 1 raw beef, 1 crimson charm and 117 spirit shards., 17949=This pouch requires 1 bryll and 1 green charm. , 17950=This pouch requires 1 duskweed and 1 green charm. , 12063=This pouch requires 1 potato cactus, 1 blue charm and 51 spirit shards., 14623=This pouch requires 1 phoenix quill, 1 crimson charm, 165 spirit shards, and completion of 'In Pyre Need'., 17951=This pouch requires 1 soulbell and 1 crimson charm. , 17952=This pouch requires 1 ectograss and 1 crimson charm. , 12065=This pouch requires 1 honeycomb, 1 crimson charm and 84 spirit shards., 17953=This pouch requires 1 runeleaf and 1 blue charm. , 17954=This pouch requires 1 spiritbloom and 1 blue charm. , 12067=This pouch requires 1 raw rat meat, 1 blue charm and 75 spirit shards., 17955=This pouch requires 1 protomastyx hide and 1 gold charm., 34852=This pouch requires 2 phoenix quills, 1 crimson charm, ### spirit shards, and completion of 'In Pyre Need'., 17956=This pouch requires 1 submastyx hide and 1 gold charm., 12069=This pouch requires one block of granite (500g, 2kg or 5kg), 1 crimson charm and 166 spirit shards., 17957=This pouch requires 1 paramastyx hide and 1 gold charm., 17958=This pouch requires 1 archaemastyx hide and 1 green charm., 12071=This pouch requires 1 clean guam leaf, 1 green charm and 78 spirit shards., 17959=This pouch requires 1 dromomastyx hide and 1 green charm., 17960=This pouch requires 1 spinomastyx hide and 1 green charm., 12073=This pouch requires 1 bronze bar, 1 blue charm and 102 spirit shards., 17961=This pouch requires 1 gallimastyx hide and 1 crimson charm., 17962=This pouch requires 1 stegomastyx hide and 1 crimson charm., 12075=This pouch requires 1 iron bar, 1 blue charm and 125 spirit shards., 17963=This pouch requires 1 megamastyx hide and 1 blue charm., 17964=This pouch requires 1 tyrannomastyx hide and 1 blue charm., 12077=This pouch requires 1 steel bar, 1 blue charm and 141 spirit shards., 17965=This pouch requires 2 cooked heim crabs and 1 gold charm., 17966=This pouch requires 2 cooked red eye and 1 gold charm., 12079=This pouch requires 1 mithril bar, 1 blue charm and 152 spirit shards., 17967=This pouch requires 2 cooked dusk eel and 1 gold charm., 17968=This pouch requires 2 cooked giant flat fish and 1 green charm., 12081=This pouch requires 1 adamant bar, 1 blue charm and 144 spirit shards., 17969=This pouch requires 2 cooked short-finned eel and 1 green charm., 17970=This pouch requires 2 cooked web snipper and 1 green charm., 12083=This pouch requires 1 rune bar, 1 blue charm and 1 spirit shard., 17971=This pouch requires 2 cooked bouldabass and 1 crimson charm., 17972=This pouch requires 2 cooked salve eel and 1 crimson charm., 12085=This pouch requires 1 pile of goat horn dust, 1 crimson charm and 141 spirit shards., 17973=This pouch requires 2 cooked blue crab and 1 blue charm., 17974=This pouch requires 2 cooked cave moray and 1 blue charm., 12087=This pouch requires 1 marigold, 1 gold charm and 11 spirit shards., 17975=This pouch requires 1 protoleather torn bag and 1 gold charm., 17976=This pouch requires 1 subleather torn bag and 1 gold charm., 12089=This pouch requires 1 raw rabbit, 1 wolf bones, 1 crimson charm and 203 spirit shards., 17977=This pouch requires 1 paraleather torn bag and 1 gold charm., 17978=This pouch requires 1 archleather torn bag and 1 green charm., 12091=This pouch requires 1 bucket of compost, 1 green charm and 47 spirit shards., 17979=This pouch requires 1 dromoleather torn bag and 1 green charm., 17980=This pouch requires 1 spinoleather torn bag and 1 green charm., 12093=This pouch requires 1 yak hide, 1 crimson charm and 211 spirit shards., 32829=This pouch requires 1 light core, 1 blue charm, 100 spirit shards., 17981=This pouch requires 1 gallileather torn bag and 1 crimson charm., 17982=This pouch requires 1 stegoleather torn bag and 1 crimson charm., 12095=This pouch requires 1 cockatrice egg, 1 green charm and 88 spirit shards., 17983=This pouch requires 1 megaleather torn bag and 1 blue charm., 17984=This pouch requires 1 tyrannoleather torn bag and 1 blue charm., 12097=This pouch requires 1 guthatrice egg, 1 green charm and 88 spirit shards., 17985=This pouch requires 2 tangle gum branches and 1 gold charm., 17986=This pouch requires 2 seeping elm branches and 1 gold charm., 12099=This pouch requires 1 saratrice egg, 1 green charm and 88 spirit shards., 17987=This pouch requires 2 blood spindle branches and 1 gold charm., 17988=This pouch requires 2 utuku branches and 1 green charm., 12101=This pouch requires 1 zamatrice egg, 1 green charm and 88 spirit shards., 17989=This pouch requires 2 spinebeam branches and 1 green charm., 17990=This pouch requires 2 bovistrangler branches and 1 green charm., 12103=This pouch requires 1 pengatrice egg, 1 green charm and 88 spirit shards., 17991=This pouch requires 2 thigat branches and 1 crimson charm., 17992=This pouch requires 2 corpsethorn branches and 1 crimson charm., 12105=This pouch requires 1 coraxatrice egg, 1 green charm and 88 spirit shards., 17993=This pouch requires 2 entgallow branches and 1 blue charm., 17994=This pouch requires 2 grave creeper branches and 1 blue charm., 12107=This pouch requires 1 vulatrice egg, 1 green charm and 88 spirit shards., 34137=This pouch requires 1 demon claw, 1 crimson charm and 136 spirit shards., 12123=This pouch requires 1 swamp toad, 1 gold charm and 11 spirit shards., 34139=This pouch requires 1 demon claw, 1 crimson charm and 136 spirit shards., 34141=This pouch requires 1 demon claw, 1 crimson charm and 136 spirit shards., 31328=This pouch requires 1 elder charm, 150 elder energy and 1 muspah spine., 31410=This pouch requires 1 elder charm, 150 elder energy and 1 set of vampyre fangs., 31412=This pouch requires 1 elder charm, 150 elder energy and 1 demon horn., 31414=This pouch requires 1 elder charm, 150 elder energy and 1 set of aviansie talons., 31416=This pouch requires 1 elder charm, 150 elder energy and 1 icyene feather., 12007=This pouch requires 1 raw bird meat, 1 gold charm and 12 spirit shards., 12776=This pouch requires 1 swamp lizard, 1 crimson charm and 150 spirit shards., 12009=This pouch requires 1 iron ore, 1 gold charm and 7 spirit shards., 12778=This pouch requires 1 mosquito proboscis, 1 gold charm and 1 spirit shard., 12011=This pouch requires 1 bunch of flowers (any except black or white), 1 crimson charm and 168 spirit shards., 12780=This pouch requires 1 spinner charm, 1 blue charm and 74 spirit shards., 12013=This pouch requires 1 willow branch, 1 green charm and 124 spirit shards., 12782=This pouch requires 1 ruby harvest butterfly, 1 green charm and 141 spirit shards., 12015=This pouch requires 1 snake hide, 1 crimson charm and 116 spirit shards., 12784=This pouch requires 1 perfect larupia fur, 1 blue charm and 155 spirit shards., 12017=This pouch requires 1 dagannoth hide, 1 crimson charm and 1 spirit shard., 12786=This pouch requires 1 water talisman, 1 blue charm and 222 spirit shards., 12019=This pouch requires 1 uncooked thin snail, 1 gold charm and 9 spirit shards., 12531=This pouch requires 1 harpoon, 1 green charm and 109 spirit shards., 12788=This pouch requires 1 obsidian charm, 1 blue charm and 219 spirit shards., 12021=This pouch requires 1 willow log, 1 green charm and 72 spirit shards., 12790=This pouch requires 1 steel platebody, 1 crimson charm and 178 spirit shards., 12023=This pouch requires 1 empty fishbowl, 1 blue charm and 144 spirit shards., 12792=This pouch requires 1 obsidian charm, 1 blue charm and 195 spirit shards., 12025=This pouch requires 1 water orb, 1 green charm and 128 spirit shards., 12794=This pouch requires 1 talon beast charm, 1 crimson charm and 174 spirit shards., 12027=This pouch requires 1 jug of water, 1 blue charm and 151 spirit shards., 12796=This pouch requires 1 abyssal charm, 1 green charm and 113 spirit shards., 12029=This pouch requires 1 raw shark, 1 green charm and 110 spirit shards., 12798=This pouch requires 1 torcher charm, 1 blue charm and 74 spirit shards., 12031=This pouch requires 1 tortoise shell, 1 gold charm and 1 spirit shard.};
	enumType.valueType = STRING;
	enumType.defaultstr = "You may not check this pouch for its ingredients.";
	enumType.keyType = OBJ;
	enumType.size = 149;
	break;

case 1187:
	enumType.valueMap = {12800=Giant chinchompa pouch, 12802=Fire titan pouch, 12804=Moss titan pouch, 12292=Reserved, 12806=Ice titan pouch, 12808=Spirit Tz-Kih pouch, 12810=Spirit graahk pouch, 12812=Spirit kyatt pouch, 12814=Void shifter pouch, 17935=Cub bloodrager pouch, 12816=Pyrelord pouch, 17936=Little bloodrager pouch, 17937=Na?ve bloodrager pouch, 12818=Void ravager pouch, 17938=Keen bloodrager pouch, 17939=Brave bloodrager pouch, 12820=Ravenous locust pouch, 17940=Brah bloodrager pouch, 17941=Naabe bloodrager pouch, 12822=Iron titan pouch, 17942=Wise bloodrager pouch, 17943=Adept bloodrager pouch, 17944=Sachem bloodrager pouch, 12824=Titan's Constitution scroll, 17945=Cub stormbringer pouch, 12825=Steel of Legends scroll, 17946=Little stormbringer pouch, 12826=Volcanic Strength scroll, 17947=Na?ve stormbringer pouch, 12827=Essence Shipment scroll, 17948=Keen stormbringer pouch, 12828=Iron Within scroll, 17949=Brave stormbringer pouch, 12829=Immense Heat scroll, 17950=Brah stormbringer pouch, 12830=Famine scroll, 17951=Naabe stormbringer pouch, 12831=Deadly Claw scroll, 17952=Wise stormbringer pouch, 12832=Swamp Plague scroll, 17953=Adept stormbringer pouch, 12833=Boil scroll, 17954=Sachem stormbringer pouch, 12834=Explode scroll, 17955=Cub hoardstalker pouch, 12835=Goad scroll, 34852=Reborn phoenix pouch, 17956=Little hoardstalker pouch, 12836=Ambush scroll, 17957=Na?ve hoardstalker pouch, 12837=Ebon Thunder scroll, 17958=Keen hoardstalker pouch, 12838=Pester scroll, 17959=Brave hoardstalker pouch, 12839=Fireball Assault scroll, 17960=Brah hoardstalker pouch, 12840=Rending scroll, 17961=Naabe hoardstalker pouch, 12841=Inferno scroll, 17962=Wise hoardstalker pouch, 17963=Adept hoardstalker pouch, 17964=Sachem hoardstalker pouch, 17965=Cub skinweaver pouch, 17966=Little skinweaver pouch, 17967=Na?ve skinweaver pouch, 17968=Keen skinweaver pouch, 17969=Brave skinweaver pouch, 17970=Brah skinweaver pouch, 17971=Naabe skinweaver pouch, 17972=Wise skinweaver pouch, 17973=Adept skinweaver pouch, 17974=Sachem skinweaver pouch, 17975=Cub worldbearer pouch, 17976=Little worldbearer pouch, 17977=Na?ve Worldbearer pouch, 17978=Keen worldbearer pouch, 17979=Brave worldbearer pouch, 17980=Brah worldbearer pouch, 32829=Light creature, 17981=Naabe worldbearer pouch, 17982=Wise worldbearer pouch, 17983=Adept worldbearer pouch, 17984=Sachem worldbearer pouch, 32832=Enlightenment scroll, 17985=Cub deathslinger pouch, 17986=Little deathslinger pouch, 17987=Na?ve deathslinger pouch, 17988=Keen deathslinger pouch, 17989=Brave deathslinger pouch, 17990=Brah deathslinger pouch, 17991=Naabe deathslinger pouch, 17992=Wise deathslinger pouch, 17993=Adept deathslinger pouch, 17994=Sachem deathslinger pouch, 14421=Clay Deposit scroll, 31328=Nightmare muspah pouch, 31332=Siphon Self scroll, 18027=Sundering Strike (Tier 1) scroll, 18028=Sundering Strike (Tier 2) scroll, 18029=Sundering Strike (Tier 3) scroll, 18030=Sundering Strike (Tier 4) scroll, 18031=Sundering Strike (Tier 5) scroll, 18032=Sundering Strike (Tier 6) scroll, 18033=Sundering Strike (Tier 7) scroll, 18034=Sundering Strike (Tier 8) scroll, 18035=Sundering Strike (Tier 9) scroll, 18036=Sundering Strike (Tier 10) scroll, 18037=Poisonous Shot (Tier 1) scroll, 18038=Poisonous Shot (Tier 2) scroll, 18039=Poisonous Shot (Tier 3) scroll, 18040=Poisonous Shot (Tier 4) scroll, 18041=Poisonous Shot (Tier 5) scroll, 18042=Poisonous Shot (Tier 6) scroll, 18043=Poisonous Shot (Tier 7) scroll, 18044=Poisonous Shot (Tier 8) scroll, 18045=Poisonous Shot (Tier 9) scroll, 18046=Poisonous Shot (Tier 10) scroll, 18047=Snaring Wave (Tier 1) scroll, 18048=Snaring Wave (Tier 2) scroll, 18049=Snaring Wave (Tier 3) scroll, 18050=Snaring Wave (Tier 4) scroll, 18051=Snaring Wave (Tier 5) scroll, 18052=Snaring Wave (Tier 6) scroll, 18053=Snaring Wave (Tier 7) scroll, 12421=Reserved, 12422=Herbcall scroll, 18054=Snaring Wave (Tier 8) scroll, 12423=Fruitfall scroll, 18055=Snaring Wave (Tier 9) scroll, 12424=Fish Rain scroll, 18056=Snaring Wave (Tier 10) scroll, 12425=Howl scroll, 18057=Aptitude (Tier 1) scroll, 12426=Thieving Fingers scroll, 18058=Aptitude (Tier 2) scroll, 12427=Abyssal Stealth scroll, 18059=Aptitude (Tier 3) scroll, 12428=Egg Spawn scroll, 18060=Aptitude (Tier 4) scroll, 12429=Multichop scroll, 18061=Aptitude (Tier 5) scroll, 12430=Cheese Feast scroll, 18062=Aptitude (Tier 6) scroll, 12431=Unburden scroll, 18063=Aptitude (Tier 7) scroll, 12432=Venom Shot scroll, 18064=Aptitude (Tier 8) scroll, 12433=Insane Ferocity scroll, 18065=Aptitude (Tier 9) scroll, 12434=Healing Aura scroll, 18066=Aptitude (Tier 10) scroll, 12435=Winter Storage scroll, 18067=Second Wind (Tier 1) scroll, 12436=Ophidian Incubation scroll, 18068=Second Wind (Tier 2) scroll, 12437=Magic Focus scroll, 18069=Second Wind (Tier 3) scroll, 12438=Swallow Whole scroll, 18070=Second Wind (Tier 4) scroll, 12439=Testudo scroll, 18071=Second Wind (Tier 5) scroll, 12440=Generate Compost scroll, 18072=Second Wind (Tier 6) scroll, 12441=Tireless Run scroll, 18073=Second Wind (Tier 7) scroll, 12442=Regrowth scroll, 18074=Second Wind (Tier 8) scroll, 12443=Call to Arms scroll, 18075=Second Wind (Tier 9) scroll, 12444=Blood Drain scroll, 18076=Second Wind (Tier 10) scroll, 12445=Dreadfowl Strike scroll, 18077=Glimmer of Light (Tier 1) scroll, 12446=Sandstorm scroll, 18078=Glimmer of Light (Tier 2) scroll, 12447=Vampyre Touch scroll, 18079=Glimmer of Light (Tier 3) scroll, 12448=Evil Flames scroll, 18080=Glimmer of Light (Tier 4) scroll, 12449=Crushing Claw scroll, 18081=Glimmer of Light (Tier 5) scroll, 12450=Mantis Strike scroll, 18082=Glimmer of Light (Tier 6) scroll, 12451=Arctic Blast scroll, 18083=Glimmer of Light (Tier 7) scroll, 12452=Toad Bark scroll, 18084=Glimmer of Light (Tier 8) scroll, 12453=Dissolve scroll, 19621=Fetch Casket scroll, 18085=Glimmer of Light (Tier 9) scroll, 19622=Meerkats pouch, 12454=Abyssal Drain scroll, 18086=Glimmer of Light (Tier 10) scroll, 12455=Doomsphere Device scroll, 12456=Spike Shot scroll, 12457=Acorn Missile scroll, 31401=Annihilate scroll, 12458=Petrifying Gaze scroll, 12459=Slime Spray scroll, 12460=Electric Lash scroll, 12461=Bronze Bull Rush scroll, 12462=Iron Bull Rush scroll, 12463=Steel Bull Rush scroll, 12464=Mithril Bull Rush scroll, 12465=Adamant Bull Rush scroll, 31410=Nihil pouch, 12466=Rune Bull Rush scroll, 12467=Poisonous Blast scroll, 31412=Nihil pouch, 12468=Dust Cloud scroll, 31414=Nihil pouch, 31416=Nihil pouch, 12007=Spirit terrorbird pouch, 12009=Granite crab pouch, 12011=Praying mantis pouch, 12013=Giant ent pouch, 12015=Spirit cobra pouch, 12017=Spirit dagannoth pouch, 12019=Thorny snail pouch, 12531=Ibis pouch, 12021=Beaver pouch, 12533=Stony Shell scroll, 12023=Karam. overlord pouch, 12025=Hydra pouch, 12027=Spirit jelly pouch, 12029=Bunyip pouch, 12031=War tortoise pouch, 12033=Fruit bat pouch, 12035=Abyssal parasite pouch, 12037=Abyssal lurker pouch, 12039=Unicorn stallion pouch, 12041=Magpie pouch, 12043=Dreadfowl pouch, 12045=Stranger plant pouch, 12047=Spirit wolf pouch, 12049=Desert wyrm pouch, 12051=Evil turnip pouch, 12053=Vampyre bat pouch, 12055=Spirit scorpion pouch, 12057=Arctic bear pouch, 12059=Spirit spider pouch, 12061=Bloated leech pouch, 14622=Rise From The Ashes scroll, 12063=Spirit kalphite pouch, 14623=Phoenix pouch, 12065=Honey badger pouch, 12067=Albino rat pouch, 12069=Granite lobster pouch, 12071=Macaw pouch, 12073=Bronze minotaur pouch, 12075=Iron minotaur pouch, 12077=Steel minotaur pouch, 12079=Mithril minotaur pouch, 12081=Adamant minotaur pouch, 12083=Rune minotaur pouch, 12085=Smoke devil pouch, 12087=Bull ant pouch, 12089=Wolpertinger pouch, 12091=Compost mound pouch, 12093=Pack yak pouch, 12095=Spirit cockatrice pouch, 12097=Spirit guthatrice pouch, 12099=Spirit saratrice pouch, 12101=Spirit zamatrice pouch, 12103=Spirit pengatrice pouch, 12105=Spirit coraxatrice pouch, 12107=Spirit vulatrice pouch, 34137=Brawler demon pouch, 12123=Barker toad pouch, 34139=Executioner demon pouch, 34141=Deacon demon pouch, 34146=Ring of fire scroll, 21444=Ghast pouch, 12776=Swamp titan pouch, 12778=Spirit mosquito pouch, 12780=Void spinner pouch, 12782=Forge regent pouch, 12784=Spirit larupia pouch, 12786=Geyser titan pouch, 12788=Lava titan pouch, 12790=Steel titan pouch, 12792=Obsidian golem pouch, 12794=Talon beast pouch, 12796=Abyssal titan pouch, 12798=Void torcher pouch};
	enumType.valueType = STRING;
	enumType.defaultstr = "Familiar";
	enumType.keyType = OBJ;
	enumType.size = 285;
	break;

case 1188:
	enumType.valueMap = {1=12425, 2=12445, 3=12428, 4=12459, 5=12533, 6=12838, 7=12460, 8=12432, 9=12839, 10=12430, 11=12446, 12=12440, 13=12834, 14=12447, 15=12433, 16=12429, 17=12443, 18=12443, 19=12443, 20=12443, 21=12461, 22=12431, 23=12422, 24=12448, 25=12458, 26=12458, 1050=19622, 27=12458, 1051=21444, 28=12458, 29=12458, 30=12458, 31=12458, 32=12462, 33=12829, 34=12426, 35=12444, 36=12441, 37=12454, 38=12453, 39=12463, 40=12424, 41=12836, 42=12840, 43=12835, 44=12455, 45=12468, 46=12427, 47=12436, 48=12467, 49=12464, 50=12452, 51=12439, 52=12438, 53=12423, 54=12830, 55=12451, 56=14622, 57=12826, 58=12449, 59=12450, 60=12841, 61=12465, 62=12831, 63=12457, 64=12824, 65=12824, 66=12824, 67=12442, 68=12456, 69=12837, 70=12832, 71=12466, 72=12434, 73=12833, 74=12437, 75=12827, 76=12828, 1100=18027, 77=12435, 1101=18037, 78=12825, 1102=18047, 79=31332, 1103=18057, 80=31401, 1104=18067, 81=31401, 1105=18077, 82=31401, 1106=18028, 83=31401, 1107=18038, 84=32832, 1108=18048, 85=34146, 1109=18058, 86=34146, 1110=18068, 87=34146, 1111=18078, 88=14622, 1112=18029, 1113=18039, 1114=18049, 1115=18059, 1116=18069, 1117=18079, 1118=18030, 1119=18040, 1120=18050, 1121=18060, 1122=18070, 1123=18080, 1124=18031, 1125=18041, 1126=18051, 1127=18061, 1128=18071, 1129=18081, 1130=18032, 1131=18042, 1132=18052, 1133=18062, 1134=18072, 1135=18082, 1136=18033, 1137=18043, 1138=18053, 1139=18063, 1140=18073, 1141=18083, 1142=18034, 1143=18044, 1144=18054, 1145=18064, 1146=18074, 1147=18084, 1148=18035, 1149=18045, 1150=18055, 1151=18065, 1152=18075, 1153=18085, 1154=18036, 1155=18046, 1156=18056, 1157=18066, 1158=18076, 1159=18086, 1000=14421, 1001=14421, 1002=14421, 1003=14421, 1004=14421};
	enumType.valueType = OBJ;
	enumType.defaultint = 526;
	enumType.keyType = INT;
	enumType.size = 155;
	break;

case 1189:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [argonite 2h sword, argonite battleaxe, argonite dagger, argonite longsword, argonite maul, argonite rapier, argonite spear, argonite warhammer, bathus 2h sword, bathus battleaxe, bathus dagger, bathus longsword, bathus maul, bathus rapier, bathus spear, bathus warhammer, fractite 2h sword, fractite battleaxe, fractite dagger, fractite longsword, fractite maul, fractite rapier, fractite spear, fractite warhammer, gorgonite 2h sword, gorgonite battleaxe, gorgonite dagger, gorgonite longsword, gorgonite maul, gorgonite rapier, gorgonite spear, gorgonite warhammer, katagon 2h sword, katagon battleaxe, katagon dagger, katagon longsword, katagon maul, katagon rapier, katagon spear, katagon warhammer, kratonite 2h sword, kratonite battleaxe, kratonite dagger, kratonite longsword, kratonite maul, kratonite rapier, kratonite spear, kratonite warhammer, marmaros 2h sword, marmaros battleaxe, marmaros dagger, marmaros longsword, marmaros maul, marmaros rapier, marmaros spear, marmaros warhammer, novite 2h sword, novite battleaxe, novite dagger, novite longsword, novite maul, novite rapier, novite spear, novite warhammer, promethium 2h sword, promethium battleaxe, promethium dagger, promethium longsword, promethium maul, promethium rapier, promethium spear, promethium warhammer, zephyrium 2h sword, zephyrium battleaxe, zephyrium dagger, zephyrium longsword, zephyrium maul, zephyrium rapier, zephyrium spear, zephyrium warhammer, blood spindle shortbow, bovistrangler shortbow, corpsethorn shortbow, entgallow shortbow, grave creeper shortbow, seeping elm shortbow, spinebeam shortbow, tangle gum shortbow, thigat shortbow, utuku shortbow, blood spindle longbow, bovistrangler longbow, corpsethorn longbow, entgallow longbow, grave creeper longbow, seeping elm longbow, spinebeam longbow, tangle gum longbow, thigat longbow, utuku longbow, air staff, empowered air staff, earth staff, empowered earth staff, water staff, empowered water staff, fire staff, empowered fire staff];
	enumType.size = 108;
	break;

case 1190:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [archleather body, archleather boots, archleather chaps, archleather coif, archleather vambraces, argonite boots, argonite chainbody, argonite full helm, argonite gauntlets, argonite kiteshield, argonite platebody, argonite platelegs, argonite plateskirt, bathus boots, bathus chainbody, bathus full helm, bathus gauntlets, bathus kiteshield, bathus platebody, bathus platelegs, bathus plateskirt, blightleaf gloves, blightleaf hood, blightleaf robe bottom, blightleaf robe top, blightleaf shoes, bryll gloves, bryll hood, bryll robe bottom, bryll robe top, bryll shoes, dromoleather body, dromoleather boots, dromoleather chaps, dromoleather coif, dromoleather vambraces, duskweed gloves, duskweed hood, duskweed robe bottom, duskweed robe top, duskweed shoes, ectogloves, ectohood, ectorobe bottom, ectorobe top, ectoshoes, fractite boots, fractite chainbody, fractite full helm, fractite gauntlets, fractite kiteshield, fractite platebody, fractite platelegs, fractite plateskirt, gallileather body, gallileather boots, gallileather chaps, gallileather coif, gallileather vambraces, gorgonite boots, gorgonite chainbody, gorgonite full helm, gorgonite gauntlets, gorgonite kiteshield, gorgonite platebody, gorgonite platelegs, gorgonite plateskirt, katagon boots, katagon chainbody, katagon full helm, katagon gauntlets, katagon kiteshield, katagon platebody, katagon platelegs, katagon plateskirt, kratonite boots, kratonite chainbody, kratonite full helm, kratonite gauntlets, kratonite kiteshield, kratonite platebody, kratonite platelegs, kratonite plateskirt, marmaros boots, marmaros chainbody, marmaros full helm, marmaros gauntlets, marmaros kiteshield, marmaros platebody, marmaros platelegs, marmaros plateskirt, megaleather body, megaleather boots, megaleather chaps, megaleather coif, megaleather vambraces, novite boots, novite chainbody, novite full helm, novite gauntlets, novite kiteshield, novite platebody, novite platelegs, novite plateskirt, paraleather body, paraleather boots, paraleather chaps, paraleather coif, paraleather vambraces, promethium boots, promethium chainbody, promethium full helm, promethium gauntlets, promethium kiteshield, promethium platebody, promethium platelegs, promethium plateskirt, protoleather body, protoleather boots, protoleather chaps, protoleather coif, protoleather vambraces, roseblood gloves, roseblood hood, roseblood robe bottom, roseblood robe top, roseblood shoes, runic gloves, runic hood, runic robe bottom, runic robe top, runic shoes, salve gloves, salve hood, salve robe bottom, salve robe top, salve shoes, soulbell gloves, soulbell hood, soulbell robe bottom, soulbell robe top, soulbell shoes, spinoleather body, spinoleather boots, spinoleather chaps, spinoleather coif, spinoleather vambraces, spiritbloom gloves, spiritbloom hood, spiritbloom robe bottom, spiritbloom robe top, spiritbloom shoes, stegoleather body, stegoleather boots, stegoleather chaps, stegoleather coif, stegoleather vambraces, subleather body, subleather boots, subleather chaps, subleather coif, subleather vambraces, tyrannoleather body, tyrannoleather boots, tyrannoleather chaps, tyrannoleather coif, tyrannoleather vambraces, wildercress gloves, wildercress hood, wildercress robe bottom, wildercress robe top, wildercress shoes, zephyrium boots, zephyrium chainbody, zephyrium full helm, zephyrium gauntlets, zephyrium kiteshield, zephyrium platebody, zephyrium platelegs, zephyrium plateskirt];
	enumType.size = 180;
	break;

case 1191:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [novite arrows, bathus arrows, marmaros arrows, kratonite arrows, fractite arrows, zephyrium arrows, argonite arrows, katagon arrows, gorgonite arrows, promethium arrows];
	enumType.size = 10;
	break;

case 1192:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [mind runes, chaos runes, death runes, blood runes, air runes, water runes, earth runes, fire runes, law runes, cosmic runes, nature runes, body runes, astral runes];
	enumType.size = 13;
	break;

case 1193:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [novite ore, bathus ore, marmaros ore, kratonite ore, fractite ore, zephyrium ore, argonite ore, katagon ore, gorgonite ore, promethium ore];
	enumType.size = 10;
	break;

case 1194:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [novite bars, bathus bars, marmaros bars, kratonite bars, fractite bars, zephyrium bars, argonite bars, katagon bars, gorgonite bars, promethium bars];
	enumType.size = 10;
	break;

case 1195:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [north, east, south, west];
	enumType.size = 4;
	break;

case 1196:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [small, medium, large];
	enumType.size = 3;
	break;

case 1197:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 3, 4, 5, 6];
	enumType.size = 6;
	break;

case 1198:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [blue corner key, blue crescent key, blue diamond key, blue pentagon key, blue rectangle key, blue shield key, blue triangle key, blue wedge key, gold corner key, gold crescent key, gold diamond key, gold pentagon key, gold rectangle key, gold shield key, gold triangle key, gold wedge key, green corner key, green crescent key, green diamond key, green pentagon key, green rectangle key, green shield key, green triangle key, green wedge key, orange corner key, orange crescent key, orange diamond key, orange pentagon key, orange rectangle key, orange shield key, orange triangle key, orange wedge key, purple corner key, purple crescent key, purple diamond key, purple pentagon key, purple rectangle key, purple shield key, purple triangle key, purple wedge key, silver corner key, silver crescent key, silver diamond key, silver pentagon key, silver rectangle key, silver shield key, silver triangle key, silver wedge key, crimson corner key, crimson crescent key, crimson diamond key, crimson pentagon key, crimson rectangle key, crimson shield key, crimson triangle key, crimson wedge key, yellow corner key, yellow crescent key, yellow diamond key, yellow pentagon key, yellow rectangle key, yellow shield key, yellow triangle key, yellow wedge key];
	enumType.size = 64;
	break;

case 1264:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
	enumType.size = 60;
	break;

case 1275:
	enumType.valueType = ANIMATION;
	enumType.defaultint = 8374;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4844, 6824, 8378, 8374, 5665, 8476, 6552, 7639, 8383, 4844, 8394, 8397, 8418, 8412, 8402, 8406, 8420, 8433, 8485, 8425, 8430, 8464, 8454, 8458, 8442, 8437, 8444, 8450, 8488, 8474, 8387, 8480, 9761, 8469, 9496, 9761, 13321, 9469, 10555, 9761, 8582, 12948];
	enumType.size = 42;
	break;

case 1276:
	enumType.valueType = ANIMATION;
	enumType.defaultint = 8373;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4846, 8, 8376, 8373, 5661, 8477, 6551, 7637, 8381, 8390, 8392, 8396, 8416, 8413, 8399, 8404, 8421, 8431, 8483, 8423, 8429, 8463, 8452, 8456, 8440, 8436, 8445, 8448, 8487, 8473, 8385, 8482, 9804, 8467, 9494, 9804, 13322, 9469, 10555, 9804, 8581, 12936];
	enumType.size = 42;
	break;

case 1277:
	enumType.valueMap = {1=12047, 2=12043, 3=12059, 4=12019, 5=12009, 6=12778, 7=12049, 8=12055, 9=12808, 10=12067, 11=12063, 12=12091, 13=12800, 14=12053, 15=12065, 16=12021, 17=12818, 18=12780, 19=12798, 20=12814, 21=12073, 22=12087, 23=12071, 24=12051, 25=12095, 26=12097, 1050=19622, 27=12099, 1051=21444, 28=12101, 29=12103, 30=12105, 31=12107, 32=12075, 33=12816, 34=12041, 35=12061, 36=12007, 37=12035, 38=12027, 39=12077, 40=12531, 41=12812, 42=12784, 43=12810, 44=12023, 45=12085, 46=12037, 47=12015, 48=12045, 49=12079, 50=12123, 51=12031, 52=12029, 53=12033, 54=12820, 55=12057, 56=14623, 57=12792, 58=12069, 59=12011, 60=12782, 61=12081, 62=12794, 63=12013, 64=12802, 65=12804, 66=12806, 67=12025, 68=12017, 69=12788, 70=12776, 71=12083, 72=12039, 73=12786, 74=12089, 75=12796, 76=12822, 1100=17935, 77=12093, 1101=17985, 78=12790, 1102=17945, 79=31328, 1103=17955, 80=31410, 1104=17975, 81=31412, 1105=17965, 82=31414, 1106=17936, 83=31416, 1107=17986, 84=32829, 1108=17946, 85=34137, 1109=17956, 86=34139, 1110=17976, 87=34141, 1111=17966, 88=34852, 1112=17937, 1113=17987, 1114=17947, 1115=17957, 1116=17977, 1117=17967, 1118=17938, 1119=17988, 1120=17948, 1121=17958, 1122=17978, 1123=17968, 1124=17939, 1125=17989, 1126=17949, 1127=17959, 1128=17979, 1129=17969, 1130=17940, 1131=17990, 1132=17950, 1133=17960, 1134=17980, 1135=17970, 1136=17941, 1137=17991, 1138=17951, 1139=17961, 1140=17981, 1141=17971, 1142=17942, 1143=17992, 1144=17952, 1145=17962, 1146=17982, 1147=17972, 1148=17943, 1149=17993, 1150=17953, 1151=17963, 1152=17983, 1153=17973, 1154=17944, 1155=17994, 1156=17954, 1157=17964, 1158=17984, 1159=17974, 1000=14422, 1001=14424, 1002=14426, 1003=14428, 1004=14430};
	enumType.valueType = OBJ;
	enumType.defaultint = 526;
	enumType.keyType = INT;
	enumType.size = 155;
	break;

case 1278:
	enumType.valueType = STRING;
	enumType.defaultstr = "Animal";
	enumType.keyType = INT;
	enumType.valueArray = [null, Spirit wolf, Dreadfowl, Desert wyrm, Spirit spider, Thorny snail, Granite crab, Spirit scorpion, Spirit Tz-Kih, Albino rat, Spirit kalphite, Compost mound, Ravenous locust, Vampyre bat, Honey badger, Beaver, Void ravager, Void spinner, Void shifter, Void torcher, Bronze minotaur, Spirit mosquito, Bull ant, Macaw, Evil turnip, Spirit cockatrice, Spirit guthatrice, Spirit saratrice, Spirit zamatrice, Spirit pengatrice, Spirit coraxatrice, Spirit vulatrice, Iron minotaur, null, Pyrelord, Magpie, Bloated leech, Giant chinchompa, Spirit terrorbird, Abyssal parasite, Spirit jelly, Steel minotaur, Ibis, Spirit kyatt, Spirit larupia, Spirit graahk, Karam. overlord, Smoke devil, Abyssal lurker, Spirit cobra, Stranger plant, Mithril minotaur, Barker toad, War tortoise, Bunyip, Fruit bat, Granite lobster, Arctic bear, Obsidian golem, Praying mantis, Forge regent, Adamant minotaur, Talon beast, Giant ent, Fire titan, Ice titan, Moss titan, Hydra, Spirit dagannoth, Lava titan, Swamp titan, Rune minotaur, Unicorn stallion, Geyser titan, Wolpertinger, Abyssal titan, Iron titan, Pack yak, Steel titan, Nightmare muspah, Blood nihil, Shadow nihil, Smoke nihil, Ice nihil, Light creature];
	enumType.size = 83;
	break;

case 1279:
	enumType.valueMap = {8240=Clay being(t1), 8242=Clay being(t2), 8244=Clay being(t3), 8246=Clay being(t4), 8248=Clay being(t5), 14912=Nightmare muspah, 6991=Ibis, 6992=Spirit jelly, 6994=Spirit kalphite, 20306=Light creature, 11106=Bloodrager (Tier 1), 11108= Bloodrager (Tier 2), 21092=Reborn phoenix, 11110=Bloodrager (Tier 3), 14950=Smoke nihil, 11112= Bloodrager (Tier 4), 11114=Bloodrager (Tier 5), 14954=Blood nihil, 11116=Bloodrager (Tier 6), 11118=Bloodrager (Tier 7), 14958=Shadow nihil, 11120=Bloodrager (Tier 8), 11122=Bloodrager (Tier 9), 14962=Ice nihil, 11124=Bloodrager (Tier 10), 11126=Stormbringer (Tier 1), 11640=Meerkats, 11128=Stormbringer (Tier 2), 11130=Stormbringer (Tier 3), 11132=Stormbringer (Tier 4), 11134=Stormbringer (Tier 5), 8575=Phoenix, 11136=Stormbringer (Tier 6), 11138=Stormbringer (Tier 7), 20611=Demon brawler, 11140=Stormbringer (Tier 8), 20613=Demon executioner, 11142=Stormbringer (Tier 9), 20615=Demon deacon, 11144=Stormbringer (Tier 10), 6794=Spirit terrorbird, 11146=Hoardstalker (Tier 1), 6796=Granite crab, 11148=Hoardstalker (Tier 2), 6798=Praying mantis, 11150=Hoardstalker (Tier 3), 6800=Giant ent, 11152=Hoardstalker (Tier 4), 6802=Spirit cobra, 11154=Hoardstalker (Tier 5), 6804=Spirit dagannoth, 11156=Hoardstalker (Tier 6), 6806=Thorny snail, 11158=Hoardstalker (Tier 7), 6808=Beaver, 11160=Hoardstalker (Tier 8), 6809=Karam. overlord, 11162=Hoardstalker (Tier 9), 6811=Hydra, 13979=Ghast, 11164=Hoardstalker (Tier 10), 6813=Bunyip, 11166=Skinweaver (Tier 1), 6815=War tortoise, 11168=Skinweaver (Tier 2), 6817=Fruit bat, 7329=Swamp titan, 6818=Abyssal parasite, 11170=Skinweaver (Tier 3), 7331=Spirit mosquito, 6820=Abyssal lurker, 11172=Skinweaver (Tier 4), 7333=Void spinner, 6822=Unicorn stallion, 11174=Skinweaver (Tier 5), 7335=Forge regent, 6824=Magpie, 11176=Skinweaver (Tier 6), 6825=Dreadfowl, 7337=Spirit larupia, 11178=Skinweaver (Tier 7), 6827=Stranger plant, 7339=Geyser titan, 11180=Skinweaver (Tier 8), 6829=Spirit wolf, 7341=Lava titan, 11182=Skinweaver (Tier 9), 6831=Desert wyrm, 7343=Steel titan, 11184=Skinweaver (Tier 10), 6833=Evil turnip, 7345=Obsidian golem, 11186=Worldbearer (Tier 1), 6835=Vampyre bat, 7347=Talon beast, 11188=Worldbearer (Tier 2), 6837=Spirit scorpion, 7349=Abyssal titan, 11190=Worldbearer (Tier 3), 7351=Void torcher, 6839=Arctic bear, 11192=Worldbearer (Tier 4), 6841=Spirit spider, 7353=Giant chinchompa, 11194=Worldbearer (Tier 5), 6843=Bloated leech, 7355=Fire titan, 11196=Worldbearer (Tier 6), 6845=Honey badger, 7357=Moss titan, 11198=Worldbearer (Tier 7), 6847=Albino rat, 7359=Ice titan, 11200=Worldbearer (Tier 8), 7361=Spirit Tz-Kih, 6849=Granite lobster, 11202=Worldbearer (Tier 9), 6851=Macaw, 7363=Spirit graahk, 11204=Worldbearer (Tier 10), 7365=Spirit kyatt, 6853=Bronze minotaur, 11206=Deathslinger (Tier 1), 7367=Void shifter, 6855=Iron minotaur, 11208=Deathslinger (Tier 2), 6857=Steel minotaur, 7370=Void ravager, 11210=Deathslinger (Tier 3), 6859=Mithril minotaur, 7372=Ravenous locust, 11212=Deathslinger (Tier 4), 6861=Adamant minotaur, 11214=Deathslinger (Tier 5), 6863=Rune minotaur, 7375=Iron titan, 11216=Deathslinger (Tier 6), 7377=Pyrelord, 6865=Smoke devil, 11218=Deathslinger (Tier 7), 6867=Bull ant, 11220=Deathslinger (Tier 8), 6869=Wolpertinger, 11222=Deathslinger (Tier 9), 6871=Compost mound, 11224=Deathslinger (Tier 10), 6873=Pack yak, 6875=Spirit cockatrice, 6877=Spirit guthatrice, 6879=Spirit saratrice, 6881=Spirit zamatrice, 6883=Spirit pengatrice, 6885=Spirit coraxatrice, 6887=Spirit vulatrice, 6889=Barker toad, 17399=Spirit war pig, 17401=Spirit pack pig, 17403=Spirit prayer pig, 14846=Baby troll};
	enumType.valueType = STRING;
	enumType.defaultstr = "Animal";
	enumType.keyType = NPC;
	enumType.size = 159;
	break;

case 1282:
	enumType.valueMap = {8240=93716510, 8242=93716510, 8244=93716510, 8246=93716510, 8248=93716510, 14912=93716510, 6991=93716510, 6992=93716510, 6994=93716510, 20306=93716510, 11106=93716510, 21092=93716510, 11108=93716510, 14950=93716510, 11110=93716510, 11112=93716510, 14954=93716510, 11114=93716510, 11116=93716510, 14958=93716510, 11118=93716510, 11120=93716510, 14962=93716510, 11122=93716510, 11124=93716510, 11126=93716510, 11640=93716510, 11128=93716510, 11130=93716510, 11132=93716510, 11134=93716510, 8575=93716510, 11136=93716510, 11138=93716510, 20611=93716510, 11140=93716510, 20613=93716510, 11142=93716510, 20615=93716510, 11144=93716510, 6794=93716510, 11146=93716510, 6796=93716510, 11148=93716510, 6798=93716510, 11150=93716510, 6800=93716510, 11152=93716510, 6802=93716510, 11154=93716510, 6804=93716510, 11156=93716510, 6806=93716510, 11158=93716510, 6808=93716510, 11160=93716510, 6809=93716510, 11162=93716510, 6811=93716510, 13979=93716510, 11164=93716510, 6813=93716510, 11166=93716510, 6815=93716510, 11168=93716510, 6817=93716510, 7329=93716510, 6818=93716510, 11170=93716510, 7331=93716510, 6820=93716510, 11172=93716510, 7333=93716510, 6822=93716510, 11174=93716510, 7335=93716510, 6824=93716510, 11176=93716510, 6825=93716510, 7337=93716510, 11178=93716510, 6827=93716510, 7339=93716510, 11180=93716510, 6829=93716510, 7341=93716510, 11182=93716510, 6831=93716510, 7343=93716510, 11184=93716510, 6833=93716510, 7345=93716510, 11186=93716510, 6835=93716510, 7347=93716510, 11188=93716510, 6837=93716510, 7349=93716510, 11190=93716510, 7351=93716510, 6839=93716510, 11192=93716510, 6841=93716510, 7353=93716510, 11194=93716510, 6843=93716510, 7355=93716510, 11196=93716510, 6845=93716510, 7357=93716510, 11198=93716510, 6847=93716510, 7359=93716510, 11200=93716510, 7361=93716510, 6849=93716510, 11202=93716510, 6851=93716510, 7363=93716510, 11204=93716510, 7365=93716510, 6853=93716510, 11206=93716510, 7367=93716510, 6855=93716510, 11208=93716510, 6857=93716510, 7370=93716510, 11210=93716510, 6859=93716510, 7372=93716510, 11212=93716510, 6861=93716510, 11214=93716510, 6863=93716510, 7375=93716510, 11216=93716510, 7377=93716510, 6865=93716510, 11218=93716510, 6867=93716510, 11220=93716510, 6869=93716510, 11222=93716510, 6871=93716510, 11224=93716510, 6873=93716510, 6875=93716510, 6877=93716510, 6879=93716510, 6881=93716510, 6883=93716510, 6885=93716510, 6887=93716510, 6889=93716510, 17399=93716510, 17401=93716510, 17403=93716510};
	enumType.valueType = INTERFACE;
	enumType.defaultint = 43384856;
	enumType.keyType = NPC;
	enumType.size = 158;
	break;

case 1283:
	enumType.valueMap = {12800=12834, 12033=12423, 12802=12824, 12035=12454, 12804=12824, 12037=12427, 12806=12824, 12039=12434, 12808=12839, 12041=12426, 12810=12835, 12043=12445, 12812=12836, 12045=12467, 12814=12443, 12047=12425, 17935=18027, 12816=12829, 17936=18028, 12049=12460, 17937=18029, 12818=12443, 17938=18030, 12051=12448, 17939=18031, 12820=12830, 17940=18032, 12053=12447, 17941=18033, 12822=12828, 17942=18034, 12055=12432, 17943=18035, 17944=18036, 12057=12451, 28697=28696, 17945=18047, 28698=28696, 17946=18048, 12059=12428, 28699=28696, 17947=18049, 17948=18050, 12061=12444, 17949=18051, 17950=18052, 12063=12446, 14623=14622, 17951=18053, 17952=18054, 12065=12433, 17953=18055, 17954=18056, 12067=12430, 17955=18057, 34852=14622, 17956=18058, 12069=12449, 17957=18059, 17958=18060, 12071=12422, 17959=18061, 17960=18062, 12073=12461, 17961=18063, 17962=18064, 12075=12462, 17963=18065, 17964=18066, 12077=12463, 17965=18077, 17966=18078, 12079=12464, 17967=18079, 17968=18080, 12081=12465, 17969=18081, 17970=18082, 12083=12466, 17971=18083, 17972=18084, 12085=12468, 17973=18085, 17974=18086, 12087=12431, 17975=18067, 17976=18068, 12089=12437, 17977=18069, 17978=18070, 12091=12440, 17979=18071, 17980=18072, 12093=12435, 32829=32832, 17981=18073, 17982=18074, 12095=12458, 17983=18075, 17984=18076, 12097=12458, 17985=18037, 17986=18038, 12099=12458, 17987=18039, 17988=18040, 12101=12458, 17989=18041, 17990=18042, 12103=12458, 17991=18043, 17992=18044, 12105=12458, 17993=18045, 17994=18046, 12107=12458, 14422=14421, 14424=14421, 34137=34146, 14426=14421, 12123=12452, 34139=34146, 14428=14421, 34141=34146, 14430=14421, 31328=31332, 19622=19621, 31410=31401, 31412=31401, 31414=31401, 31416=31401, 21444=21453, 12007=12441, 12776=12832, 12009=12533, 12778=12838, 12011=12450, 12780=12443, 12013=12457, 12782=12841, 12015=12436, 12784=12840, 12017=12456, 12786=12833, 12019=12459, 12531=12424, 12788=12837, 12021=12429, 12790=12825, 12023=12455, 12792=12826, 12025=12442, 12794=12831, 12027=12453, 12796=12827, 12029=12438, 12798=12443, 12031=12439};
	enumType.valueType = OBJ;
	enumType.defaultint = 526;
	enumType.keyType = OBJ;
	enumType.size = 158;
	break;

case 1311:
	enumType.valueMap = {3=27597};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 1312:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 14967, 14968, 19408, 19409, 19410];
	enumType.size = 5;
	break;

case 1313:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27602];
	enumType.size = 1;
	break;

case 1314:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27604];
	enumType.size = 1;
	break;

case 1315:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27606];
	enumType.size = 1;
	break;

case 1316:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27608];
	enumType.size = 1;
	break;

case 1318:
	enumType.valueType = MODEL;
	enumType.defaultint = 42744;
	enumType.keyType = INT;
	enumType.valueArray = [42744, 42747, 42746, 42748, 42751, 42749, 42750];
	enumType.size = 7;
	break;

case 1320:
	enumType.valueMap = {12800=7353, 12033=6817, 12802=7355, 12035=6818, 12804=7357, 12037=6820, 12806=7359, 12039=6822, 12808=7361, 12041=6824, 12810=7363, 12043=6825, 12812=7365, 12045=6827, 12814=7367, 12047=6829, 17935=11106, 12816=7377, 17936=11108, 12049=6831, 17937=11110, 12818=7370, 17938=11112, 12051=6833, 17939=11114, 12820=7372, 17940=11116, 12053=6835, 17941=11118, 12822=7375, 17942=11120, 12055=6837, 17943=11122, 17944=11124, 12057=6839, 28697=17399, 17945=11126, 28698=17401, 17946=11128, 12059=6841, 28699=17403, 17947=11130, 17948=11132, 12061=6843, 17949=11134, 17950=11136, 12063=6994, 14623=8575, 17951=11138, 17952=11140, 12065=6845, 17953=11142, 17954=11144, 12067=6847, 17955=11146, 34852=21092, 17956=11148, 12069=6849, 17957=11150, 17958=11152, 12071=6851, 17959=11154, 17960=11156, 12073=6853, 17961=11158, 17962=11160, 12075=6855, 17963=11162, 17964=11164, 12077=6857, 17965=11166, 17966=11168, 12079=6859, 17967=11170, 17968=11172, 12081=6861, 17969=11174, 17970=11176, 12083=6863, 17971=11178, 17972=11180, 12085=6865, 17973=11182, 17974=11184, 12087=6867, 17975=11186, 17976=11188, 12089=6869, 17977=11190, 17978=11192, 12091=6871, 17979=11194, 17980=11196, 12093=6873, 32829=20306, 17981=11198, 17982=11200, 12095=6875, 17983=11202, 17984=11204, 12097=6877, 17985=11206, 17986=11208, 12099=6879, 17987=11210, 17988=11212, 12101=6881, 17989=11214, 17990=11216, 12103=6883, 17991=11218, 17992=11220, 12105=6885, 17993=11222, 17994=11224, 12107=6887, 14422=8240, 14424=8242, 34137=20611, 14426=8244, 12123=6889, 34139=20613, 14428=8246, 34141=20615, 14430=8248, 31328=14912, 19622=11640, 31410=14954, 31412=14958, 31414=14950, 31416=14962, 21444=13979, 12007=6794, 12776=7329, 12009=6796, 12778=7331, 12011=6798, 12780=7333, 12013=6800, 12782=7335, 12015=6802, 12784=7337, 12017=6804, 12786=7339, 12019=6806, 12531=6991, 12788=7341, 12021=6808, 12790=7343, 12023=6809, 12792=7345, 12025=6811, 12794=7347, 12027=6992, 12796=7349, 12029=6813, 12798=7351, 12031=6815};
	enumType.valueType = NPC;
	enumType.defaultint = 6988;
	enumType.keyType = OBJ;
	enumType.size = 158;
	break;

case 1345:
	enumType.valueType = STRING;
	enumType.defaultstr = " ";
	enumType.keyType = INT;
	enumType.valueArray = [Adventure, Al Kharid, Alone, Ambient Jungle, Arabian, Arabian2, Arabian3, Arabique, Army of Darkness, Arrival, Attack I, Attack II, Attack III, Attack IV, Attack V, Attack VI, Attention, Autumn Voyage, Background, Ballad of Enchantment, Baroque, Beyond, Big Chords, Book of Spells, Camelot, Cave Background, Cavern, Chain of Command, Crystal Cave, Crystal Sword, Dangerous, Dark, Deep Wildy, Desert Voyage, Doorways, Dream, Dunjun, Egypt, Emotion, Emperor, Expanse, Expecting, Expedition, Faerie, Fanfare, Fanfare3, Fishing, Flute Salad, Forever, Gaol, Garden, Gnome King, Dwarf Theme, Gnome Village I, Gnome Village II, Goblin Village, Gnomeball, Greatness, Harmony, High Seas, Horizon, Iban, In the Manor, Inspiration, Intrepid, Jolly-R, Jungle Island, Jungly1, Jungly2, Jungly3, Knightly, Lasting, Legion, Darkness, Lightwalk, Long Ago, Long Way Home, Lullaby, Mage Arena, Magic Dance, Magical Journey, March, Medieval, Mellow, Miles Away, Miracle Dance, Monarch Waltz, Moody, Neverland, Newbie Melody, Nightfall, Oriental, Overture, Parade, Quest, Regal, Reggae, Reggae2, Riverside, Royale, Rune Essence, Sad Meadow, Scape Cave, Scape Original, Scape Sad, Scape Wild, Sea Shanty I, Sea Shanty II, Serenade, Serene, Shine, Soundscape, Spirit, Splendour, Spooky, Spooky Jungle, Starlight, Start, Busy Night, Talking Forest, The Desert, The Shadow, The Tower, Theme, Trawler, Trawler Minor, Tree Spirits, Tribal Background, Tribal, Tribal2, Trinity, Troubled, Underground, Unknown Land, Underground Pass, Upcoming, Venture, Vision, Voodoo Cult, Voyage, Wander, Waterfall, Wilderness I, Wilderness II, Wilderness III, Witching, Wonder, Wonderous, Workshop, Lonesome, Scape Main, Ground Scape, Scape Scared, Scape Santa, Land of Snow, Shaping Up, Exam Conditions, Roots and Flutes, Incarceration, Scape Soft, Shining, Yesteryear, Fanfare2, Tomorrow, Duel Arena, Ice Melody, Wild Isle, Harmony2, Venture2, Landlubber, Undercurrent, Nomad, Zealot, Cellar Song, Heart and Mind, Close Quarters, Escape, Grumpy, Chompy Hunt, Twilight, Morytania, Dead Quiet, Village, Bone Dance, Mausoleum, Forbidden, Cursed, Understanding, Principality, Tremble, Kingdom, Hermit, La Mort, Stagnant, Breeze, Stratosphere, Time Out, Natural, Grotto, Waterlogged, Artistry, Aztec, Elven Mist, Forest, Lost Soul, Meridian, Woodland, Overpass, Contest, Sojourn, Crystal Castle, Marzipan, Insect Queen, Mad Eadgar, Bandit Camp, Sunburn, Bone Dry, Competition, Spooky2, Everywhere, Exposed, Well of Voyage, Haunted Mine, Righteousness, Deep Down, Chamber, Miscellania, Etcetera, Shadowland, Lair, Deadlands, Rellekka, Saga, Borderland, Stranded, Legend, Frostbite, Warrior, Technology, Monkey Madness, Anywhere, Marooned, Island Life, Temple, Suspicious, Showdown, Find My Way, Castle Wars, Melodrama, Ready for Battle, Stillness, Lighthouse, Goblin Game, Out of the Deep, Hell's Bells, The Navigator, Wildwood, Barbarianism, Complication, Down to Earth, Courage, Superstition, Pirates of Peril, Dangerous Road, Romancing the Crone, Faithless, Tiptoe, The Terrible Tower, Masquerade, The Slayer, Body Parts, Fenkenstrain's Refrain, Monster Melee, Fruits de Mer, Barking Mad, Dynasty, Shipwrecked, Phasmatys, The Other Side, Settlement, Cave of Beasts, Dragontooth Island, Scarab, Sarcophagus, Down Below, 7th Realm, Karamja Jam, Pathways, Eagle Peak, Time to Mine, In Between, Claustrophobia, Far Away, Fight or Flight, Temple of Light, The Golem, Forgotten, Throne of the Demon, Dance of the Undead, Dangerous Way, City of the Dead, Hypnotized, Sphinx, Mirage, Cave of the Goblins, Bish Bash Bosh, Zogre Dance, Path of Peril, Wayward, Tale of Keldagrim, Land of the Dwarves, Tears of Guthix, Romper Chomper, The Rogues' Den, The Far Side, The Lost Melody, Evil Bob's Island, Into the Abyss, The Quiz Master, The Power of Tears,  , Pheasant Peasant, The Lost Tribe, Corporal Punishment, The Chosen, Have a Blast, Forgettable Melody, Right on Track, Over To Nardah, The Monsters Below, The Desolate Isle, Spirits of Elid, The Genie, Desert Heat, Fire and Brimstone, In the Pits, Frogland, Strange Place, Brew Hoo Hoo, TzHaar!, Wild Side, Dead Can Dance, The Cellar Dwellers, Jungle Troubles, Catch Me If You Can, Rat a Tat Tat, The Noble Rodent, Bubble and Squeak, Sarim's Vermin, Rat Hunt, Homescape, Aye Car Rum Ba, Blistering Barnacles, Distant Land, Fangs for the Memory, Pharaoh's Tomb, Land Down Under, Meddling Kids, Corridors of Power, Slither and Thither, In the Clink, Mudskipper Melody, Subterranea, Incantation, Grip of the Talon, Dagannoth Dawn, Xenophobe, Title Fight, Victory is Mine, Woe of the Wyvern, In the Brine, Diango's Little Helpers, Roll the Bones, Mind Over Matter, Golden Touch,  , The Enchanter, Scape Hunter, Making Waves, Cabin Fever, Last Stand, Lament, Poles Apart, Scarabaeoidea, Jungle Hunt, Home Sweet Home, Joy of the Hunt, Dogs of War, Food for Thought, Malady, Dance of Death, Wrath and Ruin, Storm Brew, The Mad Mole, Davy Jones's Locker, Chickened Out, Hot 'n' Bothered, Mastermindless, Too Many Cooks..., Chef Surprize, Null and Void, Pest Control, Tomb Raider, No Way Out, Method of Madness, Fear and Loathing, Funny Bunnies, Assault and Battery, The Depths, Distillery Hilarity, Trouble Brewing, Head to Head, Pinball Wizard, Beetle Juice, Back to Life, Labyrinth, Safety in Numbers, Everlasting Fire, Waking Dream, Dreamstate, The Lunar Isle, Isle of Everywhere, Way of the Enchanter, Warriors' Guild, Life's a Beach!, On the Wing, Little Cave of Horrors, The Mollusc Menace, The Galleon, H.A.M. Fisted, Lament of Meiyerditch, Sigmund's Showdown, The Last Shanty, Night of the Vampyre, We Are the Fairies, Dimension X, All's Fairy in Love and War, Major Miner, Jester Minute, Norse Code, Volcanic Vikings, Island of the Trolls, Pirates of Penance, Brimstail's Scales, My Arm's Journey, Slug a Bug Ball, Prime Time, Rising Damp, Where Eagles Lair, Ogre the Top, Work Work Work, Magic Magic Magic, Mutant Medley, Dorgeshuun City, Dorgeshuun Deep, Floating Free, Roc and Roll, High Spirits, Looking Back, Jungle Island XMAS, Sea Shanty XMAS, Jungle Bells, Garden of Summer, Garden of Spring, Garden of Winter, Garden of Autumn, Have an Ice Day, Zombiism, Creature Cruelty, Alternative Root, Espionage, Undead Dungeon, Slice of Station, Barb Wire, Impetuous, Easter Jig, Ham Attack, Slice of Silent Movie, Ham and Seek, Venomous, Mouse Trap, Fe Fi Fo Fum, School's Out, Inadequacy, Illusive, Everlasting, Untouchable, Down and Out, On the Up, Melzar's Maze, Zamorak Zoo, Strength of Saradomin, Bandos Battalion, Armadyl Alliance, Armageddon, Storeroom Shuffle, The Longramble Scramble, Waste Defaced, Knightmare, Lore and Order, Terrorbird Tussle, Altar Ego, Bolrie's Diary, Healin' Feelin', Animal Apogee, Temple of Tribes, Catacombs and Tombs, Zanik's Theme, Dusk in Yu'biusk, Grimly Fiendish, Tune from the Dune, Spa Bizarre, Copris Lunaris, Narnode's Theme, Tournament!, Clan Wars, Charmin' Farmin', Bounty Hunter Level 1, Bounty Hunter Level 2, Bounty Hunter Level 3, The Adventurer, Creepy, A New Menace,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , Brain Battle,  ,  , Surok's Theme,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , The Trade Parade, Jungle Community,  , Icy Trouble Ahead, Icy a Worried Gnome,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , Distant Land, Castle Wars, Pest Control, Competition, Poles Apart, Far Away, Hell's Bells, Bloodbath, The Route of All Evil, The Route of the Problem, The Wrong Path, The Columbarium, The Terrible Tunnels, The Terrible Caverns, Dillo-gence is Key, Arma Gonna Get You, TokTz-Ket-Ek-Mack, Jailbird, Bittersweet Bunny, Something Fishy, Under the Sand, Desert Smoke, A Pirate's Life for Me, Conspiracy: Part 1, Conspiracy: Part 2, Scape Summon, Guthix's Hunter, Waiting for the Hunt, Cool for Ali Cats, Second Vision, Undead Army, Zombie Invasion, The Ruins of Camdozaal, Dream Theatre, The Mentor, Slain to Waste, Ardougne Ago, Sarah's Lullaby, Shining Spirit, Troubled Spirit, Bane of Summer, The Vacant Abyss, Historic Memories, Stealing Creation, Circus, Dangerous Logic, Black of Knight, The Art of Hocus-Pocus, Magic and Mystery, The Sound of Guthix,  , Temple Desecrated, Command Centre, The Phoenix, Mobilising Armies, The Evil Within,  , The Dance of the Snow Queen, Cavernous Mythology, Winter Funfare, Waiting for Battle, Lair of Kang Admi, Frost Fight, Glorious Recallation..., Glorious Recallation..., Glorious Recallation..., The Adventurers Re-United!, The Plundered Tomb, Ancestral Wisdom, Nial's Widow, The Muspah's Tomb, Lamistard's Labyrinth, The Heist, Snack Attack,  , Soul Wars, The Waiting Game, Rest for the Weary, Trees Aren't Your Friends, The Throne of Bandos, Penguin Possible, Don't Panic Zanik, Demise of the Dorgeshuun, The Chosen Commander, The Pengmersible, Desert Island Bear, , , Ice Day for Penguins, Face Off, , , , , , , , , , , , , , , , , , , , , , , , , Zaros Stirs, The Horn of Chill, Godslayer, But We Can Fight, Lazy Wabbit, Hare-brained Machines, , , , , , , , , , , Eruption, I'm Counting on You, Kharidian Nights, Living Rock, Exhibit 'A', Fight of the Dwarves, , , Final Destination, Elven Seed, Scape Theme, Honkytonky Newbie Melody, Honkytonky Harmony, Trick or Treat?, Itsy Bitsy..., Poison Dreams, Honkytonky Medieval, Jaws of the Dagannoth, The Duke, The Fallen Hero, , Honkytonky Sea Shanty, Honkytonky Parade, Maiasaura, , , Root Canal, Desolate Ruins, Smorgasbord, Silent Knight, Ghost of Christmas Presents, , Battle of Souls, These Stones, A Familiar Feeling, Dead and Buried, The Pact, Freshwater, Saltwater, Stillwater, An Easter United, , Thieves' Guild I, Thieves' Guild II, Thieves' Guild III, Thieves' Guild IV, Body Talk, Love Story, Love Lost, Love and Hate, Love Bites,    , Castle Warz,    , Mindful, Void Knights' Theme, Lortnoc Tsep,    , Judge and Jury, Born to Do This,    ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , Glacialis I, Glacialis II, Glacialis III, Glacialis IV, Glacialis V, Glacialis VI, Glacialis VII, Glacialis VIII, Glacialis IX, Glacialis X, Astea Frostweb, To'Kash the Bloodchiller, Icy Bones, Luminescent Icefiend, Gluttonous Behemoth, Plane-freezer Lakhrahnaz,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , Desolo I, Desolo II, Desolo III, Desolo IV, Desolo V, Desolo VI, Desolo VII, Desolo VIII, Desolo IX, Desolo X, Bal'lak the Pummeller, Bulwark Beast, Hobgoblin Geomancer, Shadow-forger Ihlakhizan, Unholy Cursebearer, Divine Skinweaver,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , Adorno I, Adorno II, Adorno III, Adorno IV, Adorno V, Adorno VI, Adorno VII, Adorno VIII, Adorno IX, Adorno X, Har'Lakk the Riftsplitter, Lexicus Runewright, Night-gazer Khighorahk, Sagittare, Rammernaut, Stomp,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , , , , , , , , , , , , , , , , , Occulo I, Occulo II, Occulo III, Occulo IV, Occulo V, Occulo VI, Occulo VII, Occulo VIII, Occulo IX, Occulo X, Necrolord, Gravecreeper, Skeletal Trio, Yk'Lagor the Thunderous, Runed Behemoth, Flesh-spoiler Haasghenahk, Torqueo I, Torqueo II, Torqueo III, Torqueo IV, Torqueo V, Torqueo VI, Torqueo VII, Torqueo VIII, Torqueo IX, Torqueo X, Blink, Kal'Ger the Warmonger, Hope Devourer, Warped Gulega, Dreadnaut, World-gorger Shukarhazh, Out of Control, Chain Reaction, All for the Pest, Destiny, Unavoidable Conflict, Right of Conquest,  , Yk'Lagor the Thunderous, Gunnarsgrunn,  ,  , Halloween Party, Black Zabeth: LIVE!, Black Zabeth, In Security, Give it Your Pest Shot,  , The Void Stares Back, Precarious Void, Mystery Revealed, Who Are We to Judge?, Metalwork,  ,  ,  , Christmas Caverns, Seasonal Sports, The Task at Hand, Monkey See, Monkey Do, Monkey See, Monkey Do, Simian Scuffle,  ,  ,  , Monkey See, Monkey Do, Rocky Rescue, Go with the Flow, The Records Chamber, Corporate Callousness,  ,  , Colonel Grimsson, Only a King,  , Zaros Zeitgeist, Reunion, Cage Against the Machine, Logical Progression, The Factory Floor, Spring Song, Lament of the Snow Queen, Troll Invasion, Deadliest Catch, Three of a Kind, Deadliest Catch, Return of Lucien, Kethsi, Citadel Theme, Slug Poison, Darkmeyer, Arboretum, Upir Likhyi, Vanescula Fight,  , Natural Selection,  , Citadel I, Citadel II, Citadel III, Citadel IV, Citadel V , Citadel VI , Citadel VII , Citadel VIII , Citadel IX , Citadel X , Citadel XI , Citadel XII , Citadel XIII , Citadel XIV , Citadel XV , Citadel XVI ,  ,  , Architect of War,  ,  ,  ,  , DCII Mash-up (Infinity Mix),  , Valerio's Song, Troubadour Dance, Citharede Requiem, Traveller's Tale, Dominion Lobby I, Dominion Lobby II, Dominion Lobby III, Dominion Tower I, Dominion Tower II, Dominion Tower III, Dominion Tower IV, Dominion Tower V, Flash Factory, Chaotic Cookery, The Firemakers' Theme, Charred Remains,  , Taverley Frolics, Taverley Folk, Taverley Adventure, Taverley Dreams, Taverley Lament, Taverley Enchantment, Taverley Ambience, Tzhaar City I, Tzhaar Supremacy I, Ga'al, Tzhaar City II, Tzhaar City III, Tzhaar City IV, Tzhaar City V, Tzhaar Supremacy II, Tzhaar Supremacy III, Burthorpe Drummer, Burthorpe Dreams, Burthorpe Duty, Burthorpe Danger, Burthorpe Dilemma, Daemonheim Fremenniks, Daemonheim Entrance, Runesphere, Runespan, Runenergy, Runeiverse, Runetine, Runefear, Runefire, Runescar, Runewrath, Runewaste, Runearia, Runesque, Runeward, Runebreath, Runecalm, Belly of the Beast, Weaving, Getting on With Things, Long Road, Song from the Depths, Wending Through the Willows, Something is Wrong, Hunting Dragons, Awoken, Queen Black Dragon, Bounty, Hunted, I Can See You, Steady, Target, You Will Know Me, Supreme Champions, Lords and Ladies, Carnillean Rising, Tiny Adventure, Philipe's Bane, Beneath the House, Drains and Canals, What We Do, Cheese Roll, Penguin Prison, Sub Way, Super Furry Animal, Kharidian Bustle, Dune, Palace, Everything in its Right Palace, The Stalker, Skullery Jam, Stand-off, Agents of Keli, Rooftops, Above the City, Breaking In, Quicksand!, The Chozan One, Final Showdown, Evil, Draynor Market, Darkness in Misthalin, While We Sleep, Worlds, A Song for Khnum, Palace Above, Violinsanity, The Cave, Oasis, Sands of Time, Shantay Pass, Royal Rumble, The Harmony of the Runes, Blue Wizards, Inner Secret, Forgotten Orders, Bloody Foundation, Sea Folk, Sea Hear, Sea You Late Oar, Shanty Instrumental, Stick Your Oar In, Stick Your Ale In, King of the Desert, Coleoptera, Temple of Guthix I, Temple of Guthix II, Defenders of Guthix I, Defenders of Guthix II, Guthix's Warning, Bird of Prey, Boulder and Brighter, Invaders Must Die I, Invaders Must Die II, Invaders Must Die III, Chamber of Guthix, Memories of Guthix, End Song, Vorago, Always on my Rind, Underbelly, Glutton for Nourishment, Max Reidneer Variations, Saradominists, Saradomin Camp, Master of Light, Machines of War, Zamorak Camp, Remnants, Battlefield I, Battlefield II, Fragments of Guthix, Scape Slow, Garden Echo, Misthalin Mood I, Misthalin Mood II, Misthalin Mood III, Second Harmony, Wander Waltz, Creation, Scape Bold, Scape Dark, Scape Melancholy, The Town, Village Life, Baroque II, Village Dance, Village Fate, Medieval II, Elven Sunrise, Elven Sunlight, Elven Sunset, Waterfall II, Waterfall III, Infiltration, Fighting and Praying, Hidden Evils, Skirmish, Fern, Fighting for Light Part I, Fighting for Light Part II, Memories of Keldagrim, Red Axe Retribution, Chaos Theory, Rage of the Red Axe, Undying, Empyrean Citadel, Cliffhanger, Dying Light, Faces Obscura, Free Death, The Price is Wight, The Abbey, Requiem Rehearsal, There Has Been a Murder, Contemplation, Confrontation, Non Compos Mentis, Sanctum, The Elder Halls, Zarosian Reprise, Nightmare at the Cradle, Freneskae, Amor Fati, Monkey Misadventures, Yu'biusk, Bandosian Tournament, Webbed Feat, Book of A Thousand Songs, Undercity, Scape Bold Heroic, The Dark Lord, Death, Elven Elite, Elven Nightshade, Elven Holly, Elven Dhalia, Elven Daffodil, Elven Heart, Elven Voice, Elven Mother, Elven Blood, Baxtorian's Hollow, The Reaper's House, Elven Lily, Elven Bluebell, Elven Rose, Elven Snapegrass, Among Tirannwn Trees, Henceward!, The Twilight Twain, Elder Fury, The Heist II, Breaking and Entering, Undead Army II, Grave Parade, Soiled, Evil Spirit, Misadventure, Medi-Evil, Exorcism, Jadinko Jig, Aquarium, Tuska, Electric Storm, Seed of Hope, Lost Souls, Broken Land, Dragonkin Theme, True or False, Duplicity, Ballad of the Basilisk, Abomination, Gorgon-Zola, Tropical Breeze, Tropical Sneeze, Beastmaster Durzag, Yakamaru I, Goebie Theme, Yakamaru II];
	enumType.size = 1277;
	break;

case 1346:
	enumType.valueType = INT;
	enumType.defaultint = 255;
	enumType.keyType = INT;
	enumType.valueArray = [0, 8, 2, 10, 8, 0, 8, 0, 1, 0, 32, 32, 32, 32, 32, 32, 14, 3, 0, 18, 18, 0, 17, 0, 19, 0, 0, 0, 23, 1, 1, 1, 1, 8, 1, 3, 33, 8, 12, 14, 3, 0, 0, 23, 4, 0, 20, 0, 0, 0, 3, 12, 0, 12, 12, 0, 0, 3, 3, 15, 3, 0, 17, 0, 0, 15, 10, 10, 0, 10, 18, 19, 0, 1, 19, 17, 14, 19, 0, 17, 19, 40, 3, 20, 0, -1, 19, 40, 12, 4, 0, 0, 19, 0, -1, 1, 10, 10, 11, 0, -1, 40, 0, 0, 1, 0, 0, 82, 17, -1, 0, 0, 3, 0, 0, 10, 0, 0, 3, 19, 8, 0, 40, 0, 0, 0, 12, 10, 10, 10, 18, 0, 0, 0, 0, 18, 3, 50, 0, 20, 4, 20, 1, 0, 1, 0, 0, 18, 4, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 8, -1, 0, -1, 0, 0, 16, 16, 0, 0, 25, 25, 25, 0, 0, 0, -1, 0, 13, 0, 0, -1, 25, 11, -1, 0, 25, 0, 25, 0, 0, 0, 11, 31, 11, 11, 0, 13, 13, 11, 13, -1, 13, 8, 8, 0, 14, 5, 11, 31, 0, 0, -1, 0, 0, 0, 0, 25, 0, 25, 7, 7, 7, 30, 7, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 17, 0, 0, 0, 0, 0, 30, 7, 1, 0, -1, -1, 33, 0, 0, 0, 30, 1, 0, 25, 0, 0, 0, 25, 0, 0, 0, 8, 0, 0, 25, 7, 0, 0, 8, 8, 0, 21, 21, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 25, 0, 0, 8, 8, 0, 16, 0, 0, 0, 35, 35, 0, 16, -1, 0, 0, -1, 24, -1, 0, 255, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 8, 36, 36, -1, 0, 0, 36, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 30, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 9, 9, 9, 0, 0, 0, 0, 0, -1, 0, 0, 25, 0, 0, 25, 23, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 28, 0, 27, 27, 27, -1, -1, -1, -1, 22, 0, 0, 51, 0, -1, 0, 0, -1, 26, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 42, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 51, 51, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 42, 26, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 43, 43, 28, 0, 28, 43, 0, 0, 0, 0, 43, 43, 0, 0, 0, 0, 0, 0, 27, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 0, 0, 0, 0, 0, 0, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 0, 0, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 0, 0, 0, 0, 0, 0, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 7, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, null, null, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 0, 59, 0, 0, 0, 0, 0, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 0, 0, 58, 58, 58, 59, 0, 0, 0, 60, 60, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 63, 63, 63, 63, 63, 65, 64, 0, 65, 65, 65, 65, 64, 64, 66, 66, 66, 66, 66, 68, 68, 67, 67, 67, 67, 67, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 72, 71, 71, 71, 0, 71, 0, 72, 0, 0, 73, 73, 73, 73, 73, 73, 0, 74, 74, 0, 0, 75, 75, 0, 0, 0, 0, 0, 77, 79, 78, 78, 0, 0, 0, 0, 80, 80, 0, 0, 0, 0, 0, 76, 76, 76, 76, 77, 77, 77, 0, 79, 79, 79, 0, 50, 50, 81, 81, 0, 82, 82, 82, 82, 82, 0, 0, 0, 83, 83, 0, 0, 0, 0, 0, 84, 84, 84, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 86, 86, 0, 87, 87, 88, 88, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 3, 3, 18, 3, 3, 3, 89, 89, 89, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 89, 89, 89, 89, 0, 0, 0, 0, 0, 89, 89, 89, 89, 0, 0, 0, 0, 0, 0, 0, 90, 90, 90, 90, 90, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	enumType.size = 1275;
	break;

case 1347:
	enumType.valueType = STRING;
	enumType.defaultstr = "zzzzzzzzzzzzz";
	enumType.keyType = INT;
	enumType.valueArray = [adventure, al kharid, alone, ambient jungle, arabian, arabian2, arabian3, arabique, army of darkness, arrival, attack1, attack2, attack3, attack4, attack5, attack6, attention, autumn voyage, background, ballad of enchantment, baroque, beyond, big chords, book of spells, camelot, cave background, cavern, chain of command, crystal cave, crystal sword, dangerous, dark, deep wildy, desert voyage, doorways, dream, dunjun, egypt, emotion, emperor, expanse, expecting, expedition, faerie, fanfare, fanfare3, fishing, flute salad, forever, gaol, garden, gnome king, dwarf theme, gnome village, gnome village2, goblin village, gnomeball, greatness, harmony, high seas, horizon, iban, in the manor, inspiration, intrepid, jolly-r, jungle island, jungly1, jungly2, jungly3, knightly, lasting, legion, darkness, lightwalk, long ago, long way home, lullaby, mage arena, magic dance, magical journey, march, medieval, mellow, miles away, miracle dance, monarch waltz, moody, neverland, newbie melody, nightfall, oriental, overture, parade, quest, regal, reggae, reggae2, riverside, royale, rune essence, sad meadow, scape cave, Scape original, scape sad, scape wild, sea shanty, sea shanty2, serenade, serene, shine, soundscape, spirit, splendour, spooky, spooky jungle, starlight, start, busy night, talking forest, desert, shadow, tower, theme, trawler, trawler minor, tree spirits, tribal background, tribal, tribal2, trinity, troubled, underground, unknown land, Underground Pass, upcoming, venture, vision, voodoo cult, voyage, wander, waterfall, wilderness, wilderness2, wilderness3, witching, wonder, wonderous, workshop, lonesome, scape main, ground scape, scape scared, scape santa, land of snow, shaping up, exam conditions, roots and flutes, incarceration, scape soft, shining, yesteryear, fanfare2, tomorrow, duel arena, ice melody, wild isle, harmony2, venture2, landlubber, undercurrent, nomad, zealot, cellar song, heart and mind, close quarters, escape, grumpy, chompy hunt, twilight, morytania, dead quiet, village, bone dance, mausoleum, forbidden, cursed, understanding, principality, tremble, kingdom, hermit, la mort, stagnant, breeze, stratosphere, time out, natural, grotto, waterlogged, artistry, aztec, elven mist, forest, lost soul, meridian, woodland, overpass, contest, sojourn, crystal castle, marzipan, insect queen, mad eadgar, bandit camp, sunburn, bone dry, competition, spooky2, everywhere, exposed, well of voyage, haunted mine, righteousness, deep down, chamber, miscellania, etcetera, shadowland, lair, deadlands, rellekka, saga, borderland, stranded, legend, frostbite, warrior, technology, monkey madness, anywhere, marooned, island life, temple, suspicious, showdown, find my way, castle wars, melodrama, ready for battle, stillness, lighthouse, goblin game, out of the deep, hell's bells, navigator the, wildwood, barbarianism, complication, down to earth, courage, superstition, pirates of peril, dangerous road, romancing the crone, faithless, tiptoe, terrible tower, masquerade, slayer the, body parts, fenkenstrain's refrain, monster melee, fruits de mer, barking mad, dynasty, shipwrecked, phasmatys, other side, settlement, cave of beasts, dragontooth island, scarab, sarcophagus, down below, 7th realm, karamja jam, pathways, eagle peak, time to mine, in between, claustrophobia, far away, fight or flight, temple of light, golem the, forgotten, throne of the demon, dance of the undead, dangerous way, city of the dead, hypnotized, sphinx, mirage, cave of the goblins, bish bash bosh, zogre dance, path of peril, wayward, tale of keldagrim, land of the dwarves, tears of guthix, romper chomper, rogues' den, far side, lost melody, evil bob's island, into the abyss, quiz master, power of tears, zzzzzzzzzzzzz, pheasant peasant, lost tribe, corporal punishment, chosen, have a blast, forgettable melody, right on track, over to nardah, monsters below, desolate isle, spirits of elid, genie, desert heat, fire and brimstone, in the pits, frogland, strange place, brew hoo hoo, tzhaar, wild side, dead can dance, cellar dwellers, jungle troubles, catch me if you can, rat a tat tat, noble rodent, bubble and squeak, sarim's vermin, rat hunt, homescape, aye car rum ba, blistering barnacles, distant land, fangs for the memory, pharaoh's tomb, land down under, meddling kids, corridors of power, slither and thither, in the clink, mudskipper melody, subterranea, incantation, grip of the talon, dagannoth dawn, xenophobe, title fight, victory is mine, woe of the wyvern, in the brine, diango's little helpers, roll the bones, mind over matter, golden touch, zzzzzzzzzzzzz, enchanter, scape hunter, making waves, cabin fever, last stand, lament, poles apart, scarabaeoidea, jungle hunt, home sweet home, joy of the hunt, dogs of war, food for thought, malady, dance of death, wrath and ruin, storm brew, mad mole, davy jones's locker, chickened out, hot 'n' bothered, mastermindless, too many cooks..., chef surprize, null and void, pest control, tomb raider, no way out, method of madness, fear and loathing, funny bunnies, assault and battery, depths the, distillery hilarity, trouble brewing, head to head, pinball wizard, beetle juice, back to life, labyrinth, safety in numbers, everlasting fire, waking dream, dreamstate, lunar isle, isle of everywhere, way of the enchanter, warriors' guild, life's a beach!, on the wing, little cave of horrors, mollusc menace, galleon, h.a.m. fisted, lament of meiyerditch, sigmund's showdown, last shanty the, night of the vampyre, we are the fairies, dimension x, all's fairy in love and war, major miner, jester minute, norse code, volcanic vikings, island of the trolls, pirates of penance, brimstail's scales, my arm's journey, slug a bug ball, prime time, rising damp, where eagles lair, ogre the top, work work work, magic magic magic, mutant medley, dorgeshuun city, dorgeshuun deep, floating free, roc and roll, high spirits, looking back, jungle island xmas, sea shanty xmas, jungle bells, garden of summer, garden of spring, garden of winter, garden of autumn, have an ice day, zombiism, creature cruelty, alternative root, espionage, undead dungeon, slice of station, barb wire, impetuous, easter jig, h.a.m. attack, slice of silent movie, h.a.m. and seek, venomous, mouse trap, fe fi fo fum, school's out, inadequacy, illusive, everlasting, untouchable, down and out, on the up, melzar's maze, zamorak zoo, strength of saradomin, bandos battalion, armadyl alliance, armageddon, storeroom shuffle, longramble scramble, waste defaced, knightmare, lore and order, terrorbird tussle, altar ego, bolrie's diary, healin' feelin', animal apogee, temple of tribes, catacombs and tombs, zanik's theme, dusk in yu'biusk, grimly fiendish, tune from the dune, spa bizarre, copris lunaris, narnode's theme, tournament!, clan wars, charmin' farmin', bounty hunter level 1, bounty hunter level 2, bounty hunter level 3, adventurer, creepy, new menace, a, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, brain battle, zzzzzzzzzzzzz, zzzzzzzzzzzzz, surok's theme, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, trade parade, jungle community, zzzzzzzzzzzzz, icy trouble ahead, icy a worried gnome, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, bloodbath, route of all evil, route of the problem, wrong path, columbarium, terrible tunnels, terrible caverns, dillo-gence is key, arma gonna get you, toktz-ket-ek-mack, jailbird, bittersweet bunny, something fishy, under the sand, desert smoke, pirates life for me, conspiracy: part 1, conspiracy: part 2, scape summon, guthix's hunter, waiting for the hunt, cool for ali cats, second vision, undead army, zombie invasion, ruins of camdozaal, dream theatre, Mentor, The, slain to waste, Ardougne Ago, Sarah's Lullaby, Shining Spirit, Troubled Spirit, Bane of Summer, Vacant Abyss, The, Historic Memories, stealing creation, Circus, Dangerous Logic, Black of Knight, Art of Hocus-Pocus, The, Magic and Mystery, Sound of Guthix, The, zzzzzzzzzzzzz, Temple Desecrated, Command Centre, Phoenix, The, mobilizing armies, Evil Within, The, zzzzzzzzzzzzz, dance of the snow queen, cavernous mythology, winter funfare, Waiting for Battle, lair of kang admi, frost fight, brundt recalls the muster..., vargas recalls the final battle..., null, adventurers re-united!, plundered tomb, ancestral wisdom, nial's widow, Muspah's Tomb, The, lamistards labyrinth, heist, snack attack, mah3_Heist_Cutscene, Soul Wars, Waiting Game, The, Rest for the Weary, trees aren't your friends, throne of bandos, Penguin Possible, Dont Panic Zanik, demise of dorgeshun, Chosen Commander, The, Pengmersible, The, Desert Island Bear, Polar Ride, Captain's Orders, Ice Day for Penguins, Face Off, zzzzzzzzzzzzz, mah4_Khazards_Frozen_Fortress_1, mah4_Khazards_Frozen_Fortress_2, mah4_Khazards_Frozen_Fortress_3, mah4_Khazards_Frozen_Fortress_4, mah4_Khazards_Frozen_Fortress_5, mah4_Khazards_Frozen_Fortress_6, mah4_Khazards_Frozen_Fortress_7, mah4_Khazards_Frozen_Fortress_8, mah4_Khazards_Frozen_Fortress_9, mah4_Khazards_Frozen_Fortress_10, zzzzzzzzzzzzz, mah4_Khazards_Frozen_Fortress_interior_1, mah4_Khazards_Frozen_Fortress_interior_2, mah4_Khazards_Frozen_Fortress_interior_3, mah4_Khazards_Frozen_Fortress_interior_4, mah4_Khazards_Frozen_Fortress_interior_5, mah4_Khazards_Frozen_Fortress_interior_6, mah4_Khazards_Frozen_Fortress_interior_7, mah4_Khazards_Frozen_Fortress_interior_8, zzzzzzzzzzzzz, mah4_Khazards_Frozen_Fortress_interior_Thaw, mah4_Khazards_Frozen_Fortress_interior_Freeze, tomb stonesw, zaros stirs, horn of chill, godslayer, but we can fight, Lazy Wabbit, Hare-brained Machines, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, Eruption, I'm Counting On You, Kharidian Nights, Living Rock, Exhibit A, Fight of the Dwarves, zzzzzzzzzzzzz, zzzzzzzzzzzzz, final destination, Elven Seed, scape theme, Honkytonky Newbie Melody, Honkytonky Harmony, Trick or Treat?, Itsy Bitsy..., Poison Dreams, Honkytonky Medieval, Jaws of the Dagannoth, Duke, The, Fallen Hero The, zzzzzzzzzzzzz, Honkytonky Sea Shanty, Honkytonky Parade, Maiasaura, zzzzzzzzzzzzz, nomdas_treachery_cutscene, root canal, Desolate Souls, Smorgasbord, Silent Knight, Ghost of Christmas Presents, zzzzzzzzzzzzz, Battle of Souls, These Stones, Familiar Feeling, A, Dead and Buried, Pact, The, freshwater, saltwater, stillwater, Easter United, An, zzzzzzzzzzzzz, Thieves' Guild 1, Thieves' Guild 2, Thieves' Guild 3, Thieves' Guild 4, Body Talk, Love Story, Love Lost, Love and Hate, Love Bites, zzzzzzzzzzzzz, Castle Warz, zzzzzzzzzzzzz, Mindful, Void Knights' Theme, Lortnoc Tsep, zzzzzzzzzzzzz, Judge and Jury, Born To Do This, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, Glacialis 01, Glacialis 02, Glacialis 03, Glacialis 04, Glacialis 05, Glacialis 06, Glacialis 07, Glacialis 08, Glacialis 09, Glacialis 10, Astea Frostweb, To'Kash the Bloodchiller, Icy Bones, Luminescent Icefiend, Gluttonous Behemoth, Plane-freezer Lakhrahnaz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, Desolo 01, Desolo 02, Desolo 03, Desolo 04, Desolo 05, Desolo 06, Desolo 07, Desolo 08, Desolo 09, Desolo 10, Bal'lak the Pummeller, Bulwark Beast, Hobgoblin Geomancer, Shadow-forger Ihlakhizan, Unholy Cursebearer, Divine Skinweaver, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, Adorno 01, Adorno 02, Adorno 03, Adorno 04, Adorno 05, Adorno 06, Adorno 07, Adorno 08, Adorno 09, Adorno 10, Har'Lakk the Riftsplitter, Lexicus Runewright, Night-gazer Khighorahk, Sagittare, Rammernaut, Stomp, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, Occulo 01, Occulo 02, Occulo 03, Occulo 04, Occulo 05, Occulo 06, Occulo 07, Occulo 08, Occulo 09, Occulo 10, Necrolord, Gravecreeper, Skeletal Trio, Yk'Lagor the Thunderous, Runed Behemoth, Flesh-s Spoiler Haasghenahk, Torqueo 01, Torqueo 02, Torqueo 03, Torqueo 04, Torqueo 05, Torqueo 06, Torqueo 07, Torqueo 08, Torqueo 09, Torqueo 10, Blink, Kal'Ger the Warmonger, Hope Devourer, Warped Gulega, Dreadnaught, World-gorger Shukarhazh, Out of Control, Chain Reaction, All for the Pest, Destiny, Unavoidable Conflict, Right of Conquest, zzzzzzzzzzzzz, zzzzzzzzzzzzz, Gunnarsgrunn, zzzzzzzzzzzzz, zzzzzzzzzzzzz, Halloween Party, zzzzzzzzzzzzz, Black Zabeth, In Security, Give it your Pest Shot, zzzzzzzzzzzzz, Void Stares Back, The, Precarious Void, Mystery Revealed, Who are we to Judge?, Metalwork, null, null, zzzzzzzzzzzzz, Christmas Caverns, Seasonal Sports, Task at Hand, The, Monkey See, Monkey Do, zzzzzzzzzzzzz, Simian Scuffle, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, Monkey See, Monkey Do, Rocky Rescue, Go with the Flow, Records Chamber, The, Corporate Callousness, zzzzzzzzzzzzz, zzzzzzzzzzzzz, Colonel Grimsson, Only a King, zzzzzzzzzzzzz, Zaros Zeitgeist, Reunion, Cage Against the Machine, Logical Progression, Factory Floor, Spring Song, Lament of the Snow Queen, Troll Invasion, zzzzzzzzzzzzz, Three of a Kind, Deadliest Catch, Return of Lucien, Kethsi, Citadel, Slug Poison, Darkmeyer, Arboretum, Upir Likhyi, Vanescula Fight, zzzzzzzzzzzzz, Natural Selection, zzzzzzzzzzzzz, Citadel 01, Citadel 02, Citadel 03, Citadel 04, Citadel 05 , Citadel 06 , Citadel 07 , Citadel 08 , Citadel 09 , Citadel 10 , Citadel 11 , Citadel 12 , Citadel 13 , Citadel 14 , Citadel 15 , Citadel 16 , zzzzzzzzzzzzz, zzzzzzzzzzzzz, Architect of War, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, zzzzzzzzzzzzz, DCII Mash-up (Infinity Mix), zzzzzzzzzzzzz, Valerio's Song, Troubadour Dance, Citharede Requiem, Traveller's Tale, Dominion Lobby 1, Dominion Lobby 2, Dominion Lobby 3, Dominion Tower 1, Dominion Tower 2, Dominion Tower 3, Dominion Tower 4, Dominion Tower 5, Flash Factory, Chaotic Cookery, Firemakers' Theme, The, Charred Remains, zzzzzzzzzzzzz, Taverley Frolics, Taverley Folk, Taverley Adventure, Taverley Dreams, Taverley Lament, Taverley Enchantment, Taverley Ambience, Tzhaar City 1, Tzhaar Supremacy 1, Ga'al, Tzhaar City 2, Tzhaar City 3, Tzhaar City 4, Tzhaar City 5, Tzhaar Supremacy 2, Tzhaar Supremacy 3, Burthorpe Drummer, Burthorpe Dreams, Burthorpe Duty, Burthorpe Danger, Burthorpe Dilemma, Daemonheim Fremenniks, Daemonheim Entrance, Runesphere, Runespan, Runenergy, Runeiverse, Runetine, Runefear, Runefire, Runescar, Runewrath, Runewaste, Runearia, Runesque, Runeward, Runebreath, Runecalm, Belly of the Beast, Weaving, Geting on With Things, Long Road, Song from the Depths, Wending Through the Willows, Something is Wrong, Hunting Dragons, Awoken, Queen Black Dragon, Bounty, Hunted, I Can See You, Steady, Target, You Will Know Me, Supreme Champions, Lords and Ladies, Carnillean Rising, Tiny Adventure, Phillipe's Bane, Beneath the House, Drains and Canals, What We Do, Cheese Roll, Penguin Prison, Sub Way, Super Furry Animal, Kharidian Bustle, Dune, Palace, Everything in its Right Palace, The Stalker, Skullery Jam, Stand-off, Agents of Keli, Rooftops, Above the City, Breaking In, Quicksand!, The Chozan One, Final Showdown, Evil, Draynor Market, Darkness in Misthalin, While We Sleep, Worlds, Song for Khnum, Palace Above, Violinsanity, Cave, Oasis, Sands of Time, Shantay Pass, Royal Rumble, Harmony of the Runes, Blue Wizards, Inner Secret, Forgotten Orders, Bloody Foundation, Sea Folk, Sea Hear, Sea You Late Oar, Shanty Instrumental, Stick Your Oar In, Stick Your Ale In, King of the Desert, Coleoptera, Temple of Guthix I, Temple of Guthix II, Defenders of Guthix I, Defenders of Guthix II, Guthix's Warning, Bird of Prey, Boulder and Brighter, Invaders Must Die I, Invaders Must Die II, Invaders Must Die III, Chamber of Guthix, Memories of Guthix, End Song, Vorago, Always on my Rind, Underbelly, Glutton for Nourishment, Max Reidneer Variations, Saradominists, Saradomin Camp, Master of Light, Machines of War, Zamorak Camp, Remnants, Battlefield 1, Battlefield 2, Fragments of Guthix, Scape Slow, Garden Echo, Misthalin Mood 1, Misthalin Mood 2, Misthalin Mood 3, Second Harmony, Wander Waltz, Creation, Scape Bold, Scape Dark, Scape Melancholy, The Town, Village Life, Baroque 2, Village Dance, Village Fate, Medieval 2, Elven Sunrise, Elven Sunlight, Elven Sunset, Waterfall 2, Waterfall 3, Infiltration, Fighting and Praying, Hidden Evils, Skirmish, Fern, Fighting for Light Part 1, Fighting for Light Part 2, Memories of Keldagrim, Red Axe Retribution, Chaos Theory, Rage of the Red Axe, Undying, Empyrean Citadel, Cliffhanger, Dying Light, Faces Obscura, Free Death, Price is Wight, Abbey, Requiem Rehearsal, There Has Been a Murder, Contemplation, Confrontation, Non Compos Mentis, Sanctum, Elder Halls, Zarosian Reprise, Nightmare at the Cradle, Freneskae, Amor Fati, Monkey Misadventures, Yu'biusk, Bandosian Tournament, Webbed Feat, Book of A Thousand Songs, Undercity, Scape Bold Heroic, Dark Lord, Death, Elven Elite, Elven Nightshade, Elven Holly, Elven Dhalia, Elven Daffodil, Elven Heart, Elven Voice, Elven Mother, Elven Blood, Baxtorian's Hollow, Reaper's House, The, Elven Lily, Elven Bluebell, Elven Rose, Elven Snapegrass, Among Tirannwn Trees, Henceward!, Twilight Twain, The, Elder Fury, Heist II, The, Breaking and Entering, Undead Army II, Grave Parade, Soiled, Evil Spirit, Misadventure, Medi-Evil, Exorcism, Jadinko Jig, Aquarium, Tuska, Electric Storm, Seed of Hope, Lost Souls, Broken Land, Dragonkin Theme, True or False, Duplicity, Ballad of the Basilisk, Abomination, Gorgon-Zola, Tropical Breeze, Tropical Sneeze, Beastmaster Durzag, Yakamaru I, Goebie Theme, Yakamaru II];
	enumType.size = 1275;
	break;

case 1350:
	enumType.valueMap = {523=1, 1035=1, 524=1, 525=1, 526=1, 527=1, 528=1, 529=1, 530=1, 531=1, 532=1, 534=1, 535=1, 537=1, 538=1, 539=1, 540=1, 541=1, 542=1, 543=1, 544=1, 545=1, 546=1, 547=1, 548=1, 549=1, 550=1, 551=1, 552=1, 553=1, 554=1, 557=1, 560=1, 561=1, 562=1, 563=1, 564=1, 565=1, 566=1, 567=1, 568=1, 569=1, 570=1, 571=1, 572=1, 573=1, 574=1, 575=1, 576=1, 577=1, 578=1, 579=1, 580=1, 581=1, 582=1, 583=1, 614=1, 619=1, 627=1, 633=1, 640=1, 641=1, 642=1, 643=1, 646=1, 651=1, 663=1, 664=1, 667=1, 668=1, 669=1, 670=1, 671=1, 672=1, 673=1, 674=1, 675=1, 676=1, 677=1, 678=1, 679=1, 680=1, 681=1, 682=1, 683=1, 684=1, 685=1, 686=1, 687=1, 688=1, 689=1, 690=1, 697=1, 698=1, 699=1, 700=1, 701=1, 702=1, 703=1, 704=1, 705=1, 706=1, 713=1, 714=1, 727=1, 731=1, 732=1, 738=1, 748=1, 758=1, 760=1, 764=1, 767=1, 768=1, 769=1, 770=1, 771=1, 772=1, 773=1, 774=1, 775=1, 776=1, 777=1, 778=1, 779=1, 780=1, 781=1, 782=1, 783=1, 800=1, 801=1, 802=1, 803=1, 804=1, 805=1, 806=1, 807=1, 808=1, 809=1, 810=1, 811=1, 812=1, 813=1, 814=1, 815=1, 320=1, 832=1, 833=1, 834=1, 835=1, 836=1, 837=1, 838=1, 839=1, 840=1, 841=1, 842=1, 843=1, 844=1, 845=1, 846=1, 847=1, 864=1, 865=1, 866=1, 867=1, 868=1, 869=1, 870=1, 871=1, 872=1, 873=1, 874=1, 875=1, 876=1, 877=1, 878=1, 879=1, 880=1, 881=1, 882=1, 883=1, 884=1, 885=1, 886=1, 375=1, 887=1, 888=1, 889=1, 890=1, 891=1, 892=1, 893=1, 894=1, 895=1, 934=1, 935=1, 937=1, 938=1, 940=1, 944=1, 952=1, 956=1, 957=1, 959=1, 960=1, 961=1, 967=1, 968=1, 971=1, 980=1, 990=1, 991=1, 993=1, 1010=1, 1011=1, 1013=1, 1014=1, 1015=1, 1016=1, 1018=1};
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.size = 221;
	break;

case 1351:
	enumType.valueType = MUSIC;
	enumType.defaultint = 2167;
	enumType.keyType = INT;
	enumType.valueArray = [31149, 12428, 37641, 19576, 10066, 13495, 939, 17435, 33324, 8433, 32162, 33191, 32388, 35667, 34020, 36849, 31080, 37990, 34572, 36439, 33727, 33043, 32467, 38764, 36928, 34801, 20865, 12361, 31206, 37884, 36096, 34266, 33633, 27698, 36183, 35960, 32130, 27909, 37122, 23523, 32998, 32740, 12927, 11564, 38049, 31031, 36764, 5542, 19829, 37586, 35454, 31948, 26574, 34480, 37949, 33824, 36255, 36018, 36067, 3252, 35099, 4697, 33752, 26555, 4641, 2847, 17253, 28818, 2789, 8997, 37059, 38105, 33522, 36660, 37020, 32197, 31484, 36714, 38213, 35057, 37455, 36285, 39020, 34843, 18435, 22099, 34516, 32953, 36809, 33928, 3097, 16475, 34597, 20347, 15020, 33596, 12805, 29258, 5347, 10347, 36215, 35512, 32293, 24105, 34458, 24630, 7962, 34639, 35628, 1828, 3404, 38900, 39262, 8364, 1221, 3791, 8318, 33693, 36322, 37546, 30776, 7165, 35288, 34918, 4645, 10019, 36385, 23687, 31058, 13337, 32906, 9919, 23884, 9368, 5047, 35242, 33152, 27352, 7613, 33468, 39191, 37678, 32428, 31468, 34866, 15794, 25782, 33987, 33292, 21535, 3067, 4866, 13860, 2090, 19141, 30395, 34680, 2403, 20377, 28754, 14875, 37355, 14374, 15270, 35833, 13792, 26431, 22702, 12999, 2991, 21139, 18564, 11245, 8814, 4923, 23801, 26237, 32503, 13816, 31918, 1689, 32251, 11064, 8078, 9997, 13767, 5163, 31424, 21997, 1940, 2444, 2231, 6358, 10960, 4860, 18693, 12281, 10791, 6108, 21406, 5517, 30498, 4922, 5119, 6147, 4982, 5532, 4805, 26063, 28066, 5631, 22498, 34235, 5990, 29516, 12178, 29788, 9074, 21047, 5233, 5476, 5403, 29381, 7728, 6384, 21260, 31982, 5639, 7646, 11099, 6025, 15851, 15713, 18759, 24796, 11415, 8856, 28546, 6778, 3587, 11760, 14998, 4410, 19187, 13237, 29100, 784, 33378, 33800, 9173, 26400, 10386, 22167, 20251, 17324, 20049, 38658, 23353, 17229, 4610, 36501, 25880, 11653, 29127, 11035, 33553, 16805, 12465, 15297, 9174, 1913, 9751, 32556, 6556, 26736, 12257, 20174, 19866, 3337, 11311, 29442, 3331, 13707, 11770, 23318, 3170, 12458, 12605, 28225, 20523, 23031, 18605, 5305, 6499, 6602, 10515, 9780, 14672, 9701, 31310, 31878, 27301, 30655, 27103, 4456, 11010, 24951, 7351, 14535, 807, 1355, 35771, 14219, 23941, 17883, 4330, 13471, 21692, 16607, 38355, 2167, 26215, 4241, 1501, 22936, 13927, 3016, 14972, 7764, 23566, 6486, 26891, 11345, 10556, 23065, 1434, 23900, 30588, 7937, 17464, 26672, 28911, 10423, 25733, 15659, 27589, 3437, 29074, 12307, 21366, 4478, 27027, 29547, 17783, 9351, 29617, 14191, 4839, 25961, 26623, 11816, 30884, 30214, 11290, 11198, 30296, 16719, 12081, 29049, 12704, 17192, 28126, 13637, 22469, 22967, 2167, 15444, 16501, 25292, 7301, 24546, 359, 14948, 5417, 13979, 11965, 6302, 8007, 12021, 5014, 13374, 1302, 24170, 2256, 16330, 15468, 7484, 3212, 10288, 3986, 5705, 5786, 10843, 1173, 7378, 18974, 9396, 6716, 16182, 9589, 27124, 26140, 24610, 106, 10751, 20900, 17702, 34745, 11474, 25653, 20990, 16693, 19794, 33241, 31760, 36597, 2074, 4212, 13890, 22235, 14263, 14401, 31668, 27423, 4446, 29462, 10593, 10450, 12499, 2105, 15106, 22280, 6861, 20005, 16912, 7832, 26326, 7255, 30913, 5489, 28953, 18662, 1967, 4531, 23492, 28152, 10979, 10652, 3103, 1373, 8979, 24528, 10700, 11498, 16417, 31695, 5767, 31236, 28520, 32612, 28984, 30939, 25680, 13473, 18798, 23597, 3133, 11910, 29579, 15899, 16390, 26114, 8964, 28712, 8516, 15872, 31362, 10037, 13834, 35192, 8736, 8682, 8623, 8502, 8567, 28611, 9719, 9650, 29232, 4138, 17036, 12905, 692, 22189, 9240, 25919, 23177, 4046, 4609, 18858, 16769, 4750, 26032, 29014, 5695, 38318, 21314, 11448, 2575, 30983, 15978, 21584, 23646, 2167, 30997, 25981, 13640, 22394, 29138, 13663, 20869, 11628, 10464, 13945, 6067, 15037, 29166, 18706, 2210, 17406, 20386, 22574, 1627, 28718, 6789, 26562, 30471, 6272, 6318, 23270, 1692, 20558, 21849, 5912, 7173, 16574, 1739, 26001, 12866, 7418, 8397, 16358, 16120, 30776, 24630, 34235, 6025, 27698, 15199, 31058, 14948, 6556, 12704, 10960, 17253, 34480, 32162, 17783, 33378, 5786, 9074, 14948, 30432, 17324, 6880, 18998, 16208, 24219, 9198, 22771, 21441, 27270, 19903, 29655, 19624, 11690, 13442, 25013, 17609, 21713, 19237, 27151, 7130, 14724, 14774, 24008, 14631, 10683, 11503, 19690, 10888, 21490, 9147, 21227, 22371, 19943, 23237, 26963, 14130, 2710, 16306, 3841, 22729, 15942, 5098, 13270, 22902, 3946, 9048, 15323, 14709, 16272, 22338, 13693, 30685, 14009, 23143, 14839, 12972, 26475, 23696, 6076, 3688, 2215, 6263, 14746, 26483, 12402, 9378, 9456, 10495, 11869, 25116, 27948, 17852, 17361, 8162, 19601, 4204, 15168, 8847, 16450, 23625, 64, 23951, 22666, 9110, 13608, 2217, 13667, 16360, 20904, 15357, 20905, 20906, 20907, 20908, 2698, 2167, 13414, 18712, 9324, 14828, 15525, 10070, 18713, 18714, 2167, 11569, 7276, 21750, 2511, 26346, 4152, 4097, 27782, 17968, 13503, 20218, 6232, 11824, 11729, 213, 23530, 18442, 21504, 16424, 34174, 9682, 11698, 21072, 28283, 26712, 868, 25695, 17808, 6213, 6804, 20573, 11711, 7676, 20147, 2542, 20461, 16844, 9112, 2366, 4027, 6573, 16107, 18342, 322, 10897, 10228, 21184, 20334, 5068, 8127, 28032, 29493, 20962, 393, 2486, 2329, 11856, 22632, 31724, 13306, 2395, 4535, 21280, 4006, 2014, 21800, 28642, 20837, 1805, 10349, 28405, 36158, 29596, 26185, 30523, 2503, 2167, 21874, 12613, 28724, 21962, 10752, 9503, 2794, 7947, 4116, 14486, 27, 17553, 15910, 20691, 29664, 18625, 8482, 10048, 6420, 17952, 1521, 19089, 2612, 30826, 9034, 7570, 11985, 28568, 21094, 27236, 2657, 8387, 22835, 4102, 2986, 10475, 5023, 17161, 11876, 25299, 9489, 3555, 16132, 8694, 21727, 18533, 5729, 6396, 3815, 2244, 3803, 17973, 28796, 17207, 15808, 21738, 6328, 23760, 7274, 14825, 18368, 19645, 24498, 30852, 8469, 504, 31337, 11106, 9794, 16138, 15529, 31041, 20065, 14407, 8084, 5796, 18487, 21915, 71, 13028, 22388, 14490, 8051, 918, 25757, 23422, 11648, 10313, 13017, 25326, 22599, 26994, 30541, 11787, 10737, 24719, 28780, 20484, 10522, 30069, 4939, 14023, 30694, 2787, 27604, 22200, 969, 23436, 27731, 31101, 29278, 5608, 25703, 26041, 20058, 9808, 10011, 10039, 10068, 10095, 10121, 10146, 10172, 10200, 9833, 9859, 9886, 9910, 9935, 9962, 9985, 20210, 17723, 16045, 10813, 11519, 20744, 5462, 10676, 10853, 20708, 6718, 16891, 14912, 23997, 24884, 27210, 10177, 18279, 12630, 8179, 5654, 24814, 10833, 27624, 24123, 31445, 15764, 3463, 533, 1466, 204, 22539, 27060, 261, 30463, 24147, 12137, 11970, 31828, 4896, 13656, 28382, 9789, 9548, 4978, 161, 11936, 28458, 30270, 19766, 12753, 13569, 24664, 12665, null, null, 13408, 4577, 21340, 8293, 5443, 28482, 573, 1580, 13195, 235, 8570, 29718, 15562, 3041, 2188, 20267, 31393, 3489, 5596, 2511, 8977, 713, 4743, 32016, 8207, 1132, 30107, 9848, 17543, 23295, 21947, 9246, 12539, 4274, 1245, 16994, 18916, 6140, 10104, 23373, 14103, 26813, 14447, 28583, 5112, 5828, 1553, 4654, 8020, 21807, 10077, 3600, 22414, 11587, 21563, 6512, 4293, 30949, 825, 4274, 15498, 22010, 16348, 32098, 2723, 2476, 2167, 28346, 9264, 2745, 4159, 2627, 2518, 2548, 2589, 2707, 2750, 2663, 2566, 22803, 17267, 3363, 17935, 3907, 9003, 23653, 13737, 964, 17, 11272, 6736, 9619, 23841, 1192, 24053, 10422, 22435, 18398, 2594, 7013, 27308, 13774, 20108, 12575, 15814, 2874, 2820, 28096, 30347, 28881, 16241, 8257, 19504, 30053, 18249, 5380, 25620, 1877, 12222, 25266, 8613, 4080, 6990, 24854, 29746, 15079, 23208, 30620, 21657, 27720, 277, 3676, 5571, 8684, 418, 28857, 7801, 21018, 1272, 20079, 9320, 3159, 4813, 17105, 15782, 28192, 34758, 7877, 39114, 35002, 29346, 24070, 18935, 27754, 12057, 10159, 23856, 8419, 19052, 16024, 671, 3845, 9434, 3545, 6729, 27997, 2334, 6638, 31543, 16539, 1591, 2633, 24910, 1402, 2894, 12543, 19220, 6605, 2051, 1107, 25220, 30177, 21454, 29635, 10710, 25842, 15381, 5935, 27872, 26089, 7220, 24758, 2924, 19979, 23109, 1033, 11211, 14625, 14071, 2844, 24467, 12844, 3295, 33103, 36532, 32339, 37839, 33421, 38952, 38012, 38517, 38603, 38413, 38232, 125, 66, 36964, 38847, 38383, 38571, 38484, 37419, 37768, 35371, 35578, 32643, 35326, 36890, 34086, 35135, 32683, 38142, 35879, 34339, 34412, 32782, 33865, 37506, 34059, 674, 431, 520, 271, 602, 374, 323, 1102, 1198, 1010, 911, 1255, 9307, 1613, 1487, 1439, 1220, 1880, 15518, 5945, 3181, 2925, 3047, 3403, 3580, 3757, 3360, 3663, 3512, 3458, 3938, 4266, 4382, 5921, 6060, 6284, 6092, 6428, 6656, 6894, 7691, 6970, 7379, 7012, 7603, 7453, 7775, 7179, 7982, 7845, 8242, 8188, 8283, 8328, 8071, 8026, 8124, 8394, 9533, 9637, 11422, 11049, 11349, 11108, 10976, 10917, 11154, 11596, 11874, 12394, 12131, 12300, 12214, 12051, 13837, 13761, 13551, 13390, 13333, 12675, 12850, 13000, 14005, 14463, 14262, 14578];
	enumType.size = 1275;
	break;

case 1354:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 44630123;
	enumType.keyType = INT;
	enumType.valueArray = [44630032, 44630033, 44630034, 44630035, 44630036, 44630037, 44630038, 44630039, 44630040, 44630041];
	enumType.size = 10;
	break;

case 1355:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 44630123;
	enumType.keyType = INT;
	enumType.valueArray = [44630042, 44630043, 44630044, 44630045, 44630046, 44630047, 44630048, 44630049, 44630050, 44630051];
	enumType.size = 10;
	break;

case 1356:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 44630123;
	enumType.keyType = INT;
	enumType.valueArray = [44630062, 44630063, 44630064, 44630065, 44630066, 44630067, 44630068, 44630069, 44630070, 44630071];
	enumType.size = 10;
	break;

case 1357:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 44630123;
	enumType.keyType = INT;
	enumType.valueArray = [44630052, 44630053, 44630054, 44630055, 44630056, 44630057, 44630058, 44630059, 44630060, 44630061];
	enumType.size = 10;
	break;

case 1358:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 44630123;
	enumType.keyType = INT;
	enumType.valueArray = [44761109, 44761110, 44761111, 44761112, 44761113, 44761114, 44761115, 44761116, 44761117, 44761118];
	enumType.size = 10;
	break;

case 1359:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 44630124;
	enumType.keyType = INT;
	enumType.valueArray = [44630075, 44630080, 44630085, 44630090, 44630095, 44630100, 44630105, 44630110, 44630115, 44630120];
	enumType.size = 10;
	break;

case 1360:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 44630124;
	enumType.keyType = INT;
	enumType.valueArray = [44630076, 44630081, 44630086, 44630091, 44630096, 44630101, 44630106, 44630111, 44630116, 44630121];
	enumType.size = 10;
	break;

case 1361:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 44630124;
	enumType.keyType = INT;
	enumType.valueArray = [44630074, 44630079, 44630084, 44630089, 44630094, 44630099, 44630104, 44630109, 44630114, 44630119];
	enumType.size = 10;
	break;

case 1362:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 44630124;
	enumType.keyType = INT;
	enumType.valueArray = [44630073, 44630078, 44630083, 44630088, 44630093, 44630098, 44630103, 44630108, 44630113, 44630118];
	enumType.size = 10;
	break;

case 1365:
	enumType.valueMap = {14870=3800, 5280=1200, 5281=300, 5282=800, 5287=10000, 5288=20000, 5289=35000, 5290=35000, 5291=10, 5292=10, 5293=10, 5295=4000, 5298=1250, 5299=1000, 5300=16000, 5301=1000, 5302=7500, 5303=9000, 5304=45000, 5306=50, 5308=5, 5309=60, 5310=20, 5311=100, 5312=100, 5313=1800, 5314=12000, 5315=29000, 5317=55000, 6470=5000, 5320=150, 5321=680, 5322=10, 5323=165, 5324=10, 12625=50, 28259=3000, 28260=1000, 28261=1000, 5097=10, 28265=3000, 5098=10, 28266=3000, 5099=30, 5100=70, 5101=5, 5102=5, 5103=5, 5104=10, 5105=25, 5106=30, 21620=2500, 21621=15000};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 53;
	break;

case 1369:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 13, 13, 13, 13, 13, 13, 13, 13, 14, 15, 15, 16, 16, 16, 16, 17, 19, 20, 22, 25, 26, 28, 30, 32, 35, 37, 40, 45, 47, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95];
	enumType.size = 39;
	break;

case 1422:
	enumType.valueMap = {80=4, 50=6, 60=11, 45=10, 70=14};
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.size = 5;
	break;

case 1434:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Worn on head., Worn on back., Worn around neck., Wielded in right hand., Worn on body., Wielded in left hand., null, Worn on legs., null, Worn on hands., Worn on feet., null, Worn on finger., Carried in quiver.];
	enumType.size = 11;
	break;

case 1435:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Worn on head, requiring:, Worn on back, requiring:, Worn around neck, requiring:, Wielded in right hand, requiring:, Worn on body, requiring:, Wielded in left hand, requiring:, null, Worn on legs, requiring:, null, Worn on hands, requiring:, Worn on feet, requiring:, null, Worn on finger, requiring:, Carried in quiver, requiring:];
	enumType.size = 11;
	break;

case 1436:
	enumType.valueMap = {50=Requires at least a magic bow., 20=Requires at least a willow bow., 5=Requires at least an oak bow., 70=Requires a dark bow., 40=Requires at least a yew bow., 60=Requires at least an elder bow., 30=Requires at least a maple bow.};
	enumType.valueType = STRING;
	enumType.defaultstr = "Requires at least a standard bow.";
	enumType.keyType = INT;
	enumType.size = 7;
	break;

case 1437:
	enumType.valueMap = {50=Fires arrows up to rune., 20=Fires arrows up to mithril., 5=Fires arrows up to steel., 70=Fires arrows up to dark., 55=Fires arrows up to rune., 40=Fires arrows up to rune., 60=Fires arrows up to dragon., 30=Fires arrows up to adamant.};
	enumType.valueType = STRING;
	enumType.defaultstr = "Fires arrows up to iron.";
	enumType.keyType = INT;
	enumType.size = 8;
	break;

case 1438:
	enumType.valueMap = {16=Requires at least a blurite crossbow., 80=Requires at least a Chaotic crossbow., 33=Requires at least a black crossbow., 50=Requires a runite crossbow., 36=Requires at least a mithril crossbow., 26=Requires at least an iron crossbow., 90=Requires at least an Ascension crossbow., 61=Requires a runite crossbow., 46=Requires at least an adamantite crossbow., 31=Requires at least a steel crossbow.};
	enumType.valueType = STRING;
	enumType.defaultstr = "Requires at least a standard crossbow.";
	enumType.keyType = INT;
	enumType.size = 10;
	break;

case 1439:
	enumType.valueMap = {16=Fires up to blurite bolts., 33=Fires up to black bolts., 36=Fires up to mithril bolts., 70=Fires up to runite bolts., 26=Fires up to iron bolts., 90=Fires up to ascension bolts., 61=Fires up to runite bolts., 46=Fires up to adamantite bolts., 31=Fires up to steel bolts.};
	enumType.valueType = STRING;
	enumType.defaultstr = "Fires bolts";
	enumType.keyType = INT;
	enumType.size = 9;
	break;

case 1440:
	enumType.valueMap = {4740=Requires Karil's crossbow., 4934=Requires bolt racks., 4935=Requires bolt racks., 4936=Requires bolt racks., 4937=Requires bolt racks., 15241=Fires hand cannon shots., 4938=Requires bolt racks., 15243=Requires a hand cannon., 4827=Fires ogre arrows and brutal arrows., 10142=Requires a green salamander., 10143=Requires an orange salamander., 10144=Requires a red salamander., 10145=Requires a black salamander., 10146=Requires marrentill tar., 10147=Requires tarromin tar., 10148=Requires harralander tar., 10149=Requires guam tar., 25895=Requires bolt racks., 9705=Fires training arrows., 9706=Requires a training bow., 10156=Requires kebbit bolts or long kebbit bolts., 10158=Requires a hunter's crossbow., 10159=Requires a hunter's crossbow., 8880=Fires bone bolts and normal bolts up to iron., 2866=Requires an ogre bow or ogre composite bow., 8882=Requires a Dorgeshuun crossbow., 4734=Requires bolt racks., 25918=Requires bolt racks.};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = OBJ;
	enumType.size = 28;
	break;

case 1441:
	enumType.valueMap = {32665=300, 1381=20, 15262=125000, 19830=20, 12183=25};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 5;
	break;

case 1442:
	enumType.valueMap = {6529=one TokKul, 31337=one magic bean, 6306=one trade stick, 34338=one zemomark, 8951=one piece of eight};
	enumType.valueType = STRING;
	enumType.defaultstr = "one coin";
	enumType.keyType = OBJ;
	enumType.size = 5;
	break;

case 1446:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 1005, 1006, 1029];
	enumType.size = 30;
	break;

case 1453:
	enumType.valueType = OBJ;
	enumType.defaultint = 28904;
	enumType.keyType = INT;
	enumType.valueArray = [28904, 28905, 28906, 28907, 30550, 30523, 29923, 29896];
	enumType.size = 8;
	break;

case 1454:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 3, 4, 1, 2, 3, 4];
	enumType.size = 8;
	break;

case 1455:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	break;

case 1459:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Select factions, Start event, Spawn elites, Create Objective, End Event];
	enumType.size = 5;
	break;

case 1466:
	enumType.valueMap = {48103454=B L R, 48103455=B L S, 48103452=B L P, 48103453=B L Q, 48103450=B K R, 48103451=B K S, 48103448=B K P, 48103449=B K Q, 48103446=B J R, 48103447=B J S, 48103444=B J P, 48103445=B J Q, 48103442=B I R, 48103443=B I S, 48103440=B I P, 48103441=B I Q, 48103438=A L R, 48103439=A L S, 48103436=A L P, 48103437=A L Q, 48103434=A K R, 48103435=A K S, 48103432=A K P, 48103433=A K Q, 48103430=A J R, 48103431=A J S, 48103428=A J P, 48103429=A J Q, 48103426=A I R, 48103427=A I S, 48103424=A I P, 48103425=A I Q, 48103486=D L R, 48103487=D L S, 48103484=D L P, 48103485=D L Q, 48103482=D K R, 48103483=D K S, 48103480=D K P, 48103481=D K Q, 48103478=D J R, 48103479=D J S, 48103476=D J P, 48103477=D J Q, 48103474=D I R, 48103475=D I S, 48103472=D I P, 48103473=D I Q, 48103470=C L R, 48103471=C L S, 48103468=C L P, 48103469=C L Q, 48103466=C K R, 48103467=C K S, 48103464=C K P, 48103465=C K Q, 48103462=C J R, 48103463=C J S, 48103460=C J P, 48103461=C J Q, 48103458=C I R, 48103459=C I S, 48103456=C I P, 48103457=C I Q};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INTERFACE;
	enumType.size = 64;
	break;

case 1467:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [48103424, 48103427, 48103426, 48103425, 48103436, 48103439, 48103438, 48103437, 48103432, 48103435, 48103434, 48103433, 48103428, 48103431, 48103430, 48103429, 48103472, 48103475, 48103474, 48103473, 48103484, 48103487, 48103486, 48103485, 48103480, 48103483, 48103482, 48103481, 48103476, 48103479, 48103478, 48103477, 48103456, 48103459, 48103458, 48103457, 48103468, 48103471, 48103470, 48103469, 48103464, 48103467, 48103466, 48103465, 48103460, 48103463, 48103462, 48103461, 48103440, 48103443, 48103442, 48103441, 48103452, 48103455, 48103454, 48103453, 48103448, 48103451, 48103450, 48103449, 48103444, 48103447, 48103446, 48103445, 48103488, 48103489, 48103490];
	enumType.size = 67;
	break;

case 1468:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 85, 143, 219, 297, 375, 461, 555];
	enumType.size = 7;
	break;

case 1469:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 87, 145, 221, 299, 377, 463, 557];
	enumType.size = 7;
	break;

case 1471:
	enumType.valueType = INT;
	enumType.defaultint = 100;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99];
	enumType.size = 80;
	break;

case 1472:
	enumType.valueType = INT;
	enumType.defaultint = 20;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 60, 61, 62, 63, 64, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 73, 74, 75, 76, 77, 78, 78, 79, 80, 81, 82, 83, 84, 84, 85, 86, 87, 88, 89, 90, 90, 91, 92, 93, 94, 95, 96, 97, 97, 98, 99];
	enumType.size = 90;
	break;

case 1473:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 5, 10, 15, 25, 35, 50, 60, 70, 75, 85, 100, 126, 138];
	enumType.size = 14;
	break;

case 1474:
	enumType.valueMap = {1=0, 35=5, 100=11, 5=1, 70=8, 10=2, 138=13, 75=9, 15=3, 50=6, 85=10, 25=4, 60=7, 126=12};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 14;
	break;

case 1475:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 50, 75, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1655, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2595];
	enumType.size = 30;
	break;

case 1476:
	enumType.valueMap = {1600=18, 1=0, 900=11, 2500=28, 200=4, 1800=21, 75=2, 1100=13, 400=6, 2000=23, 1300=15, 600=8, 2200=25, 1500=17, 800=10, 2400=27, 2595=29, 100=3, 1700=20, 1000=12, 300=5, 1900=22, 1200=14, 50=1, 500=7, 2100=24, 1655=19, 1400=16, 700=9, 2300=26};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 30;
	break;

case 1477:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, You've just advanced an Attack level!, You've just advanced a Strength level!, You've just advanced a Ranged level!, You've just advanced a Magic level!, You've just advanced a Defence level!, You've just advanced a Constitution level!, You've just advanced a Prayer level!, You've just advanced an Agility level!, You've just advanced a Herblore level!, You've just advanced a Thieving level!, You've just advanced a Crafting level!, You've just advanced a Runecrafting level!, You've just advanced a Mining level!, You've just advanced a Smithing level!, You've just advanced a Fishing level!, You've just advanced a Cooking level!, You've just advanced a Firemaking level!, You've just advanced a Woodcutting level!, You've just advanced a Fletching level!, You've just advanced a Slayer level!, You've just advanced a Farming level!, You've just advanced a Construction level!, You've just advanced a Hunter level!, You've just advanced a Summoning level!, You've just advanced a Dungeoneering level!, You've just advanced a Divination level!];
	enumType.size = 26;
	break;

case 1478:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 3, 6, 8, 187, 7, 188, 167, 189, 190, 191, 192, 292, 194, 228, 229, 230, 231, 232, 193, 359, 360, 364, 363, 365, 3032, 9204];
	enumType.size = 26;
	break;

case 1479:
	enumType.valueType = unknownScriptVarType4701;
	enumType.defaultint = 6;
	enumType.keyType = INT;
	enumType.valueArray = [null, 13308, 13308, 13308, 13308, 13308, 21801, 23761, 25881, 19800, 22203, 7572, 22396, 22993, 19666, 2232, 16418, 18607, 940, 18255, 5635, 7687, 11796, 7087, 2265, 20525, 2024];
	enumType.size = 26;
	break;

case 1480:
	enumType.valueType = unknownScriptVarType4701;
	enumType.defaultint = 6;
	enumType.keyType = INT;
	enumType.valueArray = [null, 13308, 13308, 13308, 13308, 13308, 26066, 28295, 25698, 18371, 16918, 3588, 13060, 9795, 9352, 992, 16139, 6436, 7277, 13196, 5635, 24055, 11799, 22171, 4275, 23456, 2021];
	enumType.size = 26;
	break;

case 1481:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [The Knight's Sword, Another Slice of H.A.M., Between a Rock..., Big Chompy Bird Hunting, Cabin Fever, Creature of Fenkenstrain, Darkness of Hallowvale, Desert Treasure, Devious Minds, The Dig Site, Eadgar's Ruse, Eagles' Peak, Elemental Workshop I, Enakhra's Lament, Fairytale II - Cure a Queen, Family Crest, Fishing Contest, Forgettable Tale..., The Fremennik Trials, Garden of Tranquility, Ghosts Ahoy, The Giant Dwarf, The Golem, The Grand Tree, The Hand in the Sand, Haunted Mine, Heroes' Quest, Horror from the Deep, In Aid of the Myreque, Jungle Potion, Legends' Quest, Lost City, The Lost Tribe, Lunar Diplomacy, Making History, The Feud, Mountain Daughter, Mourning's Ends Part I, In Search of the Myreque, My Arm's Big Adventure, Nature Spirit, One Small Favour, Regicide, Royal Trouble, Scorpion Catcher, Sea Slug, Shades of Mort'ton, Shadow of the Storm, Shilo Village, Spirits of the Elid, Swan Song, Tai Bwo Wannai Trio, Tears of Guthix, Temple of Ikov, The Tourist Trap, Tribal Totem, Troll Romance, Troll Stronghold, Underground Pass, Watchtower, Holy Grail, The Eyes of Glouphrie, Death to the Dorgeshuun, Animal Magnetism, Elemental Workshop II, Enlightened Journey, The Great Brain Robbery, The Slug Menace, Cold War, The Fremennik Isles, Tower of Life, What Lies Below, Olaf's Quest, Grim Tales, King's Ransom, Path of Glouphrie, Back to my Roots, Land of the Goblins, Recipe for Disaster (Start), Recipe for Disaster (Pirate Pete), Recipe for Disaster (Lumbridge Sage), Recipe for Disaster (Evil Dave), Recipe for Disaster (Skrach Uglogwee), Recipe for Disaster (Awowogei), As a First Resort..., Kennith's Concerns, Catapult Construction, Dealing with Scabaras, Rum Deal, Legacy of Seergaze, TokTz-Ket-Dill, Perils of Ice Mountain, Smoking Kills, Rocking Out, Spirit of Summer, All Fired Up, Summer's End, Defender of Varrock, While Guthix Sleeps, In Pyre Need, The Chosen Commander, Glorious Memories, The Tale of the Muspah, Missing My Mummy, Hunt for Red Raktuber, The Curse of Arrav, Forgiveness of a Chaos Dwarf, Within the Light, The Temple at Senntisten, Blood Runs Deep, Nomad's Requiem, Rune Mechanics, Buyers and Cellars (From Tiny Acorns), Buyers and Cellars (Lost Her Marbles), Buyers and Cellars (A Guild of our Own), Fairytale III - Battle at Orks Rift, Elemental Workshop III, Quiet Before the Swarm, Love Story, A Void Dance, The Void Stares Back, King of the Dwarves, Prisoner of Glouphrie, Elemental Workshop IV, A Clockwork Syringe, Deadliest Catch, Salt in the Wound, The Branches of Darkmeyer, Ritual of the Mahjarrat, The Firemaker's Curse, The Elder Kiln, Carnillean Rising, Some Like It Cold, What's Mine is Yours, The Brink of Extinction, Fate of the Gods, The Mighty Fall, Plague's End];
	enumType.size = 138;
	break;

case 1482:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = SKILL;
	enumType.valueArray = [1, 5, 2, 6, 3, 7, 4, 16, 18, 19, 15, 17, 11, 14, 13, 9, 8, 10, 20, 21, 12, 23, 22, 24, 25, 26];
	enumType.size = 26;
	break;

case 1483:
	enumType.valueType = unknownScriptVarType4684;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 93, 112, 109, 105, 97, 93, 107, 92, 102, 114, 96, 108, 106, 111, 100, 95, 99, 115, 101, 110, 98, 94, 104, 113, 195, 231];
	enumType.size = 26;
	break;

case 1484:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [[ENTER], Press twice to open the Quick Chat interface, or once to select the currently highlighted option., [PAGE UP], Scroll up the menu., [PAGE DOWN], Scroll down the menu., [BACKSPACE], Move back to the previous menu level., [HOME], Return to the top level of the menu., [F9], Auto-respond to the last thing in your chat window., [F10], Open the Quick Chat menu and the context menu., [F12], Repeat the last thing you said., [ESC], Close the interface.];
	enumType.size = 18;
	break;

case 1485:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Welcome to Free Chat|You are free to chat to other users simply by typing. This is fun and you will make lots of new friends, however, it's important to be careful and stay safe. To do so:<br><br>-Never give out personal information such as your real name, age, phone number or school.<br><br>-Never share your password with anyone except your parents. Someone else might use your password to pretend to be you and do something that may get you into trouble.<br><br>-If someone says or does something that makes you uncomfortable, or if someone asks you for personal information, tell your parents and use the 'Report' button to report them to Jagex.];
	enumType.size = 1;
	break;

case 1486:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Quick Chat - Navigation Basics|The Quick Chat interface can be triggered either by hitting <col=ffff00>[ENTER]<col=ffffff> twice (once to enter chat, again to enter quickchat) or by <col=8080ff>left-clicking<col=ffffff> your user name at the bottom of the chat window.<br><br>You can navigate the menus by <col=8080ff>left-clicking<col=ffffff> on options, by pressing one of shortcut keys listed next to them or by scrolling with <col=ffff00>[PAGE UP]<col=ffffff> and <col=ffff00>[PAGE DOWN]<col=ffffff> and selecting with <col=ffff00>[ENTER]<col=ffffff>.<br><br>Choosing something with a <img=2> next to it will open up another set of options in the next column. Anything without a <img=2> is what you will actually say., Quick Chat - Saying Things|Usually, selecting a phrase will automatically make your character say it, however, you will find that some of the things that you can say have a '...' in them. This indicates that you must choose something to complete this phrase. Selecting one of these phrases will either bring up a list of appropriate choices or will prompt you to type in the name of the object you want to talk about.<br><br>If you wish to avoid scrolling down a large list simply press the first letter of the option you are looking for and it will jump to the first item on the list beginning with that letter.<br><br>You can repeat the last thing you have said using Quick Chat at any time by pressing <col=ffff00>[F12]<col=ffffff>., Quick Chat - Further Navigation|You may return to a previous section of the menu by either <col=8080ff>left-clicking<col=ffffff> on it, selecting it on the trail at the top of the interface or by pressing <col=ffff00>[BACK SPACE]<col=ffffff> to move back one menu layer or <col=ffff00>[HOME]<col=ffffff> to return to the beginning., Quick Chat - Context Sensitive Chat|The last item on the Quick Chat menu (always the <col=ffff00>[X]<col=ffffff> shortcut) is context sensitive, This means that it will change depending on what you are doing. If you are playing a minigame, it will offer chat relevant to the minigame you are playing; otherwise, it will refer to the skill you most recently gained experience in.<br><br>You can jump to the context sensitive menu at any time by hitting <col=ffff00>[F10]<col=ffffff>, even if the Quick Chat interface is not currently open., Quick Chat - Auto-responses|If you see a message in your chat log with a <img=3> next to it, this means that you can auto-respond to it. <col=8080ff>Right-clicking<col=ffffff> one of these messages and selecting auto-respond will bring up a list of suitable responses from which to choose. This will save you lots of time!<br><br>Hitting <col=ffff00>[F9]<col=ffffff> will bring up a list of auto-responses to the last thing in your chat log., Quick Chat - Clan Chat and Friends Chat|You can still send private messages and use the Friends Chat and Clan Chat channels for Quick Chat messages.<br><br>To send a private message to a friend, simply <col=ffff00>right-click<col=ffffff> on their name in your Friends list, and select <col=ffff00>'Quick Message'<col=ffffff> from the menu.<br><br>To talk in a Friends Chat or Clan Chat channel, you can <col=ffff00>right-click<col=ffffff> your own name in the chatbox, then select <col=ffff00>'Friends Quick Chat'<col=ffffff> or <col=ffff00>'Clan Quick Chat'<col=ffffff>. Alternatively, you can hit <col=ffff00>[ENTER]<col=ffffff> then <col=ffff00>[/]<col=ffffff> before pressing <col=ffff00>[ENTER]<col=ffffff> again to call up the menu., Quick Chat - Ready To Go|You are now ready to get started with the quick-chat system. You can access a  reference for all the shortcut keys or view this guide again at any time by <col=8080ff>left-clicking<col=ffffff> the ? icon in the top left hand corner of the quick-chat interface.];
	enumType.size = 7;
	break;

case 1487:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Teleport, Ship, Fairy rings, Spirit tree, Gnome glider, Magic carpet, Agility shortcut];
	enumType.size = 7;
	break;

case 1488:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Bank, Altar, General store, Magic shop, Summoning Obelisk];
	enumType.size = 5;
	break;

case 1489:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Arcanists, Chess, Shattered Plans, TetraLink];
	enumType.size = 4;
	break;

case 1490:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Asgarnian Ale barrel, beer barrel, carved oak bench, carved oak dining table, carved oak magic wardrobe, carved teak bench, carved teak magic wardrobe, carved teak table, Chef's Delight barrel, cider barrel, crude wooden chair, Dragon Bitter barrel, fancy teak dresser, four-poster bed, gilded four-poster bed, gilded bench, gilded cape rack, gilded clock, gilded dresser, gilded magic wardrobe, gilded wardrobe, Greenman's Ale barrel, large oak bed, large teak bed, magical cape rack, mahogany armchair, mahogany armour case, mahogany bench, mahogany bookcase, mahogany cape rack, mahogany costume box, mahogany dresser, mahogany magic wardrobe, mahogany table, mahogany toy box, mahogany treasure chest, mahogany wardrobe, marble cape rack, marble magic wardrobe, oak armchair, oak armour case, oak bed, oak bench, oak bookcase, oak cape rack, oak chair, oak clock, oak costume box, oak dining table, oak drawers, oak dresser, oak kitchen table, oak magic wardrobe, oak shaving stand, oak toy box, oak treasure chest, oak wardrobe, opulent table, rocking chair, shaving stand, shoe box, teak armchair, teak armour case, teak bed, teak cape rack, teak clock, teak costume box, teak dining bench, teak drawers, teak dresser, teak kitchen table, teak magic wardrobe, teak table, teak toy box, teak treasure chest, teak wardrobe, wooden bed, wooden bench, wooden bookcase, wooden chair, wooden dining table, wooden kitchen table];
	enumType.size = 82;
	break;

case 1491:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [anchovies, bass, caskets, cave eel, cod, frog spawn, herring, karambwan, karambwanji, lava eel, leaping salmon, leaping sturgeon, leaping trout, lobster, mackerel, monkfish, oysters, pike, rainbow fish, salmon, sardine, seaweed, shark, shrimp, slimy eel, swordfish, trout, tuna, sea turtle, manta ray, crayfish, cavefish, rocktail];
	enumType.size = 33;
	break;

case 1492:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [admiral pie, anchovies, anchovy pizza, apple pie, bass, bear meat, roasted beast meat, bird meat, bread, cake, cave eel, chicken, chompy, cod, crab meat, fat snail, fish pie, fishcake, garden pie, cooked rabbit, roasted rabbit, herring, jubbly, karambwan, karambwanji, lava eel, lean snail, leaping salmon, leaping sturgeon, leaping trout, lobster, mackerel, manta ray, meat pie, meat pizza, meat, monkfish, mud pie, pawya, pike, pineapple pizza, plain pizza, potato, rabbit, rainbow fish, rat meat, redberry pie, salmon, sardine, sea turtle, seaweed, shark, shrimp, slimy eel, spider on a stick, summer pie, sweetcorn, swordfish, thin snail, trout, tuna, ugthanki meat, vegball, wild pie, chocolate cake, baked potato with butter, scrambled egg, egg and tomato, baked potato, oomlie wrap, egg and tomato potato, mushroom and onion, ugthanki kebab, pitta bread, curry, mushroom and onion potato, tuna and corn, tuna and corn potato, cooked pawya, spicy sauce, chilli con carne, spicy meat, chilli potato, fried onions, fried mushrooms, toad crunchies, spice crunchies, worm crunchies, choc chip crunchies, fruit batta, toad batta, worm batta, vegetable batta, cheese and tomato batta, worm hole, vegetable ball, tangled toads' legs, chocolate bomb, stew, crayfish, cavefish, rocktail];
	enumType.size = 102;
	break;

case 1493:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [air battlestaves, baskets, beer glasses, bowstrings, black dragonhide bodies, black dragonhide chaps, black dragonhide vambraces, blue dragonhide bodies, blue dragonhide chaps, blue dragonhide vambraces, bowls, bullseye lenses, candle lanterns, cloth, coifs, crossbow strings, diamond amulets, diamond bracelets, diamond necklaces, diamond rings, Dorgeshuun light orbs, dragonstone amulets, dragonstone bracelets, dragonstone necklaces, dragonstone rings, earth battlestaves, emerald amulets, emerald bracelets, emerald necklaces, emerald rings, feather headdresses, fire battlestaves, fishbowls, gold amulets, gold bracelets, gold necklaces, gold rings, green dragonhide bodies, green dragonhide chaps, green dragonhide vambraces, hard leather bodies, holy symbols, leather bodies, leather boots, leather chaps, leather cowls, leather gloves, leather vambraces, magic string, oil lamps, oil lanterns, onyx amulets, onyx bracelets, onyx necklaces, onyx rings, pie dishes, plant pots, pot lids, pots, red dragonhide bodies, red dragonhide chaps, red dragonhide vambraces, rope, ruby amulets, ruby bracelets, ruby necklaces, ruby rings, sacks, sapphire amulets, sapphire bracelets, sapphire necklaces, sapphire rings, silver sickles, snakeskin bandannas, snakeskin bodies, snakeskin boots, snakeskin chaps, snakeskin vambraces, studded bodies, studded leather chaps, tiaras, unpowered orbs, vials, water battlestaves, balls of wool, unholy symbols, lightning conductors, sapphires, emeralds, rubies, diamonds, dragonstones, onyx, green spiked vambraces, blue spiked vambraces, red spiked vambraces, black spiked vambraces, yak-hide legs, yak-hide bodies, spiked vambraces, glass orbs, limestone bricks, silver bolts, snelms, fremennik round shields];
	enumType.size = 105;
	break;

case 1494:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [apples, Asgarnian hops, avantoe, bananas, barley, deadly nightshade, bittercap mushrooms, cabbages, cacti, cadantine, cadavaberries, calquats, coconuts, curry leaves, dwarf weed, dwellberries, evil turnips, goutweed, guam, hammerstone hops, harralander, irit, jangerberries, jute fibre, Krandorian hops, kwuarm, lantadyme, limpwurt roots, magic trees, maple trees, marigolds, marrentill, nasturtium, oak trees, onions, oranges, papayas, pineapples, poison ivy berries, potatoes, ranarr, redberries, rosemary, snapdragon, spirit trees, spirit weed, strawberries, sweetcorn, tarromin, toadflax, tomatoes, torstol, watermelons, whiteberries, wildblood hops, willow trees, woad leaves, Yanillian hops, yew trees, jade vine, vine blossoms, lergberries, kalferberries, erzille, argway, ugune, shengo, samaden];
	enumType.size = 68;
	break;

case 1495:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [achey, arctic pine, eucalyptus, logs, magic, mahogany, maple, oak, teak, willow, yew, bloodwood, elder];
	enumType.size = 13;
	break;

case 1496:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [adamant arrows, adamant bolts, adamant brutal arrows, adamant darts, arrow shafts, barbed bolts, black brutal arrows, blurite bolts, bronze arrows, bronze bolts, bronze brutal arrows, bronze darts, composite ogre bows, crossbow stocks, diamond bolts, dragon arrows, dragon darts, dragonstone bolts, emerald bolts, flighted ogre arrows, headless arrows, iron arrows, iron bolts, iron brutal arrows, iron darts, jade bolts, shieldbows, magic shieldbows, magic shortbows, mahogany crossbow stocks, maple crossbow stocks, maple shieldbows, maple shortbows, mithril arrows, mithril bolts, mithril brutal arrows, mithril darts, mithril grapples, oak crossbow stocks, oak shieldbows, oak shortbows, ogre arrow shafts, ogre arrows, onyx bolts, opal bolts, pearl bolts, red topaz bolts, ruby bolts, rune arrows, rune bolts, rune brutal arrows, rune darts, sapphire bolts, shortbows, silver bolts, steel arrows, steel bolts, steel brutal arrows, steel darts, teak crossbow stocks, willow crossbow stocks, willow shieldbows, willow shortbows, yew crossbow stocks, yew shieldbows, yew shortbows, bronze crossbows, blurite crossbows, iron crossbows, steel crossbows, mithril crossbows, adamant crossbows, rune crossbows, bakriminel bolts];
	enumType.size = 74;
	break;

case 1497:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [altar, armour stand, banner easel, Crafting table, lectern, pluming stand, portal room, range, repair bench, shield easel, sink, whetstone, workbench];
	enumType.size = 13;
	break;

case 1498:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [arrowheads, hatchets, battleaxes, bolts, wire, cannonballs, chainbodies, claws, crossbow limbs, daggers, dart tips, full helms, hastae, oil lantern frames, spits, kite shields, longswords, maces, helms, grapple tips, nails, pickaxes, platebodies, platelegs, plateskirts, scimitars, short swords, spears, square shields, bullseye lantern frames, studs, throwing knives, two-handed swords, warhammers, bars];
	enumType.size = 35;
	break;

case 1499:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [basilisks, bloodvelds, dust devils, fire giants, ice giants, ice warriors, jogres, ogres, rock crabs, rock lobsters, waterfiends, wolves];
	enumType.size = 12;
	break;

case 1500:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Uzer, West of Lumbridge Castle, Varrock Palace, South of the Lumberyard, Edgeville, South of Falador, Tai Bwo Wannai, Kharazi Jungle, Ape Atoll, Seers' Village, Seers' Village cemetery, Sinclair Mansion, Neitiznot, Gnome Stronghold, South of Castle Wars, West of Oo'glog, Isafdar, Piscatoris, Draynor, West of Catherby, West of Barbarian Assault, Sorcerer's Tower, Mage Training Area];
	enumType.size = 23;
	break;

case 1501:
	enumType.valueMap = {0=Recruit, 1=Corporal, 2=Sergeant, 3=Lieutenant, 4=Captain, 5=General, 1000=non-alpha};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 7;
	break;

case 1502:
	enumType.valueMap = {0=north, 1=south, 2=east, 3=west, 4=north-east, 5=north-west, 6=south-east, 7=south-west, 1000=non-alpha};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 9;
	break;

case 1503:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Barbarian Assault, Barrows, Blast Furnace, Brimhaven Agility Arena, Burgh de Rott Ramble, Burthorpe Games Room, Castle Wars, Champion's Challenge, Chaos Elemental, Clan Wars, Conquest, Dagannoth Kings, Duel Arena, Duel Tournaments, Fish Flingers, Fishing Trawler, Fist of Guthix, Gnome Ball pitch, Gnome Restaurant, God Wars Dungeon, Impetuous Impulses, Kalphite Queen, King Black Dragon, Mage Arena, Mage Training Arena, Mobilising Armies, Pest Control, Player-owned house, Pyramid Plunder, Rat Pits, Rogue Trader, Rogues' Den, Runecrafting Guild, Shades of Mort'ton, Sorceress's Garden, Soul Wars, Stealing Creation, Tai Bwo Wannai Clean-up, Target Practice, Tears of Guthix, Temple Trekking, Trouble Brewing, TzHaar Fight Cave, TzHaar Fight Pit, Vinesweeper, Clan Battlefield, Dominion Tower];
	enumType.size = 47;
	break;

case 1504:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Al Kharid, Ape Atoll, Ardougne (East), Ardougne (West), Barbarian Village, Braindeath Island, Brimhaven, Burgh de Rott, Burthorpe, Camelot, Canifis, Catherby, Crandor, Daemonheim, Dorgesh-Kaan, Draynor Manor, Draynor Village, Edgeville, Entrana, Etceteria, Falador, Goblin Village, God Wars Dungeon, Grand Exchange, Gu'Tanoth, Harmony Island, Hemenster, Isafdar, Jatizso, Kalphite Lair, Keldagrim, Karamja, Lletya, Lumbridge, Lunar Isle, Meiyerditch, Miscellania, Mos Le'Harmless, Mort'ton, Nardah, Neitiznot, Oo'glog, Paterdomus, Piscatoris, Pollnivneach, Port Khazard, Port Phasmatys, Port Sarim, Rellekka, Rimmington, Seers' Village, Shilo Village, Sophanem, Tai Bwo Wannai Village, Taverley, Tree Gnome Stronghold, Tree Gnome Village, Troll Stronghold, TzHaar city, Varrock, Waterbirth Island, Witchaven, Yanille, Zanaris];
	enumType.size = 64;
	break;

case 1505:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Agility Pyramid, Ape Atoll, Barbarian Outpost, Brimhaven Agility Arena, Dorgesh-Kaan, Gnome Stronghold Course, Penguin Course, Werewolf Agility Course, Wilderness Course, Gnome Ball, Werewolf Skullball];
	enumType.size = 11;
	break;

case 1506:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Prime, Rex, Supreme];
	enumType.size = 3;
	break;

case 1507:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Attacker, Collector, Defender, Healer];
	enumType.size = 4;
	break;

case 1508:
	enumType.valueMap = {0=1, 1=2, 2=3, 3=4, 4=5, 5=6, 6=7, 7=8, 1000=non-alpha, 8=9, 9=10};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 11;
	break;

case 1509:
	enumType.valueMap = {0=Mage, 1=Melee, 2=Ranged, 3=Mage and Melee, 4=Mage and Ranged, 5=Ranged and Melee, 6=Mage, Ranged and Melee, 1000=non-alpha};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 8;
	break;

case 1510:
	enumType.valueMap = {0=an Attacker level, 1=a Collector level, 2=a Defender level, 3=a Healer level, 4=a fighter hat, 5=a ranger hat, 6=a runner hat, 7=a healer hat, 1000=non-alpha, 8=a fighter torso, 9=a Penance skirt, 10=some runner boots, 11=some Penance gloves, 12=a granite body};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 14;
	break;

case 1511:
	enumType.valueMap = {0=no Ranged, 1=no melee, 2=no Magic, 3=fun weapons, 4=no forfeit, 5=no drinks, 6=no food/health portents, 7=no Prayer, 1000=non-alpha, 8=no movement, 9=obstacles, 10=enable Summoning};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 12;
	break;

case 1512:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [adamant berserker shield, adamant gauntlets, adamant spikeshield, air Runecrafting gloves, avantoe gloves, battle hood, battle robe bottom, battle robe top, black dragonhide coif, black gauntlets, blue dragonhide coif, bronze gauntlets, cadantine gloves, combat hood, combat robe bottom, combat robe top, dragon gauntlets, dragon slayer gloves, druidic mage bottom, druidic mage hood, druidic mage top, earth Runecrafting gloves, green dragonhide coif, irit gloves, iron gauntlets, kwuarm gloves, mithril gauntlets, red dragonhide coif, rune berserker shield, rune gauntlets, rune spikeshield, shark gloves, steel gauntlets, swordfish gloves, water Runecrafting gloves];
	enumType.size = 35;
	break;

case 1513:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Attack XP, Defence XP, Magic XP, Prayer XP, Strength XP, Ranged XP, Constitution XP, a herb pack, a seed pack, a mineral pack, a Void Knight mace, some Void Knight robes, a Void Knight mage helm, a Void Knight melee helm, a Void Knight top, some Void Knight gloves, a Void Knight ranger helm, a Void Knight seal, ravager charms, shifter charms, spinner charms, torcher charms, a Void Knight deflector];
	enumType.size = 23;
	break;

case 1514:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Draughts, Runelink, Runesquares, Runeversi];
	enumType.size = 4;
	break;

case 1515:
	enumType.valueMap = {0=Rimmington, 1=Taverley, 2=Pollnivneach, 3=Rellekka, 4=Brimhaven, 5=Yanille, 1000=non-alpha};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 7;
	break;

case 1516:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [eye of newt, ground unicorn horn, snake weed, limpwurt root, red spiders' eggs, garlic, silver dust, blamish snail slime, chocolate dust, white berries, rubium, toad's legs, ground goat's horn, snape grass, cockatrice egg, Mort Myre fungi, kebbit teeth dust, ground gorak claw, ground blue dragon scale, nail beast nails, yew roots, wine of Zamorak, cactus spine, potato cactus, jangerberries, magic tree roots, crushed nest, deadly nightshade, poison ivy berries];
	enumType.size = 29;
	break;

case 1517:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Agility, Attack, Construction, Cooking, Crafting, Defence, Farming, Firemaking, Fishing, Fletching, Herblore, Constitution, Hunter, Magic, Mining, Prayer, Ranged, Runecrafting, Slayer, Smithing, Strength, Summoning, Thieving, Woodcutting, Dungeoneering, Divination];
	enumType.size = 26;
	break;

case 1518:
	enumType.valueMap = {1000=non-alpha, 0=Lumbridge, 1=Falador, 2=Camelot};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 1519:
	enumType.valueMap = {0=Moonclan Island, 1=Waterbirth Island, 2=Barbarian Outpost, 3=Port Khazard, 4=Fishing Guild, 5=Catherby, 6=Ice Plateau, 1000=non-alpha};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 8;
	break;

case 1520:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Kree'arra, General Graardor, Chaos Elemental, Dagannoth Kings, Falador Mole, Kalphite Queen, King Black Dragon, Commander Zilyana, K'ril Tsutsaroth, Corporeal Beast, Kalphite King, Nex, Vorago, Barrows Brothers, Rise of the Six, Araxxor];
	enumType.size = 16;
	break;

case 1521:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Birthday, Christmas, Easter, Halloween, Holidays, New Year, Thanksgiving];
	enumType.size = 7;
	break;

case 1522:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [ammo, amulet, body armour, boots, cape, gloves, headgear, leg armour, ring, shield, weapon, aura, pocket];
	enumType.size = 13;
	break;

case 1523:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [battleaxe, claws, composite bow, crossbow, dagger, dart, flail, halberd, hasta, javelin, knife, longbow, longsword, mace, maul, ogre bow, pickaxe, scimitar, short sword, shortbow, spear, staff, throwing axe, throwing knife, throwing ring, two-handed sword, warhammer, whip, hatchet];
	enumType.size = 29;
	break;

case 1524:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [black demons, blue dragons, chickens, cows, cyclopes, dagannoths, experiments, fire giants, goblins, guards, hill giants, ice giants, lesser demons, moss giants, Slayer creatures];
	enumType.size = 15;
	break;

case 1525:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [barbarians, black demons, blue dragons, chickens, cows, dark wizards, dwarves, fire giants, goblins, guards, hill giants, lesser demons, moss giants, rats, zombies];
	enumType.size = 15;
	break;

case 1526:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Agility potion, Anti fire-breath potion, Antipoison, Attack potion, Blamish oil, Combat potion, Defence potion, Energy potion, Fishing potion, Fletching potion, Guthix Balance, Hunter potion, Magic essence potion, Magic potion, Prayer restore, Ranging potion, Relicym's Balm, Restore potion, Sanfew Serum, Saradomin Brew, Strength potion, Summoning potion, Super antipoison, Super antipoison+, Super antipoison++, Super attack potion, Super defence potion, Super energy potion, Super fishing explosive, Super restore potion, Super strength potion, Weapon poison, Weapon poison+, Weapon poison++, Zamorak Brew, Juju hunter potion, Scentless potion, Juju cooking potion, Juju farming potion, Juju mining potion, Juju fishing potion, Juju woodcutting potion, Saradomin's Blessing, Guthix's Gift, Zamorak's Favour];
	enumType.size = 45;
	break;

case 1527:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Annakarl Teleport, Ape Atoll Teleport, Ardougne Teleport, Bake Pie, Barbarian Teleport, Bind, Blood Barrage, Blood Blitz, Blood Burst, Blood Rush, Bones to Bananas, Bones to Peaches, Boost Potion Share, Camelot Teleport, Carrallangar Teleport, Catherby Teleport, Charge Air Orb, Charge Earth Orb, Charge Fire Orb, Charge Water Orb, Charge, Claws of Guthix, Confuse, Crumble Undead, Cure Group, Cure Me, Cure Other, Cure Plant, Curse, Dareeyak Teleport, Dream, Earth Blast, Earth Wave, Earth Bolt, Earth Strike, Enchant 1 - Sapphire, Enchant 2 - Emerald, Enchant 3 - Ruby, Enchant 4 - Diamond, Enchant 5 - Dragonstone, Enchant 6 - Onyx, Enchant Bolt, Energy Transfer, Enfeeble, Entangle, Falador Teleport, Fertilise Soil, Fire Blast, Fire Wave, Fire Bolt, Fire Strike, Fishing Guild Teleport, Flames of Zamorak, Ghorrock Teleport, Heal Group, Heal Other, High Level Alchemy, Home Teleport, House Teleport, Humidify, Hunter Kit, Iban Blast, Ice Barrage, Ice Blitz, Ice Burst, Ice Plateau Teleport, Ice Rush, Kharyll Teleport, Khazard Teleport, Lassar Teleport, Low Level Alchemy, Lumbridge Teleport, Magic Dart, Magic Imbue, Monster Examine, Moonclan Teleport, NPC Contact, Ourania Teleport, Paddewwa Teleport, Plank Make, Saradomin Strike, Senntisten Teleport, Shadow Barrage, Shadow Blitz, Shadow Burst, Shadow Rush, Smoke Barrage, Smoke Blitz, Smoke Burst, Smoke Rush, Snare, Spellbook Swap, Stat Restore Pot Share, Stat Spy, String Jewellery, Stun, Superglass Make, Superheat Item, Tele Group Barbarian, Tele Group Catherby, Tele Group Fishing Guild, Tele Group Ice Plateau, Tele Group Khazard, Tele Group Moonclan, Tele Group Waterbirth, Teleblock, Telegrab, Teleother Camelot, Teleother Falador, Teleother Lumbridge, Trollheim Teleport, Varrock Teleport, Vengeance Other, Vengeance, Vulnerability, Watchtower Teleport, Air Blast, Air Wave, Air Bolt, Air Strike, Waterbirth Teleport, Weaken, Air Blast, Air Bolt, Air Rush, Air Strike, Air Wave, Air Surge, Water Surge, Earth Surge, Fire Surge];
	enumType.size = 131;
	break;

case 1528:
	enumType.valueMap = {1000=non-alpha, 0=Standard, 1=Ancients, 2=Lunar};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 1529:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [adamantite, blurite, clay, coal, copper, elemental, gold, granite, iron, limestone, mithril, obsidian, pure essence, rubium, rune essence, runite, sandstone, silver, tin];
	enumType.size = 19;
	break;

case 1530:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [adamant, blurite, bronze, iron, mithril, rune, steel, item, silver, gold];
	enumType.size = 10;
	break;

case 1531:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [an adamant pickaxe, a bronze pickaxe, an inferno adze, an iron pickaxe, a mithril pickaxe, a rune pickaxe, a sacred clay pickaxe, a steel pickaxe, a volatile clay pickaxe, a dragon pickaxe, an Imcando pickaxe];
	enumType.size = 11;
	break;

case 1532:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [adamant, black, bronze, dragon, iron, mithril, rune, steel];
	enumType.size = 8;
	break;

case 1533:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Barbarian Village, Edgeville, Lumbridge caves, Lumbridge swamp, Haunted Mine, Varrock south-east, Varrock south-west, Brimhaven north-west, Brimhaven south-west, Crafting Guild, Crandor Isle, Dwarven Mine, Fremennik Isles mine, Heroes' Guild, Ice Caves, Brimhaven volcano gold mine, Keldagrim, Mining Guild, Rimmington, Shilo Village gem mine, TzHaar City, Coal Trucks, East of Ardougne, Grand Tree, Lunar Isle, Piscatoris, Port Khazard, Ardougne south, Wilderness Hobgoblins' mine, Wilderness Lava Maze, Wilderness Pirates' mine, Wilderness runite mine, Edgeville dungeon mine, Dorgeshuun mine, Elemental Workshop, Kharid Scorpion chasm, North of Yanille, Living Rock Caverns];
	enumType.size = 38;
	break;

case 1534:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Augury, Burst of Strength, Chivalry, Clarity of Thought, Eagle Eye, Hawk Eye, Improved Reflexes, Incredible Reflexes, Mystic Lore, Mystic Might, Mystic Will, Piety, Protect from Magic, Protect from Melee, Protect from Missiles, Protect from Summoning, Protect Item, Rapid Heal, Rapid Renewal, Rapid Restore, Redemption, Retribution, Rock Skin, Sharp Eye, Smite, Steel Skin, Superhuman Strength, Thick Skin, Ultimate Strength];
	enumType.size = 29;
	break;

case 1535:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [air runes, astral runes, blood runes, body runes, chaos runes, cosmic runes, death runes, dust runes, earth runes, fire runes, lava runes, law runes, mind runes, mist runes, mud runes, nature runes, smoke runes, soul runes, steam runes, water runes];
	enumType.size = 20;
	break;

case 1536:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Air Altar, Astral Altar, Blood Altar, Body Altar, Chaos Altar, Cosmic Altar, Death Altar, Earth Altar, Fire Altar, Law Altar, Mind Altar, Nature Altar, Ourania Altar, Water Altar, The Runespan];
	enumType.size = 15;
	break;

case 1537:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [aberrant spectres, abyssal demons, ankou, banshees, basilisks, bats, bears, black demons, black dragons, bloodvelds, blue dragons, brine rats, bronze dragons, catablepon, cave bugs, cave crawlers, cave horrors, cave slimes, cockatrices, cows, crocodiles, dagannoths, dark beasts, desert lizards, dogs, dust devils, dwarves, earth warriors, elves, fever spiders, fire giants, flesh crawlers, gargoyles, ghosts, ghouls, goblins, goraks, greater demons, green dragons, hands, harpie bug swarms, hellhounds, hill giants, hobgoblins, ice fiends, ice warriors, infernal mages, iron dragons, jellies, jungle horrors, kalphites, killerwatts, kurasks, lesser demons, minotaurs, mogres, molanisks, monkeys, moss giants, mutated zygomites, nechryaels, ogres, otherworldly beings, pyrefiends, rats, rock slugs, Scabarites, scorpions, shades, shadow warriors, skeletal wyverns, skeletons, spiders, spiritual mages, spiritual rangers, spiritual warriors, steel dragons, suqahs, terror dogs, ice giants, trolls, turoth, vampyres, wall beasts, warped terrorbirds, warped tortoises, werewolves, wolves, zombies, birds, sea snakes, mutated giant tortoises, mutated terrorbirds, mithril dragons, aquanites, TzHaar, volcanic creatures, jungle strykewyrms, desert strykewyrms, ice strykewyrms, living rock creatures, nihil, muspah];
	enumType.size = 103;
	break;

case 1538:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [bags of salt, a bug lantern, a crystal chime, an enchanted gem, earmuffs, a face mask, Fishing explosives, fungicide spray, ice coolers, insulated boots, a nosepeg, a mirror shield, rock hammers, a Slayer bell, Slayer gloves, a spiny helmet, a witchwood icon, super fishing explosive, leaf-bladed spear, broad arrows, Slayer staff];
	enumType.size = 21;
	break;

case 1539:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [abyssal lurker, abyssal parasite, abyssal titan, adamant minotaur, albino rat, arctic bear, barker toad, beaver, bloated leech, bronze minotaur, bull ant, bunyip, compost mound, desert wyrm, dreadfowl, evil turnip, fire titan, forge regent, fruit bat, geyser titan, giant chinchompa, giant ent, granite crab, granite lobster, honey badger, hydra, ice titan, iron minotaur, iron titan, karamthulhu overlord, lava titan, macaw, magpie, mithril minotaur, moss titan, pack yak, praying mantis, pyrelord, ravenous locust, rune minotaur, smoke devil, spirit cobra, spirit cockatrice, spirit coraxatrice, spirit dagannoth, spirit graahk, spirit guthatrice, spirit jelly, spirit kalphite, spirit kyatt, spirit larupia, spirit mosquito, spirit pengatrice, spirit saratrice, spirit scorpion, spirit spider, spirit terrorbird, spirit Tz-Kih, spirit vulatrice, spirit zamatrice, steel minotaur, steel titan, stranger plant, swamp titan, talon beast, thorny snail, unicorn stallion, vampyre bat, void ravager, void shifter, void spinner, void torcher, war tortoise, wolpertinger, ibis, obsidian golem, spirit wolf, phoenix, nightmare muspah, vampyric nihil, icenic nihil, demonic nihil, aviansie nihil];
	enumType.size = 83;
	break;

case 1540:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [bearded Pollnivnian bandits, cave goblins, chests, elves, farmers, Fremenniks, gnomes, guards, H.A.M. members, heroes, knights, master farmers, men and women, paladins, rogues, stalls, warriors, watchmen, Pollnivnian bandits, desert bandits, Menaphite thugs];
	enumType.size = 21;
	break;

case 1541:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [All Fired Up, Animal Magnetism, Another Slice of H.A.M., As a First Resort, Back to my Roots, Between a Rock..., Big Chompy Bird Hunting, Biohazard, Death of Chivalry, Cabin Fever, Catapult Construction, Clock Tower, Cold War, Contact!, Cook's Assistant, Creature of Fenkenstrain, Darkness of Hallowvale, Dealing with Scabaras, Death Plateau, Death to the Dorgeshuun, Defender of Varrock, Demon Slayer, Desert Treasure, Devious Minds, Dig Site, What's Mine is Yours, Dragon Slayer, Dream Mentor, Druidic Ritual, Dwarf Cannon, Eadgar's Ruse, Eagles' Peak, Elemental Workshop I, Elemental Workshop II, Enakhra's Lament, Enlightened Journey, Ernest the Chicken, Eyes of Glouphrie, Fairy Tale I - Growing Pains, Fairy Tale II - Cure a Queen, Family Crest, Feud, The, Fight Arena, Fishing Contest, Forgettable Tale of a Drunken Dwarf, Fremennik Isles, Fremennik Trials, Garden of Tranquillity, Gertrude's Cat, Ghosts Ahoy, Giant Dwarf, The, Goblin Diplomacy, Golem, The, Grand Tree, The, Great Brain Robbery, The, Grim Tales, Hand in the Sand, Haunted Mine, Hazeel Cult, Heroes' Quest, Holy Grail, Horror from the Deep, Icthlarin's Little Helper, Imp Catcher, In Aid of the Myreque, In Pyre Need, In Search of the Myreque, Jungle Potion, Kennith's Concerns, King's Ransom, Knight's Sword, The, Land of the Goblins, Legacy of Seergaze, Legends' Quest, Lost City, Lost Tribe, Lunar Diplomacy, Making History, Meeting History, Merlin's Crystal, Monk's Friend, Monkey Madness, Mountain Daughter, Mourning's Ends I, Mourning's Ends II - Temple of Light, Murder Mystery, My Arm's Big Adventure, Myths of the White Lands, Nature Spirit, The, Observatory Quest, Olaf's Quest, One Small Favour, Path of Glouphrie, The, Perils of Ice Mountain, Pirate's Treasure, Plague City, Priest in Peril, Rag and Bone Man, Rat Catchers, Recipe for Disaster, Recruitment Drive, Regicide, Restless Ghost, The, Rocking Out, Roving Elves, Royal Trouble, Rum Deal, Rune Mysteries, Scorpion Catcher, Sea Slug, Shades of Mort'ton, Shadow of the Storm, Sheep Herder, Shield of Arrav, Shilo Village, Slug Menace, Smoking Kills, Soul's Bane, A, Spirit of Summer, Spirits of the Elid, Summer's End, Swan Song, Swept Away, Tai Bwo Wannai Trio, Tail of Two Cats, A, Tears of Guthix, Temple of Ikov, Throne of Miscellania, TokTz-Ket-Dill, Tourist Trap, The, Tower of Life, Tree Gnome Village, Tribal Totem, Troll Romance, Troll Stronghold, Underground Pass, Vampyre Slayer, Wanted!, Watchtower, Waterfall Quest, What Lies Below, While Guthix Sleeps, Witch's House, Wolf Whistle, Zogre Flesh Eaters, Chosen Commander, The, Glorious Memories, Tale of the Muspah, The, Missing My Mummy, Hunt for Red Raktuber, Curse of Arrav, The, Fur 'n' Seek, Forgiveness of a Chaos Dwarf, Within the Light, Temple at Senntisten, The, Blood Runs Deep, Nomad's Requiem, Rune Mechanics, Blood Pact, The, Clockwork Syringe, A, Fairy Tale III - Battle at Orks Rift, Buyers and Cellars, Elemental Workshop III, Quiet Before the Swarm, Love Story, Void Dance, A, Gunnar's Ground, Void Stares Back, The, Do No Evil, King of the Dwarves, Prisoner of Glouphrie, Elemental Workshop IV, Deadliest Catch, Salt in the Wound, Branches of Darkmeyer, The, Ritual of the Mahjarrat, One Piercing Note, A Towering Feast, The Firemaker's Curse, Let Them Eat Pie, Song from the Depths, Carnillean Rising, Some Like It Cold, Stolen Hearts, Diamond in the Rough, Elder Kiln, The, Brink of Extinction, The, World Wakes, The, Bringing Home the Bacon, Birthright of the Dwarves, Missing, Presumed Death, One of A Kind, Fate of the Gods, Shadow over Ashdale, A, Mighty Fall, The, Plague's End, Dimension of Disaster];
	enumType.size = 197;
	break;

case 1542:
	enumType.valueMap = {0=1, 1=2, 2=3, 3=4, 4=5, 5=6, 6=7, 7=8, 8=9, 9=10, 10=11, 11=12, 12=13, 13=14, 14=15, 15=16, 16=17, 17=18, 18=19, 19=20, 20=21, 21=22, 22=23, 23=24, 24=25, 25=26, 26=27, 27=28, 28=29, 29=30, 30=31, 31=32, 32=33, 33=34, 34=35, 35=36, 36=37, 37=38, 38=39, 39=40, 40=41, 41=42, 42=43, 43=44, 44=45, 45=46, 46=47, 47=48, 48=49, 49=50, 50=51, 51=52, 52=53, 53=54, 54=55, 55=56, 56=57, 57=58, 58=59, 59=60, 60=61, 61=62, 62=63, 63=64, 64=65, 65=66, 66=67, 67=68, 68=69, 69=70, 70=71, 71=72, 72=73, 73=74, 74=75, 75=76, 76=77, 77=78, 78=79, 79=80, 80=81, 81=82, 82=83, 83=84, 84=85, 85=86, 86=87, 87=88, 88=89, 89=90, 90=91, 91=92, 92=93, 93=94, 94=95, 95=96, 96=97, 97=98, 98=99, 99=100, 100=101, 101=102, 102=103, 103=104, 104=105, 105=106, 106=107, 107=108, 108=109, 109=110, 110=111, 111=112, 112=113, 113=114, 114=115, 115=116, 116=117, 117=118, 118=119, 119=120, 120=121, 121=122, 122=123, 123=124, 124=125, 125=126, 126=127, 127=128, 128=129, 129=130, 130=131, 131=132, 132=133, 133=134, 134=135, 135=136, 136=137, 137=138, 138=139, 139=140, 140=141, 141=142, 142=143, 143=144, 144=145, 145=146, 146=147, 147=148, 148=149, 149=150, 150=151, 151=152, 152=153, 153=154, 154=155, 155=156, 156=157, 157=158, 158=159, 159=160, 160=161, 161=162, 162=163, 163=164, 164=165, 165=166, 166=167, 167=168, 168=169, 169=170, 170=171, 1000=non-alpha};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 172;
	break;

case 1543:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [polar kebbit, common kebbit, Feldip weasel, desert devil, razorbacked kebbit, crimson swift, golden warbler, copper longtail, cerulean twitch, tropical wagtail, baby impling, young impling, gourmet impling, earth impling, essence impling, eclectic impling, nature impling, magpie impling, ninja impling, dragon impling, ruby harvest, sapphire glacialis, snowy knight, black warlock, wild kebbit, barbtailed kebbit, prickly kebbit, sabretooth kebbit, ferret, chinchompa, red chinchompa, pawya, grenwall, rabbit, swamp lizard, orange salamander, red salamander, black salamander, spined larupia, horned graahk, sabretooth kyatt, spotted kebbit, dark kebbit, dashing kebbit, imp, spirit impling, zombie impling, kingly impling, penguin, wimpy bird, diseased kebbit, baby platypus, baby gecko, baby squirrel, baby raccoon, baby monkey, aquatic jadinko, amphibious jadinko, common jadinko, draconic jadinko, cannibal jadinko, carrion jadinko, diseased jadinko, shadow jadinko, Guthix jadinko, Saradomin jadinko, Zamorak jadinko, charm sprites];
	enumType.size = 68;
	break;

case 1544:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Draynor Village, Fishing Colony, Falador east bank, Port Phasmatys, Oo'glog, Yanille];
	enumType.size = 6;
	break;

case 1545:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Shield of Arrav, Heroes' Quest];
	enumType.size = 2;
	break;

case 1547:
	enumType.valueMap = {-1=1, 6657=1, 6658=1, 6659=1, 6660=1, 6661=1, 34824=1, 11792=1, 11793=1, 28701=1, 28702=1, 28703=1, 4133=1, 4134=1, 4135=1, 6695=1, 4136=1, 4137=1, 4138=1, 4139=1, 4140=1, 4141=1, 4653=1, 4142=1, 4143=1, 4144=1, 4145=1, 4146=1, 4147=1, 4148=1, 6708=1, 5684=1, 4149=1, 6709=1, 4150=1, 5702=1, 3667=1, 8796=1, 5732=1, 5733=1, 6811=1, 6822=1, 6823=1, 6824=1, 6825=1, 6826=1, 6827=1, 6828=1, 6829=1, 6830=1, 6831=1, 6832=1, 11952=1, 6833=1, 11953=1, 6834=1, 11954=1, 6835=1, 11955=1, 6836=1, 11956=1, 6837=1, 11957=1, 6838=1, 11958=1, 6839=1, 11959=1, 8887=1, 6840=1, 8888=1, 6841=1, 8889=1, 6842=1, 6843=1, 6844=1, 6845=1, 6846=1, 6847=1, 6848=1, 6849=1, 6850=1, 10946=1, 6851=1, 10947=1, 8900=1, 6852=1, 10948=1, 6853=1, 10949=1, 6854=1, 10950=1, 6855=1, 26315=1, 6864=1, 1235=1, 25816=1, 25817=1, 15065=1, 25818=1, 15066=1, 25819=1, 15067=1, 25820=1, 15068=1, 6888=1, 15084=1, 15085=1, 15086=1, 15087=1, 15088=1, 15089=1, 15090=1, 15091=1, 15092=1, 10997=1, 15093=1, 15094=1, 15095=1, 15096=1, 15097=1, 15098=1, 15099=1, 15100=1, 15101=1, 7938=1, 10506=1, 11023=1, 11024=1, 11025=1, 11026=1, 797=1, 818=1, 11062=1, 1858=1, 8534=1, 8536=1, 8538=1, 8540=1, 8542=1, 10591=1, 8544=1, 8546=1, 12652=1, 12653=1, 12655=1, 12657=1, 1411=1, 1413=1, 1415=1, 4488=1, 1417=1, 7050=1, 9105=1, 9106=1, 11680=1, 7587=1, 7588=1, 7589=1, 7590=1, 7591=1, 4010=1, 5551=1, 8624=1, 8626=1, 4018=1, 8628=1, 1460=1, 29108=1, 8630=1, 29110=1, 8632=1, 29112=1, 8634=1, 29114=1, 8636=1, 29116=1, 8638=1, 3006=1, 29118=1, 8640=1, 29120=1, 8642=1, 4034=1, 29122=1, 8644=1, 29124=1, 8646=1, 29126=1, 8648=1, 20428=1, 4558=1, 4559=1, 4560=1, 4561=1, 4562=1, 4563=1, 4564=1, 4565=1, 34775=1, 34776=1, 4076=1, 6637=1, 5614=1, 7160=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 205;
	break;

case 1548:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2, 1, 1, 2, 1, 2, 1, 2, 1, 4, 3, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 4, 3, 1, 3, 4, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2];
	enumType.size = 46;
	break;

case 1549:
	enumType.valueType = unknownScriptVarType4684;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 53, 53, 36, 24, 25, 20, 20, 51, 51, 10, 10, 34, 34, 52, 37, 43, 50, 16, 15, 31, 30, 13, 14, 6, 7, 42, 4, 5, 27, 26, 118, 117, 123, 122, 185, 187, 165, 169, 188, 195, 196, 202, 207, 151, 213, 216];
	enumType.size = 46;
	break;

case 1550:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [8978458, 8978460, 8978463, 8978466, 8978469, 8978472, 8978475, 8978478, 8978481, 8978484, 8978487];
	enumType.size = 11;
	break;

case 1551:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [8978459, 8978461, 8978464, 8978467, 8978470, 8978473, 8978476, 8978479, 8978482, 8978485, 8978488];
	enumType.size = 11;
	break;

case 1552:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Construction, Cooking, Crafting, Farming, Fletching, Herblore, Magic, Runecrafting, Smithing];
	enumType.size = 9;
	break;

case 1563:
	enumType.valueType = STRING;
	enumType.defaultstr = "Nothing";
	enumType.keyType = INT;
	enumType.valueArray = [null, Monkeys, Goblins, Rats, Spiders, Birds, Cows, Scorpions, Bats, Wolves, Zombies, Skeletons, Ghosts, Bears, Hill giants, Ice giants, Fire giants, Moss giants, Trolls, Ice warriors, Ogres, Hobgoblins, Dogs, Ghouls, Green dragons, Blue dragons, Red dragons, Black dragons, Lesser demons, Greater demons, Black demons, Hellhounds, Shadow warriors, Werewolves, Vampyres, Dagannoth, Turoth, Cave crawlers, Banshees, Crawling hands, Infernal mages, Aberrant spectres, Abyssal demons, Basilisks, Cockatrice, Kurask, Gargoyles, Pyrefiends, Bloodveld, Dust devils, Jellies, Rockslugs, Nechryael, Kalphite, Earth warriors, Otherworldly beings, Elves, Dwarves, Bronze dragons, Iron dragons, Steel dragons, Wall beasts, Cave slimes, Cave bugs, Shades, Crocodiles, Dark beasts, Mogres, Desert lizards, Fever spiders, Harpie bug swarms, Sea snakes, Skeletal wyverns, Killerwatts, Mutated zygomites, Icefiends, Minotaurs, Fleshcrawlers, Catablepon, Ankou, Cave horrors, Jungle horrors, Goraks, Suqahs, Brine rats, Scabarites, Terror dogs, Molanisks, Waterfiends, Spiritual warriors, Spiritual rangers, Spiritual mages, Warped tortoises, Warped terrorbirds, Mithril dragons, Aquanites, Ganodermic creatures, Grifolapines, Grifolaroos, Fungal magi, Polypore creatures, TzHaar, Volcanic creatures, Jungle strykewyrms, Desert strykewyrms, Ice strykewyrms, Living rock creatures, null, Cyclopes, Mutated jadinkos, Vyrewatch, Gelatinous Abominations, Grotworms, Cres's creations, Aviansies, Ascension members, Pigs, Airut, Celestial dragons, Muspah, Nihil, Kal'gerion demons, Glacors, Tormented demons, Edimmu, Shadow creatures, Lava strykewyrms, Adamant dragons, Rune dragons];
	enumType.size = 127;
	break;

case 1564:
	enumType.valueMap = {-1=Not in clan, 0=Friend, -2=Not in clan channel, 1=Recruit, 2=Corporal, 3=Sergeant, 4=Lieutenant, 5=Captain, 6=General, 7=Owner, 127=Staff mod};
	enumType.valueType = STRING;
	enumType.defaultstr = "Not in clan channel";
	enumType.keyType = INT;
	enumType.size = 11;
	break;

case 1577:
	enumType.valueType = STRING;
	enumType.defaultstr = "N/A";
	enumType.keyType = INT;
	enumType.valueArray = [Off, On];
	enumType.size = 2;
	break;

case 1579:
	enumType.valueType = STRING;
	enumType.defaultstr = "Selectively";
	enumType.keyType = INT;
	enumType.valueArray = [None, Always, Selectively, All];
	enumType.size = 4;
	break;

case 1581:
	enumType.valueType = STRING;
	enumType.defaultstr = "N/A";
	enumType.keyType = INT;
	enumType.valueArray = [Low, High];
	enumType.size = 2;
	break;

case 1582:
	enumType.valueType = STRING;
	enumType.defaultstr = "N/A";
	enumType.keyType = INT;
	enumType.valueArray = [None, Static, Dynamic];
	enumType.size = 3;
	break;

case 1583:
	enumType.valueType = STRING;
	enumType.defaultstr = "N/A";
	enumType.keyType = INT;
	enumType.valueArray = [None, 2x, 4x];
	enumType.size = 3;
	break;

case 1585:
	enumType.valueType = STRING;
	enumType.defaultstr = "Retro casual";
	enumType.keyType = INT;
	enumType.valueArray = [Retro labourer's apron, Retro crossplume shorts, Retro mining breeches, Retro wading shorts, Retro carpenter's apron, Retro turn-up shorts, Retro thief's overkilt, Retro runecrafter's sarong, Retro running slacks, Retro herbalist's robe, Retro lumberjack breeches, Retro summoner buckskins, Retro smith's breeches, Retro slayer steel caps, Retro huntsman's shorts, Retro tiered breeches, Retro plate-shins, Retro combat trousers, Retro tunic bottom, Retro rumpled breeches, Retro cut-off pantaloons, Retro chef's bloomers, Retro pleated mage robe, Retro warlock split coat, Retro twill maxi, Retro stroller's chinos, Retro walk-worn breeks, Retro quilted hakama, Retro pirate's shorts, Retro clamdiggers, Retro buckstrapped chinos, Retro ceremonial robe, Retro plain trousers, Retro princely breeches, Retro shorts, Retro ragged breeches, Retro tattered trousers, Retro torn trousers, Retro breeches, Retro striped trousers, Retro turn-ups, Retro flares, Retro fine breeches, Labourer's apron, Chef's bloomers, Wading shorts, Herbalist's robe, Huntsman's shorts, Pleated mage robe, Warlock split coat, Mining breeches, Ceremonial robe, Cut-off pantaloons, Rumpled breeches, Slayer steel caps, Smith's breeches, Summoner buckskins, Thief's overkilt, Plate-shin shorts];
	enumType.size = 59;
	break;

case 1586:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 645;
	enumType.keyType = INT;
	enumType.valueArray = [620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 621, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 36, 85, 37, 89, 90, 40, 86, 88, 39, 38, 87, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833];
	enumType.size = 59;
	break;

case 1589:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11209, 12625, 5324, 5322, 5320, 5323, 5321, 5291, 5292, 5293, 5298, 14870, 5295, 5299, 5301, 5300, 5302, 5303, 21621, 5304, 5097, 5098, 5099, 5100, 5280, 5282, 21620, 5281, 5308, 5306, 5309, 5310, 5311, 5101, 5102, 5103, 5104, 5105, 5106, 5312, 5313, 5314, 5315, 5287, 5288, 5289, 5290, 5317, 6470, 28266, 28259, 28260, 28261, 28265];
	enumType.size = 54;
	break;

case 1590:
	enumType.valueType = STRING;
	enumType.defaultstr = "Casual";
	enumType.keyType = INT;
	enumType.valueArray = [Retro builder's bodice, Retro fletcher's straptop, Retro mining overalls, Retro fishing waxskin, Retro crafting short apron, Retro nettle weave, Retro stealthy gear, Retro essence blouse, Retro athlete's thinskin, Retro herbalist's gansey, Retro Karamjan gaberdine, Retro druidic smock, Retro smith's waistplate, Retro beastmaster gear, Retro kebbitskin cowl, Retro thin carapace, Retro rugged tunic, Retro tiered plate, Retro corsetted doublet, Retro ropesleeve chemise, Retro Marion tunic, Retro chef's skivvies, Retro mage's choli, Retro witch's shawl, Retro practioner's smock, Retro tunic and bodice, Retro doublet and bodice, Retro hardworn minidress, Retro crossed halter neck, Retro half-corset and cowl, Retro halter neck, Retro reinforced tunic, Retro striped sweater, Retro woollen vest, Retro frilled blouse, Retro bodice, Retro fine shirt, Retro ragged top, Retro plain top, Retro crop-top, Retro simple top, Retro polo neck, Retro torn, Builder's bodice, Chef's skivvies, Fishing waxskin, Herbalist's gansey, Kebbitskin cowl, Mage's choli, Witch's shawl, Mining overalls, Reinforced tunic, Marion tunic, Ropesleeve chemise, Beastmaster gear, Smith's waistplate, Druidic smock, Stealthy gear, Rugged tunic];
	enumType.size = 59;
	break;

case 1591:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 583;
	enumType.keyType = INT;
	enumType.valueArray = [565, 567, 568, 569, 570, 571, 561, 572, 573, 574, 575, 576, 577, 560, 578, 562, 563, 564, 579, 559, 580, 566, 581, 582, 557, 583, 584, 585, 586, 556, 587, 558, 153, 155, 156, 157, 154, 158, 56, 57, 58, 59, 60, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913];
	enumType.size = 59;
	break;

case 1592:
	enumType.valueMap = {69009468=69009483, 69009471=69009481, 69009470=69009482, 69009465=69009485, 69009466=69009484, 69009460=69009488, 69009476=69009478, 69009463=69009486, 69009462=69009487, 69009472=69009480, 69009459=69009489, 69009474=69009479};
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 12;
	break;

case 1593:
	enumType.valueType = STRING;
	enumType.defaultstr = "Patterned arms";
	enumType.keyType = INT;
	enumType.valueArray = [Striped arms, Frilled sleeves, Fine cuffs, Woollen arms, Ragged sleeves, Tattered sleeves, Long sleeves, Short sleeves, Musclebound, Large cuffs, Bare arms];
	enumType.size = 11;
	break;

case 1595:
	enumType.valueType = MODEL;
	enumType.defaultint = 17201;
	enumType.keyType = INT;
	enumType.valueArray = [null, 17202, 17203, 17204, 17205, 17206, 17207, 17208, 17209, 17210];
	enumType.size = 9;
	break;

case 1596:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 2621496;
	enumType.keyType = INT;
	enumType.valueArray = [2621496, 2621497, 2621498, 2621499, 2621500, 2621501, 2621502, 2621503, 2621504, 2621505, 2621506, 2621507, 2621508, 2621509, 2621510, 2621511, 2621512, 2621513, 2621514, 2621515, 2621516, 2621517, 2621518, 2621519, 2621520, 2621521, 2621522, 2621523, 2621524, 2621525, 2621526, 2621527, 2621528, 2621529, 2621530, 2621531, 2621532, 2621533, 2621534, 2621535, 2621536, 2621537, 2621538, 2621539, 2621540, 2621541, 2621542, 2621543, 2621544, 2621545, 2621546, 2621547, 2621548, 2621549, 2621550, 2621551];
	enumType.size = 56;
	break;

case 1597:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 2621440;
	enumType.keyType = INT;
	enumType.valueArray = [2621440, 2621441, 2621442, 2621443, 2621444, 2621445, 2621446, 2621447, 2621448, 2621449, 2621450, 2621451, 2621452, 2621453, 2621454, 2621455, 2621456, 2621457, 2621458, 2621459, 2621460, 2621461, 2621462, 2621463, 2621464, 2621465, 2621466, 2621467, 2621468, 2621469, 2621470, 2621471, 2621472, 2621473, 2621474, 2621475, 2621476, 2621477, 2621478, 2621479, 2621480, 2621481, 2621482, 2621483, 2621484, 2621485, 2621486, 2621487, 2621488, 2621489, 2621490, 2621491, 2621492, 2621493, 2621494, 2621495];
	enumType.size = 56;
	break;

case 1598:
	enumType.valueType = OBJ;
	enumType.defaultint = 7096;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7096, 7097, 7098, 7099, 7100, 7101, 7102, 7103, 7104, 7105, 7106, 7107];
	enumType.size = 12;
	break;

case 1599:
	enumType.valueType = OBJ;
	enumType.defaultint = 3869;
	enumType.keyType = INT;
	enumType.valueArray = [null, 3869, 3870, 3871, 3872, 3873, 3874, 3875, 3876, 3877, 3878, 3879, 3880];
	enumType.size = 12;
	break;

case 1600:
	enumType.valueType = OBJ;
	enumType.defaultint = 3869;
	enumType.keyType = INT;
	enumType.valueArray = [null, 3869, 3870, 3871, 3872, 3873, 3874, 3875, 3876, 3877, 3878, 3879, 3880];
	enumType.size = 12;
	break;

case 1601:
	enumType.valueType = STRING;
	enumType.defaultstr = "Day";
	enumType.keyType = INT;
	enumType.valueArray = [Day, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
	enumType.size = 32;
	break;

case 1602:
	enumType.valueType = STRING;
	enumType.defaultstr = "Month";
	enumType.keyType = INT;
	enumType.valueArray = [Month, January, February, March, April, May, June, July, August, September, October, November, December];
	enumType.size = 13;
	break;

case 1604:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [338, 339, 340, 341, 342];
	enumType.size = 5;
	break;

case 1605:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 25, 50, 100, 200, 400, 750, 1000, 2500, 5000, 10000];
	enumType.size = 10;
	break;

case 1606:
	enumType.valueType = STRING;
	enumType.defaultstr = "Casual";
	enumType.keyType = INT;
	enumType.valueArray = [Retro labourer's apron, Retro plumed skirt, Retro mining long shorts, Retro fishing piupiu, Retro crafter's dirndl, Retro farmer's skirt, Retro spiked leggings, Retro runecrafting skirt, Retro buckled joggers, Retro herbalist apron, Retro lumberer's overskirt, Retro wolf-fur sarong, Retro smith's short apron, Retro slaybelt, Retro platypode leggings, Retro traveller's miniskirt, Retro belted skirt, Retro studded tassets, Retro criss-crossed a-line, Retro tethered buckskins, Retro archer's chaps, Retro chef's fustanella, Retro mage's divided skirt, Retro witch's full skirt, Retro mage's ghaghra, Retro gathered skirt, Retro long hakama, Retro baggy pantaloons, Retro shortskirt and sash, Retro rider's jodhpurs, Retro rustic miniskirt, Retro ceremonial robe skirt, Retro fine skirt, Retro frilled skirt, Retro layered skirt, Retro long, narrow skirt, Retro ragged skirt, Retro tattered skirt, Retro short skirt, Retro sashed skirt, Retro fitted skirt, Retro torn trousers, Retro long skirt, Retro turn-ups, Retro flares, Retro plain trousers, Retro skirt, Retro shorts, Labourer's apron, Chef's fustanella, Fishing piupiu, Herbalist's apron, Platypode leggings, Mage's divided skirt, Witch's full skirt, Mining long shorts, Ceremonial robe skirt, Archer's chaps, Tethered buckskins, Slaybelt, Smith's short apron, Wolf-fur sarong, Spiked leggings, Belted skirt];
	enumType.size = 64;
	break;

case 1607:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 129;
	enumType.keyType = INT;
	enumType.valueArray = [475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 476, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 129, 130, 128, 74, 133, 134, 77, 131, 132, 75, 73, 76, 72, 70, 71, 363, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801];
	enumType.size = 64;
	break;

case 1608:
	enumType.valueMap = {69009437=276, 69009436=214, 69009439=214, 69009438=245, 69009433=214, 69009432=245, 69009435=245, 69009434=276, 69009429=245, 69009428=276, 69009431=276, 69009430=214, 69009425=276, 69009424=61, 69009427=214, 69009426=245, 69009421=61, 69009420=92, 69009423=92, 69009422=123, 69009417=92, 69009416=123, 69009419=123, 69009418=61, 69009413=123, 69009412=61, 69009415=61, 69009414=92, 69009411=92, 69009410=123, 69009453=399, 69009452=430, 69009454=368, 69009449=430, 69009448=368, 69009451=368, 69009450=399, 69009445=368, 69009444=399, 69009447=399, 69009446=430, 69009441=399, 69009440=430, 69009443=430, 69009442=368};
	enumType.valueType = INT;
	enumType.keyType = INTERFACE;
	enumType.size = 45;
	break;

case 1609:
	enumType.valueType = STRING;
	enumType.defaultstr = "Bare arms";
	enumType.keyType = INT;
	enumType.valueArray = [Bare arms, Gold wristguards, Gold clasps, Gold bangles, Gold banding, Gold bands, Gold armguards];
	enumType.size = 7;
	break;

case 1610:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 49938688, 49938691, 49938694, 49938697, 49938700, 49938703, 49938706, 49938709];
	enumType.size = 8;
	break;

case 1611:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 49938722, 49938723, 49938724, 49938725, 49938726, 49938727, 49938728, 49938729, 49938730];
	enumType.size = 9;
	break;

case 1612:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [49938712, 49938721, 49938713, 49938714, 49938715, 49938716, 49938717, 49938718, 49938719, 49938720];
	enumType.size = 10;
	break;

case 1613:
	enumType.valueMap = {49938587=2, 49938603=4, 49938619=6, 49938635=8, 49938579=1, 49938595=3, 49938611=5, 49938627=7, 49938643=9};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 9;
	break;

case 1614:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 49938579, 49938587, 49938595, 49938603, 49938611, 49938619, 49938627, 49938635, 49938643];
	enumType.size = 9;
	break;

case 1615:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 49938581, 49938589, 49938597, 49938605, 49938613, 49938621, 49938629, 49938637, 49938645];
	enumType.size = 9;
	break;

case 1616:
	enumType.valueMap = {49938589=2, 49938605=4, 49938621=6, 49938637=8, 49938581=1, 49938597=3, 49938613=5, 49938629=7, 49938645=9};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 9;
	break;

case 1626:
	enumType.valueType = STRING;
	enumType.defaultstr = "Adventurer";
	enumType.keyType = INT;
	enumType.valueArray = [null, Whaler, Biologist, Occultist, Assassin, Convict, Missionary, Trapper, Chef, Architect, Exile, Memory, Tengu];
	enumType.size = 12;
	break;

case 1642:
	enumType.valueMap = {0=Just until one of us logs out, 1=1 hour, 2=2 hours, 3=3 hours, 4=4 hours, 5=5 hours, 6=6 hours, 7=7 hours, 8=8 hours, 9=9 hours, 10=10 hours, 11=11 hours, 12=12 hours, 13=13 hours, 14=14 hours, 15=15 hours, 16=16 hours, 17=17 hours, 18=18 hours, 19=19 hours, 20=20 hours, 21=21 hours, 22=22 hours, 23=23 hours, 24=24 hours, 25=25 hours, 26=26 hours, 27=27 hours, 28=28 hours, 29=29 hours, 30=30 hours, 31=31 hours, 32=32 hours, 33=33 hours, 34=34 hours, 35=35 hours, 36=36 hours, 37=37 hours, 38=38 hours, 39=39 hours, 40=40 hours, 41=41 hours, 42=42 hours, 43=43 hours, 44=44 hours, 45=45 hours, 46=46 hours, 47=47 hours, 48=48 hours, 49=49 hours, 50=50 hours, 51=51 hours, 52=52 hours, 53=53 hours, 54=54 hours, 55=55 hours, 56=56 hours, 57=57 hours, 58=58 hours, 59=59 hours, 60=60 hours, 61=61 hours, 62=62 hours, 63=63 hours, 64=64 hours, 65=65 hours, 66=66 hours, 67=67 hours, 68=68 hours, 69=69 hours, 70=70 hours, 71=71 hours, 72=72 hours, 1000=non-alpha};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 74;
	break;

case 1669:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 81329, 81308, 81310, 81303, 81326, 81328, 93055, 93058, 93054, 101619, 101620, 101621];
	enumType.size = 12;
	break;

case 1680:
	enumType.valueMap = {21516=15000, 21517=15000, 21518=15000, 21519=15000, 1437=1, 13598=15, 1438=50, 13599=30, 13600=32, 1440=50, 13601=34, 13602=36, 1442=50, 13603=37, 13604=38, 1444=50, 13605=39, 13606=40, 1446=50, 13607=42, 13608=43, 1448=50, 13609=44, 13610=45, 13611=41, 1452=125, 13614=1000, 1454=125, 13615=1000, 13617=1000, 13618=1000, 1458=125, 13619=1000, 13620=1000, 13622=1000, 1462=125, 13623=1000, 13624=1000, 13625=1000, 13627=1000, 13628=1000, 13629=10000};
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = OBJ;
	enumType.size = 42;
	break;

case 1681:
	enumType.valueMap = {1440=51118114, 1456=51118123, 1442=51118116, 1458=51118118, 1444=51118115, 1446=51118112, 1462=51118120, 1448=51118113, 1450=51118119, 1452=51118117, 1438=51118111, 1454=51118124};
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 12;
	break;

case 1682:
	enumType.valueMap = {1440=North-east of Varrock., 1442=Near the Duel Arena entrance., 1444=In Lumbridge Swamp., 1446=Near Barbarian Village., 1448=Near Goblin Village., 1450=Morytania, beneath the Hollows/Meiyerditch., 1452=South-east of the Dark Warriors' Fortress., 5516=Air is located South-west of Varrock. Earth is north-east of Varrock. Water is in Lumbridge Swamp. Fire is near the Duel Arena., 1454=Located in Zanaris. Zanaris can be reached through Lumbridge Swamp., 1456=Located in the Light Temple. Reached via the Underground Pass., 13649=All the altars of RuneScape., 1458=Located on Entrana., 1462=North-east of Shilo Village., 1438=South-west of Varrock.};
	enumType.valueType = STRING;
	enumType.defaultstr = "Unable to locate altar.";
	enumType.keyType = OBJ;
	enumType.size = 14;
	break;

case 1692:
	enumType.valueType = ANIMATION;
	enumType.defaultint = 10139;
	enumType.keyType = INT;
	enumType.valueArray = [null, 10217, 10218, 10219, 10220];
	enumType.size = 4;
	break;

case 1693:
	enumType.valueType = ANIMATION;
	enumType.defaultint = 10139;
	enumType.keyType = INT;
	enumType.valueArray = [10139, 10170, 10169, 10169, 10168, 10168, 10167, 10167, 10166, 10166, 10165, 10165, 10164, 10164, 10163, 10163, 10162, 10162, 10161, 10161, 10160, 10160, 10159, 10159, 10158, 10158, 10158, 10158, 10157, 10157, 10157, 10157, 10156, 10156, 10156, 10156, 10155, 10155, 10155, 10155, 10154, 10154, 10154, 10154, 10153, 10153, 10153, 10153, 10152, 10152, 10152, 10152, 10151, 10151, 10151, 10151, 10150, 10150, 10150, 10150, 10149, 10149, 10149, 10149, 10148, 10148, 10148, 10148, 10147, 10147, 10147, 10147, 10146, 10146, 10146, 10146, 10145, 10145, 10145, 10145, 10144, 10144, 10144, 10144, 10143, 10143, 10143, 10143, 10142, 10142, 10142, 10142, 10141, 10141, 10141, 10141, 10140, 10140, 10140, 10140];
	enumType.size = 100;
	break;

case 1695:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Runecrafter clothing, Runecrafter robe, Runecrafter skirt, Runecrafter hat, Runecrafter gloves, Runecrafting staff, Rune essence, Teleport tablet (air), Teleport tablet (water), Teleport tablet (earth), Teleport tablet (fire), Teleport tablet (mind), Teleport tablet (body), Teleport tablet (law), Teleport tablet (chaos), Teleport tablet (nature), Teleport tablet (cosmic), Teleport tablet (death), Teleport tablet (astral), Teleport tablet (blood), Teleport tablet (guild), Talisman (air), Talisman (water), Talisman (earth), Talisman (fire), Talisman (mind), Talisman (body), Talisman (law), Talisman (chaos), Talisman (nature), Talisman (cosmic), Talisman (death), Talisman (astral), Talisman (blood)];
	enumType.size = 34;
	break;

case 1696:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [41803, 41800, 41799, 41798];
	enumType.size = 4;
	break;

case 1697:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The beacon near the River Salve is out., The beacon near the River Salve is loaded with logs., The beacon near the River Salve is blazing brightly., The beacon near the River Salve is dying out.];
	enumType.size = 4;
	break;

case 1698:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The beacon near the Rag and Bone Man is out., The beacon near the Rag and Bone Man is loaded with logs., The beacon near the Rag and Bone Man is blazing brightly., The beacon near the Rag and Bone Man is dying out.];
	enumType.size = 4;
	break;

case 1699:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The beacon north of the Jolly Boar Inn is out., The beacon north of the Jolly Boar Inn is loaded with logs., The beacon north of the Jolly Boar Inn is blazing brightly., The beacon north of the Jolly Boar Inn is dying out.];
	enumType.size = 4;
	break;

case 1700:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The beacon north of Varrock Palace is out., The beacon north of Varrock Palace is loaded with logs., The beacon north of Varrock Palace is blazing brightly., The beacon north of Varrock Palace is dying out.];
	enumType.size = 4;
	break;

case 1701:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The beacon near the Grand Exchange is out., The beacon near the Grand Exchange is loaded with logs., The beacon near the Grand Exchange is blazing brightly., The beacon near the Grand Exchange is dying out.];
	enumType.size = 4;
	break;

case 1702:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The beacon near Edgeville is out., The beacon near Edgeville is loaded with logs., The beacon near Edgeville is blazing brightly., The beacon near Edgeville is dying out.];
	enumType.size = 4;
	break;

case 1703:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The beacon near the Monastery is out., The beacon near the Monastery is loaded with logs., The beacon near the Monastery is blazing brightly., The beacon near the Monastery is dying out.];
	enumType.size = 4;
	break;

case 1704:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The beacon near Goblin Village is out., The beacon near Goblin Village is loaded with logs., The beacon near Goblin Village is blazing brightly., The beacon near Goblin Village is dying out.];
	enumType.size = 4;
	break;

case 1705:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The beacon near Burthorpe is out., The beacon near Burthorpe is loaded with logs., The beacon near Burthorpe is blazing brightly., The beacon near Burthorpe is dying out.];
	enumType.size = 4;
	break;

case 1706:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The beacon east of Death Plateau is out., The beacon east of Death Plateau is loaded with logs., The beacon east of Death Plateau is blazing brightly., The beacon east of Death Plateau is dying out.];
	enumType.size = 4;
	break;

case 1707:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The beacon by the Trollheim shortcut is out., The beacon by the Trollheim shortcut is loaded with logs., The beacon by the Trollheim shortcut is blazing brightly., The beacon by the Trollheim shortcut is dying out.];
	enumType.size = 4;
	break;

case 1708:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The beacon near the entrance to the God Wars Dungeon is out., The beacon near the entrance to the God Wars Dungeon is loaded with logs., The beacon near the entrance to the God Wars Dungeon is blazing brightly., The beacon near the entrance to the God Wars Dungeon is dying out.];
	enumType.size = 4;
	break;

case 1709:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The beacon near the small temple in the Wilderness is out., The beacon near the small temple in the Wilderness is loaded with logs., The beacon near the small temple in the Wilderness is blazing brightly., The beacon near the small temple in the Wilderness is dying out.];
	enumType.size = 4;
	break;

case 1710:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The beacon on the Frozen Waste Plateau is out., The beacon on the Frozen Waste Plateau is loaded with logs., The beacon on the Frozen Waste Plateau is blazing brightly., The beacon on the Frozen Waste Plateau is dying out.];
	enumType.size = 4;
	break;

case 1711:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, You are at the beacon near the River Salve., You are at the beacon near the Rag and Bone Man., You are at the beacon north of the Jolly Boar Inn., You are at the beacon north of Varrock Palace., You are at the beacon near the Grand Exchange., You are at the beacon near Edgeville., You are at the beacon near the Monastery., You are at the beacon near Goblin Village., You are at the beacon near Burthorpe., You are at the beacon east of Death Plateau., You are at the beacon by the Trollheim shortcut., You are at the beacon near the entrance to the God Wars Dungeon.];
	enumType.size = 12;
	break;

case 1767:
	enumType.valueType = INT;
	enumType.defaultint = 10;
	enumType.keyType = INT;
	enumType.valueArray = [null, 10, 20, 30, 40, 50, 60, 70, 80, 90, 99];
	enumType.size = 10;
	break;

case 1768:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1771, 1772];
	enumType.size = 2;
	break;

case 1769:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1775, 1776, 1774, 1774];
	enumType.size = 4;
	break;

case 1770:
	enumType.valueType = STRING;
	enumType.defaultstr = "do";
	enumType.keyType = INT;
	enumType.valueArray = [null, juggle, do a];
	enumType.size = 2;
	break;

case 1771:
	enumType.valueMap = {80=cannon balls., 50=spades., 99=chinchompas., 20=plates., 70=soap., 40=knives., 10=some balls., 90=torches., 60=tuna., 30=eggs.};
	enumType.valueType = STRING;
	enumType.defaultstr = "something.";
	enumType.keyType = INT;
	enumType.size = 10;
	break;

case 1772:
	enumType.valueMap = {80=forward roll., 50=cartwheel., 99=back flip., 20=one-leg balance., 70=no-hands cartwheel., 40=handstand., 10=hop., 90=large leap., 60=small leap., 30=twirl.};
	enumType.valueType = STRING;
	enumType.defaultstr = "something.";
	enumType.keyType = INT;
	enumType.size = 10;
	break;

case 1773:
	enumType.valueType = STRING;
	enumType.defaultstr = "something";
	enumType.keyType = INT;
	enumType.valueArray = [null, blast, levitate, teleport, alchemise];
	enumType.size = 4;
	break;

case 1774:
	enumType.valueMap = {80=the dumb-bells., 90=your assistant., 99=the anvil., 60=the suit of armour., 70=the bench.};
	enumType.valueType = STRING;
	enumType.defaultstr = "something.";
	enumType.keyType = INT;
	enumType.size = 5;
	break;

case 1775:
	enumType.valueMap = {40=the shield., 10=the book., 50=the armour., 20=the tree stump., 30=the helm.};
	enumType.valueType = STRING;
	enumType.defaultstr = "something.";
	enumType.keyType = INT;
	enumType.size = 5;
	break;

case 1776:
	enumType.valueMap = {40=the penguin., 10=the rat., 50=the ork., 20=the cat., 30=the clay pot.};
	enumType.valueType = STRING;
	enumType.defaultstr = "something.";
	enumType.keyType = INT;
	enumType.size = 5;
	break;

case 1777:
	enumType.valueType = STRING;
	enumType.defaultstr = "shoot something";
	enumType.keyType = INT;
	enumType.valueArray = [null, shoot the bullseye from, shoot the popinjay from];
	enumType.size = 2;
	break;

case 1778:
	enumType.valueMap = {80=the level 80 spot., 50=the level 50 spot., 99=the level 99 spot., 20=the level 20 spot., 70=the level 70 spot., 40=the level 40 spot., 10=the level 10 spot., 90=the level 90 spot., 60=the level 60 spot., 30=the level 30 spot.};
	enumType.valueType = STRING;
	enumType.defaultstr = "something";
	enumType.keyType = INT;
	enumType.size = 10;
	break;

case 1800:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 5, 10, 30, 60, 90, 120, 150, 180, 240, 300, 360, 480];
	enumType.size = 12;
	break;

case 1801:
	enumType.valueMap = {0=25, 1=50, 2=100, 3=200, 4=400, 5=750, 6=1000, 7=2500, 1000=non-alpha, 8=5000, 9=10000};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 11;
	break;

case 1802:
	enumType.valueMap = {0=5 minutes, 1=10 minutes, 2=30 minutes, 3=1 hour, 4=1 hour 30 minutes, 5=2 hours, 6=2 hours 30 minutes, 7=3 hours, 1000=non-alpha, 8=4 hours, 9=6 hours, 10=8 hours};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 12;
	break;

case 1803:
	enumType.valueMap = {1000=non-alpha, 0=Clan Wars Classic, 1=Plateau, 2=Forsaken Quarry, 3=Blasted Forest, 4=Turrets};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 6;
	break;

case 1805:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, null, 467, null, 468, null, 469, 470, null, 471, 472, 473, 474, 475, 483, 476, 477, 478, null, null, null, null, null, null, null, null, null, null, null, null, null, 479, 480, 481, 482, 775, null, 283, 485, 1813, 7275, 1727, 1814, 1815, 1816, 2722, 2944, 7259, 7274, 7276, 7277, 7278, 7279, 7280, 7281, 7282, 7283, 7284, 7285, 7286, 7287, 7288, 7289, 7290, 7291, 7292, 7293, 7294, 7295, 9779, 19207, 19611, 19598, 22752, 22753, 26438];
	enumType.size = 119;
	break;

case 1806:
	enumType.valueType = STRING;
	enumType.defaultstr = "Quick Links";
	enumType.keyType = INT;
	enumType.valueArray = [Navigation, Activities, Shops / Trading, Facilities, Resources];
	enumType.size = 5;
	break;

case 1810:
	enumType.valueMap = {130=24185, 2=24187, 67=24186, 69=7027, 74=24183, 77=7022, 15=24176, 16=7024, 22=14270, 152=24179, 31=24177, 225=7021, 161=7025, 162=14271, 101=20627, 38=7023, 166=14272, 103=24182, 43=24178, 174=24184, 48=24180, 240=24188, 179=24181, 119=24189, 56=7028, 58=14273, 191=7026};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 7021;
	enumType.keyType = INT;
	enumType.size = 27;
	break;

case 1823:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [439, 7937, 364, 202, 5322];
	enumType.size = 5;
	break;

case 1825:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [441, 1522, 2352, 204, 5322];
	enumType.size = 5;
	break;

case 1882:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [439, 7937, 2350, 204, 5291];
	enumType.size = 5;
	break;

case 1883:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [437, 1522, 2352, 206, 995];
	enumType.size = 5;
	break;

case 1884:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [441, 1520, 2352, 206, 5306];
	enumType.size = 5;
	break;

case 1886:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [454, 1522, 2354, 204, 995];
	enumType.size = 5;
	break;

case 1887:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [7937, 1520, 378, 206, 5322];
	enumType.size = 5;
	break;

case 1891:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [454, 378, 2354, 208, 7937];
	enumType.size = 5;
	break;

case 1899:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [441, 1522, 995, 208, 5320];
	enumType.size = 5;
	break;

case 1900:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [454, 1520, 7937, 208, 5320];
	enumType.size = 5;
	break;

case 1902:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [454, 6334, 360, 208, 995];
	enumType.size = 5;
	break;

case 1908:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [372, 1520, 2354, 210, 5323];
	enumType.size = 5;
	break;

case 1909:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [448, 995, 2360, 210, 5323];
	enumType.size = 5;
	break;

case 1911:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [454, 7937, 2354, 3050, 5285];
	enumType.size = 5;
	break;

case 1927:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [454, 1518, 2354, 212, 5296];
	enumType.size = 5;
	break;

case 1928:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [454, 1520, 384, 995, 5286];
	enumType.size = 5;
	break;

case 1929:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [995, 7937, 2360, 214, 5287];
	enumType.size = 5;
	break;

case 1931:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [450, 1520, 2362, 3050, 5280];
	enumType.size = 5;
	break;

case 1932:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [452, 1516, 2364, 3050, 7937];
	enumType.size = 5;
	break;

case 1936:
	enumType.valueMap = {4119=1, 4121=1, 4123=1, 4125=1, 4127=1, 4129=1, 4131=1, 39=1, 40=1, 41=1, 42=1, 43=1, 44=1, 45=1, 46=1, 47=1, 48=1, 50=1, 52=1, 54=1, 56=1, 58=1, 60=1, 62=1, 64=1, 4161=1, 66=1, 68=1, 70=1, 72=1, 93=1, 103=1, 109=1, 113=1, 115=1, 117=1, 119=1, 121=1, 123=1, 125=1, 127=1, 129=1, 131=1, 133=1, 12422=1, 135=1, 12423=1, 12424=1, 137=1, 12425=1, 12426=1, 139=1, 12427=1, 12428=1, 141=1, 12429=1, 12430=1, 143=1, 12431=1, 12432=1, 145=1, 12433=1, 12434=1, 147=1, 12435=1, 12436=1, 149=1, 12437=1, 12438=1, 151=1, 12439=1, 12440=1, 153=1, 12441=1, 12442=1, 155=1, 12443=1, 12444=1, 157=1, 12445=1, 12446=1, 159=1, 12447=1, 12448=1, 161=1, 12449=1, 12450=1, 163=1, 12451=1, 12452=1, 165=1, 12453=1, 12454=1, 167=1, 12455=1, 12456=1, 169=1, 12457=1, 12458=1, 171=1, 12459=1, 12460=1, 173=1, 12461=1, 12462=1, 175=1, 12463=1, 12464=1, 177=1, 12465=1, 12466=1, 179=1, 12467=1, 12468=1, 181=1, 183=1, 185=1, 187=1, 189=1, 191=1, 193=1, 4291=1, 4293=1, 225=1, 12531=1, 12533=1, 247=1, 249=1, 251=1, 253=1, 255=1, 257=1, 259=1, 261=1, 263=1, 265=1, 267=1, 269=1, 12567=1, 12568=1, 12570=1, 12581=1, 12583=1, 299=1, 8496=1, 8498=1, 8500=1, 8502=1, 8504=1, 313=1, 8506=1, 315=1, 8508=1, 8510=1, 319=1, 12608=1, 8512=1, 4417=1, 12610=1, 8514=1, 4419=1, 12612=1, 8516=1, 4421=1, 325=1, 12614=1, 8518=1, 4423=1, 12616=1, 8520=1, 329=1, 12618=1, 8522=1, 12620=1, 8524=1, 333=1, 12622=1, 8526=1, 8528=1, 8530=1, 339=1, 8532=1, 4440=1, 347=1, 351=1, 355=1, 8548=1, 8550=1, 8552=1, 361=1, 8554=1, 8556=1, 365=1, 8558=1, 8560=1, 8562=1, 8564=1, 373=1, 8566=1, 8568=1, 8570=1, 379=1, 8572=1, 8574=1, 8576=1, 385=1, 8578=1, 8580=1, 8582=1, 391=1, 8584=1, 8586=1, 8588=1, 397=1, 8590=1, 8592=1, 401=1, 8594=1, 8596=1, 8598=1, 407=1, 8600=1, 8602=1, 411=1, 8604=1, 413=1, 8606=1, 8608=1, 8610=1, 8612=1, 8614=1, 8616=1, 4522=1, 8618=1, 8620=1, 4525=1, 8622=1, 4535=1, 4537=1, 4540=1, 4542=1, 4580=1, 12776=1, 12778=1, 12780=1, 12782=1, 12784=1, 12786=1, 12788=1, 12790=1, 12792=1, 12794=1, 12796=1, 12798=1, 12800=1, 4608=1, 12802=1, 12804=1, 12806=1, 12808=1, 12810=1, 12812=1, 12814=1, 12816=1, 12818=1, 12820=1, 12822=1, 12824=1, 12825=1, 12826=1, 12827=1, 12828=1, 12829=1, 12830=1, 12831=1, 12832=1, 12833=1, 12834=1, 12835=1, 12836=1, 12837=1, 12838=1, 12839=1, 12840=1, 12841=1, 554=1, 555=1, 556=1, 557=1, 558=1, 559=1, 560=1, 561=1, 562=1, 563=1, 564=1, 565=1, 566=1, 567=1, 569=1, 571=1, 573=1, 575=1, 8778=1, 8780=1, 8782=1, 8784=1, 596=1, 4694=1, 598=1, 4695=1, 4696=1, 8792=1, 4697=1, 4698=1, 4699=1, 4773=1, 4778=1, 4783=1, 4788=1, 4793=1, 4798=1, 4803=1, 4819=1, 4820=1, 4821=1, 4822=1, 4823=1, 4824=1, 4825=1, 4827=1, 4842=1, 4844=1, 4846=1, 4848=1, 753=1, 800=1, 801=1, 802=1, 803=1, 804=1, 805=1, 806=1, 807=1, 808=1, 809=1, 810=1, 811=1, 819=1, 820=1, 821=1, 822=1, 823=1, 824=1, 825=1, 826=1, 827=1, 828=1, 829=1, 830=1, 837=1, 839=1, 841=1, 843=1, 845=1, 847=1, 849=1, 851=1, 853=1, 855=1, 857=1, 859=1, 9052=1, 861=1, 863=1, 864=1, 865=1, 866=1, 867=1, 868=1, 869=1, 877=1, 21358=1, 879=1, 880=1, 881=1, 882=1, 9075=1, 884=1, 21364=1, 21365=1, 886=1, 888=1, 890=1, 892=1, 5003=1, 942=1, 9140=1, 9141=1, 950=1, 9142=1, 9143=1, 9144=1, 9145=1, 958=1, 960=1, 970=1, 9174=1, 9177=1, 9179=1, 9181=1, 9183=1, 13279=1, 13280=1, 9185=1, 9187=1, 9188=1, 9189=1, 9190=1, 9191=1, 9192=1, 5096=1, 9193=1, 5097=1, 9194=1, 5098=1, 5099=1, 5100=1, 5101=1, 5102=1, 5103=1, 5104=1, 1009=1, 5105=1, 5106=1, 9236=1, 9238=1, 9239=1, 9240=1, 13337=1, 9241=1, 9242=1, 9243=1, 9244=1, 9245=1, 1059=1, 1061=1, 1063=1, 1065=1, 1067=1, 1069=1, 1071=1, 1075=1, 1077=1, 1079=1, 1081=1, 1083=1, 1085=1, 1087=1, 1089=1, 1093=1, 1095=1, 1097=1, 1099=1, 1101=1, 1103=1, 1105=1, 1107=1, 1109=1, 1111=1, 1113=1, 1115=1, 1117=1, 1119=1, 1121=1, 1125=1, 1127=1, 1129=1, 1131=1, 1133=1, 1135=1, 1137=1, 1139=1, 1141=1, 1143=1, 9336=1, 1145=1, 13433=1, 9337=1, 9338=1, 1147=1, 9339=1, 9340=1, 9341=1, 9342=1, 1151=1, 1153=1, 1155=1, 1157=1, 1159=1, 1161=1, 1163=1, 1165=1, 1167=1, 1169=1, 1173=1, 1175=1, 1177=1, 1179=1, 1181=1, 1183=1, 9375=1, 5280=1, 1185=1, 9377=1, 5281=1, 5282=1, 9378=1, 9379=1, 5283=1, 9380=1, 5284=1, 1189=1, 9381=1, 5285=1, 9382=1, 5286=1, 1191=1, 5287=1, 5288=1, 1193=1, 5289=1, 5290=1, 1195=1, 5291=1, 5292=1, 1197=1, 5293=1, 5294=1, 1199=1, 5295=1, 5296=1, 1201=1, 5297=1, 5298=1, 1203=1, 5299=1, 5300=1, 1205=1, 5301=1, 5302=1, 1207=1, 5303=1, 5304=1, 1209=1, 5305=1, 5306=1, 1211=1, 5307=1, 5308=1, 1213=1, 5309=1, 5310=1, 5311=1, 1217=1, 5313=1, 5314=1, 5315=1, 5316=1, 5318=1, 5319=1, 9416=1, 5320=1, 5321=1, 9418=1, 5322=1, 9419=1, 5323=1, 9420=1, 5324=1, 9423=1, 9425=1, 9427=1, 1237=1, 9429=1, 1239=1, 9431=1, 1241=1, 1243=1, 9436=1, 1245=1, 9438=1, 1247=1, 9440=1, 9442=1, 9444=1, 5350=1, 9446=1, 9448=1, 9450=1, 9452=1, 9454=1, 1265=1, 9457=1, 1267=1, 9459=1, 1269=1, 9461=1, 9463=1, 1273=1, 9465=1, 1275=1, 1277=1, 1279=1, 5376=1, 1281=1, 1283=1, 1285=1, 1287=1, 1289=1, 1291=1, 1293=1, 1295=1, 1297=1, 1299=1, 1301=1, 1303=1, 1307=1, 1309=1, 1311=1, 1313=1, 1315=1, 1317=1, 1319=1, 1321=1, 1323=1, 1325=1, 1327=1, 1329=1, 1331=1, 1333=1, 1335=1, 1337=1, 1339=1, 1341=1, 1343=1, 1345=1, 1347=1, 1349=1, 1351=1, 1353=1, 1355=1, 1357=1, 1359=1, 1361=1, 1363=1, 1365=1, 1367=1, 1369=1, 1371=1, 1373=1, 1375=1, 1381=1, 1383=1, 1385=1, 1387=1, 1389=1, 1391=1, 1393=1, 1395=1, 1397=1, 1399=1, 5504=1, 1420=1, 5516=1, 1422=1, 1424=1, 5521=1, 1426=1, 1428=1, 5525=1, 1430=1, 5527=1, 1432=1, 5529=1, 5531=1, 5533=1, 1438=1, 5535=1, 1440=1, 5537=1, 1442=1, 5539=1, 1444=1, 5541=1, 1446=1, 5543=1, 1448=1, 5545=1, 1450=1, 5547=1, 1452=1, 5549=1, 1454=1, 1456=1, 1458=1, 1462=1, 1470=1, 1472=1, 1474=1, 1476=1, 1478=1, 1511=1, 1513=1, 1515=1, 1517=1, 1519=1, 1521=1, 1539=1, 9736=1, 9739=1, 9741=1, 9743=1, 9745=1, 1601=1, 1603=1, 1605=1, 1607=1, 1609=1, 1613=1, 1615=1, 1635=1, 1637=1, 1639=1, 1641=1, 1643=1, 5739=1, 1645=1, 5741=1, 5743=1, 5745=1, 5747=1, 9843=1, 9844=1, 5749=1, 9845=1, 1654=1, 9846=1, 9847=1, 9848=1, 1656=1, 5753=1, 9849=1, 1658=1, 9850=1, 5755=1, 9851=1, 9852=1, 1660=1, 5757=1, 9853=1, 1662=1, 9854=1, 9855=1, 5759=1, 1664=1, 9856=1, 5761=1, 9857=1, 9858=1, 5763=1, 9859=1, 9860=1, 5765=1, 9861=1, 9862=1, 9863=1, 9864=1, 5769=1, 9865=1, 1673=1, 9866=1, 5771=1, 9867=1, 1675=1, 5773=1, 1677=1, 5775=1, 1679=1, 5777=1, 1681=1, 5779=1, 1683=1, 5781=1, 5783=1, 5785=1, 5787=1, 1692=1, 5789=1, 1694=1, 5791=1, 1696=1, 5793=1, 1698=1, 5795=1, 1700=1, 5797=1, 1702=1, 5799=1, 1704=1, 5801=1, 1706=1, 5803=1, 1708=1, 5805=1, 1710=1, 5807=1, 1712=1, 5809=1, 1714=1, 5811=1, 1716=1, 5813=1, 1718=1, 5815=1, 1720=1, 5817=1, 1722=1, 5819=1, 1724=1, 1725=1, 5821=1, 1727=1, 5823=1, 1729=1, 5825=1, 1731=1, 5827=1, 5829=1, 1733=1, 1734=1, 5831=1, 5833=1, 5835=1, 5837=1, 1741=1, 1743=1, 5839=1, 1745=1, 5841=1, 5843=1, 5845=1, 5847=1, 5849=1, 5851=1, 5853=1, 1759=1, 5855=1, 5857=1, 5859=1, 1763=1, 5861=1, 5863=1, 5865=1, 1769=1, 5867=1, 5869=1, 5871=1, 1775=1, 5873=1, 5875=1, 5877=1, 1781=1, 5879=1, 5881=1, 5883=1, 5885=1, 5887=1, 5889=1, 1793=1, 1794=1, 5891=1, 5893=1, 5895=1, 5897=1, 9994=1, 5899=1, 9996=1, 5901=1, 9998=1, 5903=1, 10000=1, 5905=1, 10002=1, 5907=1, 10004=1, 5909=1, 10006=1, 5911=1, 5913=1, 10010=1, 5915=1, 5917=1, 10014=1, 5919=1, 10016=1, 5921=1, 10018=1, 5923=1, 10020=1, 5925=1, 5927=1, 5929=1, 5933=1, 10029=1, 5935=1, 10031=1, 10033=1, 5937=1, 10034=1, 10035=1, 5940=1, 10037=1, 5943=1, 10039=1, 5945=1, 10041=1, 5947=1, 10043=1, 5949=1, 10045=1, 10047=1, 5952=1, 10049=1, 5954=1, 10051=1, 5956=1, 1861=1, 10053=1, 5958=1, 10055=1, 1863=1, 10057=1, 1865=1, 10059=1, 1869=1, 10061=1, 1871=1, 10063=1, 10065=1, 5970=1, 1875=1, 10067=1, 5972=1, 10069=1, 10071=1, 1881=1, 10075=1, 5980=1, 5982=1, 10079=1, 1889=1, 5986=1, 1891=1, 10083=1, 5988=1, 10087=1, 10088=1, 1897=1, 10089=1, 5994=1, 10090=1, 10091=1, 5996=1, 10093=1, 5998=1, 10095=1, 6000=1, 1905=1, 10097=1, 6002=1, 10099=1, 1907=1, 6004=1, 1909=1, 10101=1, 6006=1, 10103=1, 6008=1, 1913=1, 10105=1, 6010=1, 10107=1, 6012=1, 10109=1, 6014=1, 10111=1, 6016=1, 10113=1, 6018=1, 10115=1, 10117=1, 10119=1, 10121=1, 10123=1, 1931=1, 10125=1, 10127=1, 6032=1, 6034=1, 10132=1, 1941=1, 10134=1, 6038=1, 1942=1, 10136=1, 6041=1, 6043=1, 6045=1, 10142=1, 6047=1, 1951=1, 10143=1, 10144=1, 10145=1, 6049=1, 10146=1, 1955=1, 6051=1, 10147=1, 10149=1, 1957=1, 10150=1, 10156=1, 10158=1, 10159=1, 1967=1, 1982=1, 1985=1, 1997=1, 2001=1, 2003=1, 2009=1, 2011=1, 2017=1, 2048=1, 2054=1, 2064=1, 2074=1, 2084=1, 6211=1, 6213=1, 6215=1, 6217=1, 6219=1, 6221=1, 2126=1, 6223=1, 6225=1, 6227=1, 6229=1, 6231=1, 6233=1, 6235=1, 2140=1, 6237=1, 2142=1, 6239=1, 6241=1, 6243=1, 6245=1, 6247=1, 2152=1, 6249=1, 6251=1, 6253=1, 6255=1, 6257=1, 6259=1, 6261=1, 6263=1, 6265=1, 6267=1, 6269=1, 6271=1, 6273=1, 6275=1, 6277=1, 6279=1, 6281=1, 6283=1, 6285=1, 6287=1, 2191=1, 6289=1, 2195=1, 14490=1, 14492=1, 2205=1, 14494=1, 2209=1, 6305=1, 2213=1, 2217=1, 6319=1, 6322=1, 6324=1, 6326=1, 6328=1, 6330=1, 6332=1, 6333=1, 2253=1, 2255=1, 2259=1, 2277=1, 2281=1, 2283=1, 2287=1, 2289=1, 2293=1, 2297=1, 2301=1, 2313=1, 2317=1, 2319=1, 2321=1, 2323=1, 2325=1, 2327=1, 2341=1, 2343=1, 2349=1, 2351=1, 2353=1, 2355=1, 2357=1, 2359=1, 2361=1, 2363=1, 2370=1, 6470=1, 6472=1, 6474=1, 6476=1, 2391=1, 2428=1, 2430=1, 2432=1, 2434=1, 2436=1, 2438=1, 2440=1, 2442=1, 2444=1, 2446=1, 2448=1, 2450=1, 2452=1, 2454=1, 2456=1, 2458=1, 2460=1, 2462=1, 2464=1, 6562=1, 2466=1, 2468=1, 2470=1, 2472=1, 2474=1, 2476=1, 6573=1, 6575=1, 2481=1, 6577=1, 6579=1, 6581=1, 2487=1, 6583=1, 6585=1, 2489=1, 2493=1, 2495=1, 2499=1, 2501=1, 2505=1, 2507=1, 2509=1, 2532=1, 2533=1, 2534=1, 2535=1, 2536=1, 2537=1, 2538=1, 2539=1, 2540=1, 2541=1, 2550=1, 2552=1, 2554=1, 2556=1, 2558=1, 2560=1, 2562=1, 2564=1, 2566=1, 2568=1, 2570=1, 6667=1, 2572=1, 14870=1, 6681=1, 6683=1, 6685=1, 6687=1, 6689=1, 6691=1, 6693=1, 6701=1, 6703=1, 6705=1, 10808=1, 10810=1, 10820=1, 10822=1, 10824=1, 6814=1, 10954=1, 10956=1, 10958=1, 10973=1, 2861=1, 2862=1, 2864=1, 2865=1, 2866=1, 11069=1, 2878=1, 11072=1, 11074=1, 11076=1, 11079=1, 11081=1, 11083=1, 11085=1, 11088=1, 11090=1, 11092=1, 11095=1, 11097=1, 11099=1, 11101=1, 11103=1, 11105=1, 11107=1, 11109=1, 11111=1, 11113=1, 11115=1, 11118=1, 11120=1, 11122=1, 11124=1, 11126=1, 11128=1, 11130=1, 11133=1, 2955=1, 7054=1, 7056=1, 2961=1, 7058=1, 7060=1, 7062=1, 11159=1, 7064=1, 7066=1, 7068=1, 7070=1, 7072=1, 7074=1, 7078=1, 7080=1, 7082=1, 7084=1, 7086=1, 2998=1, 3000=1, 3004=1, 3008=1, 3010=1, 3012=1, 3014=1, 3016=1, 3018=1, 3020=1, 3022=1, 3024=1, 3026=1, 3028=1, 3030=1, 3032=1, 3034=1, 3036=1, 3038=1, 3040=1, 3042=1, 3044=1, 3046=1, 11238=1, 11240=1, 11242=1, 11244=1, 11246=1, 11248=1, 11250=1, 11252=1, 11254=1, 11256=1, 7168=1, 7170=1, 7176=1, 7178=1, 7186=1, 7188=1, 3093=1, 3095=1, 3096=1, 3097=1, 3098=1, 3099=1, 3100=1, 7196=1, 3101=1, 7198=1, 7206=1, 7208=1, 7216=1, 7218=1, 11324=1, 11328=1, 3138=1, 11330=1, 11332=1, 11334=1, 11335=1, 3144=1, 11367=1, 11369=1, 11371=1, 11373=1, 11375=1, 11377=1, 3190=1, 3192=1, 3194=1, 3196=1, 3198=1, 3200=1, 3202=1, 3228=1, 11429=1, 11431=1, 11433=1, 11435=1, 11437=1, 11439=1, 11441=1, 11443=1, 11445=1, 11447=1, 11449=1, 11451=1, 11453=1, 11455=1, 11457=1, 11459=1, 11461=1, 11463=1, 11465=1, 11467=1, 11469=1, 11471=1, 11473=1, 11475=1, 11477=1, 11479=1, 11481=1, 11483=1, 11485=1, 11487=1, 11493=1, 11495=1, 11497=1, 11499=1, 11501=1, 11503=1, 11505=1, 11507=1, 11509=1, 11511=1, 11513=1, 11515=1, 11517=1, 11519=1, 3327=1, 11521=1, 3329=1, 11523=1, 3331=1, 11525=1, 3333=1, 3335=1, 3337=1, 3339=1, 3341=1, 3343=1, 3369=1, 3371=1, 3373=1, 3379=1, 3381=1, 3385=1, 3387=1, 3389=1, 3391=1, 3393=1, 3438=1, 3440=1, 3442=1, 3444=1, 3446=1, 19830=1, 3448=1, 7568=1, 19922=1, 19927=1, 19932=1, 7650=1, 7660=1, 7662=1, 7664=1, 7666=1, 19965=1, 19967=1, 19994=1, 19996=1, 20052=1, 20053=1, 3749=1, 3751=1, 3753=1, 3755=1, 12007=1, 12009=1, 12011=1, 12013=1, 12015=1, 12017=1, 12019=1, 12021=1, 12023=1, 12025=1, 12027=1, 12029=1, 12031=1, 12033=1, 12035=1, 12037=1, 12039=1, 12041=1, 7946=1, 12043=1, 12045=1, 3853=1, 12047=1, 3855=1, 12049=1, 3857=1, 12051=1, 3859=1, 12053=1, 3861=1, 12055=1, 3863=1, 12057=1, 3865=1, 12059=1, 3867=1, 12061=1, 12063=1, 12065=1, 12067=1, 12069=1, 12071=1, 12073=1, 12075=1, 12077=1, 12079=1, 20272=1, 12081=1, 12083=1, 12085=1, 20278=1, 12087=1, 12089=1, 12091=1, 20284=1, 12093=1, 12095=1, 12097=1, 20290=1, 12099=1, 12101=1, 12103=1, 8007=1, 8008=1, 20296=1, 12105=1, 8009=1, 8010=1, 12107=1, 8011=1, 8012=1, 8013=1, 8014=1, 20302=1, 8015=1, 8016=1, 8017=1, 8018=1, 8019=1, 8020=1, 20308=1, 8021=1, 20314=1, 12123=1, 20320=1, 20326=1, 12140=1, 20332=1, 12142=1, 12144=1, 12146=1, 20338=1, 12148=1, 20344=1, 20350=1, 20356=1, 20362=1, 12172=1, 12176=1, 20368=1, 20374=1, 20380=1, 20386=1, 20392=1, 20398=1, 20404=1, 20410=1, 20416=1, 20422=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1581;
	break;

case 1939:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [7568, 3038, 2458, 125, 137, 3014, 3046, 119, 185, 149, 167, 3022, 3030, 161, 179, 9745, 155, 10004, 6691, 193, 143, 173, 131, 3036, 2456, 123, 135, 3012, 3044, 117, 183, 147, 165, 3020, 3028, 159, 177, 9743, 153, 10002, 6689, 191, 141, 171, 129, 3034, 2454, 121, 133, 3010, 3042, 115, 181, 145, 163, 3018, 3026, 157, 175, 9741, 151, 10000, 6687, 189, 139, 169, 127, 3032, 2452, 2428, 2432, 3008, 3040, 2448, 2436, 2442, 3016, 3024, 2440, 2446, 9739, 2438, 9998, 6685, 2450, 2434, 2444, 2430, 1317, 4129, 890, 43, 1357, 1371, 1111, 3100, 1211, 810, 823, 1161, 3200, 829, 1199, 867, 2539, 1301, 1430, 1145, 1331, 1245, 1183, 1287, 2538, 2361, 804, 1345, 7198, 12567, 12568, 1397, 573, 556, 1478, 1729, 1704, 1706, 1708, 1710, 1712, 1727, 1731, 1725, 2297, 319, 5958, 5956, 5954, 5952, 5949, 5947, 5945, 5943, 2323, 10808, 52, 1905, 5996, 9075, 261, 103, 1759, 881, 47, 6006, 6008, 365, 1391, 413, 6004, 1724, 1718, 565, 2487, 2499, 2493, 2064, 559, 877, 7070, 7072, 7062, 7078, 7064, 7074, 7082, 7080, 7066, 1871, 7084, 1875, 1881, 9996, 9994, 1869, 7086, 7068, 1009, 1307, 4119, 882, 39, 1351, 2349, 1375, 1103, 3095, 1205, 806, 819, 1155, 3190, 825, 1189, 864, 1291, 1422, 1139, 1265, 1117, 1075, 1087, 1321, 1237, 1173, 1277, 800, 1337, 1794, 11375, 11367, 11335, 11334, 11369, 11373, 11324, 11377, 11371, 11463, 11507, 11431, 11459, 11455, 11519, 11515, 11441, 11475, 11471, 11499, 11483, 11495, 11487, 11435, 11447, 11479, 11523, 11467, 11511, 11451, 11461, 11505, 11429, 11457, 11453, 11517, 11513, 11443, 11473, 11469, 11497, 11481, 11493, 11485, 11433, 11445, 11477, 11521, 11465, 11509, 11449, 11503, 11501, 11439, 11437, 6032, 6034, 7666, 7664, 7662, 7660, 10018, 10020, 10016, 10014, 3138, 6016, 265, 753, 5102, 1891, 5980, 5769, 5003, 562, 1985, 2259, 5755, 10034, 10033, 2209, 1897, 2074, 5763, 339, 1169, 2140, 4291, 2878, 2142, 4293, 2343, 3228, 1861, 1955, 564, 13433, 837, 6693, 4423, 4421, 4419, 4417, 2011, 5970, 560, 1601, 1662, 1643, 10956, 10958, 10954, 10973, 1745, 2509, 2505, 2507, 1065, 1135, 1099, 1615, 1664, 1645, 4696, 267, 109, 1913, 2126, 1399, 575, 557, 1605, 1658, 1639, 6585, 6583, 12583, 1393, 569, 554, 7188, 6667, 2277, 2084, 7178, 2357, 8784, 1654, 1635, 12608, 12610, 12612, 12614, 12616, 12618, 12620, 12622, 10149, 1909, 958, 2391, 9736, 6681, 6683, 249, 5994, 1743, 1131, 255, 347, 10061, 10057, 10065, 10053, 10156, 10090, 10136, 10095, 10093, 10099, 10097, 10103, 10101, 10079, 10045, 10051, 10039, 10088, 10069, 10071, 10089, 10134, 10083, 10075, 10087, 10132, 10043, 10049, 10037, 10063, 10041, 10059, 10047, 10067, 10035, 10055, 11525, 10091, 10107, 10113, 10123, 10119, 10117, 10109, 10111, 10115, 10125, 10127, 10105, 10121, 10159, 10158, 11238, 11256, 13337, 11240, 11242, 11244, 11246, 11248, 11250, 11252, 11254, 259, 1309, 4121, 884, 40, 1349, 2351, 1363, 1101, 3096, 1203, 807, 820, 1153, 3192, 826, 1191, 863, 2533, 1293, 1420, 1137, 1267, 1115, 1067, 1081, 1323, 1239, 1175, 1279, 801, 2532, 1335, 247, 11128, 11074, 11126, 11124, 11122, 11120, 11118, 11088, 11133, 11083, 11081, 11079, 11092, 11115, 11076, 11069, 11090, 11113, 11111, 11109, 11107, 11105, 11130, 11085, 11103, 11101, 11099, 11097, 11095, 11072, 5779, 5781, 5783, 5785, 5819, 5821, 5823, 5825, 5827, 5829, 5831, 5833, 5843, 5845, 5847, 5849, 5803, 5805, 5807, 5809, 5771, 5773, 5775, 5777, 5787, 5789, 5791, 5793, 5859, 5861, 5863, 5865, 5899, 5901, 5903, 5905, 5907, 5909, 5911, 5913, 5923, 5925, 5927, 5929, 5883, 5885, 5887, 5889, 5851, 5853, 5855, 5857, 5867, 5869, 5871, 5873, 5891, 5893, 5895, 5897, 5915, 5917, 5919, 5921, 5875, 5877, 5879, 5881, 5811, 5813, 5815, 5817, 5835, 5837, 5839, 5841, 5795, 5797, 5799, 5801, 6000, 263, 2481, 4699, 563, 1741, 1129, 1061, 1095, 1167, 1059, 1063, 225, 942, 379, 9052, 3438, 839, 12454, 12035, 12037, 12427, 12796, 12439, 12836, 12451, 12123, 12021, 12444, 12833, 12461, 12462, 12463, 12464, 12465, 12466, 12029, 12443, 12827, 12430, 12800, 12095, 12097, 12099, 12101, 12103, 12105, 12107, 12091, 12449, 12017, 12831, 12049, 12453, 12043, 12445, 12468, 12085, 12428, 12460, 12013, 12432, 12448, 12148, 12834, 12830, 12802, 12424, 12782, 12033, 12423, 12440, 12786, 12087, 12067, 12835, 12810, 12434, 12422, 12065, 12425, 12025, 12806, 12829, 12841, 12433, 12822, 12828, 12027, 12063, 12023, 12812, 12784, 12839, 12788, 12061, 12820, 12071, 12437, 12041, 12450, 12073, 12075, 12077, 12079, 12081, 12083, 12778, 12838, 12804, 12826, 12429, 12794, 12457, 12792, 12837, 12436, 12455, 12093, 12458, 12467, 12057, 12146, 12144, 12142, 12140, 12011, 12816, 12818, 12442, 12840, 12009, 12069, 12446, 12055, 12814, 12459, 12019, 12015, 12059, 12456, 12780, 12172, 12176, 12825, 12790, 12533, 12531, 12045, 12438, 12832, 12776, 12007, 12426, 12441, 12824, 12452, 12798, 12051, 12808, 12431, 12039, 12053, 12447, 12031, 12435, 12047, 12089, 355, 1967, 5521, 3448, 859, 6051, 861, 1389, 6038, 6041, 6213, 391, 3444, 851, 6047, 853, 251, 6010, 93, 5739, 5753, 5757, 5765, 5745, 5747, 5743, 5749, 5761, 5741, 2327, 2293, 558, 4695, 1315, 4127, 888, 42, 1355, 2359, 1369, 1109, 3099, 1209, 809, 822, 1159, 3198, 828, 1197, 866, 2537, 1299, 1428, 1143, 1273, 1121, 1071, 1085, 1329, 299, 1243, 1181, 1285, 803, 2536, 1343, 1775, 7946, 2955, 3379, 3381, 6319, 6562, 7170, 4698, 5282, 1539, 4823, 4821, 4819, 4820, 4822, 4824, 6012, 561, 3867, 3865, 3863, 3861, 3859, 3857, 3855, 3853, 1720, 1714, 3440, 845, 6043, 843, 2866, 2864, 2865, 4525, 4522, 4535, 4540, 4537, 1957, 6573, 6577, 6575, 1609, 879, 45, 10146, 1769, 407, 5972, 970, 880, 46, 2313, 351, 2301, 2048, 1865, 2283, 2289, 8782, 8778, 8780, 5350, 8792, 8496, 8498, 8500, 8502, 8504, 8506, 8508, 9859, 9860, 9861, 8576, 8578, 8580, 8582, 8584, 8586, 8588, 8516, 8518, 8520, 8522, 8524, 8526, 8510, 8512, 8514, 9843, 9844, 9845, 9846, 9847, 9848, 8590, 8592, 8594, 8562, 8564, 8566, 8568, 8570, 8572, 8574, 8548, 8550, 8552, 8554, 8556, 8558, 8560, 8596, 8598, 8600, 8602, 8604, 8606, 8608, 9865, 9866, 9867, 8528, 8530, 8532, 9852, 9853, 9854, 9855, 9856, 9857, 9858, 9849, 9850, 9851, 9862, 9863, 9864, 8610, 8612, 8614, 8616, 8618, 8620, 8622, 8011, 8014, 8015, 8010, 8019, 8020, 8017, 8021, 8018, 8016, 8009, 8008, 8013, 8007, 8012, 6018, 1931, 1942, 6701, 6703, 6705, 7054, 7056, 7058, 5318, 7060, 4440, 257, 2489, 2501, 2495, 10147, 1613, 1951, 2325, 1763, 4848, 4846, 4844, 4842, 2566, 2564, 2562, 2560, 2558, 2556, 2554, 2552, 2568, 2570, 2550, 2572, 6014, 1603, 1660, 1641, 1319, 4131, 892, 44, 1359, 1373, 1113, 3101, 1213, 811, 824, 1163, 3202, 830, 1201, 868, 2541, 1303, 1432, 1147, 1275, 1127, 1079, 1093, 1333, 1247, 1185, 1289, 805, 2540, 1347, 2363, 10145, 10142, 10143, 10144, 329, 1607, 1656, 1637, 325, 397, 401, 385, 841, 315, 950, 2355, 7650, 2961, 5759, 411, 4697, 3369, 3371, 3373, 6326, 6322, 6328, 6324, 6330, 3000, 3004, 3343, 3339, 3337, 3341, 3333, 3335, 3329, 3327, 3331, 1781, 566, 2213, 3387, 3391, 3393, 3385, 3389, 1381, 1385, 1387, 1383, 567, 4694, 1311, 4123, 886, 41, 1353, 2353, 1365, 1105, 3097, 1207, 808, 821, 1157, 3194, 827, 1193, 865, 2535, 1295, 1424, 1141, 1269, 1119, 1069, 1083, 1325, 1241, 1177, 1281, 802, 2534, 1339, 2003, 1997, 5504, 113, 1722, 1716, 1700, 1702, 1696, 1692, 6581, 1698, 1694, 1133, 1097, 2370, 7218, 4608, 6476, 6474, 6472, 6470, 5986, 5988, 373, 253, 3144, 6211, 5525, 5527, 5549, 5533, 5543, 5539, 5547, 5535, 5537, 5545, 5529, 5541, 5531, 2255, 2217, 2998, 2152, 1982, 269, 333, 361, 7196, 2317, 1889, 2009, 7186, 7176, 2319, 7168, 1863, 2287, 2321, 2001, 7216, 7206, 598, 1681, 1683, 1677, 1673, 48, 70, 72, 62, 64, 56, 54, 6579, 1679, 1675, 50, 58, 60, 66, 68, 4825, 2195, 2281, 5935, 6287, 6289, 1395, 571, 5982, 555, 187, 5937, 5940, 6814, 2017, 7208, 6002, 5933, 3442, 847, 6045, 849, 2054, 1907, 1793, 2861, 960, 2253, 2205, 2191, 2341, 9192, 9193, 9190, 9187, 9194, 9188, 9191, 9189, 9183, 9143, 9340, 9243, 9339, 9242, 9380, 9236, 9375, 9140, 9238, 9377, 9142, 9338, 9241, 9337, 9240, 9379, 9144, 9341, 9244, 9342, 9245, 9381, 9145, 9382, 9141, 9336, 9239, 9378, 9174, 9177, 9429, 9420, 9423, 9427, 9431, 9425, 9181, 9185, 9179, 9450, 9448, 9442, 9446, 9444, 9440, 9452, 9438, 9463, 9454, 9457, 9461, 9465, 9459, 9418, 9419, 9416, 9436, 13280, 13279, 10822, 10824, 10820, 5998, 3446, 855, 6049, 857, 4827, 4798, 4788, 4773, 4778, 4793, 4803, 4783, 6332, 6333, 3438, 3440, 3442, 6211, 3444, 10808, 6213, 3446, 3448, 2862, 10810, 12581, 12583, 1511, 1513, 1515, 1517, 1519, 1521, 5516, 1438, 1440, 1442, 1444, 1446, 1448, 1450, 1452, 1454, 1456, 1458, 1462, 6215, 6217, 6219, 6221, 6223, 6225, 6227, 6229, 6231, 6233, 6235, 6237, 6239, 6241, 6243, 6245, 6247, 6249, 6251, 6253, 6255, 6257, 6259, 6261, 6263, 6265, 6267, 6269, 6271, 6273, 6275, 6277, 6279, 2460, 2462, 2464, 2466, 2468, 2470, 2472, 2474, 2476, 4580, 14490, 14492, 14494, 4788, 4821, 3098, 1217, 1361, 1367, 1341, 1283, 1297, 1313, 1327, 3196, 1426, 1107, 1125, 4125, 1077, 1089, 1151, 1165, 1179, 1195, 3093, 869, 1470, 1472, 1474, 1476, 5318, 5319, 5320, 5321, 5322, 5323, 5324, 5291, 5292, 5293, 5294, 5295, 5296, 5297, 5298, 5299, 5300, 5301, 5302, 5303, 5304, 5096, 5097, 5098, 5099, 5100, 5313, 5314, 5315, 5316, 5305, 5306, 5307, 5308, 5309, 5310, 5311, 5283, 5284, 5285, 5286, 5287, 5288, 5289, 5290, 5280, 5281, 5282, 5101, 5102, 5103, 5104, 5105, 5106, 12148, 12176, 14870, 12570, 3749, 3751, 3753, 3755, 1733, 19830, 1734, 596, 1941, 4161, 4542, 6305, 10006, 10010, 10029, 10031, 10150, 11159, 19996, 19994, 5376, 6283, 6285, 6281, 11330, 11332, 11328, 20053, 20052, 21358, 21364, 21365, 313, 19922, 19927, 19932, 19965, 19967, 20272, 20278, 20284, 20290, 20296, 20302, 20308, 20314, 20320, 20326, 20332, 20338, 20344, 20350, 20356, 20362, 20368, 20374, 20380, 20386, 20392, 20398, 20404, 20410, 20416, 20422];
	enumType.size = 1581;
	break;

case 1941:
	enumType.valueMap = {4119=188, 4121=453, 4123=1121, 4125=1446, 4127=797, 4129=89, 4131=1035, 39=190, 40=455, 41=1123, 42=799, 43=91, 44=1037, 45=876, 46=883, 47=152, 48=1220, 50=1230, 52=144, 54=1226, 56=1225, 58=1231, 60=1232, 62=1223, 64=1224, 4161=1526, 66=1233, 68=1234, 70=1221, 72=1222, 93=781, 103=149, 109=343, 113=1155, 115=51, 117=29, 119=7, 121=47, 123=25, 125=3, 127=66, 129=44, 131=22, 133=48, 12422=673, 135=26, 12423=665, 12424=662, 137=4, 12425=675, 12426=748, 139=64, 12427=616, 12428=653, 141=42, 12429=706, 12430=634, 143=20, 12431=755, 12432=656, 145=53, 12433=680, 12434=672, 147=31, 12435=760, 12436=711, 149=9, 12437=693, 12438=744, 151=60, 12439=618, 12440=666, 153=38, 12441=749, 12442=724, 155=16, 12443=632, 12444=623, 157=57, 12445=650, 12446=728, 159=35, 12447=758, 12448=657, 161=13, 12449=644, 12450=695, 163=54, 12451=620, 12452=751, 165=32, 12453=648, 12454=613, 167=10, 12455=712, 12456=735, 169=65, 12457=708, 12458=714, 171=43, 12459=731, 12460=654, 173=21, 12461=625, 12462=626, 175=58, 12463=627, 12464=628, 177=36, 12465=629, 12466=630, 179=14, 12467=715, 12468=651, 181=52, 183=30, 185=8, 187=1245, 189=63, 191=41, 193=19, 4291=305, 4293=308, 225=607, 12531=742, 12533=741, 247=484, 249=382, 251=779, 253=1177, 255=386, 257=1005, 259=451, 261=148, 263=596, 265=285, 267=342, 269=1198, 12567=117, 12568=118, 12570=1516, 12581=1364, 12583=1365, 299=822, 8496=896, 8498=897, 8500=898, 8502=899, 8504=900, 313=1549, 8506=901, 315=1079, 8508=902, 8510=919, 319=133, 12608=367, 8512=920, 4417=320, 12610=368, 8514=921, 4419=319, 12612=369, 8516=913, 4421=318, 325=1074, 12614=370, 8518=914, 4423=317, 12616=371, 8520=915, 329=1070, 12618=372, 8522=916, 12620=373, 8524=917, 333=1199, 12622=374, 8526=918, 8528=955, 8530=956, 339=302, 8532=957, 4440=1004, 347=387, 351=885, 355=763, 8548=938, 8550=939, 8552=940, 361=1200, 8554=941, 8556=942, 365=155, 8558=943, 8560=944, 8562=931, 8564=932, 373=1176, 8566=933, 8568=934, 8570=935, 379=609, 8572=936, 8574=937, 8576=906, 385=1077, 8578=907, 8580=908, 8582=909, 391=774, 8584=910, 8586=911, 8588=912, 397=1075, 8590=928, 8592=929, 401=1076, 8594=930, 8596=945, 8598=946, 407=879, 8600=947, 8602=948, 411=1085, 8604=949, 413=157, 8606=950, 8608=951, 8610=971, 8612=972, 8614=973, 8616=974, 4522=866, 8618=975, 8620=976, 4525=865, 8622=977, 4535=867, 4537=869, 4540=868, 4542=1527, 4580=1427, 12776=746, 12778=702, 12780=736, 12782=663, 12784=687, 12786=667, 12788=689, 12790=740, 12792=709, 12794=707, 12796=617, 12798=752, 12800=635, 4608=1169, 12802=661, 12804=704, 12806=677, 12808=754, 12810=671, 12812=686, 12814=730, 12816=722, 12818=723, 12820=691, 12822=681, 12824=750, 12825=739, 12826=705, 12827=633, 12828=682, 12829=678, 12830=660, 12831=646, 12832=745, 12833=624, 12834=659, 12835=670, 12836=619, 12837=710, 12838=703, 12839=688, 12840=725, 12841=679, 554=357, 555=1244, 556=121, 557=348, 558=794, 559=166, 560=323, 561=847, 562=292, 563=599, 564=313, 565=161, 566=1107, 567=1118, 569=356, 571=1242, 573=120, 575=347, 8778=892, 8780=893, 8782=891, 8784=364, 596=1524, 4694=1119, 598=1215, 4695=795, 4696=341, 8792=895, 4697=1086, 4698=837, 4699=598, 4773=1346, 4778=1347, 4783=1350, 4788=1431, 4793=1348, 4798=1344, 4803=1349, 4819=842, 4820=843, 4821=1432, 4822=844, 4823=840, 4824=845, 4825=1235, 4827=1343, 4842=1017, 4844=1016, 4846=1015, 4848=1014, 753=286, 800=215, 801=481, 802=1149, 803=826, 804=114, 805=1062, 806=197, 807=462, 808=1130, 809=806, 810=97, 811=1043, 819=198, 820=463, 821=1131, 822=807, 823=98, 824=1044, 825=201, 826=466, 827=1134, 828=810, 829=101, 830=1047, 837=315, 839=612, 841=1078, 843=861, 845=859, 847=1254, 849=1256, 851=776, 853=778, 855=1340, 857=1342, 859=767, 9052=610, 861=769, 863=468, 864=203, 865=1136, 866=812, 867=103, 868=1049, 869=1454, 877=167, 21358=1546, 879=875, 880=882, 881=151, 882=189, 9075=147, 884=454, 21364=1547, 21365=1548, 886=1122, 888=798, 890=90, 892=1036, 5003=291, 942=608, 9140=1283, 9141=1300, 950=1080, 9142=1286, 9143=1275, 9144=1292, 9145=1298, 958=377, 960=1261, 970=881, 9174=1304, 9177=1305, 9179=1314, 9181=1312, 9183=1274, 13279=1334, 13280=1333, 9185=1313, 9187=1269, 9188=1271, 9189=1273, 9190=1268, 9191=1272, 9192=1266, 5096=1480, 9193=1267, 5097=1481, 9194=1270, 5098=1482, 5099=1483, 5100=1484, 5101=1507, 5102=1508, 5103=1509, 5104=1510, 1009=186, 5105=1511, 5106=1512, 9236=1281, 9238=1284, 9239=1302, 9240=1290, 13337=442, 9241=1288, 9242=1279, 9243=1277, 9244=1294, 9245=1296, 1059=605, 1061=602, 1063=606, 1065=335, 1067=475, 1069=1143, 1071=819, 1075=209, 1077=1447, 1079=1056, 1081=476, 1083=1144, 1085=820, 1087=210, 1089=1448, 1093=1057, 1095=603, 1097=1166, 1099=337, 1101=459, 1103=194, 1105=1127, 1107=1444, 1109=803, 1111=94, 1113=1040, 1115=474, 1117=208, 1119=1142, 1121=818, 1125=1445, 1127=1055, 1129=601, 1131=385, 1133=1165, 1135=336, 1137=472, 1139=206, 1141=1140, 1143=816, 9336=1301, 1145=107, 13433=314, 9337=1289, 9338=1287, 1147=1053, 9339=1278, 9340=1276, 9341=1293, 9342=1295, 1151=1449, 1153=464, 1155=199, 1157=1132, 1159=808, 1161=99, 1163=1045, 1165=1450, 1167=604, 1169=303, 1173=213, 1175=479, 1177=1147, 1179=1451, 1181=824, 1183=110, 9375=1282, 5280=1504, 1185=1060, 9377=1285, 5281=1505, 5282=1506, 9378=1303, 9379=1291, 5283=1496, 9380=1280, 5284=1497, 1189=202, 9381=1297, 5285=1498, 9382=1299, 5286=1499, 1191=467, 5287=1500, 5288=1501, 1193=1135, 5289=1502, 5290=1503, 1195=1452, 5291=1466, 5292=1467, 1197=811, 5293=1468, 5294=1469, 1199=102, 5295=1470, 5296=1471, 1201=1048, 5297=1472, 5298=1473, 1203=461, 5299=1474, 5300=1475, 1205=196, 5301=1476, 5302=1477, 1207=1129, 5303=1478, 5304=1479, 1209=805, 5305=1489, 5306=1490, 1211=96, 5307=1491, 5308=1492, 1213=1042, 5309=1493, 5310=1494, 5311=1495, 1217=1434, 5313=1485, 5314=1486, 5315=1487, 5316=1488, 5318=1459, 5319=1460, 9416=1331, 5320=1461, 5321=1462, 9418=1329, 5322=1463, 9419=1330, 5323=1464, 9420=1307, 5324=1465, 9423=1308, 9425=1311, 9427=1309, 1237=212, 9429=1306, 1239=478, 9431=1310, 1241=1146, 1243=823, 9436=1332, 1245=109, 9438=1322, 1247=1059, 9440=1320, 9442=1317, 9444=1319, 5350=894, 9446=1318, 9448=1316, 9450=1315, 9452=1321, 9454=1324, 1265=207, 9457=1325, 1267=473, 9459=1328, 1269=1141, 9461=1326, 9463=1323, 1273=817, 9465=1327, 1275=1054, 1277=214, 1279=480, 5376=1537, 1281=1148, 1283=1438, 1285=825, 1287=111, 1289=1061, 1291=204, 1293=470, 1295=1138, 1297=1439, 1299=814, 1301=105, 1303=1051, 1307=187, 1309=452, 1311=1120, 1313=1440, 1315=796, 1317=88, 1319=1034, 1321=211, 1323=477, 1325=1145, 1327=1441, 1329=821, 1331=108, 1333=1058, 1335=483, 1337=216, 1339=1151, 1341=1437, 1343=828, 1345=115, 1347=1064, 1349=456, 1351=191, 1353=1124, 1355=800, 1357=92, 1359=1038, 1361=1435, 1363=458, 1365=1126, 1367=1436, 1369=802, 1371=93, 1373=1039, 1375=193, 1381=1114, 1383=1117, 1385=1115, 1387=1116, 1389=770, 1391=156, 1393=355, 1395=1241, 1397=119, 1399=346, 5504=1154, 1420=471, 5516=1372, 1422=205, 1424=1139, 5521=765, 1426=1443, 1428=815, 5525=1180, 1430=106, 5527=1181, 1432=1052, 5529=1190, 5531=1192, 5533=1183, 1438=1373, 5535=1187, 1440=1374, 5537=1188, 1442=1375, 5539=1185, 1444=1376, 5541=1191, 1446=1377, 5543=1184, 1448=1378, 5545=1189, 1450=1379, 5547=1186, 1452=1380, 5549=1182, 1454=1381, 1456=1382, 1458=1383, 1462=1384, 1470=1455, 1472=1456, 1474=1457, 1476=1458, 1478=122, 1511=1366, 1513=1367, 1515=1368, 1517=1369, 1519=1370, 1521=1371, 1539=839, 9736=379, 9739=80, 9741=59, 9743=37, 9745=15, 1601=324, 1603=1031, 1605=349, 1607=1071, 1609=874, 1613=1010, 1615=338, 1635=366, 1637=1073, 1639=351, 1641=1033, 1643=326, 5739=782, 1645=340, 5741=791, 5743=788, 5745=786, 5747=787, 9843=922, 9844=923, 5749=789, 9845=924, 1654=365, 9846=925, 9847=926, 9848=927, 1656=1072, 5753=783, 9849=965, 1658=350, 9850=966, 5755=295, 9851=967, 9852=958, 1660=1032, 5757=784, 9853=959, 1662=325, 9854=960, 9855=961, 5759=1084, 1664=339, 9856=962, 5761=790, 9857=963, 9858=964, 5763=301, 9859=903, 9860=904, 5765=785, 9861=905, 9862=968, 9863=969, 9864=970, 5769=290, 9865=952, 1673=1219, 9866=953, 5771=535, 9867=954, 1675=1229, 5773=536, 1677=1218, 5775=537, 1679=1228, 5777=538, 1681=1216, 5779=515, 1683=1217, 5781=516, 5783=517, 5785=518, 5787=539, 1692=1161, 5789=540, 1694=1164, 5791=541, 1696=1160, 5793=542, 1698=1163, 5795=591, 1700=1158, 5797=592, 1702=1159, 5799=593, 1704=124, 5801=594, 1706=125, 5803=531, 1708=126, 5805=532, 1710=127, 5807=533, 1712=128, 5809=534, 1714=857, 5811=583, 1716=1157, 5813=584, 1718=160, 5815=585, 1720=856, 5817=586, 1722=1156, 5819=519, 1724=159, 1725=131, 5821=520, 1727=129, 5823=521, 1729=123, 5825=522, 1731=130, 5827=523, 5829=524, 1733=1521, 1734=1523, 5831=525, 5833=526, 5835=587, 5837=588, 1741=600, 1743=384, 5839=589, 1745=331, 5841=590, 5843=527, 5845=528, 5847=529, 5849=530, 5851=563, 5853=564, 1759=150, 5855=565, 5857=566, 5859=543, 1763=1013, 5861=544, 5863=545, 5865=546, 1769=878, 5867=567, 5869=568, 5871=569, 1775=829, 5873=570, 5875=579, 5877=580, 1781=1106, 5879=581, 5881=582, 5883=559, 5885=560, 5887=561, 5889=562, 1793=1259, 1794=217, 5891=571, 5893=572, 5895=573, 5897=574, 9994=182, 5899=547, 9996=181, 5901=548, 9998=82, 5903=549, 10000=61, 5905=550, 10002=39, 5907=551, 10004=17, 5909=552, 10006=1529, 5911=553, 5913=554, 10010=1530, 5915=575, 5917=576, 10014=282, 5919=577, 10016=281, 5921=578, 10018=279, 5923=555, 10020=280, 5925=556, 5927=557, 5929=558, 5933=1252, 10029=1531, 5935=1238, 10031=1532, 10033=297, 5937=1246, 10034=296, 10035=422, 5940=1247, 10037=416, 5943=141, 10039=404, 5945=140, 10041=418, 5947=139, 10043=414, 5949=138, 10045=402, 10047=420, 5952=137, 10049=415, 5954=136, 10051=403, 5956=135, 1861=311, 10053=391, 5958=134, 10055=423, 1863=1209, 10057=389, 1865=888, 10059=419, 1869=183, 10061=388, 1871=177, 10063=417, 10065=390, 5970=322, 1875=179, 10067=421, 5972=880, 10069=406, 10071=407, 1881=180, 10075=411, 5980=289, 5982=1243, 10079=401, 1889=1203, 5986=1174, 1891=288, 10083=410, 5988=1175, 10087=412, 10088=405, 1897=299, 10089=408, 5994=383, 10090=393, 10091=425, 5996=146, 10093=396, 5998=1338, 10095=395, 6000=595, 1905=145, 10097=398, 6002=1251, 10099=397, 1907=1258, 6004=158, 1909=376, 10101=400, 6006=153, 10103=399, 6008=154, 1913=344, 10105=436, 6010=780, 10107=426, 6012=846, 10109=431, 6014=1030, 10111=432, 6016=284, 10113=427, 6018=993, 10115=433, 10117=430, 10119=429, 10121=437, 10123=428, 1931=994, 10125=434, 10127=435, 6032=273, 6034=274, 10132=413, 1941=1525, 10134=409, 6038=771, 1942=995, 10136=394, 6041=772, 6043=860, 6045=1255, 10142=1067, 6047=777, 1951=1011, 10143=1068, 10144=1069, 10145=1066, 6049=1341, 10146=877, 1955=312, 6051=768, 10147=1009, 10149=375, 1957=870, 10150=1533, 10156=392, 10158=439, 10159=438, 1967=764, 1982=1197, 1985=293, 1997=1153, 2001=1212, 2003=1152, 2009=1204, 2011=321, 2017=1249, 2048=887, 2054=1257, 2064=165, 2074=300, 2084=361, 6211=1356, 6213=1359, 6215=1385, 6217=1386, 6219=1387, 6221=1388, 2126=345, 6223=1389, 6225=1390, 6227=1391, 6229=1392, 6231=1393, 6233=1394, 6235=1395, 2140=304, 6237=1396, 2142=307, 6239=1397, 6241=1398, 6243=1399, 6245=1400, 6247=1401, 2152=1196, 6249=1402, 6251=1403, 6253=1404, 6255=1405, 6257=1406, 6259=1407, 6261=1408, 6263=1409, 6265=1410, 6267=1411, 6269=1412, 6271=1413, 6273=1414, 6275=1415, 6277=1416, 6279=1417, 6281=1540, 6283=1538, 6285=1539, 6287=1239, 2191=1264, 6289=1240, 2195=1236, 14490=1428, 14492=1429, 2205=1263, 14494=1430, 2209=298, 6305=1528, 2213=1108, 2217=1194, 6319=834, 6322=1091, 6324=1093, 6326=1090, 6328=1092, 6330=1094, 6332=1351, 6333=1352, 2253=1262, 2255=1193, 2259=294, 2277=360, 2281=1237, 2283=889, 2287=1210, 2289=890, 2293=793, 2297=132, 2301=886, 2313=884, 2317=1202, 2319=1207, 2321=1211, 2323=142, 2325=1012, 2327=792, 2341=1265, 2343=309, 2349=192, 2351=457, 2353=1125, 2355=1081, 2357=363, 2359=801, 2361=113, 2363=1065, 2370=1167, 6470=1173, 6472=1172, 6474=1171, 6476=1170, 2391=378, 2428=69, 2430=87, 2432=70, 2434=85, 2436=74, 2438=81, 2440=78, 2442=75, 2444=86, 2446=79, 2448=73, 2450=84, 2452=68, 2454=46, 2456=24, 2458=2, 2460=1418, 2462=1419, 2464=1420, 6562=835, 2466=1421, 2468=1422, 2470=1423, 2472=1424, 2474=1425, 2476=1426, 6573=871, 6575=873, 2481=597, 6577=872, 6579=1227, 6581=1162, 2487=162, 6583=353, 6585=352, 2489=1006, 2493=164, 2495=1008, 2499=163, 2501=1007, 2505=333, 2507=334, 2509=332, 2532=482, 2533=469, 2534=1150, 2535=1137, 2536=827, 2537=813, 2538=112, 2539=104, 2540=1063, 2541=1050, 2550=1028, 2552=1025, 2554=1024, 2556=1023, 2558=1022, 2560=1021, 2562=1020, 2564=1019, 2566=1018, 2568=1026, 2570=1027, 6667=359, 2572=1029, 14870=1515, 6681=380, 6683=381, 6685=83, 6687=62, 6689=40, 6691=18, 6693=316, 6701=996, 6703=997, 6705=998, 10808=1358, 10810=1363, 10820=1337, 10822=1335, 10824=1336, 6814=1248, 10954=329, 10956=327, 10958=328, 10973=330, 2861=1260, 2862=1362, 2864=863, 2865=864, 2866=862, 11069=500, 2878=306, 11072=514, 11074=486, 11076=499, 11079=496, 11081=495, 11083=494, 11085=508, 11088=492, 11090=501, 11092=497, 11095=513, 11097=512, 11099=511, 11101=510, 11103=509, 11105=506, 11107=505, 11109=504, 11111=503, 11113=502, 11115=498, 11118=491, 11120=490, 11122=489, 11124=488, 11126=487, 11128=485, 11130=507, 11133=493, 2955=831, 7054=999, 7056=1000, 2961=1083, 7058=1001, 7060=1003, 7062=170, 11159=1534, 7064=172, 7066=176, 7068=185, 7070=168, 7072=169, 7074=173, 7078=171, 7080=175, 7082=174, 7084=178, 7086=184, 2998=1195, 3000=1095, 3004=1096, 3008=71, 3010=49, 3012=27, 3014=5, 3016=76, 3018=55, 3020=33, 3022=11, 3024=77, 3026=56, 3028=34, 3030=12, 3032=67, 3034=45, 3036=23, 3038=1, 3040=72, 3042=50, 3044=28, 3046=6, 11238=440, 11240=443, 11242=444, 11244=445, 11246=446, 11248=447, 11250=448, 11252=449, 11254=450, 11256=441, 7168=1208, 7170=836, 7176=1206, 7178=362, 7186=1205, 7188=358, 3093=1453, 3095=195, 3096=460, 3097=1128, 3098=1433, 3099=804, 3100=95, 7196=1201, 3101=1041, 7198=116, 7206=1214, 7208=1250, 7216=1213, 7218=1168, 11324=224, 11328=1543, 3138=283, 11330=1541, 11332=1542, 11334=221, 11335=220, 3144=1178, 11367=219, 11369=222, 11371=226, 11373=223, 11375=218, 11377=225, 3190=200, 3192=465, 3194=1133, 3196=1442, 3198=809, 3200=100, 3202=1046, 3228=310, 11429=250, 11431=229, 11433=262, 11435=241, 11437=272, 11439=271, 11441=234, 11443=255, 11445=263, 11447=242, 11449=268, 11451=247, 11453=252, 11455=231, 11457=251, 11459=230, 11461=248, 11463=227, 11465=266, 11467=245, 11469=257, 11471=236, 11473=256, 11475=235, 11477=264, 11479=243, 11481=259, 11483=238, 11485=261, 11487=240, 11493=260, 11495=239, 11497=258, 11499=237, 11501=270, 11503=269, 11505=249, 11507=228, 11509=267, 11511=246, 11513=254, 11515=233, 11517=253, 11519=232, 3327=1104, 11521=265, 3329=1103, 11523=244, 3331=1105, 11525=424, 3333=1101, 3335=1102, 3337=1099, 3339=1098, 3341=1100, 3343=1097, 3369=1087, 3371=1088, 3373=1089, 3379=832, 3381=833, 3385=1112, 3387=1109, 3389=1113, 3391=1110, 3393=1111, 3438=1353, 3440=1354, 3442=1355, 3444=1357, 3446=1360, 19830=1522, 3448=1361, 7568=0, 19922=1550, 19927=1551, 19932=1552, 7650=1082, 7660=278, 7662=277, 7664=276, 7666=275, 19965=1553, 19967=1554, 19994=1536, 19996=1535, 20052=1545, 20053=1544, 3749=1517, 3751=1518, 3753=1519, 3755=1520, 12007=747, 12009=726, 12011=721, 12013=655, 12015=733, 12017=645, 12019=732, 12021=622, 12023=685, 12025=676, 12027=683, 12029=631, 12031=759, 12033=664, 12035=614, 12037=615, 12039=756, 12041=694, 7946=830, 12043=649, 12045=743, 3853=855, 12047=761, 3855=854, 12049=647, 3857=853, 12051=753, 3859=852, 12053=757, 3861=851, 12055=729, 3863=850, 12057=716, 3865=849, 12059=734, 3867=848, 12061=690, 12063=684, 12065=674, 12067=669, 12069=727, 12071=692, 12073=696, 12075=697, 12077=698, 12079=699, 20272=1555, 12081=700, 12083=701, 12085=652, 20278=1556, 12087=668, 12089=762, 12091=643, 20284=1557, 12093=713, 12095=636, 12097=637, 20290=1558, 12099=638, 12101=639, 12103=640, 8007=991, 8008=989, 20296=1559, 12105=641, 8009=988, 8010=981, 12107=642, 8011=978, 8012=992, 8013=990, 8014=979, 20302=1560, 8015=980, 8016=987, 8017=984, 8018=986, 8019=982, 8020=983, 20308=1561, 8021=985, 20314=1562, 12123=621, 20320=1563, 20326=1564, 12140=720, 20332=1565, 12142=719, 12144=718, 12146=717, 20338=1566, 12148=1513, 20344=1567, 20350=1568, 20356=1569, 20362=1570, 12172=737, 12176=1514, 20368=1571, 20374=1572, 20380=1573, 20386=1574, 20392=1575, 20398=1576, 20404=1577, 20410=1578, 20416=1579, 20422=1580};
	enumType.valueType = INT;
	enumType.defaultint = 9999;
	enumType.keyType = OBJ;
	enumType.size = 1581;
	break;

case 1991:
	enumType.valueType = OBJ;
	enumType.defaultint = 1511;
	enumType.keyType = INT;
	enumType.valueArray = [954, 952, 590, 36, 1733, 233];
	enumType.size = 6;
	break;

case 1995:
	enumType.valueType = OBJ;
	enumType.defaultint = 1511;
	enumType.keyType = INT;
	enumType.valueArray = [954, 952, 590, 36, 1733, 233, 1265, 1734, 1925, 1923];
	enumType.size = 10;
	break;

case 1998:
	enumType.valueType = OBJ;
	enumType.defaultint = 1511;
	enumType.keyType = INT;
	enumType.valueArray = [954, 952, 590, 1733, 233, 1265, 1734, 1925, 1923, 4522, 975, 946, 1823, 960];
	enumType.size = 14;
	break;

case 1999:
	enumType.valueType = OBJ;
	enumType.defaultint = 1511;
	enumType.keyType = INT;
	enumType.valueArray = [954, 952, 590, 1733, 233, 1269, 1734, 1925, 1923, 4548, 975, 946, 1823, 960, 2347, 8794, 1353, 1755];
	enumType.size = 18;
	break;

case 2000:
	enumType.valueMap = {952=1, 233=5, 954=0, 36=3, 1733=4, 590=2};
	enumType.valueType = INT;
	enumType.defaultint = 99;
	enumType.keyType = OBJ;
	enumType.size = 6;
	break;

case 2002:
	enumType.valueMap = {1265=6, 1923=9, 36=3, 1733=4, 1925=8, 1734=7, 952=1, 233=5, 954=0, 590=2};
	enumType.valueType = INT;
	enumType.defaultint = 99;
	enumType.keyType = OBJ;
	enumType.size = 10;
	break;

case 2003:
	enumType.valueMap = {960=13, 1923=8, 1733=3, 1925=7, 1734=6, 233=4, 4522=9, 590=2, 975=10, 1265=5, 946=11, 952=1, 954=0, 1823=12};
	enumType.valueType = INT;
	enumType.defaultint = 99;
	enumType.keyType = OBJ;
	enumType.size = 14;
	break;

case 2007:
	enumType.valueMap = {960=13, 1923=8, 4548=9, 1733=3, 1925=7, 1734=6, 233=4, 1353=16, 2347=14, 590=2, 975=10, 946=11, 1269=5, 952=1, 954=0, 8794=15, 1755=17, 1823=12};
	enumType.valueType = INT;
	enumType.defaultint = 99;
	enumType.keyType = OBJ;
	enumType.size = 18;
	break;

case 2018:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1741, 1743, 6289, 6289, 1745, 2505, 2507, 2509, 24374];
	enumType.size = 9;
	break;

case 2019:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1739, 1739, 6287, 7801, 1753, 1751, 1749, 1747, 24372];
	enumType.size = 9;
	break;

case 2020:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1739, 1739, 6287, 7801, 1753, 1751, 1749, 1747, 24372];
	enumType.size = 9;
	break;

case 2021:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 0, 3, 15, 20, 20, 20, 20, 20, 20];
	enumType.size = 9;
	break;

case 2022:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2, 5, 25, 45, 45, 45, 45, 45, 45];
	enumType.size = 9;
	break;

case 2023:
	enumType.valueType = STRING;
	enumType.defaultstr = "Leather";
	enumType.keyType = INT;
	enumType.valueArray = [null, Soft leather, Hard leather, Snakeskin, Snakeskin, Green dragon leather, Blue dragon leather, Red dragon leather, Black dragon leather, Royal dragon leather];
	enumType.size = 9;
	break;

case 2024:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16993;
	enumType.keyType = INT;
	enumType.valueArray = [16993, 17001, 16992, 16991];
	enumType.size = 4;
	break;

case 2025:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Arrows, Butterfly net, Chaps, Coif, Food, Hard body, Harpoon, Hatchet, Helmet, Mage hat, Magic equipment, Melee equipment, Pickaxe, Planks, Platebody, Platelegs, Ranger equipment, Robe bottom, Robe top, Runes, Summoning pouch, Summoning scrolls, Tools];
	enumType.size = 23;
	break;

case 2026:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Melee fighters, Ranged fighters, Mages, Fishers, Miners, Hunters, Woodcutters, Smiths, Fletchers, Crafters, Builders, Cooks, Potion makers, Runecrafters];
	enumType.size = 14;
	break;

case 2027:
	enumType.valueMap = {53149722=6, 53149721=5, 53149720=4, 53149719=3, 53149718=2, 53149717=1};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 6;
	break;

case 2028:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 14098, 14106, 14094, 14095, 14096, 14097];
	enumType.size = 6;
	break;

case 2029:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 53149822, 53149759, 53149744, 53149801, 53149787, 53149773];
	enumType.size = 6;
	break;

case 2030:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 53149823, 53149761, 53149745, 53149802, 53149788, 53149774];
	enumType.size = 6;
	break;

case 2031:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 53149806, 53149748, 53149734, 53149791, 53149777, 53149763];
	enumType.size = 6;
	break;

case 2118:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Crazy Laughing, Chicken Bwak, Unlucky nubcake!, Funeral dirge, You FAIL!, Sad melody, Hysterical crowd, Game over, mortal!, Muahahaha, Gothic tune];
	enumType.size = 10;
	break;

case 2119:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 317, 13435, 3150, 327, 345, 321, 353, 335, 341, 349, 3379, 331, 359, 10138, 5001, 377, 363, 371, 2148, 11330, 7944, 3142, 11332, 383, 395, 389, 15264, 15270, 19947, 21520, 11328, 34727];
	enumType.size = 32;
	break;

case 2120:
	enumType.valueMap = {11328=31, 321=6, 11330=20, 11332=23, 389=26, 3142=22, 327=4, 7944=21, 5001=15, 331=12, 395=25, 3150=3, 335=8, 21520=30, 341=9, 345=5, 10138=14, 349=10, 15264=27, 353=7, 2148=19, 15270=28, 359=13, 34727=32, 363=17, 19947=29, 3379=11, 371=18, 377=16, 13435=2, 317=1, 383=24};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 32;
	break;

case 2121:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z];
	enumType.size = 26;
	break;

case 2123:
	enumType.valueMap = {69009437=19, 69009436=50, 69009439=19, 69009438=19, 69009433=81, 69009432=81, 69009435=50, 69009434=50, 69009429=112, 69009428=112, 69009431=81, 69009430=112, 69009425=143, 69009424=19, 69009427=143, 69009426=143, 69009421=50, 69009420=50, 69009423=19, 69009422=19, 69009417=81, 69009416=81, 69009419=50, 69009418=81, 69009413=112, 69009412=143, 69009415=112, 69009414=112, 69009411=143, 69009410=143, 69009453=19, 69009452=19, 69009454=19, 69009449=50, 69009448=81, 69009451=50, 69009450=50, 69009445=112, 69009444=112, 69009447=81, 69009446=81, 69009441=143, 69009440=143, 69009443=112, 69009442=143};
	enumType.valueType = INT;
	enumType.keyType = INTERFACE;
	enumType.size = 45;
	break;

case 2124:
	enumType.valueMap = {69009437=2, 69009436=2, 69009439=2, 69009438=2, 69009433=2, 69009432=2, 69009435=2, 69009434=2, 69009429=2, 69009428=2, 69009431=2, 69009430=2, 69009425=2, 69009424=1, 69009427=2, 69009426=2, 69009421=1, 69009420=1, 69009423=1, 69009422=1, 69009417=1, 69009416=1, 69009419=1, 69009418=1, 69009413=1, 69009412=1, 69009415=1, 69009414=1, 69009411=1, 69009410=1, 69009453=3, 69009452=3, 69009454=3, 69009449=3, 69009448=3, 69009451=3, 69009450=3, 69009445=3, 69009444=3, 69009447=3, 69009446=3, 69009441=3, 69009440=3, 69009443=3, 69009442=3};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 45;
	break;

case 2125:
	enumType.valueMap = {69009437=24, 69009436=22, 69009439=28, 69009438=26, 69009433=16, 69009432=14, 69009435=20, 69009434=18, 69009429=8, 69009428=6, 69009431=12, 69009430=10, 69009425=0, 69009424=28, 69009427=4, 69009426=2, 69009421=22, 69009420=20, 69009423=26, 69009422=24, 69009417=14, 69009416=12, 69009419=18, 69009418=16, 69009413=6, 69009412=4, 69009415=10, 69009414=8, 69009411=2, 69009410=0, 69009453=26, 69009452=24, 69009454=28, 69009449=18, 69009448=16, 69009451=22, 69009450=20, 69009445=10, 69009444=8, 69009447=14, 69009446=12, 69009441=2, 69009440=0, 69009443=6, 69009442=4};
	enumType.valueType = INT;
	enumType.defaultint = 30;
	enumType.keyType = INTERFACE;
	enumType.size = 45;
	break;

case 2129:
	enumType.valueType = STRING;
	enumType.defaultstr = "Bare arms";
	enumType.keyType = INT;
	enumType.valueArray = [Bare arms, Silver wristguards, Silver clasps, Silver bangles, Silver banding, Silver bands, Silver armguards];
	enumType.size = 7;
	break;

case 2130:
	enumType.valueMap = {1747=black dragonhide, 24372=royal dragonhide, 1749=red dragonhide, 1751=blue dragonhide, 7801=snake hide, 1753=green dragonhide, 1739=cowhide, 6287=snake hide};
	enumType.valueType = STRING;
	enumType.defaultstr = "hide";
	enumType.keyType = OBJ;
	enumType.size = 8;
	break;

case 2132:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 34;
	enumType.keyType = INT;
	enumType.valueArray = [34, 33, 117, 119, 121, 123, 125];
	enumType.size = 7;
	break;

case 2135:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 3, 4, 5, 6, 7, 8, 9];
	enumType.size = 9;
	break;

case 2136:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [1 minute, 5 minutes, 10 minutes, 15 minutes, 20 minutes, 30 minutes, 1 hour];
	enumType.size = 7;
	break;

case 2137:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [1, 5, 10, 50, 100];
	enumType.size = 5;
	break;

case 2138:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [180 seconds, 150 seconds, 100 seconds, 50 seconds, 20 seconds];
	enumType.size = 5;
	break;

case 2139:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Burthorpe, Canifis, Edgeville Dungeon, Zanaris, Pollnivneach, Shilo Village, Ancient Cavern];
	enumType.size = 7;
	break;

case 2140:
	enumType.valueType = STRING;
	enumType.defaultstr = "0";
	enumType.keyType = INT;
	enumType.valueArray = [null, 83, 91, 102, 112, 124, 138, 151, 168, 185, 204, 226, 249, 274, 304, 335, 369, 408, 450, 497, 548, 606, 667, 737, 814, 898, 990, 1094, 1207, 1332, 1470, 1623, 1791, 1977, 2182, 2409, 2658, 2935, 3240, 3576, 3947, 4358, 4810, 5310, 5863, 6471, 7144, 7887, 8707, 9612, 10612, 11715, 12934, 14278, 15764, 17404, 19214, 21212, 23420, 25856, 28546, 31516, 34795, 38416, 42413, 46826, 51699, 57079, 63019, 69576, 76818, 84812, 93638, 103383, 114143, 126022, 139138, 153619, 169608, 187260, 206750, 228269, 252027, 278259, 307221, 339198, 374502, 413482, 456519, 504037, 556499, 614422, 678376, 748985, 826944, 913019, 1008052, 1112977, 1228825];
	enumType.size = 98;
	break;

case 2162:
	enumType.valueType = STRING;
	enumType.defaultstr = "You need something undefined but necessary:";
	enumType.keyType = INT;
	enumType.valueArray = [a supply of 0:, You will require a specific crew member:, You will require a certain item in your hold:, You will require a specific captain:, Your crew must include no:, An adventurer must be part of your crew:, You must supply a quantity of western goods:, Your ships must have travelled a total distance:, You must have completed a previous voyage:, You must begin this voyage before this date:, You require a crew member with a specific trait:, You require a captain with a specific trait:, You will require a crew member of at least level, You will require a captain of at least level];
	enumType.size = 14;
	break;

case 2163:
	enumType.valueType = STRING;
	enumType.defaultstr = "Vague:";
	enumType.keyType = INT;
	enumType.valueArray = [0:, Crew:, Item:, Captain:, No:, Adventurer:, Goods:, Exploration:, Voyage:, Time Limit:, Crew Trait:, Captain Trait:, Crew Level:, Captain Level:];
	enumType.size = 14;
	break;

case 2164:
	enumType.valueType = STRING;
	enumType.defaultstr = "something undefined but valuable";
	enumType.keyType = INT;
	enumType.valueArray = [a large quantity of 0, Chimes, Bamboo, Gunpowder, Black slate, Cherrywood, Jade, Stainless steel, Terracotta, Azure, Port resources, Ancient bones, Plate, Spices, Lacquer, Chi, Eastern pearls, Koi scales, Eastern trade goods, Experience tome, Scroll piece chance, Ship supplies, Additional crew, Special reward chance];
	enumType.size = 24;
	break;

case 2165:
	enumType.valueType = STRING;
	enumType.defaultstr = "<p,happy>Ahoy there, landlubber.";
	enumType.keyType = INT;
	enumType.valueArray = [<p=2>Well met young scalliwag!, <p=7>Ahahaha. Hello there.];
	enumType.size = 2;
	break;

case 2166:
	enumType.valueType = STRING;
	enumType.defaultstr = "<p,happy>Ahoy there, landlubber.";
	enumType.keyType = INT;
	enumType.valueArray = [<p=300>What do you want?, <p=4>What?, <p=2>Hrm?];
	enumType.size = 3;
	break;

case 2167:
	enumType.valueType = STRING;
	enumType.defaultstr = "<p,happy>Ahoy there, landlubber.";
	enumType.keyType = INT;
	enumType.valueArray = [<p=2>Greetings <name>., <p=310>Hello friend., <p=2>Well met.];
	enumType.size = 3;
	break;

case 2168:
	enumType.valueType = STRING;
	enumType.defaultstr = "<p,happy>Ahoy there, landlubber";
	enumType.keyType = INT;
	enumType.valueArray = [<p=15>Ahahahaha. You're brave to approach me. I'm wanted in 12 ports., <p=12>If you're here to cause trouble, I'm happy to oblige., <p=300>What do you want? Spit it out before I gut you like a fish.];
	enumType.size = 3;
	break;

case 2169:
	enumType.valueType = STRING;
	enumType.defaultstr = "<p,happy>Ahoy there, landlubber";
	enumType.keyType = INT;
	enumType.valueArray = [<p=1>Well, hello there., <p=1>What brings this lovely vision into my company?, <p=1>Greetings and salutations, my friend.];
	enumType.size = 3;
	break;

case 2170:
	enumType.valueType = STRING;
	enumType.defaultstr = "<p,happy>Ahoy there, landlubber";
	enumType.keyType = INT;
	enumType.valueArray = [<p=1>Hello there., <p=1>Greetings. Can I help you?, <p=1>Hi there.];
	enumType.size = 3;
	break;

case 2171:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 26199, 26200, 26201, 26202, 26203, 26204, 26205, 26206, 26207, 26208, 26209, 26210, 26211, 26212, 26213, 26214, 26215, 26216, 26217, 26218, 26219, 26220, 26221, 26222, 26223, 26224, 26225, 26226, 26227, 26228, 26229, 26230, 26231, 26232, 26233, 26234, 26235, 26236, 26237, 26238, 26239, 26240, 26241, 26242, 26243, 26244, 26245, 30560, 30555, 30556, 30561, 30551, 30552, 30553, 30554, 30557, 30558, 30559];
	enumType.size = 58;
	break;

case 2172:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 26199, 26200, 26201, 26202, 26203, 26204, 26205, 26201, 26200, 26208, 26203, 26204, 26207, 26199, 26202];
	enumType.size = 15;
	break;

case 2173:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 26267, 26268, 26269, 26270, 26271, 26272, 26273, 26274, 26275, 26276, 26277, 26278, 26279, 26280, 26281, 26282, 30562, 30563, 30564, 30565];
	enumType.size = 20;
	break;

case 2174:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 26246, 26247, 26248, 26249, 26250, 26251, 26252, 26253, 26254, 26255, 26256, 26257, 26258, 26259, 26260, 26261, 26262, 26263, 26264, 26265, 26266];
	enumType.size = 21;
	break;

case 2175:
	enumType.valueType = STRUCT;
	enumType.defaultint = 17474;
	enumType.keyType = INT;
	enumType.valueArray = [17474, 17475, 17475, 17475, 17475, 17475, 17475, 17476, 17477, 17478, 17479, 17480, 17481, 17482, 17483, 17484, 17485, 17486, 17487, 17488, 17489, 17490, 17491, 17492, 17493, 17494, 17495, 17496, 17497, 17498, 17499, 17500, 17501, 17502, 17503, 17504, 17505, 17506, 17507, 17508, 17509];
	enumType.size = 41;
	break;

case 2176:
	enumType.valueMap = {17474=0, 17476=7, 17477=8, 17478=9, 17479=10, 17480=11, 17481=12, 17482=13, 17483=14, 17484=15, 17485=16, 17486=17, 17487=18, 17488=19, 17489=20, 17490=21, 17491=22, 17492=23, 17493=24, 17494=25, 17495=26, 17496=27, 17497=28, 17498=29, 17499=30, 17500=31, 17501=32, 17502=33, 17503=34, 17504=35, 17505=36, 17506=37, 17507=38, 17508=39, 17509=40};
	enumType.valueType = INT;
	enumType.keyType = STRUCT;
	enumType.size = 35;
	break;

case 2177:
	enumType.valueType = STRUCT;
	enumType.defaultint = 17474;
	enumType.keyType = INT;
	enumType.valueArray = [17474, 17476, 17478, 17480, 17482, 17484, 17486, 17488, 17490, 17492, 17494, 17496, 17498, 17500, 17502, 17504, 17506, 17508];
	enumType.size = 18;
	break;

case 2178:
	enumType.valueType = STRUCT;
	enumType.defaultint = 17474;
	enumType.keyType = INT;
	enumType.valueArray = [17474, 17477, 17479, 17481, 17483, 17485, 17487, 17489, 17491, 17493, 17495, 17497, 17499, 17501, 17503, 17505, 17507, 17509];
	enumType.size = 18;
	break;

case 2179:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7880, 7881, 7882, 7883, 7884];
	enumType.size = 5;
	break;

case 2180:
	enumType.valueType = STRING;
	enumType.defaultstr = "Avast, me hearties, this ain't done.";
	enumType.keyType = INT;
	enumType.valueArray = [Makes earwax scrimshaw., Vicious and heartless., Not to be underestimated., Keeps cats on board., Passionately hates tea., Reliable unless drunk., Reliable only when drunk., Wants a pet unicorn., Carves spoons from teak., Ran away from the circus., Dedicated follower of fashion., Has a phobia of the ship's wheel., Saving up for a top hat., Hunts sea monsters for fun., Getting over a bad breakup., Loves life in all its forms., Once dated a mermaid., Once married a mermaid., Once divorced a mermaid., Didn't get custody., Is wearing rainbow-striped pants., Is a connoisseur of fine cheeses., Dances like nobody's watching., Dances when nobody's watching., Dances, whenever, whatever., Once ate the whole thing., Had a cake, and ate it., Ate a cake, and has it., Once wrestled a bear., Once wrestled a shark., Once wrestled a moral dilemma., Sometimes comes on too strong., Knows where the bones are buried., Wants to be a captain., Wants to be a hero., Dances a fair hornpipe., Just wants to be loved., Got scurvy before it was mainstream., Ate all the pies., Demands additional biscuits., Is the cause; not the symptom., Is the symptom; not the cause., Thinks nobody knows about the puppy., Knows about the puppy., Thick as two short planks., Has a butterfly tattoo. Don't ask where., Black belt in troll-fu., Knows why the rum is gone., Is the reason the rum is gone., Knows that wasn't rum., Wants to be buried at sea., Plays the flute. Badly., Eats only hardtack, Sings a fine shanty., Seventh child of a seventh child., Claims to have invented rope., Has a citadel in the sky., Didn't really solo Nex., Mixes a mean mudslide., Earned the Fremennik name 'Farstink', Is currently reading YOUR stats page., Is constantly dropping the bass., Is constantly dropping the shark., Is constantly jumping the shark., Is constantly jumping the handcannon., Is secretly a vegan., Once punched a porpoise., Drank the spittoon for a dare., Not a fan of pies., Survivor of five keelhaulings., Lied about liking rum., Lied about being a pirate., Is the evil twin., Is the fly in the ointment., Enjoys long walks on the beach., A little less briny than the sea., Gets terrible land sickness., Smells remarkably like an admiral pie., Once gazed into the Abyss., Once threw up off Brimhaven Dock., Ate a whole shark in one bite., Voted 'Most Hairy' at nursery school., Once had a wash., Prefers the helm over the aft., Doesn't know port from starboard., Grumbles only mildly in inclement weather., Gives love a bad name., Once got King Roald's autograph., Believes penguins are our enemies., Believes penguins are our friends., Lost a party hat in a shark attack.];
	enumType.size = 91;
	break;

case 2181:
	enumType.valueMap = {130=15133, 131=16300, 260=16282, 132=16328, 261=16310, 262=16338, 140=16273, 141=16301, 270=16283, 142=16329, 271=16311, 272=16339, 150=16274, 151=16302, 152=16330, 410=16291, 411=16319, 412=16347, 160=16275, 161=16303, 162=16331, 420=16292, 421=16320, 422=16348, 170=16276, 171=16304, 172=16332, 430=16293, 431=16321, 432=16349, 310=16284, 311=16312, 440=16294, 312=16340, 441=16322, 442=16350, 320=16285, 321=16313, 450=16295, 322=16341, 451=16323, 452=16351, 330=16286, 331=16314, 460=16296, 332=16342, 461=16324, 462=16352, 210=16277, 211=16305, 340=16287, 212=16333, 341=16315, 470=16297, 342=16343, 471=16325, 472=16353, 220=16278, 221=16306, 350=16288, 222=16334, 351=16316, 352=16344, 230=16279, 231=16307, 360=16289, 232=16335, 361=16317, 362=16345, 110=15131, 111=16298, 240=16280, 112=16326, 241=16308, 370=16290, 242=16336, 371=16318, 372=16346, 120=15132, 121=16299, 250=16281, 122=16327, 251=16309, 252=16337};
	enumType.valueType = NPC;
	enumType.defaultint = 15131;
	enumType.keyType = INT;
	enumType.size = 84;
	break;

case 2182:
	enumType.valueMap = {130=16356, 131=16384, 260=16366, 132=16412, 261=16394, 262=16422, 140=16357, 141=16385, 270=16367, 142=16413, 271=16395, 272=16423, 150=16358, 151=16386, 152=16414, 410=16375, 411=16403, 412=16431, 160=16359, 161=16387, 162=16415, 420=16376, 421=16404, 422=16432, 170=16360, 171=16388, 172=16416, 430=16377, 431=16405, 432=16433, 310=16368, 311=16396, 440=16378, 312=16424, 441=16406, 442=16434, 320=16369, 321=16397, 450=16379, 322=16425, 451=16407, 452=16435, 330=16370, 331=16398, 460=16380, 332=16426, 461=16408, 462=16436, 210=16361, 211=16389, 340=16371, 212=16417, 341=16399, 470=16381, 342=16427, 471=16409, 472=16437, 220=16362, 221=16390, 350=16372, 222=16418, 351=16400, 352=16428, 230=16363, 231=16391, 360=16373, 232=16419, 361=16401, 362=16429, 110=16354, 111=16382, 240=16364, 112=16410, 241=16392, 370=16374, 242=16420, 371=16402, 372=16430, 120=16355, 121=16383, 250=16365, 122=16411, 251=16393, 252=16421};
	enumType.valueType = NPC;
	enumType.defaultint = 16354;
	enumType.keyType = INT;
	enumType.size = 84;
	break;

case 2183:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 4, 6, 7, 8, 11];
	enumType.size = 7;
	break;

case 2184:
	enumType.valueType = STRUCT;
	enumType.defaultint = 17342;
	enumType.keyType = INT;
	enumType.valueArray = [17342, 17343, 17344, 17345, 17346, 17347, 17348];
	enumType.size = 7;
	break;

case 2185:
	enumType.valueType = MODEL;
	enumType.defaultint = 40329;
	enumType.keyType = INT;
	enumType.valueArray = [82394, 82392, 82409];
	enumType.size = 3;
	break;

case 2186:
	enumType.valueType = MODEL;
	enumType.defaultint = 40329;
	enumType.keyType = INT;
	enumType.valueArray = [82446, 82454, 82466];
	enumType.size = 3;
	break;

case 2187:
	enumType.valueType = MODEL;
	enumType.defaultint = 39575;
	enumType.keyType = INT;
	enumType.valueArray = [39575, 39575, 39575, 39575, 39575, 39575];
	enumType.size = 6;
	break;

case 2188:
	enumType.valueType = MODEL;
	enumType.defaultint = 39575;
	enumType.keyType = INT;
	enumType.valueArray = [39575, 39575, 39575, 39575, 39575, 39575];
	enumType.size = 6;
	break;

case 2189:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 4, 7, 11];
	enumType.size = 4;
	break;

case 2190:
	enumType.valueType = STRUCT;
	enumType.defaultint = 17335;
	enumType.keyType = INT;
	enumType.valueArray = [17335, 17336, 17337, 17338];
	enumType.size = 4;
	break;

case 2191:
	enumType.valueType = MODEL;
	enumType.defaultint = 82411;
	enumType.keyType = INT;
	enumType.valueArray = [82411, 82412, 82405, 82393, 82388, 82389, 82396, 82395, 82403];
	enumType.size = 9;
	break;

case 2192:
	enumType.valueType = MODEL;
	enumType.defaultint = 82459;
	enumType.keyType = INT;
	enumType.valueArray = [82459, 82463, 82457, 82444, 82442, 82439, 82453, 82450, 82456];
	enumType.size = 9;
	break;

case 2193:
	enumType.valueType = MODEL;
	enumType.defaultint = 82408;
	enumType.keyType = INT;
	enumType.valueArray = [82408, 82410, 82407, 82384, 82386, 82390, 82397, 82399, 82398];
	enumType.size = 9;
	break;

case 2194:
	enumType.valueType = MODEL;
	enumType.defaultint = 82462;
	enumType.keyType = INT;
	enumType.valueArray = [82462, 82465, 82461, 82438, 82441, 82437, 82452, 82449, 82451];
	enumType.size = 9;
	break;

case 2195:
	enumType.valueType = STRING;
	enumType.defaultstr = "No";
	enumType.keyType = INT;
	enumType.valueArray = [No, Repton, Barnabas, Rocko, Pieter, Bartholomew, Tuanku, Shap, Percy, Be-Ever-Humble, Montague, James, The Accursed, The Dread, Kang, Walter, Sebastian, Alexander, Jack, Noodler, Hector, The Vile, Calico, Horatio];
	enumType.size = 24;
	break;

case 2196:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [111, 111, 111, 111, 111, 111, 99, 88, 77, 66, 55, 44, 33, 22, 11, 0, 11, 22, 33, 44, 55, 66, 77, 88, 99, 111, 111, 111, 111, 111, 111];
	enumType.size = 31;
	break;

case 2197:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [535, 533, 527, 6730, 537, 2860, 6816, 3139, 3326, 6011, 12154, 10096, 10100, 10104, 6288, 8432, 2463, 6156, 238, 4851, 995];
	enumType.size = 21;
	break;

case 2198:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [babydragon bones, big bones, bones, dagannoth bones, dragon bones, wolf bones, wyvern bones, potato cacti, vampyre dust, marigolds, carved evil turnips, larupia furs, graahk furs, kyatt furs, snake hides, bagged plants, flowers, dagannoth hides, unicorn horns, ogre coffin keys, coins];
	enumType.size = 21;
	break;

case 2199:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [23, 60, 290, 3, 11, 39, 16, 18, 28, 6, 7, 9, 5, 4, 10, 20, 9, 5, 22, 42, 20000];
	enumType.size = 21;
	break;

case 2200:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [535, 533, 527, 2860, 3139, 3326, 6011, 12154, 10096, 10100, 10104, 6288, 8432, 2463, 6156, 238, 4851, 995];
	enumType.size = 18;
	break;

case 2201:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [baby dragon bones, big bones, bones, wolf bones, potato cacti, vampyre dust, marigolds, carved evil turnips, larupia furs, graahk furs, kyatt furs, snake hides, bagged plants, flowers, dagannoth hides, unicorn horns, ogre coffin keys, coins];
	enumType.size = 18;
	break;

case 2202:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [3, 6, 18, 18, 18, 28, 6, 7, 9, 5, 4, 10, 20, 9, 5, 22, 42, 20000];
	enumType.size = 18;
	break;

case 2203:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 29, 32, 36, 40, 44, 49, 53, 60, 66, 72, 80, 88, 97, 108, 119, 131, 145, 160, 177, 195, 216, 238, 263, 290, 320, 353, 390, 431, 475];
	enumType.size = 29;
	break;

case 2204:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 15, 16, 18, 20, 22, 25, 27, 30, 33, 37, 41, 45, 50, 55, 61, 67, 74, 82, 91, 100, 111, 122, 135, 149, 164, 181, 200, 221, 244];
	enumType.size = 29;
	break;

case 2205:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 27, 29, 33, 36, 40, 45, 49, 54, 60, 66, 73, 81, 89, 99, 109, 120, 133, 146, 162, 178, 197, 217, 240, 265, 293, 323, 357, 394, 434];
	enumType.size = 29;
	break;

case 2206:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 20, 22, 25, 27, 30, 33, 37, 41, 45, 50, 55, 61, 67, 74, 82, 90, 100, 110, 122, 135, 135, 135, 180, 180, 180, 180, 180, 225, 225, 225, 225, 270, 270, 270, 270, 315, 315, 315, 315, 360, 360, 360, 405, 405, 405, 405, 450, 450, 450, 495, 495, 540, 540, 540, 585, 585, 585, 630, 630, 675, 675, 675, 720, 720, 765, 765, 765, 810, 810, 855, 855, 900, 900, 945, 945, 990, 990, 1035, 1035, 1080, 1080, 1125, 1125, 1170, 1170, 1215, 1215, 1260, 1305];
	enumType.size = 99;
	break;

case 2207:
	enumType.valueMap = {80=41, 50=14, 99=53, 20=2, 70=34, 40=10, 10=1, 90=47, 60=23, 30=6};
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.size = 10;
	break;

case 2208:
	enumType.valueMap = {80=27, 50=9, 99=34, 20=2, 70=22, 40=7, 10=1, 90=31, 60=15, 30=4};
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.size = 10;
	break;

case 2209:
	enumType.valueMap = {80=26, 50=9, 99=34, 20=2, 70=22, 40=7, 10=1, 90=30, 60=15, 30=4};
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.size = 10;
	break;

case 2210:
	enumType.valueMap = {80=36, 50=12, 99=45, 20=2, 70=29, 40=8, 10=1, 90=41, 60=19, 30=5};
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.size = 10;
	break;

case 2211:
	enumType.valueMap = {12160=crimson charm, 12163=blue charm, 12158=gold charm, 12159=green charm};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = OBJ;
	enumType.size = 4;
	break;

case 2212:
	enumType.valueMap = {12160=crimson charms, 12163=blue charms, 12158=gold charms, 12159=green charms};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = OBJ;
	enumType.size = 4;
	break;

case 2213:
	enumType.valueMap = {14656=an abyssal minion, 21512=TzRek-Jad, 14657=a creeping hand, 14658=a minitrice, 14659=a baby basilisk, 14660=a baby kurask};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = OBJ;
	enumType.size = 6;
	break;

case 2214:
	enumType.valueMap = {14656=an abyssal demon head, 21512=a fire cape, 14657=a crawling hand, 14658=a cockatrice head, 14659=a basilisk head, 14660=a kurask head};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = OBJ;
	enumType.size = 6;
	break;

case 2215:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Attack XP, Strength XP, Defence XP, Constitution XP, Ranged XP, Magic XP, Prayer XP, Slayer XP, Gold charm, Green charm, Crimson charm, Blue charm, Creeping hand, Minitrice, Baby basilisk, Baby kurask, Abyssal minion, Risk my Zeal points!];
	enumType.size = 18;
	break;

case 2216:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Blue base, Red base, Blue supply area, Red supply area, Eastern graveyard, Western graveyard, Soul obelisk, Eastern pyrefiends, Western pyrefiends, Eastern jellies, Western jellies];
	enumType.size = 11;
	break;

case 2224:
	enumType.valueType = STRING;
	enumType.defaultstr = "A battleaxe?";
	enumType.keyType = INT;
	enumType.valueArray = [A battleaxe?, A fish?, A bowl?, A shield?, A helmet?, A ring?, A pair of shears?, A sword?, A spade?];
	enumType.size = 9;
	break;

case 2225:
	enumType.valueType = MODEL;
	enumType.defaultint = 8836;
	enumType.keyType = INT;
	enumType.valueArray = [8836, 8837, 8828, 8829, 2807, 8832, 8833, 8834, 8835];
	enumType.size = 9;
	break;

case 2226:
	enumType.valueType = MODEL;
	enumType.defaultint = 8834;
	enumType.keyType = INT;
	enumType.valueArray = [8834, 8835, 8836, 8837, 8828, 8829, 2807, 8832, 8833];
	enumType.size = 9;
	break;

case 2227:
	enumType.valueType = MODEL;
	enumType.defaultint = 8832;
	enumType.keyType = INT;
	enumType.valueArray = [8832, 8833, 8834, 8835, 8836, 8837, 8828, 8829, 2807];
	enumType.size = 9;
	break;

case 2228:
	enumType.valueType = MODEL;
	enumType.defaultint = 8829;
	enumType.keyType = INT;
	enumType.valueArray = [8829, 2807, 8832, 8833, 8834, 8835, 8836, 8837, 8828];
	enumType.size = 9;
	break;

case 2238:
	enumType.valueType = STRING;
	enumType.defaultstr = "Stuff";
	enumType.keyType = INT;
	enumType.valueArray = [Cash, Runes, Coal, Essence, Ore, Bars, Gems, Herbs, Seeds, Charms, XP item, null, null, null, null, null, null, null, null, null, null, null, null, null, Other, Surprise, Emote, Costume];
	enumType.size = 15;
	break;

case 2240:
	enumType.valueMap = {32=6655, 1=3057, 33=6656, 2=3058, 3=3059, 4=3061, 5=3060, 41=6180, 42=6182, 11=6188, 43=6181, 12=6186, 13=6187, 14=6184, 15=6185, 21=7592, 22=7593, 23=7595, 24=7596, 25=7594, 31=6654};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 21;
	break;

case 2243:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Free/Members, Progress, Difficulty];
	enumType.size = 3;
	break;

case 2244:
	enumType.valueType = ENUM;
	enumType.defaultint = 223;
	enumType.keyType = INT;
	enumType.valueArray = [2247, 2250];
	enumType.size = 2;
	break;

case 2245:
	enumType.valueType = ENUM;
	enumType.defaultint = 224;
	enumType.keyType = INT;
	enumType.valueArray = [2248];
	enumType.size = 1;
	break;

case 2246:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Free, Members, Seasonal event, Seasonal quest, Tutorial];
	enumType.size = 5;
	break;

case 2247:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [4, 2, 3, 0, 1];
	enumType.size = 5;
	break;

case 2248:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 1, 1];
	enumType.size = 2;
	break;

case 2249:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Not started, In progress, Complete];
	enumType.size = 3;
	break;

case 2250:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 0];
	enumType.size = 3;
	break;

case 2251:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Novice, Intermediate, Experienced, Master, Grandmaster, Special];
	enumType.size = 6;
	break;

case 2252:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 512, 513, 14288, 515, 516, 517, 518, 519, 520, 21185, 522, 1728, null, 1726, 526, 527, 1137, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, null, 658, 694, 696, 695, 509, 659, 488, 160, 484, 887, 1007, 22560, 738, 284, 955, 951, null, 954, null, 973, 507, null, 968, 1010, 1008, 1028, 1152, 12392, 2646, 12393, 10526, 829, 1733, 1751, 1036, 1908, 2540, null, null, 2748, 6486, null, 7331, 2813, 10291, 11416, 504, 505, 16529, 19266, 20277, 5574, 24027, 26602, 28149, 28364, 24250, 29197, 28925, 30476, 30509, 30510, 30511, 30760, 30761, 30762, 31555];
	enumType.size = 206;
	break;

case 2273:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18939925, 18939927, 18939929, 18939931, 18939933, 18939935, 18939937, 18939939, 18939941, 18939943, 18939945, 18939947, 18939949, 18939951, 18939953, 18939955];
	enumType.size = 16;
	break;

case 2274:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18874379, 18874381, 18874383, 18874385, 18874387, 18874389, 18874391, 18874393, 18874395, 18874397, 18874399, 18874401, 18874403, 18874405, 18874407, 18874409, 18874411, 18874413, 18874415, 18874417, 18874419, 18874421, 18874423, 18874425, 18874427, 18874429, 18874431, 18874433, 18874435, 18874437, 18874439, 18874441, 18874443, 18874445, 18874447, 18874449, 18874451, 18874453, 18874455, 18874457, 18874459, 18874461, 18874463, 18874465, 18874467, 18874469, 18874471, 18874473, 18874475, 18874477, 18874479, 18874481, 18874483, 18874485, 18874487, 18874489, 18874491, 18874493, 18874495, 18874497, 18874499, 18874501, 18874503, 18874505, 18874507, 18874509, 18874511, 18874513, 18874515, 18874517, 18874519, 18874521, 18874523, 18874525, 18874527, 18874529, 18874531, 18874533, 18874535, 18874537, 18874539];
	enumType.size = 81;
	break;

case 2275:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18874378, 18874380, 18874382, 18874384, 18874386, 18874388, 18874390, 18874392, 18874394, 18874396, 18874398, 18874400, 18874402, 18874404, 18874406, 18874408, 18874410, 18874412, 18874414, 18874416, 18874418, 18874420, 18874422, 18874424, 18874426, 18874428, 18874430, 18874432, 18874434, 18874436, 18874438, 18874440, 18874442, 18874444, 18874446, 18874448, 18874450, 18874452, 18874454, 18874456, 18874458, 18874460, 18874462, 18874464, 18874466, 18874468, 18874470, 18874472, 18874474, 18874476, 18874478, 18874480, 18874482, 18874484, 18874486, 18874488, 18874490, 18874492, 18874494, 18874496, 18874498, 18874500, 18874502, 18874504, 18874506, 18874508, 18874510, 18874512, 18874514, 18874516, 18874518, 18874520, 18874522, 18874524, 18874526, 18874528, 18874530, 18874532, 18874534, 18874536, 18874538];
	enumType.size = 81;
	break;

case 2276:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18939924, 18939926, 18939928, 18939930, 18939932, 18939934, 18939936, 18939938, 18939940, 18939942, 18939944, 18939946, 18939948, 18939950, 18939952, 18939954];
	enumType.size = 16;
	break;

case 2279:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [660, 661, 662, 678, 679, 663, 664, 665, 666, 667, 668, 680, 681, 669, 670, 671, 684, 672, 673, 674, 682, 683, 675, 676, 677, 685, 1005, 686, 1029, 1006];
	enumType.size = 30;
	break;

case 2338:
	enumType.valueType = STRUCT;
	enumType.defaultint = 741;
	enumType.keyType = INT;
	enumType.valueArray = [741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 302, 303, 304, 1132, 1133, null, null, null, null, null, null, null, null, null, null, null, null, 13749, 13750, 13751, 13752, 13753, 13754, 13755, 13756, 13757, 13758, 13759, 14486, 14487, 14528, 737, 974, 17290, 511, 7207, 27745, 27746, 27747, 27748];
	enumType.size = 55;
	break;

case 2339:
	enumType.valueMap = {0=0, 256=22, 768=66, 1=1, 257=21, 769=65, 2=2, 258=22, 770=63, 3=3, 259=23, 771=64, 4=4, 260=23, 772=65, 5=5, 261=16, 773=66, 6=6, 262=17, 774=63, 7=7, 263=18, 775=64, 8=8, 264=19, 776=66, 265=20, 777=65, 266=21, 267=22, 268=23, 309=24, 310=27, 311=30, 312=29, 313=26, 314=25, 315=28, 316=31, 327=24, 328=27, 329=30, 330=29, 331=26, 332=25, 333=28, 334=31, 345=24, 346=27, 91=9, 347=30, 92=10, 348=29, 93=11, 349=26, 94=12, 350=25, 95=13, 351=28, 96=14, 352=31, 97=15, 659=44, 660=45, 661=46, 662=47, 663=49, 664=50, 665=51, 668=44, 669=45, 670=46, 671=47, 672=48, 673=49, 674=50, 675=51, 676=52, 677=53, 678=54, 679=44, 680=45, 169=1, 681=46, 170=1, 682=47, 171=2, 683=48, 172=2, 684=49, 173=3, 685=50, 174=3, 686=51, 175=4, 687=52, 176=4, 688=53, 177=5, 178=5, 179=6, 180=6, 181=7, 182=7, 183=8, 184=8, 185=9, 186=9, 187=10, 188=10, 189=11, 190=11, 191=12, 192=12, 193=13, 194=13, 195=14, 196=14, 197=15, 198=15, 714=55, 715=56, 716=55, 717=56, 718=55, 719=56, 724=57, 726=58, 727=59, 732=58, 733=59, 736=58, 737=59, 739=60, 742=60, 743=60, 752=61, 753=62, 754=61, 755=62, 756=61, 245=16, 757=62, 246=16, 247=17, 248=18, 249=19, 250=17, 251=18, 252=19, 253=20, 254=20, 766=63, 255=21, 767=64};
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = IDENTIKIT;
	enumType.size = 158;
	break;

case 2340:
	enumType.valueType = STRING;
	enumType.defaultstr = "Clean shaven";
	enumType.keyType = INT;
	enumType.valueArray = [Clean shaven, Moustache, Handlebar, Sensei, Half goatee, Imperial, Goatee, Short beard, Short full, Full mutton, Medium beard, Long beard, Waxed, Sideburns, Mutton, Full moustache, Vizier, Split beard, Dali, Spiffing 'Tache, Award-Winning Beard, The Full Manchu, Cap'n's Blackbeard];
	enumType.size = 23;
	break;

case 2341:
	enumType.valueType = STRUCT;
	enumType.defaultint = 697;
	enumType.keyType = INT;
	enumType.valueArray = [697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 295, 296, 297, 298, 1134, 1135, 1136, 13760, 13761, 13762, 13763, 13764, 13765, 13766, 13767, 13768, 13769, 13770, 13771, 13772, 14488, 14489, 14529, 735, 736, 17291, 17292, 17293, 22574, 22575, 27749, 27750, 27751, 27752];
	enumType.size = 71;
	break;

case 2342:
	enumType.valueMap = {45=0, 46=1, 47=2, 48=3, 49=4, 50=5, 51=6, 52=7, 53=8, 54=9, 135=10, 136=11, 137=12, 138=13, 139=14, 140=15, 652=44, 141=16, 653=46, 142=17, 654=47, 143=18, 655=48, 144=19, 656=51, 145=20, 657=52, 146=21, 658=53, 689=44, 690=45, 691=46, 692=47, 693=48, 694=50, 695=51, 696=52, 697=53, 698=54, 699=44, 700=45, 701=46, 702=47, 703=48, 704=49, 705=50, 706=51, 707=52, 708=53, 709=54, 710=55, 199=1, 711=56, 200=2, 712=57, 201=3, 713=58, 202=4, 203=5, 204=6, 205=7, 206=8, 207=9, 720=57, 209=10, 721=58, 210=11, 722=57, 211=12, 723=58, 212=13, 213=14, 725=59, 214=15, 215=16, 216=17, 728=60, 217=18, 729=61, 218=19, 730=60, 219=20, 731=61, 220=21, 221=1, 222=2, 734=60, 223=3, 735=61, 224=4, 225=5, 226=6, 738=64, 227=7, 228=8, 229=9, 231=10, 232=11, 744=62, 233=12, 745=63, 234=13, 746=64, 235=14, 747=62, 236=15, 748=63, 237=16, 749=64, 238=17, 750=65, 239=18, 751=66, 240=19, 241=20, 242=21, 243=0, 244=0, 758=65, 759=66, 760=65, 761=66, 762=67, 763=68, 764=70, 765=69, 778=67, 779=68, 780=70, 269=22, 781=69, 270=23, 782=67, 271=24, 783=68, 272=25, 784=69, 273=26, 785=70, 274=27, 275=28, 276=29, 277=30, 278=31, 279=32, 280=33, 281=22, 282=23, 283=22, 284=23, 285=24, 286=25, 287=24, 288=25, 289=26, 290=26, 291=27, 292=28, 293=29, 294=27, 295=28, 296=29, 297=30, 298=31, 299=32, 300=33, 301=30, 302=31, 303=32, 304=33, 317=34, 318=37, 319=38, 320=35, 321=40, 322=41, 323=39, 324=42, 325=43, 326=36, 335=34, 336=37, 337=38, 338=35, 339=40, 340=41, 341=39, 342=42, 343=43, 344=36, 353=34, 354=37, 355=38, 356=35, 357=40, 358=41, 359=39, 360=42, 361=43, 362=36};
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = IDENTIKIT;
	enumType.size = 200;
	break;

case 2343:
	enumType.valueType = INT;
	enumType.defaultint = 3145728;
	enumType.keyType = INT;
	enumType.valueArray = [3145728, 11548728, 10430464, 13140096, 13337150, 13479251, 12609600, 5255710, 3153928, 8937257, 6336608, 33536, 1585192, 1579152, 33667, 6859000, 9986224, 12452032, 5773456, 3090986, 7763308, 14078417, 10000504, 4735032, 1052688];
	enumType.size = 25;
	break;

case 2344:
	enumType.valueType = STRING;
	enumType.defaultstr = "Colourful";
	enumType.keyType = INT;
	enumType.valueArray = [Blood red, Brine red, Ruby vermillion, Bloodveld pink, Phoenix orange, Golden hoard, Ripe peach, Willow brown, Mahogany brown, Longbow brown, Mint cake, Cooking apple, Jade vine green, Saradomin blue, Runeplate blue, Sapphire glacialis, Void purple, H.A.M. violet, Chaotic indigo, Tarnished iron, Military grey, Monastery white, Dagannoth grey, Smith taupe, Zamorak black];
	enumType.size = 25;
	break;

case 2345:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [20, 19, 10, 18, 4, 5, 15, 7, 0, 6, 21, 9, 22, 17, 8, 16, 24, 11, 23, 3, 2, 1, 14, 13, 12];
	enumType.size = 25;
	break;

case 2346:
	enumType.valueMap = {69009436=69009435, 69009439=69009438, 69009438=69009437, 69009433=69009432, 69009432=69009431, 69009435=69009434, 69009429=69009428, 69009430=69009429, 69009424=69009423, 69009427=69009426, 69009426=69009425, 69009421=69009420, 69009420=69009419, 69009423=69009422, 69009417=69009416, 69009418=69009417, 69009412=69009411, 69009415=69009414, 69009414=69009413, 69009411=69009410, 69009453=69009452, 69009454=69009453, 69009448=69009447, 69009451=69009450, 69009450=69009449, 69009445=69009444, 69009444=69009443, 69009447=69009446, 69009441=69009440, 69009442=69009441};
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 30;
	break;

case 2347:
	enumType.valueType = INT;
	enumType.defaultint = 7561760;
	enumType.keyType = INT;
	enumType.valueArray = [5572098, 9374468, 7079939, 8128772, 6293251, 7810828, 7609859, 4722695, 12661254, 3803142, 6622730, 10688272, 4065794, 2625287, 6575388, 8795405, 9059865, 11430917, 12079667, 14591309, 14983687, 9401092, 5718076, 10376197, 2630415, 7353867, 6562563, 4528924, 4855309, 2164486, 2360084, 4065794, 6631434, 9919260, 1642503, 4143137, 3020801, 4795942, 5582082, 4137240, 8409891, 4859677, 8742470, 7756349, 4077314, 1250084, 1781812, 7356171, 6176009, 8875572, 5193992, 11508036, 7035960, 11769709, 12831350, 14862433, 12495449, 3493441, 9481283, 11050840, 10392381, 9012318, 4665648, 2500097, 6776092, 11579239, 3684111, 4801830, 8291877, 11585392, 12303260, 3705895, 4350275, 7761725, 152836, 6721818, 5477710, 3952392, 7967565, 5002040, 1977857, 2178577, 1584921, 2637601, 1323817, 921138, 598306, 76290, 2758168, 993296, 2039297, 2966079, 3044702, 2178367, 2576484, 11779251, 7189404, 4490094, 1846327, 2052160, 7515317, 8620924, 5008751, 1329519, 7439262, 5338831, 138309, 9143420, 6977401, 8686483, 5202292, 6591171, 1384566, 1600131, 988984, 5476540, 4019062, 1386870, 9804706, 6124714, 12507613, 3110264, 6776692, 9013655, 8817557, 2304052, 3163483, 144709, 1216437, 4742840, 2834544, 4414336, 6067647, 1447466, 1588311, 397370, 9276826, 4212603, 2239353, 3098536, 4074352, 1124158, 4728676, 6698314, 7948427, 10508115, 7279717, 4522533, 4141127, 1903946, 1581119, 5721916, 12132976, 3741006, 5922150, 2434870, 7628660, 4798288, 1907226, 6839387, 5265755, 1640199, 5721420, 532233, 6842203, 4868673, 1644054, 4866378, 7957354, 1707290, 7625551, 4010026, 1838863, 10390641, 2171158, 3090456, 2567993, 2103343, 2830379, 3685183, 3025426, 1507336, 5589842, 2171158, 4667440, 2762021, 1380882, 1380882, 6707802, 7561760, 1644054, 6101539, 2763325, 12104087, 8135959, 1718877, 1727783, 10391045, 7748970, 8493932, 6259084, 937249, 1117967, 5128757, 10592630, 13200446, 6785712, 1711249, 10845307, 12073267, 3015425, 6795368, 1584935, 5970577, 10250160];
	enumType.size = 215;
	break;

case 2348:
	enumType.valueType = STRING;
	enumType.defaultstr = "Colourful";
	enumType.keyType = INT;
	enumType.valueArray = [Sq'irk red, Ruby tips, Red demon wing, Candle flame, Toadstool red, Lacquer brown, Scarlet hellhound, Brown kebbit bolt, Crimson hellhound, Blood moon, Bloodlust, Arterial red, Rusted bronze, Tumeken brown, Barbarian brown, Grilled kebbit brown, Brown chinchompa, Copper longtail, Plantpot, Uzerian orange, Bittercap orange, Goutweed brown, Bronze limbs, Brown longtail, Quiver brown, Composite brown, Glowing furnace, Red scar, Brutal brown, Elite black, Onyx, Basilisk brown, Fired clay, Bloodworm brown, Dark void, Rex brown, Kurask brown, Sooted brown, Cowhide, Monastery brown, Granite block, Unrefined iron, Slaglith brown, Platypus brown, Grizzly brown, Roguish blue, Thief's green, Earth impling, Chocolate dust, Limpwurt brown, Penance brown, Ugthanki brown, Worn brown, Rabbitfoot, Ripening cob, Chopped barley, Scorpion brown, Zanaris green, Mossy giant, Bonemeal, Bone marrow, Guildsman brown, Senntisten brown, Hardleather, Ranger's aid green, Dagannoth green, Terrorbird green, Iorwerth's green, Elvarg green, Watermelon, Evil turnip, Cooking apple, Sculpted blue, Monkeyskin, Crushed acorn, Snapdragon green, Irit green, Cadantine green, Snake weed green, Kurask green, Catablepon green, Tropical green, Spirit weed green, Elven carapace, Evergreen, Woodland horizon, Petrified wood, Dark moss, Dull night, Robin's green, Poison green, Torcher green, Rune green, Spirit tree green, Lunar Sea blue, Moonlight mead, Nettle tea, Aquanite green, Talon blue, Jade vine green, Sapphire glacialis, Sea salt, Runeplate blue, Harpie blue, Zilyana blue, Saradomin blue, Roc feather blue, Ironmonger, Wolf fur, Icyene mist, Novite blue, Mind bomb blue, Blueberry, Dwellberry blue, Orrery blue, Manta blue, Rock lobster blue, Harpie swarm blue, Kyatt grey, Kalphitic blue, Rainbow fin blue, Mudskipper blue, Sunblessed grey, Consecrated grey, Berg grey, Coarse onyx, Corroded rune blue, Stormbringer blue, Trawler blue, Stingray blue, Water surge, Warped blue, Sparking blue, Balfrug blue, Lunar shade blue, Twilight Dagon'hai, Steaming geyser, Otherworldly blue, Saradomin blue breeze, Blue charm, Enchanted bluecloth, Law blue, Chaotic purple, Firebrand purple, Void purple, Brine sabre purple, Infinity pink, Blood of Nechryael, Zarosian purple, Pizzazz purple, Essence purple, Bandit blue, Barrows cerise, Portal purple, Grey glass, Zenevivia greystone, Dwarven rock, Yak hair, Death wing black, Banshee grey, Tempered bluestone, Blacksmith, Ageworn anvil, Tanned froghide, Ironbrand, Gorak grey, Oubliette black, Basic stone, Clockwork metal, Polished onyx, Spun string, Ferret grey, Black salamander, Limestone kiln, Coal black, Willow pyreship, Cursed blackcloth, Night stalker, Shadow assassin, Highwayman black, Blackguard brown, Black knight, Heated grey mithril, Mourning black, Gargoyle grey, Drorkar's blacksmoke, Abyssal black, Overload black, Dagannoth grey, Battered bronze, Swamp tar, Redberry, Surok blue, Pale cream dwogre, Impish scarlet, Blue dragonscale, Swamp moss, Ochre blamish, Purple chaos tendril, Cave slime, Bright blue rune, Forest canopy, Zamorakian smoke, Tarnished iron, Tanglefoot green, Phoenix quill, Guthix tears, Watchtower sapphire, Bloodveld pink, Entrana firebird, Mahogany, Phasmatys green, Bork green, Acheron purple, Cerulean purple];
	enumType.size = 215;
	break;

case 2349:
	enumType.valueMap = {69009437=69009434, 69009436=69009433, 69009439=69009436, 69009438=69009435, 69009433=69009430, 69009432=69009429, 69009435=69009432, 69009434=69009431, 69009429=69009426, 69009428=69009425, 69009431=69009428, 69009430=69009427, 69009424=69009421, 69009421=69009418, 69009420=69009417, 69009423=69009420, 69009422=69009419, 69009417=69009414, 69009416=69009413, 69009419=69009416, 69009418=69009415, 69009413=69009410, 69009415=69009412, 69009414=69009411, 69009453=69009450, 69009452=69009449, 69009454=69009451, 69009449=69009446, 69009448=69009445, 69009451=69009448, 69009450=69009447, 69009445=69009442, 69009444=69009441, 69009447=69009444, 69009446=69009443, 69009443=69009440};
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 36;
	break;

case 2350:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [69009459, 69009460, 69009462, 69009463, 69009465, 69009466, 69009468, 69009470, 69009471, 69009472, 69009474, 69009476];
	enumType.size = 12;
	break;

case 2351:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151];
	enumType.size = 12;
	break;

case 2352:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 69074974, 69074975, 69074976, 69074977, 69074978, 69074979, 69074980, 69074981];
	enumType.size = 8;
	break;

case 2354:
	enumType.valueMap = {33=1, 34=0, 117=2, 119=3, 121=4, 123=5, 125=6};
	enumType.valueType = INT;
	enumType.keyType = IDENTIKIT;
	enumType.size = 7;
	break;

case 2355:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 34;
	enumType.keyType = INT;
	enumType.valueArray = [34, 84, 118, 120, 122, 124, 126];
	enumType.size = 7;
	break;

case 2356:
	enumType.valueMap = {34=0, 84=1, 118=2, 120=3, 122=4, 124=5, 126=6};
	enumType.valueType = INT;
	enumType.keyType = IDENTIKIT;
	enumType.size = 7;
	break;

case 2357:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 34;
	enumType.keyType = INT;
	enumType.valueArray = [34, 33, 117, 119, 121, 123, 125, 34, 84, 118, 120, 122, 124, 126];
	enumType.size = 14;
	break;

case 2358:
	enumType.valueMap = {33=1, 34=7, 84=8, 117=2, 118=9, 119=3, 120=10, 121=4, 122=11, 123=5, 124=12, 125=6, 126=13};
	enumType.valueType = INT;
	enumType.keyType = IDENTIKIT;
	enumType.size = 14;
	break;

case 2359:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [-1, 27703, 27704, 27697, 27707, 27699, 27706];
	enumType.size = 7;
	break;

case 2360:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [-1, 27698, 27708, 27700, 27705, 27709, 27702];
	enumType.size = 7;
	break;

case 2361:
	enumType.valueType = STRING;
	enumType.defaultstr = "Bare arms";
	enumType.keyType = INT;
	enumType.valueArray = [Bare arms, Gold wristguards, Gold clasps, Gold bangles, Gold banding, Gold bands, Gold armguards];
	enumType.size = 7;
	break;

case 2362:
	enumType.valueType = STRING;
	enumType.defaultstr = "Bare arms";
	enumType.keyType = INT;
	enumType.valueArray = [Bare arms, Silver wristguards, Silver clasps, Silver bangles, Silver banding, Silver bands, Silver armguards];
	enumType.size = 7;
	break;

case 2363:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 68;
	enumType.keyType = INT;
	enumType.valueArray = [68, 67, 159, 161, 163, 165, 167];
	enumType.size = 7;
	break;

case 2364:
	enumType.valueMap = {161=3, 67=1, 163=4, 68=0, 165=5, 167=6, 159=2};
	enumType.valueType = INT;
	enumType.keyType = IDENTIKIT;
	enumType.size = 7;
	break;

case 2365:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 68;
	enumType.keyType = INT;
	enumType.valueArray = [68, 127, 160, 162, 164, 166, 168];
	enumType.size = 7;
	break;

case 2366:
	enumType.valueMap = {160=2, 162=3, 68=0, 164=4, 166=5, 168=6, 127=1};
	enumType.valueType = INT;
	enumType.keyType = IDENTIKIT;
	enumType.size = 7;
	break;

case 2367:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 68;
	enumType.keyType = INT;
	enumType.valueArray = [68, 67, 159, 161, 163, 165, 167, 68, 127, 160, 162, 164, 166, 168];
	enumType.size = 14;
	break;

case 2368:
	enumType.valueMap = {160=9, 161=3, 162=10, 67=1, 163=4, 68=7, 164=11, 165=5, 166=12, 167=6, 168=13, 159=2, 127=8};
	enumType.valueType = INT;
	enumType.keyType = IDENTIKIT;
	enumType.size = 14;
	break;

case 2373:
	enumType.valueType = INT;
	enumType.defaultint = 88;
	enumType.keyType = INT;
	enumType.valueArray = [80, 80, 80, 80, 81, 81, 81, 82, 82, 83, 83, 84, 84, 84, 85, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 88, 89, 89, 89, 90, 90, 90, 91, 91, 92, 92, 92, 92, 93, 93, 93, 93, 94, 94, 94, 94, 95, 95, 95, 95, 96, 96, 96, 96, 97, 97, 97, 97, 98, 98, 98, 98, 99, 99, 99, 100, 100, 100, 101, 101, 101, 102, 102, 102, 102, 103, 103, 103, 104, 104, 104, 104, 105, 105, 105, 105, 106, 106, 106, 106, 107, 107, 107, 107, 108, 108, 108, 108, 109, 109, 109, 110, 110, 110];
	enumType.size = 105;
	break;

case 2376:
	enumType.valueType = INT;
	enumType.defaultint = 60;
	enumType.keyType = INT;
	enumType.valueArray = [70, 70, 69, 69, 68, 68, 67, 67, 67, 66, 66, 66, 65, 65, 65, 64, 64, 64, 64, 63, 63, 63, 63, 62, 62, 62, 62, 61, 61, 61, 61, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 58, 58, 58, 58, 58, 58, 57, 57, 57, 57, 57, 57, 56, 56, 56, 56, 56, 56, 56, 55, 55, 55, 55, 55, 55, 55, 54, 54, 54, 54, 54, 54, 54, 53, 53, 53, 53, 53, 53, 53, 53, 52, 52, 52, 52, 52, 52, 52, 52, 51, 51, 51, 51, 51, 51, 51, 51, 51, 50, 50, 50, 50, 50, 50];
	enumType.size = 105;
	break;

case 2378:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [15001, 15005, 15021, 15022, 15023, 15024, 15025, 15026];
	enumType.size = 8;
	break;

case 2379:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [15002, 15006, 15027, 15028, 15029, 15030, 15031, 15032];
	enumType.size = 8;
	break;

case 2380:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [15003, 15007, 15033, 15034, 15035, 15036, 15037, 15038];
	enumType.size = 8;
	break;

case 2381:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [15004, 15008, 15039, 15040, 15041, 15042, 15043, 15044, 28266, 28267, 28259, 28260, 28261, 28265];
	enumType.size = 14;
	break;

case 2382:
	enumType.valueMap = {6465=106000, 1635=37100, 1637=74600, 1639=74600, 1641=89600, 1643=89600, 6731=205900, 1645=141300, 6733=205900, 6575=144100, 6735=205900, 9104=123700, 6737=205900};
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = OBJ;
	enumType.size = 13;
	break;

case 2383:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 42926100;
	enumType.keyType = INT;
	enumType.valueArray = [null, 42926120, 42926109, 42926115, 42926104];
	enumType.size = 4;
	break;

case 2384:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 42926100;
	enumType.keyType = INT;
	enumType.valueArray = [null, 42926121, 42926110, 42926117, 42926105];
	enumType.size = 4;
	break;

case 2385:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Damages squads in its line of fire, including your own. Be sure to place it wisely., Targets an individual squad, causing some serious damage., Causes damage to all squads within its blast radius, including your own., Distracts nearby squads from their orders. It also affects your squads, so beware., Stops squads in their tracks by placing obstacles. It also affects your squads.];
	enumType.size = 5;
	break;

case 2386:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Small folk, found in the dark depths. Not averse to getting a tan., Green, mean, fighting machines with an unsavoury smell., An uncommon sight, mercenary elves are familiar with battle.];
	enumType.size = 3;
	break;

case 2396:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 110, 120, 130, 140, 150];
	enumType.size = 5;
	break;

case 2397:
	enumType.valueType = STRING;
	enumType.defaultstr = "N/A";
	enumType.keyType = INT;
	enumType.valueArray = [Few, Many, All];
	enumType.size = 3;
	break;

case 2398:
	enumType.valueType = STRING;
	enumType.defaultstr = "N/A";
	enumType.keyType = INT;
	enumType.valueArray = [Low, Medium, High];
	enumType.size = 3;
	break;

case 2399:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 47692, 47691, 47702, 47705, 47706, 47695, 47701, 47693, 47697];
	enumType.size = 9;
	break;

case 2400:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 2949145;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2949122, 2949123, 2949124, 2949125, 2949126, 2949127, 2949128, 2949129, 2949130];
	enumType.size = 9;
	break;

case 2401:
	enumType.valueMap = {2949129=8, 2949128=7, 2949130=9, 2949125=4, 2949124=3, 2949127=6, 2949126=5, 2949123=2, 2949122=1};
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INTERFACE;
	enumType.size = 9;
	break;

case 2402:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 2949145;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2949150, 2949151, 2949152, 2949153, 2949154, 2949155, 2949156, 2949157, 2949158];
	enumType.size = 9;
	break;

case 2403:
	enumType.valueType = STRING;
	enumType.defaultstr = "Unavailable";
	enumType.keyType = INT;
	enumType.valueArray = [null, Wedge, Wall, Flank, Eager, Spread, Lefty, Righty, Block, Grid];
	enumType.size = 9;
	break;

case 2422:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 19136527;
	enumType.keyType = INT;
	enumType.valueArray = [19136528, 19136529, 19136530, 19136531, 19136532, 19136533, 19136534, 19136535, 19136536, 19136537];
	enumType.size = 10;
	break;

case 2423:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 19136527;
	enumType.keyType = INT;
	enumType.valueArray = [19136539, 19136602, 19136595, 19136588, 19136581, 19136574, 19136567, 19136560, 19136553, 19136546];
	enumType.size = 10;
	break;

case 2424:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 19136527;
	enumType.keyType = INT;
	enumType.valueArray = [19136540, 19136603, 19136596, 19136589, 19136582, 19136575, 19136568, 19136561, 19136554, 19136547];
	enumType.size = 10;
	break;

case 2426:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 19136527;
	enumType.keyType = INT;
	enumType.valueArray = [19136541, 19136604, 19136597, 19136590, 19136583, 19136576, 19136569, 19136562, 19136555, 19136548];
	enumType.size = 10;
	break;

case 2427:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 19136527;
	enumType.keyType = INT;
	enumType.valueArray = [19136542, 19136605, 19136598, 19136591, 19136584, 19136577, 19136570, 19136563, 19136556, 19136549];
	enumType.size = 10;
	break;

case 2428:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 19136527;
	enumType.keyType = INT;
	enumType.valueArray = [19136544, 19136607, 19136600, 19136593, 19136586, 19136579, 19136572, 19136565, 19136558, 19136551];
	enumType.size = 10;
	break;

case 2429:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 19136527;
	enumType.keyType = INT;
	enumType.valueArray = [19136538, 19136601, 19136594, 19136587, 19136580, 19136573, 19136566, 19136559, 19136552, 19136545];
	enumType.size = 10;
	break;

case 2448:
	enumType.valueMap = {55705618=Fear my goblins!, 55705619=Fear my elves!, 55705616=This is a long battle., 55705617=This will all be over soon., 55705622=This is my favourite scenario., 55705623=This is my least favourite scenario., 55705620=Fear my dwarves!, 55705621=Yes!, 55705624=That was so close!, 55705625=I'm comin' ta getcha!, 55705606=Good luck everyone., 55705607=Prepare for annihilation!, 55705610=All your squads are belong to me!, 55705611=Run away!, 55705608=For this scenario I've invested..., 55705609=I'm of Rank..., 55705614=I've almost won!, 55705615=I'm about to be defeated., 55705612=Well played., 55705613=Noooo!};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INTERFACE;
	enumType.size = 20;
	break;

case 2449:
	enumType.valueMap = {55705618=m, 55705619=n, 55705616=k, 55705617=l, 55705622=q, 55705623=r, 55705620=o, 55705621=p, 55705624=s, 55705625=t, 55705606=a, 55705607=b, 55705610=e, 55705611=f, 55705608=c, 55705609=d, 55705614=i, 55705615=j, 55705612=g, 55705613=h};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INTERFACE;
	enumType.size = 20;
	break;

case 2450:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 55705626;
	enumType.keyType = INT;
	enumType.valueArray = [null, 55705606, 55705607, 55705608, 55705609, 55705610, 55705611, 55705612, 55705613, 55705614, 55705615, 55705616, 55705617, 55705618, 55705619, 55705620, 55705621, 55705622, 55705623, 55705624, 55705625];
	enumType.size = 20;
	break;

case 2451:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 55705626;
	enumType.keyType = INT;
	enumType.valueArray = [null, 55705627, 55705628, 55705629, 55705630, 55705631, 55705632, 55705633, 55705634, 55705635, 55705636, 55705637, 55705638, 55705639, 55705640, 55705641, 55705642, 55705643, 55705644, 55705645, 55705646];
	enumType.size = 20;
	break;

case 2454:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 300, 400, 500, 600, 200];
	enumType.size = 5;
	break;

case 2455:
	enumType.valueType = STRING;
	enumType.defaultstr = "...none...";
	enumType.keyType = INT;
	enumType.valueArray = [null, Dwarf, Goblin, Elf];
	enumType.size = 3;
	break;

case 2461:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 100, 200, 300];
	enumType.size = 3;
	break;

case 2462:
	enumType.valueType = STRING;
	enumType.defaultstr = "Not available";
	enumType.keyType = INT;
	enumType.valueArray = [null, Lost - all units defeated, Lost - time ran out, Won - last team on the field, Won - captured the castle, Lost - another team captured the castle, Won - rescued enough TzHaar, Lost - another team rescued enough TzHaar, Won - collected enough gold, Lost - another team collected enough gold];
	enumType.size = 9;
	break;

case 2463:
	enumType.valueMap = {14976=14976, 14961=14961, 14946=14946, 14996=14996, 14981=14981, 14966=14966, 14951=14951, 14986=14986, 14971=14971, 14956=14956, 14941=14941, 14991=14991};
	enumType.valueType = OBJ;
	enumType.defaultint = 14971;
	enumType.keyType = OBJ;
	enumType.size = 12;
	break;

case 2464:
	enumType.valueMap = {14961=14966, 14946=14941, 14956=14951, 14941=14946, 14966=14961, 14951=14956};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 6;
	break;

case 2465:
	enumType.valueMap = {14961=14941, 14956=14946, 14966=14946, 14951=14941};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 4;
	break;

case 2466:
	enumType.valueMap = {14961=14951, 14946=14956, 14941=14951, 14966=14956};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 4;
	break;

case 2467:
	enumType.valueMap = {14946=14966, 14956=14966, 14941=14961, 14951=14961};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 4;
	break;

case 2473:
	enumType.valueType = TILE;
	enumType.defaultint = 65017536;
	enumType.keyType = INT;
	enumType.valueArray = [null, 65017536, 67114688, 62920384, 60823232];
	enumType.size = 4;
	break;

case 2490:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [20, 20, 20, 25, 25, 35, 35, 30, 30, 30];
	enumType.size = 10;
	break;

case 2535:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Tree Gnome Village, Tree Gnome Stronghold, Battlefield of Khazard, Grand Exchange, Mobilising Armies, Port Sarim, Etceteria, Brimhaven, Poison Waste, Prifddinas];
	enumType.size = 10;
	break;

case 2536:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [41651297, 40340852, 41897147, 52186551, 39586595, 50105529, 42815247, 45878403, 38308901, 305712427];
	enumType.size = 10;
	break;

case 2537:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Heal Over Time, Familiar Faces, Auto Ort Collector, Skill Plot Bonus, Skill XP Boost, Resurrection, Protection];
	enumType.size = 7;
	break;

case 2542:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28049, null, null, null, 28050, null, null, 28052, null, 28051, 28053];
	enumType.size = 5;
	break;

case 2565:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 44630123;
	enumType.keyType = INT;
	enumType.valueArray = [null, 56754177, 56754184, 56754185, 56754186];
	enumType.size = 4;
	break;

case 2566:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 17, 35, 52, 70, 87, 105, 123, 141, 158, 176, 194, 213, 231, 249, 268, 287, 306, 325, 344, 364, 384, 404, 424, 445, 466, 488, 510, 532, 554, 577, 601, 625, 649, 675, 700, 727, 754, 781, 810, 839, 869, 900, 933, 966, 1000, 1036, 1072, 1111, 1150, 1192, 1235, 1280, 1327, 1376, 1428, 1483, 1540, 1600, 1664, 1732, 1804, 1881, 1963, 2050, 2145, 2246, 2356, 2475, 2605, 2747, 2904, 3078, 3271, 3487, 3732, 4011, 4331, 4705, 5145, 5671, 6314, 7115, 8144, 9514, 11430, 14301, 19081, 28636, 57290, 2147483647];
	enumType.size = 91;
	break;

case 2715:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 20900, 25300, 29700, 34100, 38500, 42900, 47300, 51700, 56100, 60500, 64900, 69300, 73700, 78100, 82500, 86900, 91300, 95700, 100837, 106084, 113110, 122915, 133242, 144107, 155527, 167519, 180100, 193287, 207100, 221556, 236676, 252479, 268986, 286218, 304197, 322944, 342483, 362838, 384032, 406091, 429039, 452904, 477711, 503490, 530267, 558072, 586936, 616888, 647961, 680186, 713597, 748228, 784114, 821291, 859796, 899666, 940940, 983658, 1027861, 1073591];
	enumType.size = 60;
	break;

case 2716:
	enumType.valueType = INT;
	enumType.defaultint = 10000;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 12083, 11910, 11778, 11671, 11582, 11504, 11437, 11377, 11323, 11274, 11229, 11187, 11148, 11113, 11079, 11047, 11018, 10989, 10963, 10937, 10913, 10890, 10867, 10846, 10826, 10806, 10787, 10769, 10751, 10734, 10718, 10702, 10686, 10671, 10656, 10642, 10628, 10615, 10602, 10589, 10577, 10564, 10553, 10541, 10530, 10519, 10508, 10497, 10487, 10477, 10467, 10457, 10447, 10438, 10429, 10420, 10411, 10402, 10393, 10385, 10377, 10368, 10360, 10352, 10345, 10337, 10329, 10322, 10315, 10308, 10300, 10293, 10287, 10280, 10273, 10266, 10260, 10253, 10247, 10241, 10235, 10228, 10222, 10216, 10210, 10205, 10199, 10193, 10188, 10182, 10176, 10171, 10166, 10160, 10155, 10150, 10145, 10140, 10135, 10130, 10125, 10120, 10115, 10110, 10105, 10101, 10096, 10091, 10087, 10082, 10078, 10073, 10069, 10065, 10060, 10056, 10052, 10048, 10043, 10039, 10035, 10031, 10027, 10023, 10019, 10015, 10011, 10007, 10004, 10000, 9996, 9992, 9989, 9985, 9981, 9978];
	enumType.size = 136;
	break;

case 2717:
	enumType.valueType = INT;
	enumType.defaultint = 4;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4, 5, 7, 8, 10, 11, 13, 15, 17, 19, 21, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 110, 112, 114];
	enumType.size = 60;
	break;

case 2718:
	enumType.valueType = INT;
	enumType.defaultint = 138;
	enumType.keyType = INT;
	enumType.valueArray = [null, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138];
	enumType.size = 60;
	break;

case 2857:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, M.V.P., Leecher, Berserker, Sharpshooter, Battle-mage, Against All Odds, Least Harmful, Nine Lives, Spontaneous Combustion, Crafting Catastrophe, D.I.Y. Disaster, Fishing Folly, Meat-shield, Survivor, Most Deaths, Vengeance is Mine!, Double K.O., Jack-of-all-trades, Kill Stealer, Knuckle Sandwich, Gatherer, David, Goliath, Master-of-none, Untouchable, Glutton, Master Chef, Party Magician, 'A' for Effort, Culinary Disaster, Uneconomical Alcher, Pickaxe Alcher, Nothing Special, Clever Girl, Handyman, I Can Has Heim Crab, It's a Trap!, Medic!, Rest in Peace, Tele-fail, Too Little, Too Late, Least I Ain't Chicken, The Gate Escape, Balanced!, Ha-Trick!, I Choose You!, Beast Mode, The Chief, WoopWoopWoop!, It's Too Easy!];
	enumType.size = 50;
	break;

case 2858:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2, 0, 2, 2, 2, 1, 0, 1, 0, 0, 0, 0, 1, 2, 0, 2, 2, 2, 0, 1, 2, 2, 0, 0, 2, 0, 2, 1, 1, 0, 0, 0, 1, 0, 2, 1, 0, 2, 2, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1];
	enumType.size = 50;
	break;

case 2859:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, The most valuable player., Didn't contribute at all., Most melee damage dealt., Most ranged damage dealt., Most magic damage dealt., Dealt the killing blow to a boss while on less than 10 life points., Dealt the least damage., Died eight times. No more, no less., Experienced an unfortunate end by fire., Got killed by a chisel., Victim of an unfortunate construction disaster., Lost a fight with a fishing rod., Most damage taken., Didn't die at all., Exactly what it says on the tin., Killed a boss with Vengeance., Killed a boss with Retribution., Completed the greatest variety of tasks., Stole the most killing blows., Dealt out damage, but never with weapons or spells., Gathered the most resources., Vanquished a superior foe., Fell victim to a vastly inferior foe., Failed the most skill tasks., The only player to deal damage, but not take any., Wasted the most food by over-eating., Cooked the most life points' worth of food., Cast non-combat spells but, otherwise, dealt no damage., Attempted a number of skill tasks but didn't complete a single one., Burned the most food., Wasted the most money through alchemy spells., Alch-ed the last pickaxe., Did nothing to deserve any titles...except this one., Death by Bovimastyx. They never attack the same place twice; they remember..., Carried useful equipment from start to finish., Like a true pro, you only ate heim crabs in the dungeon., You teleported to the group gatestone, but died shortly after., You healed your team mates for the most total life points., Laid at least 10 bones to rest on an altar., Most people teleport away from their current location. Not you., You tried to save someone from death by using a heim crab, but it was too late., Entered a boss room while the rest of your party were in the start room., Used a gatestone to escape the boss room on low health., You adopted Mod_Reece's stubborn nature by killing a boss while close to death, but with plenty of food left., You matched Mod_Trick's epic performance by getting 'Nothing Special' three times in a row., You developed Mod_Liono's passion for enslaving small creatures., You displayed Mod_Mark's persistence by exhausting every resource on the critical path., You gained Mod_Hulme's green fingers by harvesting at least 25 potatoes...but doing the least damage., You kept up with Mod_Chris_L, blitzing through the entire dungeon and entering new rooms without fear., You equalled Mod_Benny's love of carnage by doing plenty of damage with melee, ranged and magic.];
	enumType.size = 50;
	break;

case 2914:
	enumType.valueMap = {17920=Katagon arrowheads, 16897=Fractite 2h sword, 16385=Bathus longsword, 16899=Zephyrium 2h sword, 16387=Marmaros longsword, 17925=Gorgonite arrowheads, 16901=Argonite 2h sword, 16389=Kratonite longsword, 16903=Katagon 2h sword, 16391=Fractite longsword, 16905=Gorgonite 2h sword, 16393=Zephyrium longsword, 17930=Promethium arrowheads, 16907=Promethium 2h sword, 16395=Argonite longsword, 16909=Primal 2h sword, 16397=Katagon longsword, 16399=Gorgonite longsword, 16401=Promethium longsword, 16403=Primal longsword, 16405=Novite maul, 16407=Bathus maul, 16409=Marmaros maul, 16411=Kratonite maul, 16413=Fractite maul, 16415=Zephyrium maul, 16417=Argonite maul, 16419=Katagon maul, 16421=Gorgonite maul, 16935=Novite rapier, 16423=Promethium maul, 16937=Bathus rapier, 16425=Primal maul, 16939=Marmaros rapier, 16941=Kratonite rapier, 16943=Fractite rapier, 16945=Zephyrium rapier, 16947=Argonite rapier, 16949=Katagon rapier, 16951=Gorgonite rapier, 16953=Promethium rapier, 16955=Primal rapier, 17019=Novite warhammer, 17021=Bathus warhammer, 17023=Marmaros warhammer, 17025=Kratonite warhammer, 17027=Fractite warhammer, 17029=Zephyrium warhammer, 17031=Argonite warhammer, 17033=Katagon warhammer, 17035=Gorgonite warhammer, 17037=Promethium warhammer, 17039=Primal warhammer, 17063=Novite spear, 17071=Bathus spear, 17079=Marmaros spear, 17087=Kratonite spear, 17095=Fractite spear, 17103=Zephyrium spear, 17111=Argonite spear, 17119=Katagon spear, 17127=Gorgonite spear, 17135=Promethium spear, 17143=Primal spear, 16647=Novite plateskirt, 16649=Bathus plateskirt, 16651=Marmaros plateskirt, 16653=Kratonite plateskirt, 16655=Fractite plateskirt, 16657=Zephyrium plateskirt, 16659=Argonite plateskirt, 16661=Katagon plateskirt, 16663=Gorgonite plateskirt, 16665=Promethium plateskirt, 16667=Primal plateskirt, 16669=Novite platelegs, 16671=Bathus platelegs, 16673=Marmaros platelegs, 16675=Kratonite platelegs, 16677=Fractite platelegs, 16679=Zephyrium platelegs, 16681=Argonite platelegs, 16683=Katagon platelegs, 16685=Gorgonite platelegs, 16687=Promethium platelegs, 16689=Primal platelegs, 16691=Novite full helm, 16693=Bathus full helm, 16695=Marmaros full helm, 16697=Kratonite full helm, 16699=Fractite full helm, 16701=Zephyrium full helm, 16703=Argonite full helm, 16705=Katagon full helm, 16707=Gorgonite full helm, 16709=Promethium full helm, 16711=Primal full helm, 16713=Novite chainbody, 16715=Bathus chainbody, 16717=Marmaros chainbody, 16719=Kratonite chainbody, 16721=Fractite chainbody, 16723=Zephyrium chainbody, 16725=Argonite chainbody, 17239=Novite platebody, 16727=Katagon chainbody, 17241=Bathus platebody, 16729=Gorgonite chainbody, 17243=Marmaros platebody, 16731=Promethium chainbody, 17245=Kratonite platebody, 16733=Primal chainbody, 17247=Fractite platebody, 17249=Zephyrium platebody, 17251=Argonite platebody, 17253=Katagon platebody, 17255=Gorgonite platebody, 17257=Promethium platebody, 17259=Primal platebody, 16757=Novite dagger, 16765=Bathus dagger, 16773=Marmaros dagger, 15753=Novite battleaxe, 15755=Bathus battleaxe, 15757=Marmaros battleaxe, 16781=Kratonite dagger, 15759=Kratonite battleaxe, 16273=Novite gauntlets, 15761=Fractite battleaxe, 16275=Bathus gauntlets, 15763=Zephyrium battleaxe, 16277=Marmaros gauntlets, 15765=Argonite battleaxe, 16789=Fractite dagger, 16279=Kratonite gauntlets, 15767=Katagon battleaxe, 16281=Fractite gauntlets, 15769=Gorgonite battleaxe, 16283=Zephyrium gauntlets, 15771=Promethium battleaxe, 16285=Argonite gauntlets, 15773=Primal battleaxe, 16797=Zephyrium dagger, 16287=Katagon gauntlets, 16289=Gorgonite gauntlets, 16291=Promethium gauntlets, 16293=Primal gauntlets, 16805=Argonite dagger, 16295=Novite pickaxe, 16297=Bathus pickaxe, 16299=Marmaros pickaxe, 16813=Katagon dagger, 16301=Kratonite pickaxe, 16303=Fractite pickaxe, 16305=Zephyrium pickaxe, 16307=Argonite pickaxe, 16821=Gorgonite dagger, 16309=Katagon pickaxe, 16311=Gorgonite pickaxe, 16313=Promethium pickaxe, 16315=Primal pickaxe, 17341=Novite kiteshield, 16829=Promethium dagger, 17343=Bathus kiteshield, 17345=Marmaros kiteshield, 17347=Kratonite kiteshield, 17349=Fractite kiteshield, 16837=Primal dagger, 17351=Zephyrium kiteshield, 17353=Argonite kiteshield, 17355=Katagon kiteshield, 17357=Gorgonite kiteshield, 17359=Promethium kiteshield, 17361=Primal kiteshield, 16339=Novite boots, 16341=Bathus boots, 16343=Marmaros boots, 16345=Kratonite boots, 16347=Fractite boots, 17885=Novite arrowheads, 16349=Zephyrium boots, 16351=Argonite boots, 16353=Katagon boots, 17890=Bathus arrowheads, 16355=Gorgonite boots, 16357=Promethium boots, 17895=Marmaros arrowheads, 16359=Primal boots, 16361=Novite hatchet, 16363=Bathus hatchet, 17900=Kratonite arrowheads, 16365=Marmaros hatchet, 16367=Kratonite hatchet, 17905=Fractite arrowheads, 16369=Fractite hatchet, 16371=Zephyrium hatchet, 16373=Argonite hatchet, 17910=Zephyrium arrowheads, 16375=Katagon hatchet, 16889=Novite 2h sword, 16377=Gorgonite hatchet, 17915=Argonite arrowheads, 16891=Bathus 2h sword, 16379=Promethium hatchet, 16893=Marmaros 2h sword, 16381=Primal hatchet, 16895=Kratonite 2h sword, 16383=Novite longsword};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = OBJ;
	enumType.size = 208;
	break;

case 2915:
	enumType.valueMap = {17920=Katagon arrowheads, 16897=Fractite 2h swords, 16385=Bathus longswords, 16899=Zephyrium 2h swords, 16387=Marmaros longswords, 17925=Gorgonite arrowheads, 16901=Argonite 2h swords, 16389=Kratonite longswords, 16903=Katagon 2h swords, 16391=Fractite longswords, 16905=Gorgonite 2h swords, 16393=Zephyrium longswords, 17930=Promethium arrowheads, 16907=Promethium 2h swords, 16395=Argonite longswords, 16909=Primal 2h swords, 16397=Katagon longswords, 16399=Gorgonite longswords, 16401=Promethium longswords, 16403=Primal longswords, 16405=Novite mauls, 16407=Bathus mauls, 16409=Marmaros mauls, 16411=Kratonite mauls, 16413=Fractite mauls, 16415=Zephyrium mauls, 16417=Argonite mauls, 16419=Katagon mauls, 16421=Gorgonite mauls, 16935=Novite rapiers, 16423=Promethium mauls, 16937=Bathus rapiers, 16425=Primal mauls, 16939=Marmaros rapiers, 16941=Kratonite rapiers, 16943=Fractite rapiers, 16945=Zephyrium rapiers, 16947=Argonite rapiers, 16949=Katagon rapiers, 16951=Gorgonite rapiers, 16953=Promethium rapiers, 16955=Primal rapiers, 17019=Novite warhammers, 17021=Bathus warhammers, 17023=Marmaros warhammers, 17025=Kratonite warhammers, 17027=Fractite warhammers, 17029=Zephyrium warhammers, 17031=Argonite warhammers, 17033=Katagon warhammers, 17035=Gorgonite warhammers, 17037=Promethium warhammers, 17039=Primal warhammers, 17063=Novite spears, 17071=Bathus spears, 17079=Marmaros spears, 17087=Kratonite spears, 17095=Fractite spears, 17103=Zephyrium spears, 17111=Argonite spears, 17119=Katagon spears, 17127=Gorgonite spears, 17135=Promethium spears, 17143=Primal spears, 16647=Novite plateskirts, 16649=Bathus plateskirts, 16651=Marmaros plateskirts, 16653=Kratonite plateskirts, 16655=Fractite plateskirts, 16657=Zephyrium plateskirts, 16659=Argonite plateskirts, 16661=Katagon plateskirts, 16663=Gorgonite plateskirts, 16665=Promethium plateskirts, 16667=Primal plateskirts, 16669=Novite platelegs, 16671=Bathus platelegs, 16673=Marmaros platelegs, 16675=Kratonite platelegs, 16677=Fractite platelegs, 16679=Zephyrium platelegs, 16681=Argonite platelegs, 16683=Katagon platelegs, 16685=Gorgonite platelegs, 16687=Promethium platelegs, 16689=Primal platelegs, 16691=Novite full helms, 16693=Bathus full helms, 16695=Marmaros full helms, 16697=Kratonite full helms, 16699=Fractite full helms, 16701=Zephyrium full helms, 16703=Argonite full helms, 16705=Katagon full helms, 16707=Gorgonite full helms, 16709=Promethium full helms, 16711=Primal full helms, 16713=Novite chainbodies, 16715=Bathus chainbodies, 16717=Marmaros chainbodies, 16719=Kratonite chainbodies, 16721=Fractite chainbodies, 16723=Zephyrium chainbodies, 16725=Argonite chainbodies, 17239=Novite platebodies, 16727=Katagon chainbodies, 17241=Bathus platebodies, 16729=Gorgonite chainbodies, 17243=Marmaros platebodies, 16731=Promethium chainbodies, 17245=Kratonite platebodies, 16733=Primal chainbodies, 17247=Fractite platebodies, 17249=Zephyrium platebodies, 17251=Argonite platebodies, 17253=Katagon platebodies, 17255=Gorgonite platebodies, 17257=Promethium platebodies, 17259=Primal platebodies, 16757=Novite daggers, 16765=Bathus daggers, 16773=Marmaros daggers, 15753=Novite battleaxes, 15755=Bathus battleaxes, 15757=Marmaros battleaxes, 16781=Kratonite daggers, 15759=Kratonite battleaxes, 16273=Novite gauntlets, 15761=Fractite battleaxes, 16275=Bathus gauntlets, 15763=Zephyrium battleaxes, 16277=Marmaros gauntlets, 15765=Argonite battleaxes, 16789=Fractite daggers, 16279=Kratonite gauntlets, 15767=Katagon battleaxes, 16281=Fractite gauntlets, 15769=Gorgonite battleaxes, 16283=Zephyrium gauntlets, 15771=Promethium battleaxes, 16285=Argonite gauntlets, 15773=Primal battleaxes, 16797=Zephyrium daggers, 16287=Katagon gauntlets, 16289=Gorgonite gauntlets, 16291=Promethium gauntlets, 16293=Primal gauntlets, 16805=Argonite daggers, 16295=Novite pickaxes, 16297=Bathus pickaxes, 16299=Marmaros pickaxes, 16813=Katagon daggers, 16301=Kratonite pickaxes, 16303=Fractite pickaxes, 16305=Zephyrium pickaxes, 16307=Argonite pickaxes, 16821=Gorgonite daggers, 16309=Katagon pickaxes, 16311=Gorgonite pickaxes, 16313=Promethium pickaxes, 16315=Primal pickaxes, 17341=Novite kiteshields, 16829=Promethium daggers, 17343=Bathus kiteshields, 17345=Marmaros kiteshields, 17347=Kratonite kiteshields, 17349=Fractite kiteshields, 16837=Primal daggers, 17351=Zephyrium kiteshields, 17353=Argonite kiteshields, 17355=Katagon kiteshields, 17357=Gorgonite kiteshields, 17359=Promethium kiteshields, 17361=Primal kiteshields, 16339=Novite boots, 16341=Bathus boots, 16343=Marmaros boots, 16345=Kratonite boots, 16347=Fractite boots, 17885=Novite arrowheads, 16349=Zephyrium boots, 16351=Argonite boots, 16353=Katagon boots, 17890=Bathus arrowheads, 16355=Gorgonite boots, 16357=Promethium boots, 17895=Marmaros arrowheads, 16359=Primal boots, 16361=Novite hatchets, 16363=Bathus hatchets, 17900=Kratonite arrowheads, 16365=Marmaros hatchets, 16367=Kratonite hatchets, 17905=Fractite arrowheads, 16369=Fractite hatchets, 16371=Zephyrium hatchets, 16373=Argonite hatchets, 17910=Zephyrium arrowheads, 16375=Katagon hatchets, 16889=Novite 2h swords, 16377=Gorgonite hatchets, 17915=Argonite arrowheads, 16891=Bathus 2h swords, 16379=Promethium hatchets, 16893=Marmaros 2h swords, 16381=Primal hatchets, 16895=Kratonite 2h swords, 16383=Novite longswords};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = OBJ;
	enumType.size = 208;
	break;

case 2917:
	enumType.valueMap = {17935=1, 17936=1, 17937=1, 17938=1, 17939=1, 17940=1, 17941=1, 17942=1, 17943=1, 17944=1, 17945=1, 17946=1, 17947=1, 17948=1, 17949=1, 17950=1, 17951=1, 17952=1, 17953=1, 17954=1, 17955=1, 17956=1, 17957=1, 17958=1, 17959=1, 17960=1, 17961=1, 17962=1, 17963=1, 17964=1, 17965=1, 17966=1, 17967=1, 17968=1, 17969=1, 17970=1, 17971=1, 17972=1, 17973=1, 17974=1, 17975=1, 17976=1, 17977=1, 17978=1, 17979=1, 17980=1, 17981=1, 17982=1, 17983=1, 17984=1, 17985=1, 17986=1, 17987=1, 17988=1, 17989=1, 17990=1, 17991=1, 17992=1, 17993=1, 17994=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 60;
	break;

case 2918:
	enumType.valueMap = {17985=1, 17986=1, 17955=1, 17987=1, 17956=1, 17957=1, 17965=1, 17966=1, 17935=1, 17967=1, 17936=1, 17937=1, 17975=1, 17976=1, 17945=1, 17977=1, 17946=1, 17947=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 18;
	break;

case 2919:
	enumType.valueMap = {17988=1, 17989=1, 17958=1, 17990=1, 17959=1, 17960=1, 17968=1, 17969=1, 17938=1, 17970=1, 17939=1, 17940=1, 17978=1, 17979=1, 17948=1, 17980=1, 17949=1, 17950=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 18;
	break;

case 2920:
	enumType.valueMap = {17952=1, 17971=1, 17972=1, 17941=1, 17942=1, 17991=1, 17992=1, 17961=1, 17962=1, 17981=1, 17982=1, 17951=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 12;
	break;

case 2921:
	enumType.valueMap = {17984=1, 17953=1, 17954=1, 17973=1, 17974=1, 17943=1, 17944=1, 17993=1, 17994=1, 17963=1, 17964=1, 17983=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 12;
	break;

case 2922:
	enumType.valueMap = {17935=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2923:
	enumType.valueMap = {17936=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2924:
	enumType.valueMap = {17937=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2925:
	enumType.valueMap = {17938=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2926:
	enumType.valueMap = {17939=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2927:
	enumType.valueMap = {17940=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2928:
	enumType.valueMap = {17941=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2929:
	enumType.valueMap = {17942=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2930:
	enumType.valueMap = {17943=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2931:
	enumType.valueMap = {17944=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2932:
	enumType.valueMap = {17985=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2933:
	enumType.valueMap = {17986=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2934:
	enumType.valueMap = {17987=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2935:
	enumType.valueMap = {17988=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2936:
	enumType.valueMap = {17989=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2937:
	enumType.valueMap = {17990=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2938:
	enumType.valueMap = {17991=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2939:
	enumType.valueMap = {17992=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2940:
	enumType.valueMap = {17993=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2941:
	enumType.valueMap = {17994=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2942:
	enumType.valueMap = {17945=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2943:
	enumType.valueMap = {17946=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2944:
	enumType.valueMap = {17947=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2945:
	enumType.valueMap = {17948=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2946:
	enumType.valueMap = {17949=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2947:
	enumType.valueMap = {17950=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2948:
	enumType.valueMap = {17951=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2949:
	enumType.valueMap = {17952=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2950:
	enumType.valueMap = {17953=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2951:
	enumType.valueMap = {17954=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2952:
	enumType.valueMap = {17955=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2953:
	enumType.valueMap = {17956=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2954:
	enumType.valueMap = {17957=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2955:
	enumType.valueMap = {17958=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2956:
	enumType.valueMap = {17959=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2957:
	enumType.valueMap = {17960=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2958:
	enumType.valueMap = {17961=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2959:
	enumType.valueMap = {17962=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2960:
	enumType.valueMap = {17963=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2961:
	enumType.valueMap = {17964=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2962:
	enumType.valueMap = {17975=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2963:
	enumType.valueMap = {17976=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2964:
	enumType.valueMap = {17977=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2965:
	enumType.valueMap = {17978=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2966:
	enumType.valueMap = {17979=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2967:
	enumType.valueMap = {17980=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2968:
	enumType.valueMap = {17981=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2969:
	enumType.valueMap = {17982=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2970:
	enumType.valueMap = {17983=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2971:
	enumType.valueMap = {17984=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2972:
	enumType.valueMap = {17965=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2973:
	enumType.valueMap = {17966=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2974:
	enumType.valueMap = {17967=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2975:
	enumType.valueMap = {17968=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2976:
	enumType.valueMap = {17969=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2977:
	enumType.valueMap = {17970=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2978:
	enumType.valueMap = {17971=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2979:
	enumType.valueMap = {17972=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2980:
	enumType.valueMap = {17973=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2981:
	enumType.valueMap = {17974=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 2987:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17630, 17632, 17634, 17636, 17638, 17640, 17642, 17644, 17646, 17648, 17448, 17450, 17452, 17454, 17456, 17458, 17460, 17462, 17464, 17466, 17424, 17426, 17428, 17430, 17432, 17434, 17436, 17438, 17440, 17442, 17797, 17799, 17801, 17803, 17805, 17807, 17809, 17811, 17813, 17815, 17682, 17684, 17686, 17688, 17690, 17692, 17694, 17696, 17698, 17700, 17826, 17827, 17828, 17829, 17830, 17831, 17832, 17833, 17834, 17823, 17824, 17825, 17776, 16427, 16432, 16437, 16442, 16447, 17530, 17536, 17534, 17532];
	enumType.size = 72;
	break;

case 2988:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [16867, 16317, 16977, 16935, 17341, 16297, 16299, 16363, 16365, 17752, 17447, 17490, 17796, 17566];
	enumType.size = 14;
	break;

case 2989:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17797, 17682];
	enumType.size = 2;
	break;

case 2990:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17796, 17566];
	enumType.size = 2;
	break;

case 2991:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17630, 17632, 17634, 17797, 17799, 17801, 17682, 17684, 17686, 17776, 16867, 16317, 16977, 16935, 17341, 16427];
	enumType.size = 16;
	break;

case 2992:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17752, 17796, 17566];
	enumType.size = 3;
	break;

case 2993:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17630, 17632, 17634, 17448, 17450, 17452, 17424, 17426, 17428, 17797, 17799, 17801, 17682, 17684, 17686, 17776, 16427];
	enumType.size = 17;
	break;

case 2994:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [16867, 16317, 16977, 16935, 17341, 17752, 17447, 17796, 17566];
	enumType.size = 9;
	break;

case 2995:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17630, 17632, 17634, 17636, 17638, 17448, 17450, 17452, 17454, 17456, 17424, 17426, 17428, 17430, 17432, 17797, 17799, 17801, 17803, 17805, 17682, 17684, 17686, 17688, 17690, 17776, 16427, 16432, 16437, 16442, 16447];
	enumType.size = 31;
	break;

case 2996:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [16867, 16317, 16977, 16935, 17341, 16297, 16299, 16363, 16365, 17447, 17490, 17796];
	enumType.size = 12;
	break;

case 2997:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17797, 17682];
	enumType.size = 2;
	break;

case 2998:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17796];
	enumType.size = 1;
	break;

case 2999:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17630, 17632, 17634, 17797, 17799, 17801, 17682, 17684, 17686, 17776, 16867, 16317, 16977, 16935, 17341, 16427];
	enumType.size = 16;
	break;

case 3000:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17796];
	enumType.size = 1;
	break;

case 3001:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17630, 17632, 17634, 17448, 17450, 17452, 17424, 17426, 17428, 17797, 17799, 17801, 17682, 17684, 17686, 17776, 16427];
	enumType.size = 17;
	break;

case 3002:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [16867, 16317, 16977, 16935, 17341, 17447, 17796];
	enumType.size = 7;
	break;

case 3015:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1004, 28315, 28314, 28320, 981, 1032, 19440, 980, 982, 977, 28305, 28307, 1154, 983, 28316, 976, 986, 999, 1000, 1001, 1002, 1003, 989, 1160, 1158, 1161, 985, 1034, 978, 28306, 28308, 1155, 984, 28310, 28311, 28312, 1030, 987, 28309, 990, 382, 28313, 991, 992, 993, 994, 995, 15375, 15376, 15377, 1159, 996, 997, 998, 1156, 28319, 28317, 28318, 30138];
	enumType.size = 59;
	break;

case 3016:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1004, 982, 977, 28305, 28307, 1154, 983, 976, 986, 999, 1000, 1001, 1002, 1003, 989, 1160, 985, 1034, 978, 28306, 28308, 28311];
	enumType.size = 22;
	break;

case 3030:
	enumType.valueType = STRING;
	enumType.defaultstr = "0";
	enumType.keyType = INT;
	enumType.valueArray = [null, 83, 91, 102, 112, 124, 138, 151, 168, 185, 204, 226, 249, 274, 304, 335, 369, 408, 450, 497, 548, 606, 667, 737, 814, 898, 990, 1094, 1207, 1332, 1470, 1623, 1791, 1977, 2182, 2409, 2658, 2935, 3240, 3576, 3947, 4358, 4810, 5310, 5863, 6471, 7144, 7887, 8707, 9612, 10612, 11715, 12934, 14278, 15764, 17404, 19214, 21212, 23420, 25856, 28546, 31516, 34795, 38416, 42413, 46826, 51699, 57079, 63019, 69576, 76818, 84812, 93638, 103383, 114143, 126022, 139138, 153619, 169608, 187260, 206750, 228269, 252027, 278259, 307221, 339198, 374502, 413482, 456519, 504037, 556499, 614422, 678376, 748985, 826944, 913019, 1008052, 1112977, 1228825, 1356729, 1497948, 1653867, 1826015, 2016080, 2225932, 2457625, 2713436, 2995873, 3307710, 3652006, 4032138, 4451838, 4915227, 5426848, 5991724, 6615396, 7303987, 8064253, 8903654, 9830429];
	enumType.size = 119;
	break;

case 3031:
	enumType.valueType = STRING;
	enumType.defaultstr = "120";
	enumType.keyType = INT;
	enumType.valueArray = [null, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120];
	enumType.size = 119;
	break;

case 3032:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [a pickaxe, a hatchet, a hammer, a fishing rod, some feathers, antipoison, an empty vial, a knife, an anti-dragonfire shield, a tinderbox, some crafting hides, some textiles to craft, some rune essence, a needle and thread, a potato seed, a mushroom seed, a sagewort herb, a valerian herb, an aloe herb, a wormwood herb, a magebane herb, a featherfoil herb, a winter's grip herb, a lycopus herb, a buckthorn herb, a chisel];
	enumType.size = 26;
	break;

case 3033:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [farming, fishing, mining, thieving, woodcutting];
	enumType.size = 5;
	break;

case 3034:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [mages, rangers, warriors, poison spiders, dragon];
	enumType.size = 5;
	break;

case 3036:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1327, 1618, 1384, 1735, 1355, 1335, 1415, 1454, 1633, 1408, 1663, 1369, 1333, 1540, 1774, 1438, 1521, 1602, 1681, 1713, 1376, 1395, 1480, 1627, 1418, 1759, 1748, 1599, 1433, 1631, 1634, 1767, 1645, 1340, 1651, 1374, 1657, 1448, 1517, 1444, 1736, 1378, 1766, 1356, 1504, 1490, 1416, 1626, 1705, 1731, 1513, 1782, 1350, 1372, 1485, 1742, 1656, 1441, 1473, 1571, 1506, 1543, 1696, 1690, 1398, 1710, 1461, 1412, 1607, 1424, 1699, 1443, 1664, 1562, 1650, 1498, 1325, 1362, 1700, 1409, 1569, 1732, 1547, 1361, 1525, 1544, 1337, 1619, 1538, 1502, 1354, 1414, 1491, 1329, 1553, 1589, -1, 1588, 1784, 1637, 1483, 1653, 1474, 1716, 1661, 1756, 1704, 1669, 1572, 1600, 1702, 1654, 1604, 1545, 1673, 1472, 1747, 1649, 1360, 1373, 1730, 1622, 1682, 1476, 1331, 1697, 1436, 1587, 1533, 1400, 1603, 1395];
	enumType.size = 132;
	break;

case 3037:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1555, 1431, 1515, 1482, 1684, 1526, 1777, 1352, 1558, 1382, 1452, 1541, 1379, 1344, 1598, 1770, -1, 1683, 1641, 1332, 1773, 1698, 1621, -1, 1550, 1608, 1739, 1488, 1451, 1769, 1439, 1764, 1364, 1401, 1596, 1413, 1381, 1701, 1561, 1615, 1595, 1345, 1592, 1385, 1419, 1530, 1668, 1737, 1406, 1459, 1511, 1594, 1556, 1460, 1692, 1514, 1579, 1653, 1680, 1531, 1586, 1420, 1353, 1629, 1754, 1776, 1725, 1647, 1632, 1447, 1783, 1758, 1484, 1509, 1341, 1628, 1590, 1457, 1560, 1638];
	enumType.size = 80;
	break;

case 3038:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1292, 1284, 1297, 1319];
	enumType.size = 4;
	break;

case 3039:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 763, 1004, 930, 3169, 705, 998, 1008, 993, 890, 977, 834, 978, 820, 876, 754, 938, 891, 800, 728, 966, 729, 784, 850, 870, 880, 1016, 819, 701, 757, 836, 807, 798, 882, 1011, 859, 919, 776, 796, 799, 720, 991, 687, 840, 778, 780, 940, 726, 837, 806, 709, 881, 715, 860, 907, 811, 785, 908, 795, 947, 932, 943, 723, 920, 773, 821, 861, 745, 854, 887, 704, 730, 893, 931, 838, 765, 744, 786, 737, 905, 810, 732, 792, 833, 770, 758, 988, 911, 958, 922, 688, 724, 804, 935, 788, 846, 845, 782, 844, 772, 706, 913, 755, 791, 852, 750, 992, 703, 939, 739, 950];
	enumType.size = 110;
	break;

case 3040:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1101, 1067, 1095, 1098, 1282, 1142, 1074, 1131, 1141, 1100, 1127, 1260, 1129, 1253, 1065, 1047, 1035, 1258, 1030, 1094, 1274, 1027, 1023, 1022, 1087, 1116, 1084, 1280, 1134, 1148, 1028, 1054, 1072, 1031, 1037, 1071, 1091, 1079, 1029, 1136, 1145, 1133, 1102, 1272, 1279, 1097, 1046, 1281, 1068, 1049, 1254, 1085, 1261, 1059, 1105, 1256, 1043, 1093, 1110, 1122, 1063, 1112, 1055, 1255, 1061, 1149, 1138, 1021, 1081, 1020, 3174, 3172, 3176, 3171, 3179, 3175, 3170, 3173, 3177, 3178, 3180];
	enumType.size = 81;
	break;

case 3041:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1850, 1801, 1874, 1819, 1844, 1865, 1886, 1839, 1829, 1878, 1843, 1816, 1851, 1817, 1828, 1803, 1880, 1859];
	enumType.size = 18;
	break;

case 3042:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 373, 646, 656, 640, 655, 430, 683, 414, 543, 675, 677, 576, 670, 673, 649, 639, 661, 578];
	enumType.size = 18;
	break;

case 3043:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1215, 1207, 1197, 1178, 1248, 1231, 1234, 1891];
	enumType.size = 8;
	break;

case 3044:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 691, 693, 697, 694, 700, 696, 692, 698, 699, 695];
	enumType.size = 10;
	break;

case 3045:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1250, 1251, 1249, 1252];
	enumType.size = 4;
	break;

case 3056:
	enumType.valueType = INT;
	enumType.defaultint = 65535;
	enumType.keyType = INT;
	enumType.valueArray = [16732758, null, 45055, 255, 65280, 10485663, 28416, 16748431, 16750623, 16740096, 16776960, 15663104, 15663279, 16732159, 11501567, 0, 16777215, 12566463, 8388607, 8388608, 3158064];
	enumType.size = 20;
	break;

case 3057:
	enumType.valueMap = {3=0, 11=0, 20=0, 6=0, 15=0};
	enumType.valueType = BOOLEAN;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.size = 5;
	break;

case 3058:
	enumType.valueMap = {3932284=4505, 3932413=18714, 3932543=4055, 3932536=18747, 3932473=4515, 3932347=18706, 3932340=18708, 3932278=4504, 3932406=18713, 3932529=18746, 3932466=4513, 3932333=4508, 3932271=4506, 3932399=18712, 3932264=4068, 3932392=18711, 3932522=18745, 3932459=4516, 3932452=4514, 3932326=4512, 3932257=4072, 3932385=18710, 3932515=18744, 3932508=18743, 3932319=4510, 3932312=4509, 3932441=21531, 3932250=4070, 3932501=18742, 3932368=18705, 3932305=4511, 3932434=18735, 3932243=4069, 3932494=18741, 3932239=4071, 3932361=18709, 3932298=4503, 3932427=18731, 3932420=18715, 3932487=18740, 3932480=18739, 3932354=18707, 3932291=4507};
	enumType.valueType = OBJ;
	enumType.defaultint = 4071;
	enumType.keyType = INTERFACE;
	enumType.size = 43;
	break;

case 3059:
	enumType.valueMap = {18705=800, 18706=1100, 18707=800, 18708=650, 18709=800, 18710=2, 4503=50, 18711=2, 4504=80, 18712=2, 4505=60, 18713=2, 4506=40, 18714=4, 4507=60, 18715=1, 21531=1, 4508=500, 4509=800, 4510=600, 4511=400, 4512=600, 4513=10, 4514=10, 4515=10, 4068=5, 4516=10, 4069=8, 4070=6, 4071=4, 4072=6, 18731=1, 18735=1, 18739=2, 18740=2, 18741=2, 18742=2, 18743=2, 18744=300, 18745=300, 18746=300, 18747=200};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 42;
	break;

case 3060:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28056, null, null, null, 28057, null, null, 28059, null, 28058, 28060];
	enumType.size = 5;
	break;

case 3061:
	enumType.valueMap = {18705=You bought a profound decorative sword., 18706=You bought a profound decorative platebody., 18707=You bought some profound decorative platelegs., 18708=You bought a profound decorative helm., 18709=You bought a profound decorative shield., 18710=You bought a ballista base. You'll need all four ballista parts and the ammo to make use of this weapon in Castle Wars., 4503=You bought a detailed decorative sword., 18711=You bought a ballista bolt stack. You'll need all four ballista parts and the ammo to make use of this weapon in Castle Wars., 4055=You received the Castle Wars manual., 4504=You bought a detailed decorative platebody., 18712=You bought a ballista bow. You'll need all four ballista parts and the ammo to make use of this weapon in Castle Wars., 4505=You bought some detailed decorative platelegs., 18713=You bought a ballista chamber. You'll need all four ballista parts and the ammo to make use of this weapon in Castle Wars., 4506=You bought a detailed decorative helm., 18714=You bought some ballista ammo. You'll need all four ballista parts and the ammo to make use of this weapon in Castle Wars., 4507=You bought a detailed decorative shield., 18715=You bought the melee potion set., 21531=You bought three Castle Wars chinchompas., 4508=You bought an intricate decorative sword., 4509=You bought an intricate decorative platebody., 4510=You bought some intricate decorative platelegs., 4511=You bought an intricate decorative helm., 4512=You bought an intricate decorative shield., 4513=You bought a Saradomin team hood., 4514=You bought a Saradomin team cape., 4515=You bought a Zamorak team hood., 4068=You bought a basic decorative sword., 4516=You bought a Zamorak team cape., 4069=You bought a basic decorative platebody., 4070=You bought some basic decorative platelegs., 4071=You bought a basic decorative helm., 4072=You bought a basic decorative shield., 18731=You bought the ranged potion set., 18735=You bought the magic potion set., 18739=You bought a Castle Wars flag cape., 18740=You bought a Castle Wars kills cape., 18741=You bought Castle Wars hobbyist cape., 18742=You bought Castle Wars enthusiast cape., 18743=You bought Castle Wars professional cape., 18744=You bought a Guthix halo., 18745=You bought a Saradomin halo., 18746=You bought a Zamorak halo., 18747=You bought a faithful shield.};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = OBJ;
	enumType.size = 43;
	break;

case 3062:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28063, null, null, null, 28064, null, null, 28066, null, 28065, 28067];
	enumType.size = 5;
	break;

case 3063:
	enumType.valueMap = {3932196=Profound decorative sword: Not required for the set bonus., 3932192=Profound decorative helm: Not required for the set bonus., 3932193=Profound decorative body: Wearing platebody, platelegs and shield together gives +25% damage against players, +10% damage against barricades and ballistas, and immunity to catapult and ballista damage., 3932194=Profound decorative legs: Wearing platebody, platelegs and shield together gives +25% damage against players, +10% damage against barricades and ballistas, and immunity to catapult and ballista damage., 3932195=Profound decorative shield: Wearing platebody, platelegs and shield together gives +25% damage against players, +10% damage against barricades and ballistas, and immunity to catapult and ballista damage., 3932188=Intricate decorative body: Wearing platebody, platelegs and shield together gives +20% damage against players, +10% damage against barricades and ballistas, and immunity to catapult damage., 3932380=Melee potion set: Set containing boosts to Attack, Strength, Defence and run energy. Can only be used inside the arena., 3932189=Intricate decorative legs: Wearing platebody, platelegs and shield together gives +20% damage against players, +10% damage against barricades and ballistas, and immunity to catapult damage., 3932381=Ranged potion set: Set containing boosts to Ranged, Defence and run energy. Can only be used inside the arena., 3932190=Intricate decorative shield: Wearing platebody, platelegs and shield together gives +20% damage against players, +10% damage against barricades and ballistas, and immunity to catapult damage., 3932382=Magic potion set: Set containing boosts to Magic, Defence and run energy. Can only be used inside the arena., 3932191=Intricate decorative sword: Not required for the set bonus., 3932383=Castle Wars chinchompas: Place these on the ground in proximity mode and they'll explode if the enemy gets too near. Use timer mode and they will run forwards, exploding after a few seconds. Can only be used on the ground floor of the arena, outside the fortress walls. You get three per ticket., 3932184=Detailed decorative legs: Wearing platebody, platelegs and shield together gives +15% damage against players and +10% damage against barricades and ballistas., 3932376=Ballista bolt stack: One of four parts needed to set up the ballista inside the arena.<br>The ballista fires projectiles at enemy players., 3932185=Detailed decorative shield: Wearing platebody, platelegs and shield together gives +15% damage against players and +10% damage against barricades and ballistas., 3932377=Ballista bow: One of four parts needed to set up the ballista inside the arena.<br>The ballista fires projectiles at enemy players., 3932186=Detailed decorative sword: Not required for the set bonus., 3932378=Ballista chamber: One of four parts needed to set up the ballista inside the arena.<br>The ballista fires projectiles at enemy players., 3932187=Intricate decorative helm: Not required for the set bonus., 3932379=Ballista ammo: Ammo fired by the ballista inside the arena., 3932180=Basic decorative shield: Wearing platebody, platelegs and shield together gives +10% damage against players in the arena., 3932181=Basic decorative sword: Not required for the set bonus., 3932182=Detailed decorative helm: Not required for the set bonus., 3932183=Detailed decorative body: Wearing platebody, platelegs and shield together gives +15% damage against players and +10% damage against barricades and ballistas., 3932375=Ballista base: One of four parts needed to set up a ballista inside the arena.<br>The ballista fires projectiles at enemy players., 3932176=Manual: details the rules of Castle Wars., 3932177=Basic decorative helm: Not required for the set bonus., 3932178=Basic decorative body: Wearing the platebody, platelegs and shield together gives +10% damage against players in the arena., 3932179=Basic decorative legs: Wearing platebody, platelegs and shield together gives +10% damage against players in the arena., 3932172=Guthix halo: Reduces the drain rate of various prayers. , 3932173=Saradomin halo: Reduces the drain rate of various prayers., 3932174=Zamorak halo: Reduces the drain rate of various prayers., 3932175=Faithful shield: A shield with a great Prayer bonus., 3932168=Castle Wars kills cape: For showing off achievement of most kills in a match., 3932169=Castle Wars hobbyist cape: For showing off achievement of 500 games of Castle Wars., 3932170=Castle Wars enthusiast cape: For showing off achievement of 1,000 games of Castle Wars., 3932171=Castle Wars professional cape: For showing off achievement of 5,000 games of Castle Wars., 3932164=Zamorak team cape: A basic Zamorak team cape., 3932165=Saradomin team hood: A basic Saradomin team hood., 3932166=Zamorak team hood: A basic Zamorak team hood., 3932167=Castle Wars flag cape: For showing off achievement of most flag captures in a match., 3932163=Saradomin team cape: A basic Saradomin team cape.};
	enumType.valueType = STRING;
	enumType.defaultstr = "Items can be bought either with win tickets, or a combination of win and loss tickets.";
	enumType.keyType = INTERFACE;
	enumType.size = 43;
	break;

case 3077:
	enumType.valueType = STRING;
	enumType.defaultstr = "N/A";
	enumType.keyType = INT;
	enumType.valueArray = [Any, 1024x768, 800x600];
	enumType.size = 3;
	break;

case 3080:
	enumType.valueType = OBJ;
	enumType.defaultint = 11760;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1927];
	enumType.size = 1;
	break;

case 3082:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 18801, 18802, 14388];
	enumType.size = 3;
	break;

case 3083:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 15493, 15494, 15495];
	enumType.size = 3;
	break;

case 3084:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 525, 528, 739];
	enumType.size = 3;
	break;

case 3085:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1011, 1012, 1013];
	enumType.size = 3;
	break;

case 3086:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1014, 1015, 1016];
	enumType.size = 3;
	break;

case 3087:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1017, 1018, 1019];
	enumType.size = 3;
	break;

case 3088:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 3084, 3085, 3086, 3087];
	enumType.size = 4;
	break;

case 3089:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [No current bonus., Tier 1: 6% Damage reduction when wielding a shield., Tier 2: 7% Damage reduction when wielding a shield., Tier 3: 8% Damage reduction when wielding a shield., Tier 4: 9% Damage reduction when wielding a shield., Tier 5: 10% Damage reduction when wielding a shield., Tier 6: 11% Damage reduction when wielding a shield., Tier 7: 12% Damage reduction when wielding a shield., Tier 8: 13% Damage reduction when wielding a shield., Tier 9: 14% Damage reduction when wielding a shield., Tier 10: 15% Damage reduction when wielding a shield., N/A.];
	enumType.size = 12;
	break;

case 3090:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [No current bonus., Tier 1: +2% Chance of hitting with a one handed melee weapon., Tier 2: +4% Chance of hitting with a one handed melee weapon., Tier 3: +6% Chance of hitting with a one handed melee weapon., Tier 4: +8% Chance of hitting with a one handed melee weapon., Tier 5: +10% Chance of hitting with a one handed melee weapon., Tier 6: +12% Chance of hitting with a one handed melee weapon., Tier 7: +14% Chance of hitting with a one handed melee weapon., Tier 8: +16% Chance of hitting with a one handed melee weapon., Tier 9: +18% Chance of hitting with a one handed melee weapon., Tier 10: +20% Chance of hitting with a one handed melee weapon., N/A.];
	enumType.size = 12;
	break;

case 3091:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [No current bonus., Tier 1: +2% Chance of hitting with a two-handed melee weapon., Tier 2: +4% Chance of hitting with a two-handed melee weapon., Tier 3: +6% Chance of hitting with a two-handed melee weapon., Tier 4: +8% Chance of hitting with a two-handed melee weapon., Tier 5: +10% Chance of hitting with a two-handed melee weapon., Tier 6: +12% Chance of hitting with a two-handed melee weapon., Tier 7: +14% Chance of hitting with a two-handed melee weapon., Tier 8: +16% Chance of hitting with a two-handed melee weapon., Tier 9: +18% Chance of hitting with a two-handed melee weapon., Tier 10: +20% Chance of hitting with a two-handed melee weapon., N/A.];
	enumType.size = 12;
	break;

case 3092:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [No current bonus., Tier 1: +2% Chance of hitting with a bow., Tier 2: +4% Chance of hitting with a bow., Tier 3: +6% Chance of hitting with a bow., Tier 4: +8% Chance of hitting with a bow., Tier 5: +10% Chance of hitting with a bow., Tier 6: +12% Chance of hitting with a bow., Tier 7: +14% Chance of hitting with a bow., Tier 8: +16% Chance of hitting with a bow., Tier 9: +18% Chance of hitting with a bow., Tier 10: +20% Chance of hitting with a bow., N/A.];
	enumType.size = 12;
	break;

case 3093:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [No current bonus., Tier 1: 40% Chance of removing 1 from your opponents' Defence., Tier 2: 47% Chance of removing 1 from your opponents' Defence., Tier 3: 53% Chance of removing 1 from your opponents' Defence., Tier 4: 60% Chance of removing 1 from your opponents' Defence., Tier 5: 67% Chance of removing 1 from your opponents' Defence., Tier 6: 73% Chance of removing 1 from your opponents' Defence., Tier 7: 80% Chance of removing 1 from your opponents' Defence., Tier 8: 87% Chance of removing 1 from your opponents' Defence., Tier 9: 93% Chance of removing 1 from your opponents' Defence., Tier 10: 100% Chance of removing 1 from your opponents' Defence., N/A.];
	enumType.size = 12;
	break;

case 3094:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [No current bonus., Tier 1: +11% Ranged levels when calculating damage., Tier 2: +12% Ranged levels when calculating damage., Tier 3: +13% Ranged levels when calculating damage., Tier 4: +14% Ranged levels when calculating damage., Tier 5: +15% Ranged levels when calculating damage., Tier 6: +16% Ranged levels when calculating damage., Tier 7: +17% Ranged levels when calculating damage., Tier 8: +18% Ranged levels when calculating damage., Tier 9: +19% Ranged levels when calculating damage., Tier 10: +20% Ranged levels when calculating damage., N/A.];
	enumType.size = 12;
	break;

case 3095:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [No current bonus., Tier 1: 5% Chance of applying the combust effect to your target., Tier 2: 10% Chance of applying the combust effect to your target., Tier 3: 15% Chance of applying the combust effect to your target., Tier 4: 20% Chance of applying the combust effect to your target., Tier 5: 25% Chance of applying the combust effect to your target., Tier 6: 30% Chance of applying the combust effect to your target., Tier 7: 35% Chance of applying the combust effect to your target., Tier 8: 40% Chance of applying the combust effect to your target., Tier 9: 45% Chance of applying the combust effect to your target., Tier 10: 50% Chance of applying the combust effect to your target., N/A.];
	enumType.size = 12;
	break;

case 3096:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [No current bonus., Tier 1: 12% Chance to slow your opponents' attack speed down with elemental spells., Tier 2: 14% Chance to slow your opponents' attack speed down with elemental spells., Tier 3: 16% Chance to slow your opponents' attack speed down with elemental spells., Tier 4: 18% Chance to slow your opponents' attack speed down with elemental spells., Tier 5: 20% Chance to slow your opponents' attack speed down with elemental spells., Tier 6: 22% Chance to slow your opponents' attack speed down with elemental spells., Tier 7: 24% Chance to slow your opponents' attack speed down with elemental spells., Tier 8: 26% Chance to slow your opponents' attack speed down with elemental spells., Tier 9: 28% Chance to slow your opponents' attack speed down with elemental spells., Tier 10: 30% Chance to slow your opponents' attack speed down with elemental spells., N/A.];
	enumType.size = 12;
	break;

case 3097:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [No current bonus., Tier 1: +5% Chance of hitting with magic weapons., Tier 2: +10% Chance of hitting with magic weapons., Tier 3: +15% Chance of hitting with magic weapons., Tier 4: +20% Chance of hitting with magic weapons., Tier 5: +25% Chance of hitting with magic weapons., Tier 6: +30% Chance of hitting with magic weapons., Tier 7: +35% Chance of hitting with magic weapons., Tier 8: +40% Chance of hitting with magic weapons., Tier 9: +45% Chance of hitting with magic weapons., Tier 10: +50% Chance of hitting with magic weapons., N/A.];
	enumType.size = 12;
	break;

case 3098:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [No current bonus., Tier 1: +20% Health bonus when healing another player., Tier 2: +23% Health bonus when healing another player., Tier 3: +27% Health bonus when healing another player., Tier 4: +30% Health bonus when healing another player., Tier 5: +33% Health bonus when healing another player., Tier 6: +37% Health bonus when healing another player., Tier 7: +40% Health bonus when healing another player., Tier 8: +43% Health bonus when healing another player., Tier 9: +47% Health bonus when healing another player., Tier 10: +50% Health bonus when healing another player., N/A.];
	enumType.size = 12;
	break;

case 3099:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [No current bonus., Tier 1: 20% Chance of extra resources; 20% Damage reduction upon failing a skill task., Tier 2: 23% Chance of extra resources; 23% Damage reduction upon failing a skill task., Tier 3: 27% Chance of extra resources; 27% Damage reduction upon failing a skill task., Tier 4: 30% Chance of extra resources; 30% Damage reduction upon failing a skill task., Tier 5: 33% Chance of extra resources; 33% Damage reduction upon failing a skill task., Tier 6: 37% Chance of extra resources; 37% Damage reduction upon failing a skill task., Tier 7: 40% Chance of extra resources; 40% Damage reduction upon failing a skill task., Tier 8: 43% Chance of extra resources; 43% Damage reduction upon failing a skill task., Tier 9: 47% Chance of extra resources; 47% Damage reduction upon failing a skill task., Tier 10: 50% Chance of extra resources; 50% Damage reduction upon failing a skill task., N/A.];
	enumType.size = 12;
	break;

case 3100:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [No current bonus., Tier 1: 20% Chance of saving resources; 20% Damage reduction upon failing a skill task; +1 Runecrafting level when crafting multiple runes., Tier 2: 23% Chance of saving resources; 23% Damage reduction upon failing a skill task; +2 Runecrafting levels when crafting multiple runes., Tier 3: 27% Chance of saving resources; 27% Damage reduction upon failing a skill task; +3 Runecrafting levels when crafting multiple runes., Tier 4: 30% Chance of saving resources; 30% Damage reduction upon failing a skill tasks; +4 Runecrafting levels when crafting multiple runes., Tier 5: 33% Chance of saving resources; 33% Damage reduction upon failing a skill task; +5 Runecrafting levels when crafting multiple runes., Tier 6: 37% Chance of saving resources; 37% Damage reduction upon failing a skill task; +6 Runecrafting levels when crafting multiple runes., Tier 7: 40% Chance of saving resources; 40% Damage reduction upon failing a skill task; +7 Runecrafting levels when crafting multiple runes., Tier 8: 43% Chance of saving resources; 43% Damage reduction upon failing a skill task; +8 Runecrafting levels when crafting multiple runes., Tier 9: 47% Chance of saving resources; 47% Damage reduction upon failing a skill task; +9 Runecrafting levels when crafting multiple runes., Tier 10: 50% Chance of saving resources; 50% Damage reduction upon failing a skill task; +10 Runecrafting levels when crafting multiple runes., N/A.];
	enumType.size = 12;
	break;

case 3101:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [135, 175, 335, 660, 1360, 3400, 6800, 18750, 58600, 233000];
	enumType.size = 10;
	break;

case 3103:
	enumType.valueType = TILE;
	enumType.defaultint = 40013038;
	enumType.keyType = INT;
	enumType.valueArray = [null, 40013038, 39980279, 40340690, 40684785, 40422647, 40897746, 41241809, 41159875, 41438406, 41569514, 41290998, 40963290, 41618691, 41110786, 40553731, 42323137, 42421495, 42306802, 42978543, 42110201, 43617512, 43011292, 43175153, 43617546, 43191563, 42814729, 42421506, 42093836];
	enumType.size = 28;
	break;

case 3104:
	enumType.valueType = TILE;
	enumType.defaultint = 52383031;
	enumType.keyType = INT;
	enumType.valueArray = [null, 52383031, 52612409, 52890935, 53087543, 52022604, 52022615, 52366679, 52383071, 53300545, 52890961, 52940143, 52759887, 52497745, 53628230, 53808434, 52186512, 52235680, 52104630, 51465632, 52645276, 52923814, 53104024, 52645254, 53218686];
	enumType.size = 24;
	break;

case 3105:
	enumType.valueType = TILE;
	enumType.defaultint = 35605557;
	enumType.keyType = INT;
	enumType.valueArray = [null, 35605557, 37407937, 36326458, 36916270, 36817991, 37211229, 37473349, 37850227, 38194275, 38046838, 38472815, 36457545, 35818570, 36129875, 36310103, 35753080, 36473942, 35654785, 36457612, 36359317, 35949716, 35949733, 36523184, 36097206, 36998284, 37506196, 37719198, 37391550, 36572311];
	enumType.size = 29;
	break;

case 3106:
	enumType.valueType = TILE;
	enumType.defaultint = 48139514;
	enumType.keyType = INT;
	enumType.valueArray = [null, 48139514, 48762100, 48286964, 49237246, 48467251, 48696590, 48254219, 48303422, 48205116, 48155931, 50056451, 49974548, 49401099, 49597733, 49564979, 50122040, 49663283, 49335606];
	enumType.size = 18;
	break;

case 3107:
	enumType.valueType = TILE;
	enumType.defaultint = 37850558;
	enumType.keyType = INT;
	enumType.valueArray = [null, 37850558, 38276564, 38735323, 38555095, 38079969, 38686191, 37817832, 37899768, 38194678, 38374903, 38637029, 38718919, 38637052, 39128578, 39292414, 39194119, 38882844, 38866474, 37981713, 38325765, 38702620, 38456857, 38211118, 38014505, 38407741, 37850627];
	enumType.size = 26;
	break;

case 3108:
	enumType.valueType = TILE;
	enumType.defaultint = 45911472;
	enumType.keyType = INT;
	enumType.valueArray = [null, 45911472, 46026167, 45829563, 45813167, 46845310, 47009150, 47025511, 47058308, 47009167, 46960060, 47107519, 46517667, 46402987, 46304691, 46845373, 46665148, 47107498, 46819000, 46278325, 46491322, 46196442, 46622427, 46720754, 46917318, 46982869, 46966507, 47343314, 47245037];
	enumType.size = 28;
	break;

case 3109:
	enumType.valueType = TILE;
	enumType.defaultint = 57904526;
	enumType.keyType = INT;
	enumType.valueArray = [null, 57904526, 57724292, 58183098, 58576311, 58363317, 58707356, 58707338, 58199451, 58543516, 57822637, 58068361, 58445203, 59133355, 58920365, 59592094, 59362708, 59051443, 59379124, 59248056, 59084169, 58822035];
	enumType.size = 21;
	break;

case 3110:
	enumType.valueType = TILE;
	enumType.defaultint = 56052613;
	enumType.keyType = INT;
	enumType.valueArray = [null, 56052613, 56429448, 56478615, 56331152, 55987087, 56150938, 55577499, 55839658, 56134568, 56298413, 55806907, 55544751, 55380921, 55413703, 55462864, 55266247, 56085452, 56495051, 55888872, 56069099, 56495095, 55725048, 56691662, 56953802, 56724455, 56773594, 57379818, 57510881, 56953841, 57019410, 56904714, 57052196, 57330720, 57429013, 55725083, 55643174, 55807030, 56249394, 56429581, 56462392, 55053335, 55495731, 55266358, 55446537, 55790656, 55856175, 55004222, 56151109, 56429637, 56282169, 56626244];
	enumType.size = 51;
	break;

case 3111:
	enumType.valueType = TILE;
	enumType.defaultint = 48467789;
	enumType.keyType = INT;
	enumType.valueArray = [null, 48467789, 48811898, 49123146, 48435012, 48238405, 48992084, 50057034, 50138981, 49631085, 49352567, 50089836, 49942358, 49762133, 49663830, 49499990, 50958194, 51203909, 50466631, 51777383, 52137814, 52318062, 52088679, 52023162, 53120884, 53104488, 52596550, 52694888, 53514080, 54185804, 54169451, 53759846, 54316874, 53563210, 54857589, 55381880, 55070571, 55168856, 54628162, 55185262];
	enumType.size = 39;
	break;

case 3112:
	enumType.valueType = TILE;
	enumType.defaultint = 50990686;
	enumType.keyType = INT;
	enumType.valueArray = [null, 50990686, 51187314, 51285592, 51121745, 50859640, 50581120, 51334789, 51089036, 50957975, 50728602, 51351197, 51924641, 52104833, 51826316, 51547802, 52006521, 51646066, 51531361, 51547762];
	enumType.size = 19;
	break;

case 3113:
	enumType.valueType = TILE;
	enumType.defaultint = 45468491;
	enumType.keyType = INT;
	enumType.valueArray = [null, 45468491, 45648738, 45943660, 45255526, 45468536, 45321076, 46123847, 46844747, 46664539, 46320502, 46402423, 46730102, 46812007, 46549859, 47057749, 47844168, 47385435, 48024424, 47860601, 47385465, 48614224, 48614251, 48335712, 48286546, 48270202, 48286592];
	enumType.size = 26;
	break;

case 3114:
	enumType.valueType = TILE;
	enumType.defaultint = 38571726;
	enumType.keyType = INT;
	enumType.valueArray = [null, 38571726, 38670039, 38080224, 38047435, 37867225, 38342363, 38375137, 38178549, 37867259, 38932184, 39014093, 39358157, 39669456, 39276249, 39636729, 39243492, 38883066, 37916427, 38113050, 38113034, 38571789, 38489896, 37883702, 38539060, 39554824, 39620382, 38948618, 39325470, 38801182, 39604021, 39309104, 39145275];
	enumType.size = 32;
	break;

case 3115:
	enumType.valueType = TILE;
	enumType.defaultint = 46557133;
	enumType.keyType = INT;
	enumType.valueArray = [null, 46557133, 46802896, 46245841, 47081426, 47065029, 46639097, 46868455, 46491617, 47605682, 47916978, 48146354, 48113630, 47622106, 48129999, 47589329, 47917007, 47884227, 48146371];
	enumType.size = 18;
	break;

case 3116:
	enumType.valueType = TILE;
	enumType.defaultint = 39555354;
	enumType.keyType = INT;
	enumType.valueArray = [null, 39555354, 39702804, 39653661, 39145781, 38949178, 39391542, 38867315, 39358834, 39260521, 39489900, 39326041, 38998341, 39424332, 39801167, 39604572, 39604598, 39080287, 39965036, 39997772, 40440151, 40259931, 40194423];
	enumType.size = 22;
	break;

case 3117:
	enumType.valueType = TILE;
	enumType.defaultint = 44574449;
	enumType.keyType = INT;
	enumType.valueArray = [null, 44574449, 44918521, 44263162, 44639993, 44476166, 44754702, 44541712, 44607273, 44328747, 44984104, 44951298, 45082379, 45131545, 45950740, 46016290, 45705018, 45426478, 45180717, 45344530];
	enumType.size = 19;
	break;

case 3118:
	enumType.valueType = TILE;
	enumType.defaultint = 51979618;
	enumType.keyType = INT;
	enumType.valueArray = [null, 51979618, 51897674, 52094295, 52290899, 51946837, 52602197, 52979019, 53192030, 53290345, 52880743, 52585843, 52602211];
	enumType.size = 12;
	break;

case 3119:
	enumType.valueType = TILE;
	enumType.defaultint = 45012111;
	enumType.keyType = INT;
	enumType.valueArray = [null, 45012111, 44749970, 44897433, 44618911, 44422295, 44717231, 44422308, 44733635, 44520639, 313316485, 313300149, 312677540, 44307657, 44766415, 44307685, 312693983, 312743149, 313234682, 313447631, 312644804];
	enumType.size = 20;
	break;

case 3120:
	enumType.valueType = TILE;
	enumType.defaultint = 44295391;
	enumType.keyType = INT;
	enumType.valueArray = [null, 44295391, 44868848, 44852441, 44606692, 44721363, 44164337, 44885282, 44983568, 44360974, 44229897, 44737833, 44524845, 44442932, 44262700, 44459295, 43902215, 43427088, 43410715, 43672864, 43935009, 43377959, 43656498, 43787562, 43459896, 43263293, 43279685, 43918662, 43738469, 43836782, 43591029, 43296103, 580101498, 579970413, 580101470, 580035919, 579921210, 579986732, 580117792, 579937553, 580379907, 44295516, 44197211];
	enumType.size = 42;
	break;

case 3121:
	enumType.valueType = TILE;
	enumType.defaultint = 46835260;
	enumType.keyType = INT;
	enumType.valueArray = [null, 46835260, 47031871, 47113805, 46409301, 46458459, 46245474, 47392311, 47441449, 47752733, 48113188, 47605254, 47638006, 47637993, 47949276, 48637498, 48375354, 48326189, 48146004, 47588945, 47261255, 47441511, 48064120, 47638130, 47326838, 48260676];
	enumType.size = 25;
	break;

case 3122:
	enumType.valueType = TILE;
	enumType.defaultint = 60656540;
	enumType.keyType = INT;
	enumType.valueArray = [null, 60656540, 59919243, 60607412, 59820975, 60492704, 60230565, 61819792, 61082525, 61115316, 61688755, 60902297, 61574028, 61475774, 60115951, 60541943, 60574700, 60410854, 60279754, 60656595, 61557751, 61311991, 61213665, 61049822, 61688790, 61754311, 61279178, 62295003, 62114767, 62557139, 62770135, 62966699, 63081410];
	enumType.size = 32;
	break;

case 3123:
	enumType.valueType = TILE;
	enumType.defaultint = 52221265;
	enumType.keyType = INT;
	enumType.valueArray = [null, 52221265, 51844425, 51598670, 51893593, 52303198, 51860838, 51664242, 52254071, 52499826, 52778348, 52974969, 53155180, 52663634, 52876624, 52942148, 53187909, 53351776, 53794130, 53941579, 54252882, 53761378, 53974373, 54416736, 54269291, 53777787, 52270516, 52041127, 51959223, 51533225, 51713442, 51860891, 51615120, 51926410, 52286865, 52254088, 53024151, 53368219, 52581772, 52549021, 52647346, 53122484, 53401009, 54072709, 54220199, 53892503, 53597594, 54171067, 53876136];
	enumType.size = 48;
	break;

case 3124:
	enumType.valueType = TILE;
	enumType.defaultint = 53464245;
	enumType.keyType = INT;
	enumType.valueArray = [null, 39537410, 39291694, 40569629, 40848187, 41716536, 41732874, 42879804, 42568470, 40061797, 40274765, 41634670, 41143160, 42240882, 42421074, 40668065, 40799109, 41143204, 41536398, 42437554, 42470284, 43256747, 43223940, 38177777, 38587358, 39209958, 39619552, 40651715, 39963633, 42011617, 42437623, 43076659, 43764773, 42257466, 42765316, 41274411, 41929758, 40127526, 40733758, 39865416, 40438889, 40930407, 41897052, 42912849, 42519672, 43437132, 43043940, 40258709, 40602806, 41667723, 40996017, 42323095, 42470579, 43158664, 43355315, 40832198, 40160467, 41061580, 42306754, 42306802, 43666626, 43420902, 44616909, 44240111, 39013692, 39488828, 40258819, 40717617, 41635133, 41176343, 42290444, 42208554, 43437340, 43617546, 44633376, 44879164, 38653304, 39193926, 39488859, 39947590, 40471884, 41323877, 41471309, 42323321, 42028355, 43863368, 43535739, 44666183, 44322138, 45305205, 45829476, 46452063, 46435707, 47942986, 47648103, 48336206, 49073509, 50056516, 49597822, 50613585, 51350879, 51744111, 52038984, 52890961, 52972918, 53677428, 54365538, 55545181, 55020874, 55889234, 56348030, 56905033, 56708456, 57970041, 58379600, 38604202, 38096310, 39226809, 39341442, 40783263, 40258999, 41029020, 41782675, 42405298, 42749326, 43404689, 43961763, 44354963, 44780974, 45518253, 46009746, 46665103, 46960060, 48123319, 47517101, 48434609, 48876945, 49728930, 49499534, 50843040, 51236237, 51531190, 52268424, 53317041, 53415300, 54349235, 53874052, 54545854, 55266715, 56036759, 56561044, 57134500, 57609617, 57822637, 58592665, 58953141, 59297181, 59788691, 60263870, 38276564, 38522356, 39620037, 39226870, 40816073, 41651689, 43863507, 43470330, 44223953, 44584441, 45174236, 45174269, 47140297, 46861815, 47975925, 47828431, 48811482, 48926207, 50007516, 49647040, 50728398, 51203578, 51662297, 52170215, 52907477, 53333496, 53890506, 53939702, 55135731, 54709748, 56004056, 56233432, 56692193, 57511370, 58510798, 58117572, 59379140, 58920405, 59887057, 37064213, 37604919, 38211098, 38456842, 39194127, 38899246, 41111090, 41930275, 42700339, 42372629, 43978268, 43732533, 44371461, 44846634, 45534730, 45551155, 49139222, 48582192, 50122276, 49614384, 50662933, 51236365, 52088348, 51547706, 53317160, 53202445, 54136341, 53710367, 54693430, 54758919, 56249911, 55758392, 37834325, 38211147, 42798666, 43306591, 43912796, 44437061, 44174959, 45157955, 48696930, 49139287, 49630827, 49761914, 50597470, 50908741, 52219469, 51482184, 52760147, 52596335, 53743184, 54316664, 54939216, 55348851, 56315490, 56086138, 57527894, 56856190, 43683461, 44011151, 44650151, 44961431, 48746162, 48909955, 50138807, 49909416, 50859681, 51056313, 51662496, 52317851, 52645548, 53333660, 54759060, 55168694, 56233640, 56200837, 57446038, 44846804, 312757998, 48500464, 49139407, 50122489, 49991388, 50810567, 51252974, 51629779, 52317895, 53251821, 52563664, 55103199, 54873839, 48467730, 48992043, 49762078, 50057015, 50597683, 51236659, 51728153, 52350757, 53251843, 53284655, 53972761, 54349624, 55430965, 54660922, 48680793, 48992108, 50057035, 50138981, 51253065, 50958194, 51695444, 52121448, 53153603, 53120884, 54169451, 53661515, 55168856, 55316337, 47533340, 47762695, 48696590, 48762170, 49597733, 49974548, 51203371, 50482467, 51744048, 51449103, 53136690, 53087511, 54267184, 54136071, 55086394, 55086360, 56331541, 55840062, 56921401, 57101602, 47762662, 47795399, 48762058, 48762100, 49695958, 50236666, 51252462, 51268804, 52235509, 51547376, 52595945, 53120196, 53497060, 54217954, 54856904, 54873328, 56528076, 56069350, 57150662, 56986844, 57969903, 58690800, 47844529, 48041104, 48860291, 49106089, 49843379, 49466538, 50646202, 51154075, 51399820, 51367097, 52595845, 53464245, 53595268, 54447257, 57117869, 57658542, 48925815, 49105997, 49613923, 49335419, 51104863, 50515027, 51547234, 52350043, 53087321, 53021817, 53611604, 53955695, 55544940, 54889562, 56003676, 55610445, 56773700, 52595732, 53365805, 54135862, 54119429, 55348230, 54791208, 56183842, 55872519, 57068580, 57494544, 51956692, 52251623, 53005288, 52677580, 54119402, 54397893, 54971364, 55348163, 56019913, 56069094, 56822756, 57494481, 51940262, 51481531, 52841386, 53349257, 53889933, 54381486, 55380909, 54823822, 55577516, 56396683, 51940194, 52054856, 53169015, 52513615, 53922640, 54381420, 55069545, 55266130, 56085348, 56265544, 52726555, 53201714, 53660451, 54414112, 55544601, 54741780, 55315174, 54905565, 55724742, 324045553, 44289156, 44993696, 45419665, 45960324, 44944486, 44797000, 45911124, 45255780, 46582865, 47090789, 47713376, 47615045, 45272117, 45648899, 46631942, 46386223, 47713324, 47205377, 45239281, 45534159, 47008722, 46451665, 48008149, 47533015, 45730713, 45173637, 47778736, 47205275, 48663459, 48466868, 45943660, 45763405, 46828362, 46549878, 47844168, 48040821, 48499568, 48565084, 50498963, 45518335, 53497030, 57478745, 46927365];
	enumType.size = 486;
	break;

case 3125:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [9, 17, 7, 6, 15, 3, 8, 9, 7, 6, 4, 10, 17, 3, 11, 13];
	enumType.size = 16;
	break;

case 3126:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [12, 3, 4, 7, 1, 17, 6, 12, 8, 6, 4, 0, 3, 7, 17, 15];
	enumType.size = 16;
	break;

case 3127:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [8, 13, 14, 3, 0, 6, 3, 17, 8, 5, 4, 16, 15, 0, 9, 6];
	enumType.size = 16;
	break;

case 3128:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [9, 8, 18, 5, 3, 2, 6, 1, 5, 3, 15, 8, 14, 6, 12, 4];
	enumType.size = 16;
	break;

case 3129:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 16, 5, 18, 16, 14, 18, 7, 6, 1, 8, 16, 6, 10, 8, 1];
	enumType.size = 16;
	break;

case 3130:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [16, 9, 5, 2, 1, 3, 11, 16, 2, 18, 15, 12, 3, 16, 1, 12];
	enumType.size = 16;
	break;

case 3131:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [17, 6, 3, 9, 17, 8, 11, 15, 16, 11, 15, 1, 12, 16, 1, 14];
	enumType.size = 16;
	break;

case 3132:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [2, 15, 0, 3, 13, 12, 6, 8, 14, 9, 17, 18, 16, 2, 6, 13];
	enumType.size = 16;
	break;

case 3133:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [17, 6, 13, 8, 7, 11, 15, 6, 2, 8, 15, 3, 17, 2, 11, 3];
	enumType.size = 16;
	break;

case 3134:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [11, 18, 2, 5, 0, 1, 2, 6, 0, 8, 1, 2, 10, 13, 3, 5];
	enumType.size = 16;
	break;

case 3135:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [15, 6, 0, 2, 3, 10, 17, 14, 8, 6, 5, 4, 13, 3, 18, 14];
	enumType.size = 16;
	break;

case 3136:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [1, 16, 12, 1, 3, 8, 0, 15, 17, 0, 1, 2, 0, 11, 15, 18];
	enumType.size = 16;
	break;

case 3137:
	enumType.valueType = INT;
	enumType.defaultint = 3;
	enumType.keyType = INT;
	enumType.valueArray = [4, 18, 14, 2, 6, 15, 11, 7, 17, 6, 14, 4, 6, 9, 3, 12];
	enumType.size = 16;
	break;

case 3138:
	enumType.valueType = INT;
	enumType.defaultint = 3;
	enumType.keyType = INT;
	enumType.valueArray = [11, 13, 0, 14, 13, 6, 5, 14, 17, 5, 4, 13, 9, 15, 18, 2];
	enumType.size = 16;
	break;

case 3139:
	enumType.valueType = INT;
	enumType.defaultint = 3;
	enumType.keyType = INT;
	enumType.valueArray = [9, 10, 1, 15, 2, 6, 8, 16, 7, 9, 14, 11, 6, 8, 14, 3];
	enumType.size = 16;
	break;

case 3140:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 14, 16, 6, 15, 0, 11, 15, 5, 7, 11, 5, 9, 7, 12, 3];
	enumType.size = 16;
	break;

case 3141:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3, 1, 13, 7, 6, 15, 10, 13, 1, 17, 0, 1, 2, 11, 14, 7];
	enumType.size = 16;
	break;

case 3142:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [12, 15, 8, 14, 0, 6, 7, 0, 4, 2, 7, 15, 11, 9, 1, 16];
	enumType.size = 16;
	break;

case 3143:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [10, 12, 2, 15, 4, 6, 14, 7, 11, 4, 1, 0, 11, 4, 3, 5];
	enumType.size = 16;
	break;

case 3144:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [9, 1, 18, 15, 1, 7, 13, 14, 12, 18, 15, 5, 18, 7, 10, 4];
	enumType.size = 16;
	break;

case 3145:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [4, 10, 9, 5, 6, 1, 4, 15, 7, 4, 6, 15, 7, 11, 1, 2];
	enumType.size = 16;
	break;

case 3146:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [10, 2, 9, 15, 3, 13, 16, 17, 1, 5, 7, 13, 17, 10, 7, 18];
	enumType.size = 16;
	break;

case 3147:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [16, 5, 4, 15, 9, 17, 0, 6, 17, 0, 18, 6, 15, 1, 4, 10];
	enumType.size = 16;
	break;

case 3148:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [10, 0, 18, 12, 13, 9, 5, 18, 8, 6, 4, 9, 1, 17, 5, 9];
	enumType.size = 16;
	break;

case 3149:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [18, 1, 2, 5, 1, 8, 9, 12, 7, 15, 1, 14, 5, 10, 14, 9];
	enumType.size = 16;
	break;

case 3150:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [14, 18, 2, 1, 16, 12, 5, 17, 8, 3, 9, 2, 15, 4, 5, 10];
	enumType.size = 16;
	break;

case 3151:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [17, 16, 6, 17, 8, 16, 15, 9, 18, 0, 9, 2, 4, 5, 18, 2];
	enumType.size = 16;
	break;

case 3152:
	enumType.valueType = INT;
	enumType.defaultint = 3;
	enumType.keyType = INT;
	enumType.valueArray = [15, 14, 3, 9, 13, 1, 12, 5, 1, 7, 10, 0, 14, 9, 1, 3];
	enumType.size = 16;
	break;

case 3153:
	enumType.valueType = INT;
	enumType.defaultint = 3;
	enumType.keyType = INT;
	enumType.valueArray = [6, 4, 15, 10, 14, 5, 10, 9, 3, 5, 12, 7, 18, 8, 13, 9];
	enumType.size = 16;
	break;

case 3154:
	enumType.valueType = INT;
	enumType.defaultint = 3;
	enumType.keyType = INT;
	enumType.valueArray = [15, 7, 0, 12, 1, 14, 7, 12, 2, 5, 7, 0, 8, 14, 4, 3];
	enumType.size = 16;
	break;

case 3155:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2, 17, 1, 0, 11, 7, 5, 13, 10, 2, 6, 0, 16, 4, 17, 10];
	enumType.size = 16;
	break;

case 3156:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17, 10, 16, 1, 10, 0, 4, 2, 6, 18, 10, 13, 0, 11, 7, 14];
	enumType.size = 16;
	break;

case 3157:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2, 14, 17, 4, 3, 11, 6, 18, 14, 17, 2, 8, 1, 17, 14, 0];
	enumType.size = 16;
	break;

case 3158:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [1, 0, 6, 5, 2, 9, 5, 7, 11, 8, 3, 12, 10, 0, 5, 17];
	enumType.size = 16;
	break;

case 3159:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [11, 17, 8, 12, 17, 16, 5, 8, 9, 15, 7, 12, 10, 6, 16, 8];
	enumType.size = 16;
	break;

case 3160:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [16, 8, 5, 18, 12, 7, 3, 15, 13, 14, 5, 9, 17, 6, 14, 2];
	enumType.size = 16;
	break;

case 3161:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 0, 14, 11, 4, 7, 11, 15, 1, 13, 11, 8, 14, 0, 9, 16];
	enumType.size = 16;
	break;

case 3162:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [12, 16, 0, 1, 2, 7, 18, 13, 17, 9, 18, 6, 10, 3, 9, 2];
	enumType.size = 16;
	break;

case 3163:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 9, 8, 3, 2, 11, 9, 2, 11, 5, 1, 18, 2, 7, 16];
	enumType.size = 16;
	break;

case 3164:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [4, 17, 18, 1, 5, 9, 12, 8, 10, 9, 11, 13, 1, 7, 9, 16];
	enumType.size = 16;
	break;

case 3165:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [3, 16, 2, 9, 8, 14, 10, 9, 11, 6, 9, 13, 14, 9, 12, 4];
	enumType.size = 16;
	break;

case 3166:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [15, 4, 9, 10, 3, 9, 11, 6, 18, 14, 1, 16, 11, 7, 12, 10];
	enumType.size = 16;
	break;

case 3167:
	enumType.valueType = INT;
	enumType.defaultint = 3;
	enumType.keyType = INT;
	enumType.valueArray = [0, 9, 17, 6, 16, 2, 13, 7, 3, 14, 8, 9, 5, 4, 18, 6];
	enumType.size = 16;
	break;

case 3168:
	enumType.valueType = INT;
	enumType.defaultint = 3;
	enumType.keyType = INT;
	enumType.valueArray = [4, 6, 8, 12, 2, 13, 3, 14, 15, 6, 9, 1, 14, 0, 3, 17];
	enumType.size = 16;
	break;

case 3169:
	enumType.valueType = INT;
	enumType.defaultint = 3;
	enumType.keyType = INT;
	enumType.valueArray = [8, 17, 18, 13, 12, 18, 8, 6, 1, 8, 14, 12, 0, 2, 10, 5];
	enumType.size = 16;
	break;

case 3170:
	enumType.valueType = OBJ;
	enumType.defaultint = 7936;
	enumType.keyType = INT;
	enumType.valueArray = [19131, 19133, 19130, 19124, 19132, 19125, 19127, 19129, 19126, 19123, 19134, 19128, 19139, 19142, 19136, 19138, 19135, 19140, 19141];
	enumType.size = 19;
	break;

case 3171:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [65667139, 65667140, 65667141, 65667142, 65667143, 65667144, 65667145, 65667146, 65667185, 65667186, 65667179, 65667180, 65667181, 65667148, 65667149, 65667138];
	enumType.size = 16;
	break;

case 3172:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1];
	enumType.size = 16;
	break;

case 3173:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1];
	enumType.size = 16;
	break;

case 3174:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [65667125, 65667126, 65667190, 65667191, 65667192, 65667193, 65667194, 65667195, 65667162, 65667163, 65667196, 65667197, 65667198, 65667199, 65667200, 65667201];
	enumType.size = 16;
	break;

case 3175:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1];
	enumType.size = 16;
	break;

case 3176:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1];
	enumType.size = 16;
	break;

case 3177:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [65667157, 65667158, 65667202, 65667203, 65667204, 65667174, 65667175, 65667205, 65667206, 65667207, 65667208, 65667209, 65667210, 65667211, 65667212, 65667213];
	enumType.size = 16;
	break;

case 3178:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1];
	enumType.size = 16;
	break;

case 3179:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1];
	enumType.size = 16;
	break;

case 3180:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [65732703, 65732704, 65732705, 65732693, 65732694, 65732736, 65732737, 65732738, 65732753, 65732754, 65732730, 65732731, 65732732, 65732735, 65732734, 65732733];
	enumType.size = 16;
	break;

case 3181:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1];
	enumType.size = 16;
	break;

case 3182:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1];
	enumType.size = 16;
	break;

case 3183:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [65732678, 65732679, 65732723, 65732724, 65732688, 65732689, 65732758, 65732759, 65732683, 65732684, 65732751, 65732752, 65732725, 65732726, 65732760, 65732761];
	enumType.size = 16;
	break;

case 3184:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1];
	enumType.size = 16;
	break;

case 3185:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1];
	enumType.size = 16;
	break;

case 3186:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [65732716, 65732717, 65732718, 65732719, 65732709, 65732710, 65732711, 65732742, 65732743, 65732744, 65732745, 65732746, 65732747, 65732698, 65732699, 65732715];
	enumType.size = 16;
	break;

case 3187:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1];
	enumType.size = 16;
	break;

case 3188:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1];
	enumType.size = 16;
	break;

case 3189:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [65601647, 65601659, 65601660, 65601646, 65601664, 65601665, 65601649, 65601648, 65601650, 65601669, 65601670, 65601651, 65601654, 65601655, 65601652, 65601653];
	enumType.size = 16;
	break;

case 3190:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1];
	enumType.size = 16;
	break;

case 3191:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1];
	enumType.size = 16;
	break;

case 3192:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [65601612, 65601613, 65601675, 65601674, 65601641, 65601642, 65601614, 65601616, 65601617, 65601615, 65601618, 65601676, 65601677, 65601626, 65601627, 65601619];
	enumType.size = 16;
	break;

case 3193:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1];
	enumType.size = 16;
	break;

case 3194:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1];
	enumType.size = 16;
	break;

case 3195:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [65601620, 65601621, 65601678, 65601679, 65601636, 65601637, 65601622, 65601623, 65601624, 65601680, 65601681, 65601631, 65601632, 65601625, 65601611, 65601610];
	enumType.size = 16;
	break;

case 3196:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1];
	enumType.size = 16;
	break;

case 3197:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, -1];
	enumType.size = 16;
	break;

case 3198:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [65536122, 65536123, 65536124, 65536125, 65536072, 65536073, 65536126, 65536127, 65536077, 65536078, 65536128, 65536129, 65536097, 65536098, 65536131, 65536130];
	enumType.size = 16;
	break;

case 3199:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1];
	enumType.size = 16;
	break;

case 3200:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1];
	enumType.size = 16;
	break;

case 3201:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [65536087, 65536088, 65536132, 65536133, 65536107, 65536108, 65536134, 65536135, 65536136, 65536137, 65536138, 65536139, 65536082, 65536083, 65536140, 65536141];
	enumType.size = 16;
	break;

case 3202:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1];
	enumType.size = 16;
	break;

case 3203:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1];
	enumType.size = 16;
	break;

case 3204:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [65536142, 65536143, 65536144, 65536145, 65536102, 65536103, 65536117, 65536118, 65536146, 65536147, 65536148, 65536149, 65536092, 65536093, 65536112, 65536113];
	enumType.size = 16;
	break;

case 3205:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1];
	enumType.size = 16;
	break;

case 3206:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1];
	enumType.size = 16;
	break;

case 3207:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11, 14, 15, 4, 2, 6, 7, 15, 3, 5, 6, 15, 2, 9, 0, 1];
	enumType.size = 16;
	break;

case 3208:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [16, 9, 5, 4, 16, 6, 17, 5, 9, 2, 3, 4, 18, 9, 8, 14];
	enumType.size = 16;
	break;

case 3209:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [12, 1, 3, 4, 2, 14, 6, 2, 8, 18, 5, 4, 2, 12, 15, 9];
	enumType.size = 16;
	break;

case 3210:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [6, 14, 4, 10, 15, 3, 12, 10, 17, 5, 3, 8, 2, 9, 16, 12];
	enumType.size = 16;
	break;

case 3211:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [10, 11, 9, 8, 10, 3, 8, 5, 12, 17, 10, 5, 4, 9, 13, 14];
	enumType.size = 16;
	break;

case 3212:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [5, 4, 13, 8, 15, 18, 3, 17, 12, 2, 8, 5, 2, 17, 4, 11];
	enumType.size = 16;
	break;

case 3213:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [11, 0, 5, 7, 0, 3, 2, 16, 10, 6, 7, 17, 15, 12, 0, 1];
	enumType.size = 16;
	break;

case 3214:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [15, 16, 6, 13, 8, 3, 10, 6, 4, 3, 17, 5, 16, 12, 6, 0];
	enumType.size = 16;
	break;

case 3215:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [7, 11, 2, 13, 0, 2, 7, 3, 11, 2, 4, 5, 15, 18, 5, 16];
	enumType.size = 16;
	break;

case 3216:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [0, 3, 15, 8, 1, 14, 16, 0, 2, 6, 18, 0, 14, 7, 9, 5];
	enumType.size = 16;
	break;

case 3217:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [9, 12, 13, 8, 15, 14, 5, 6, 1, 7, 14, 9, 18, 7, 16, 3];
	enumType.size = 16;
	break;

case 3218:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [2, 9, 5, 8, 1, 17, 18, 7, 2, 16, 18, 9, 14, 18, 15, 12];
	enumType.size = 16;
	break;

case 3219:
	enumType.valueType = INT;
	enumType.defaultint = 3;
	enumType.keyType = INT;
	enumType.valueArray = [13, 18, 12, 14, 10, 2, 6, 3, 0, 17, 3, 14, 0, 3, 10, 0];
	enumType.size = 16;
	break;

case 3220:
	enumType.valueType = INT;
	enumType.defaultint = 3;
	enumType.keyType = INT;
	enumType.valueArray = [13, 0, 2, 5, 7, 2, 3, 17, 16, 9, 14, 5, 8, 3, 16, 18];
	enumType.size = 16;
	break;

case 3221:
	enumType.valueType = INT;
	enumType.defaultint = 3;
	enumType.keyType = INT;
	enumType.valueArray = [18, 17, 7, 5, 10, 15, 3, 9, 10, 17, 15, 5, 0, 1, 12, 0];
	enumType.size = 16;
	break;

case 3230:
	enumType.valueType = STRING;
	enumType.defaultstr = "Broken";
	enumType.keyType = INT;
	enumType.valueArray = [SHORTFALL, Very Low, Low, OK, High, Very High, OVERLOAD];
	enumType.size = 7;
	break;

case 3231:
	enumType.valueType = STRING;
	enumType.defaultstr = "Broken";
	enumType.keyType = INT;
	enumType.valueArray = [OK, OK, Caution, Caution, Warning, Warning, DANGER];
	enumType.size = 7;
	break;

case 3232:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [65798164, 65798165, 65798166, 65798167, 65798168, 65798169];
	enumType.size = 6;
	break;

case 3233:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 3242;
	enumType.keyType = INT;
	enumType.valueArray = [3238, 3239, 3240, 3241, 3242];
	enumType.size = 5;
	break;

case 3234:
	enumType.valueType = INT;
	enumType.defaultint = 16777215;
	enumType.keyType = INT;
	enumType.valueArray = [13369344, 13399040, 13421568, 3394560, 13421568, 13399040, 13369344];
	enumType.size = 7;
	break;

case 3235:
	enumType.valueType = INT;
	enumType.defaultint = 16777215;
	enumType.keyType = INT;
	enumType.valueArray = [3394560, 3394560, 13421568, 13421568, 13399040, 13399040, 13369344];
	enumType.size = 7;
	break;

case 3272:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [15522, 15523, 15524, 15525, 15526, 15527, 15528, 15529, 15530, 15531, 15532, 15533, 15534, 15535, 15536, 15537, 15538, 15539, 15540, 15541, 15542, 15543, 15544, 15545, 15546, 15547, 15548, 15549, 15550, 15551];
	enumType.size = 30;
	break;

case 3273:
	enumType.valueMap = {15522=0, 15523=1, 15524=2, 15525=3, 15526=4, 15527=5, 15528=6, 15529=7, 15530=8, 15531=9, 15532=10, 15533=11, 15534=12, 15535=13, 15536=14, 15537=15, 15538=16, 15539=17, 15540=18, 15541=19, 15542=20, 15543=21, 15544=22, 15545=23, 15546=24, 15547=25, 15548=26, 15549=27, 15550=28, 15551=29};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 30;
	break;

case 3274:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Agility, Agility, Herblore, Herblore, Thieving, Thieving, Crafting, Crafting, Runecrafting, Runecrafting, Mining, Mining, Smithing, Smithing, Fishing, Fishing, Cooking, Cooking, Firemaking, Firemaking, Woodcutting, Woodcutting, Fletching, Fletching, Farming, Farming, Construction, Construction, Hunter, Hunter];
	enumType.size = 30;
	break;

case 3277:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Battle Cry, Stoicism, Regenerate, Bombard, Charge, Chastise, Vigilance, Shield Wall, Winds of Fate];
	enumType.size = 9;
	break;

case 3278:
	enumType.valueType = STRUCT;
	enumType.defaultint = 28120;
	enumType.keyType = INT;
	enumType.valueArray = [28120, 1120, 1122, 1129, 1119, 1114, 1124, 1121, 1115, 1116, 1126, 1131, 1117, 1113];
	enumType.size = 14;
	break;

case 3279:
	enumType.valueMap = {1120=Chef, 1121=Priestess, 1122=Fisher, 1123=Woodcutter, 1124=Miner, 1125=Farmer, 1126=Smith, 1127=Crafter, 1128=Fletcher, 1129=Herbalist, 1130=Runecrafter, 1131=Summoner, 1112=Adventurer, 28120=Builder, 1113=Warrior, 1114=Mage, 1115=Ranger, 1116=Slayer, 1117=Thief, 1118=Athlete, 1119=Hunter};
	enumType.valueType = STRING;
	enumType.defaultstr = "Woman";
	enumType.keyType = STRUCT;
	enumType.size = 21;
	break;

case 3280:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 50, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 110, 110, 110, 110, 110, 110, 110, 300, 305, 310, 315, 320, 325, 330, 335, 340, 345, 350, 355, 360, 365, 370, 380, 385, 390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445, 450, 455, 460, 465, 470, 475, 480, 485, 490, 495, 500, 505, 510, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000, 1010, 1020, 1030, 1040, 1050, 1060, 1070, 1080, 1090];
	enumType.size = 99;
	break;

case 3281:
	enumType.valueMap = {9=28954, 10=28956, 4=28950, 7=28952};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 3282:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [32, 101, 48, 56, 165, 103, 167, 106, 54, 198, 199, 200, 225, 39, 53, 42, 46, 29, 91, 57, 90, 34, 102, 104, 105, 107, 173, 201, 204, 197, 108, 217, 220, 221, 226, 227, 166, 174, 175, 144, 135, 136, 133, 123, 119, 192, 194, 117, 115, 111, 45, 49, 84, 118, 88, 85, 138, 51, 92, 112, 145, 179, 143, 149, 151, 153, 44, 154, 155, 86, 89, 72, 66, 33, 206, 109, 110, 114, 116, 184, 170, 120, 113, 150, 205, 210, 207, 209, 193, 152, 156, 183, 161, 159, 160, 73, 75, 181, 185, 208, 74, 36, 37, 43, 50, 58, 55, 139, 148, 147, 64, 69, 70, 71, 68, 93, 94, 95, 124, 182, 96, 97, 219, 63, 228, 79, 82, 98, 99, 100, 125, 126, 127, 40, 128, 129, 188, 130, 131, 186, 132, 164, 157, 180, 187, 31, 162, 168, 52, 163, 158, 196, 59, 60, 78, 61, 76, 80, 171, 172, 176, 177, 178, 38, 41, 47, 62, 65, 67, 81, 83, 121, 122, 134, 140, 142, 146, 189, 190, 191, 195, 202, 203, 213, 214, 216, 218, 223, 224, 0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28];
	enumType.size = 215;
	break;

case 3283:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [32, 101, 48, 56, 165, 103, 167, 106, 54, 198, 199, 200, 225, 35, 39, 53, 42, 46, 29, 91, 57, 90, 34, 102, 104, 105, 107, 173, 137, 201, 204, 211, 197, 108, 217, 220, 221, 226, 227, 215, 222, 166, 212, 174, 175, 169, 144, 135, 136, 133, 123, 119, 192, 194, 117, 115, 111, 141, 45, 49, 84, 77, 118, 88, 85, 138, 51, 92, 112, 145, 179, 143, 149, 151, 153, 44, 154, 155, 86, 89, 72, 66, 33, 206, 109, 110, 114, 116, 184, 170, 120, 113, 150, 205, 210, 207, 209, 193, 152, 156, 183, 161, 159, 160, 73, 75, 181, 185, 208, 74, 36, 37, 43, 50, 58, 55, 139, 148, 147, 64, 69, 70, 71, 68, 93, 94, 95, 124, 182, 96, 97, 219, 63, 228, 79, 82, 98, 99, 100, 125, 126, 127, 40, 128, 129, 188, 130, 131, 186, 132, 164, 157, 180, 187, 31, 162, 168, 52, 163, 158, 196, 59, 60, 87, 78, 61, 76, 80, 171, 172, 176, 177, 178, 38, 41, 47, 62, 65, 67, 81, 83, 121, 122, 134, 140, 142, 146, 189, 190, 191, 195, 202, 203, 213, 214, 216, 218, 223, 224];
	enumType.size = 199;
	break;

case 3284:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [32, 101, 48, 56, 165, 103, 167, 106, 54, 198, 199, 200, 225, 39, 53, 42, 46, 29, 91, 57, 90, 34, 102, 104, 105, 107, 173, 201, 204, 197, 108, 217, 220, 221, 226, 227, 166, 174, 175, 144, 135, 136, 133, 123, 119, 192, 194, 117, 115, 111, 45, 49, 84, 118, 88, 85, 138, 51, 92, 112, 145, 179, 143, 149, 151, 153, 44, 154, 155, 86, 89, 72, 66, 33, 206, 109, 110, 114, 116, 184, 170, 120, 113, 150, 205, 210, 207, 209, 193, 152, 156, 183, 161, 159, 160, 73, 75, 181, 185, 208, 74, 36, 37, 43, 50, 58, 55, 139, 148, 147, 64, 69, 70, 71, 68, 93, 94, 95, 124, 182, 96, 97, 219, 63, 228, 79, 82, 98, 99, 100, 125, 126, 127, 40, 128, 129, 188, 130, 131, 186, 132, 164, 157, 180, 187, 31, 162, 168, 52, 163, 158, 196, 59, 60, 78, 61, 76, 80, 171, 172, 176, 177, 178, 38, 41, 47, 62, 65, 67, 81, 83, 121, 122, 134, 140, 142, 146, 189, 190, 191, 195, 202, 203, 213, 214, 216, 218, 223, 224, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 14, 15, 0, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28];
	enumType.size = 215;
	break;

case 3286:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 7, 3];
	enumType.size = 3;
	break;

case 3287:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 111;
	enumType.keyType = INT;
	enumType.valueArray = [866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881];
	enumType.size = 16;
	break;

case 3289:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 645;
	enumType.keyType = INT;
	enumType.valueArray = [818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833];
	enumType.size = 16;
	break;

case 3290:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 42;
	enumType.keyType = INT;
	enumType.valueArray = [834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849];
	enumType.size = 16;
	break;

case 3291:
	enumType.valueType = STRING;
	enumType.defaultstr = "Retro comfy boots";
	enumType.keyType = INT;
	enumType.valueArray = [Retro carbatines, Retro loafers, Retro pantobles, Retro pegged shoes, Retro cowskin waders, Retro steelcap boots, Retro farming galoshes, Retro kebbit-skin pumps, Retro waxed pumps, Retro crossed buskins, Retro wolpertinger boots, Retro steel-toed mukluks, Retro hard brogues, Retro leather boots, Retro espadrilles, Retro monks, Retro basic boots, Retro plain boots, Carbatines, Loafers, Cowskin waders, Butterfly mukluks, Platypode boots, Mage boots, Warlock boots, Pegged shoes, Monks, Cuffed brogues, Tethered boots, Beastmaster boots, Steel-toed mukluks, Wolpertinger boots, Kebbit-skin pumps, Pantobles];
	enumType.size = 34;
	break;

case 3292:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31296, 31300, null, null, 31297, null, null, 31298, null, 31301, 31299];
	enumType.size = 6;
	break;

case 3293:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 79;
	enumType.keyType = INT;
	enumType.valueArray = [850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865];
	enumType.size = 16;
	break;

case 3294:
	enumType.valueType = STRING;
	enumType.defaultstr = "Retro comfy boots";
	enumType.keyType = INT;
	enumType.valueArray = [Retro alpargatas, Retro loafers, Retro feathered buskins, Retro pegged broad-toes, Retro matted pumps, Retro pale pantobles, Retro broad pumps, Retro knee-highs, Retro waxed tibracis, Retro butterfly mukluks, Retro toecapped pumps, Retro rimmed brogues, Retro sollerets, Retro cuffed brogues, Retro ramblers, Retro brown skimmers, Retro monks, Retro basic boots, Retro plain boots, Alpargatas, Loafers, Cowskin waders, Butterfly mukluks, Rimmed brogues, Mage boots, Witch boots, Pegged shoes, Monks, Cuffed brogues, Tethered boots, Beastmaster boots, Toecapped pumps, Wolpertinger boots, Broad pumps, Pantobles];
	enumType.size = 35;
	break;

case 3295:
	enumType.valueMap = {5312=1, 5313=7, 5281=1, 5314=250, 5315=500, 5287=100, 5288=550, 5321=13, 5323=3, 5100=6, 5295=14, 5296=4, 5297=1, 5298=5, 5299=10, 31348=750, 5300=4, 21620=1, 21621=3, 5301=12, 5302=85, 5303=115, 5304=50, 5311=2};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 24;
	break;

case 3296:
	enumType.valueType = STRING;
	enumType.defaultstr = "Colourful";
	enumType.keyType = INT;
	enumType.valueArray = [Grey glass, Soda ash, Ancient grey, Senntisten brown, Rusted bronze, Dwarven stout grey, Limestone kiln, Blacksmith, Cockatrice wing brown, Aging goblin green, Basilisk brown, God Wars twilight, Phrin grey, Banshee grey, Sq'irk red, Ruby tips, Red demon wing, Candle flame, Toadstool red, Lacquer brown, Scarlet hellhound, Brown kebbit bolt, Crimson hellhound, Blood moon, Bloodlust, Arterial red, Aviansie auburn, Tumeken brown, Barbarian brown, Grilled kebbit brown, Brown chinchompa, Copper longtail, Plantpot, Uzerian orange, Bittercap orange, Goutweed brown, Bronze limbs, Brown longtail, Quiver brown, Composite brown, Glowing furnace, Rubium brown, Red scar, Brutal brown, Splitbark, Elite black, Onyx, Basilisk brown, Fired clay, Bloodworm brown, Dark void, Rex brown, Entskin brown, Compost brown, Kurask brown, Maple brown, Sooted brown, Cowhide, Mogre brown, Monastery brown, Granite block, Unrefined iron, Slaglith brown, Platypus brown, Grizzly brown, Roguish blue, Thief's green, Earth impling, Chocolate dust, Limpwurt brown, Fiyr brown, Penance brown, Ugthanki brown, Worn brown, Rabbitfoot, Ripening cob, Chopped barley, Scorpion brown, Zanaris green, Mossy giant, Bonemeal, Bone marrow, Guildsman brown, Hardleather, Ranger's aid green, Dagannoth green, Terrorbird green, Iorwerth's green, Elvarg green, Watermelon, Evil turnip, Cooking apple, Sculpted blue, Monkeyskin, Crushed acorn, Snapdragon green, Irit green, Cadantine green, Snake weed green, Kurask green, Catablepon green, Tropical green, Spirit weed green, Elven carapace, Evergreen, Woodland horizon, Petrified wood, Dark moss, Dull night, Robin's green, Poison green, Torcher green, Rune green, Spirit tree green, Lunar Sea blue, Moonlight mead, Nettle tea, Aquanite green, Talon blue, Jade vine green, Sapphire glacialis, Sea salt, Harpie blue, Zilyana gilt, Saradomin blue, Roc feather blue, Ironmonger, Wolf fur, Icyene mist, Novite blue, Mind bomb blue, Blueberry, Dwellberry blue, Orrery blue, Manta blue, Rock lobster blue, Harpie swarm blue, Kyatt grey, Kalphitic blue, Rainbow fin blue, Mudskipper blue, Sunblessed grey, Consecrated grey, Berg grey, Coarse onyx, Corroded rune blue, Stormbringer blue, Trawler blue, Stingray blue, Water surge, Warped blue, Sparkling blue, Balfrug blue, Lunar shade blue, Twilight Dagon'hai, Steaming geyser, Otherworldly blue, Saradomin blue breeze, Blue charm, Enchanted bluecloth, Law blue, Chaotic purple, Firebrand purple, Void purple, Brine sabre purple, Infinity pink, Blood of Nechryael, Zarosian purple, Pizzazz purple, Essence purple, Bandit blue, Barrows cerise, Portal purple, Raw onion, Zenevivia greystone, Yak hair, Death wing black, Banshee grey, Tempered bluestone, Ageworn anvil, Tanned froghide, Ironbrand, Gorak grey, Oubliette black, Basic stone, Clockwork metal, Polished onyx, Spun string, Ferret grey, Black salamander, Coal black, Willow pyreship, Cursed blackcloth, Night stalker, Shadow assassin, Highwayman black, Blackguard brown, Black knight, Heated grey mithril, Mourning black, Gargoyle grey, Drorkar's blacksmoke, Abyssal black, Overload black, Dagannoth grey];
	enumType.size = 205;
	break;

case 3297:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [55, 54, 14, 120, 194, 53, 111, 154, 0, 1, 2, 3, 4, 5, 9, 78, 25, 33, 142, 80, 144, 83, 31, 175, 176, 177, 12, 16, 30, 19, 23, 6, 68, 34, 67, 11, 79, 81, 82, 84, 150, 114, 178, 181, 188, 174, 85, 194, 197, 198, 203, 204, 192, 199, 143, 189, 151, 152, 146, 121, 112, 113, 110, 100, 96, 169, 171, 94, 92, 88, 118, 22, 26, 61, 95, 65, 62, 115, 28, 69, 89, 122, 156, 126, 128, 130, 21, 131, 132, 63, 66, 49, 43, 10, 183, 86, 87, 91, 93, 161, 147, 97, 90, 127, 182, 187, 184, 186, 170, 129, 133, 160, 138, 136, 137, 50, 52, 158, 162, 185, 51, 13, 20, 27, 35, 32, 116, 125, 124, 41, 46, 47, 48, 45, 70, 71, 72, 101, 159, 73, 74, 196, 40, 205, 56, 59, 75, 76, 77, 102, 103, 104, 17, 105, 106, 165, 107, 108, 163, 109, 141, 134, 157, 164, 8, 139, 145, 29, 140, 135, 173, 36, 37, 64, 38, 57, 148, 149, 153, 155, 15, 18, 24, 39, 42, 44, 58, 60, 98, 99, 117, 119, 123, 166, 167, 168, 172, 179, 180, 190, 191, 193, 195, 200, 201];
	enumType.size = 205;
	break;

case 3298:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31328, 31410, 31412, 31414, 31416];
	enumType.size = 5;
	break;

case 3299:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 583;
	enumType.keyType = INT;
	enumType.valueArray = [898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913];
	enumType.size = 16;
	break;

case 3300:
	enumType.valueType = OBJ;
	enumType.defaultint = 31310;
	enumType.keyType = INT;
	enumType.valueArray = [31310, 31313, 31319, 31322, 31421, 31420, 31419, 31418, 31315, 31320, 31311, 31317, 31321, 31324, 31325];
	enumType.size = 15;
	break;

case 3301:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 129;
	enumType.keyType = INT;
	enumType.valueArray = [786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801];
	enumType.size = 16;
	break;

case 3302:
	enumType.valueType = STRUCT;
	enumType.defaultint = 697;
	enumType.keyType = INT;
	enumType.valueArray = [713, 1136, 722, 723, 297, 724, 731, 727, 730, 1135, 732, 719, 1134, 720, 725, 298, 717, 721, 295, 296, 697, 704, 701, 699, 700, 698, 715, 733, 716, 729, 714, 718, 728, 707];
	enumType.size = 34;
	break;

case 3303:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 3482;
	enumType.keyType = INT;
	enumType.valueArray = [19789, 19815, 19798, 19799, 19811, 19800, 19806, 19802, 19805, 19814, 19807, 19795, 19813, 19796, 19801, 19812, 19793, 19797, 19809, 19810, 19782, 19787, 19786, 19784, 19785, 19783, 19791, 19808, 19792, 19804, 19790, 19794, 19803, 19788];
	enumType.size = 34;
	break;

case 3304:
	enumType.valueType = STRUCT;
	enumType.defaultint = 741;
	enumType.keyType = INT;
	enumType.valueArray = [746, 747, 752, 755, 751, 764, 761, 760, 763, 303, 753, 759, 304, 767, 1132, 766, 757, 302, 742, 741, 756, 754, 758, 1133, 765, 744, 750, 745];
	enumType.size = 28;
	break;

case 3305:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 3619;
	enumType.keyType = INT;
	enumType.valueArray = [19926, 19927, 19930, 19933, 19929, 19941, 19939, 19938, 19940, 19946, 19931, 19937, 19947, 19944, 19948, 19943, 19935, 19945, 19923, 19922, 19934, 19932, 19936, 19949, 19942, 19924, 19928, 19925];
	enumType.size = 28;
	break;

case 3306:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 3619;
	enumType.keyType = INT;
	enumType.valueArray = [19954, 19966, 19971, 19962, 19959, 19961, 19967, 19968, 19969, 19963, 19965, 19958, 19956, 19960, 19972, 19955, 19964, 19970, 19957];
	enumType.size = 19;
	break;

case 3307:
	enumType.valueType = IDENTIKIT;
	enumType.defaultint = 14;
	enumType.keyType = INT;
	enumType.valueArray = [14, 13, 98, 308, 305, 307, 10, 15, 16, 100, 12, 11, 102, 306, 99, 101, 104, 17];
	enumType.size = 18;
	break;

case 3308:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 69074968, 69074969, 69074970, 69074971, 69074972];
	enumType.size = 5;
	break;

case 3310:
	enumType.valueMap = {69074972=6, 69074970=4, 69074971=5, 69074968=2, 69074969=3};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 5;
	break;

case 3311:
	enumType.valueMap = {69074972=60821, 69074970=60814, 69074971=60813, 69074968=60817, 69074969=60809};
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 5;
	break;

case 3384:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 175, 349, 523, 698, 872, 1045, 1219, 1392, 1564, 1736, 1908, 2079, 2250, 2419, 2588, 2756, 2924, 3090, 3256, 3420, 3584, 3746, 3907, 4067, 4226, 4384, 4540, 4695, 4848, 5000, 5150, 5299, 5446, 5592, 5736, 5878, 6018, 6157, 6293, 6428, 6561, 6691, 6820, 6947, 7071, 7193, 7314, 7431, 7547, 7660, 7771, 7880, 7986, 8090, 8192, 8290, 8387, 8480, 8572, 8660, 8746, 8829, 8910, 8988, 9063, 9135, 9205, 9272, 9336, 9397, 9455, 9511, 9563, 9613, 9659, 9703, 9744, 9781, 9816, 9848, 9877, 9903, 9925, 9945, 9962, 9976, 9986, 9994, 9998, 10000, 9998, 9994, 9986, 9976, 9962, 9945, 9925, 9903, 9877, 9848, 9816, 9781, 9744, 9703, 9659, 9613, 9563, 9511, 9455, 9397, 9336, 9272, 9205, 9135, 9063, 8988, 8910, 8829, 8746, 8660, 8572, 8480, 8387, 8290, 8192, 8090, 7986, 7880, 7771, 7660, 7547, 7431, 7314, 7193, 7071, 6947, 6820, 6691, 6561, 6428, 6293, 6157, 6018, 5878, 5736, 5592, 5446, 5299, 5150, 5000, 4848, 4695, 4540, 4384, 4226, 4067, 3907, 3746, 3584, 3420, 3256, 3090, 2924, 2756, 2588, 2419, 2250, 2079, 1908, 1736, 1564, 1392, 1219, 1045, 872, 698, 523, 349, 175, 0, -175, -349, -523, -698, -872, -1045, -1219, -1392, -1564, -1736, -1908, -2079, -2250, -2419, -2588, -2756, -2924, -3090, -3256, -3420, -3584, -3746, -3907, -4067, -4226, -4384, -4540, -4695, -4848, -5000, -5150, -5299, -5446, -5592, -5736, -5878, -6018, -6157, -6293, -6428, -6561, -6691, -6820, -6947, -7071, -7193, -7314, -7431, -7547, -7660, -7771, -7880, -7986, -8090, -8192, -8290, -8387, -8480, -8572, -8660, -8746, -8829, -8910, -8988, -9063, -9135, -9205, -9272, -9336, -9397, -9455, -9511, -9563, -9613, -9659, -9703, -9744, -9781, -9816, -9848, -9877, -9903, -9925, -9945, -9962, -9976, -9986, -9994, -9998, -10000, -9998, -9994, -9986, -9976, -9962, -9945, -9925, -9903, -9877, -9848, -9816, -9781, -9744, -9703, -9659, -9613, -9563, -9511, -9455, -9397, -9336, -9272, -9205, -9135, -9063, -8988, -8910, -8829, -8746, -8660, -8572, -8480, -8387, -8290, -8192, -8090, -7986, -7880, -7771, -7660, -7547, -7431, -7314, -7193, -7071, -6947, -6820, -6691, -6561, -6428, -6293, -6157, -6018, -5878, -5736, -5592, -5446, -5299, -5150, -5000, -4848, -4695, -4540, -4384, -4226, -4067, -3907, -3746, -3584, -3420, -3256, -3090, -2924, -2756, -2588, -2419, -2250, -2079, -1908, -1736, -1564, -1392, -1219, -1045, -872, -698, -523, -349, -175, 0];
	enumType.size = 361;
	break;

case 3385:
	enumType.valueType = INT;
	enumType.defaultint = 10000;
	enumType.keyType = INT;
	enumType.valueArray = [10000, 9998, 9994, 9986, 9976, 9962, 9945, 9925, 9903, 9877, 9848, 9816, 9781, 9744, 9703, 9659, 9613, 9563, 9511, 9455, 9397, 9336, 9272, 9205, 9135, 9063, 8988, 8910, 8829, 8746, 8660, 8572, 8480, 8387, 8290, 8192, 8090, 7986, 7880, 7771, 7660, 7547, 7431, 7314, 7193, 7071, 6947, 6820, 6691, 6561, 6428, 6293, 6157, 6018, 5878, 5736, 5592, 5446, 5299, 5150, 5000, 4848, 4695, 4540, 4384, 4226, 4067, 3907, 3746, 3584, 3420, 3256, 3090, 2924, 2756, 2588, 2419, 2250, 2079, 1908, 1736, 1564, 1392, 1219, 1045, 872, 698, 523, 349, 175, 0, -175, -349, -523, -698, -872, -1045, -1219, -1392, -1564, -1736, -1908, -2079, -2250, -2419, -2588, -2756, -2924, -3090, -3256, -3420, -3584, -3746, -3907, -4067, -4226, -4384, -4540, -4695, -4848, -5000, -5150, -5299, -5446, -5592, -5736, -5878, -6018, -6157, -6293, -6428, -6561, -6691, -6820, -6947, -7071, -7193, -7314, -7431, -7547, -7660, -7771, -7880, -7986, -8090, -8192, -8290, -8387, -8480, -8572, -8660, -8746, -8829, -8910, -8988, -9063, -9135, -9205, -9272, -9336, -9397, -9455, -9511, -9563, -9613, -9659, -9703, -9744, -9781, -9816, -9848, -9877, -9903, -9925, -9945, -9962, -9976, -9986, -9994, -9998, -10000, -9998, -9994, -9986, -9976, -9962, -9945, -9925, -9903, -9877, -9848, -9816, -9781, -9744, -9703, -9659, -9613, -9563, -9511, -9455, -9397, -9336, -9272, -9205, -9135, -9063, -8988, -8910, -8829, -8746, -8660, -8572, -8480, -8387, -8290, -8192, -8090, -7986, -7880, -7771, -7660, -7547, -7431, -7314, -7193, -7071, -6947, -6820, -6691, -6561, -6428, -6293, -6157, -6018, -5878, -5736, -5592, -5446, -5299, -5150, -5000, -4848, -4695, -4540, -4384, -4226, -4067, -3907, -3746, -3584, -3420, -3256, -3090, -2924, -2756, -2588, -2419, -2250, -2079, -1908, -1736, -1564, -1392, -1219, -1045, -872, -698, -523, -349, -175, 0, 175, 349, 523, 698, 872, 1045, 1219, 1392, 1564, 1736, 1908, 2079, 2250, 2419, 2588, 2756, 2924, 3090, 3256, 3420, 3584, 3746, 3907, 4067, 4226, 4384, 4540, 4695, 4848, 5000, 5150, 5299, 5446, 5592, 5736, 5878, 6018, 6157, 6293, 6428, 6561, 6691, 6820, 6947, 7071, 7193, 7314, 7431, 7547, 7660, 7771, 7880, 7986, 8090, 8192, 8290, 8387, 8480, 8572, 8660, 8746, 8829, 8910, 8988, 9063, 9135, 9205, 9272, 9336, 9397, 9455, 9511, 9563, 9613, 9659, 9703, 9744, 9781, 9816, 9848, 9877, 9903, 9925, 9945, 9962, 9976, 9986, 9994, 9998, 10000];
	enumType.size = 361;
	break;

case 3446:
	enumType.valueMap = {11749=1, 15046=1, 15048=1, 15050=1, 1963=1, 15052=1, 15054=1, 13647=1, 13648=1, 7572=1, 1973=1, 15061=1, 2871=1, 15063=1, 10488=1, 15064=1};
	enumType.valueType = BOOLEAN;
	enumType.keyType = OBJ;
	enumType.size = 16;
	break;

case 3473:
	enumType.valueMap = {1=8, 2=8, 3=8, 8=1, 72=2, 9=1, 73=2, 10=1, 74=2, 11=1, 75=2, 12=1, 76=2, 13=1, 77=2, 14=1, 78=2, 15=1, 79=2, 16=1, 80=2, 17=1, 81=2, 18=1, 82=2, 19=1, 83=2, 20=1, 84=2, 34=1, 98=2, 35=7, 36=7, 37=7, 38=7, 39=7, 40=7, 41=7, 42=7, 43=7, 44=7, 45=7, 46=7, 47=7, 61=7};
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.size = 45;
	break;

case 3474:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 2, 3];
	enumType.size = 28;
	break;

case 3475:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1, 2, 3, 4, 5, 6, 7];
	enumType.size = 7;
	break;

case 3476:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3];
	enumType.size = 15;
	break;

case 3477:
	enumType.valueMap = {19994=19994, 19996=19996, 19998=19998, 19999=19999, 20000=20000, 20001=20001, 20002=20002, 20003=20003, 20004=20004, 20005=20005, 20006=20006, 20007=20007, 20008=20008, 20009=20009, 20010=20010, 20011=20011, 20012=20012, 20013=20013, 20014=20014, 20015=20015, 20016=20016, 20017=20017, 20018=20018, 20019=20019, 20020=20020, 20021=20021, 20022=20022, 20023=20023, 20024=20024, 20025=20025, 20026=20026, 20027=20027, 20028=20028, 20029=20029, 20030=20030, 20031=20031, 20032=20032, 20033=20033, 20034=20034, 20035=20035, 20036=20036, 20037=20037, 20038=20038, 20039=20039, 20040=20040, 20041=20041, 20042=20042, 23131=23131, 23132=23132, 23133=23133, 23134=23134, 23135=23135, 23136=23136, 23137=23137, 23138=23138, 23139=23139, 23140=23140, 23141=23141, 23142=23142, 23143=23143, 23144=23144, 23145=23145, 23146=23146, 23147=23147, 23148=23148, 23149=23149, 23150=23150, 23151=23151, 23152=23152, 23153=23153, 23154=23154, 23155=23155, 23156=23156, 23157=23157, 23158=23158, 23159=23159, 23160=23160, 23161=23161, 23162=23162, 23163=23163, 23164=23164, 23165=23165, 23166=23166, 23167=23167, 23168=23168, 23169=23169, 23170=23170, 23171=23171, 23172=23172, 23173=23173, 23174=23174, 23175=23175, 23176=23176, 23177=23177, 23178=23178, 23179=23179, 23180=23180, 23181=23181, 23182=23182, 23183=23183, 23184=23184, 23185=23185, 23186=23186, 23187=23187, 23188=23188, 23189=23189, 23190=23190};
	enumType.valueType = OBJ;
	enumType.defaultint = 526;
	enumType.keyType = OBJ;
	enumType.size = 107;
	break;

case 3480:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1407, 4147, 4148];
	enumType.size = 3;
	break;

case 3482:
	enumType.valueMap = {0=3000, 64=4091, 1=346, 2=426, 3=115, 4=221, 5=0, 6=182, 7=152, 8=544, 9=944, 10=995, 11=1078, 12=1146, 13=1205, 14=4091, 15=4091, 16=4091, 17=4091, 18=4091, 19=4091, 20=4091, 60=3522, 62=4091, 63=4090};
	enumType.valueType = INT;
	enumType.defaultint = 4094;
	enumType.keyType = INT;
	enumType.size = 25;
	break;

case 3483:
	enumType.valueMap = {0=1592, 1=1593, 2=1594, 3=1595, 4=1596, 5=1597, 6=1598, 7=1599, 8=1600, 9=1601, 10=1602, 11=1603, 12=1604, 13=1605, 14=1606, 15=1607, 16=1608, 17=1609, 18=1610, 19=1611, 20=1612, 21=1613, 22=1614, 23=1576, 24=1577, 25=1578, 26=1579, 27=1580, 28=1581, 29=1635, 30=1583, 31=1584, 32=1585, 33=1586, 34=1587, 35=1588, 36=1589, 37=1590, 38=1591, 39=1624, 40=1625, 41=1626, 42=1627, 43=1628, 44=1629, 45=1630, 46=1631, 47=1632, 48=1633, 49=1634, 50=1582, 51=1636, 52=1637, 53=1638, 54=1639, 55=1640, 56=1619, 57=1620, 58=1621, 59=1622, 60=1623, 61=1214, 62=1198, 63=1212, 64=1153, 65=1196, 66=1197, 67=1200, 68=1207, 69=1199, 70=1215, 71=1217, 72=1209, 73=1211, 74=1216, 75=1206, 76=1210, 77=1208, 78=1201, 79=1213, 80=1202, 81=1203, 82=1204, 83=1205, 84=1233, 85=1247, 86=1234, 87=1242, 88=1240, 89=1245, 90=1246, 91=1241, 92=1235, 93=1236, 94=1237, 95=1238, 96=1239, 97=1243, 98=1244, 99=1229, 100=1230, 101=1231, 102=1232, 103=1255, 104=1258, 105=1261, 106=1256, 107=1259, 108=1253, 109=1254, 110=1257, 111=1264, 112=1260, 113=1262, 114=1263, 115=1309, 116=1310, 117=1312, 118=1313, 119=1314, 120=1315, 121=1316, 122=1317, 123=1318, 124=1319, 125=1320, 126=1323, 127=1321, 128=1322, 129=1311, 130=1328, 131=1329, 132=1338, 133=1330, 134=1331, 135=1332, 136=1333, 137=1334, 138=1335, 139=1337, 140=1339, 141=1336, 142=1345, 143=1341, 144=1342, 145=1343, 146=1346, 147=1344, 148=1347, 149=1348, 150=1349, 151=1340, 152=1421, 153=1422, 154=1423, 155=1424, 156=1425, 157=1426, 158=1427, 159=1428, 160=1429, 161=1430, 162=1431, 163=1432, 164=1433, 165=1434, 166=1435, 167=1438, 168=1439, 169=1440, 170=1436, 171=1437, 172=1441, 173=1408, 174=1409, 175=1410, 176=1411, 177=1412, 178=1413, 179=1414, 180=1415, 181=1416, 182=1357, 183=1358, 184=1359, 185=1360, 186=1361, 187=1362, 188=1363, 189=1364, 190=1365, 191=1366, 192=1379, 193=1380, 194=1381, 195=1382, 196=1383, 197=1384, 198=1385, 199=1386, 200=1387, 201=1388, 202=1389, 203=1390, 204=1391, 205=1392, 206=1393, 207=1394, 208=1395, 209=1396, 210=1397, 211=1398, 212=1399, 213=1400, 214=1401, 215=1402, 216=1403, 217=1404, 218=1405, 219=1406, 220=1407, 221=1276, 222=1277, 223=1283, 224=1278, 225=1279, 226=1280, 227=1281, 228=1282, 229=1284, 230=1285, 231=1286, 232=1287, 233=1293, 234=1294, 235=1295, 236=1297, 237=1298, 238=1300, 239=1301, 240=1296, 241=1302, 242=1303, 243=1304, 244=1299, 245=1265, 246=1266, 247=1267, 248=1268, 249=1269, 250=1270, 251=1271, 252=1275, 253=1272, 254=1273, 255=1274, 256=1477, 257=1478, 258=1479, 259=1480, 260=1481, 261=1482, 262=1483, 263=1484, 264=1485, 265=1486, 266=1487, 267=1488, 268=1489, 269=1490, 270=1491, 271=1492, 272=1493, 273=1494, 274=1495, 275=1496, 276=1497, 277=1498, 278=1499, 279=1500, 280=1501, 281=1502, 282=1503, 283=1504, 284=1505, 285=1506, 286=1507, 287=1508, 288=1509, 289=1510, 290=1511, 291=1512, 292=1513, 293=1514, 294=1515, 295=1516, 296=1460, 297=1461, 298=1462, 299=1463, 300=1464, 301=1465, 302=1466, 303=1472, 304=1467, 305=1468, 306=1469, 307=1470, 308=1471, 309=1350, 310=1351, 311=1352, 312=1353, 313=1354, 314=1355, 315=1356, 316=1442, 317=1443, 318=1444, 319=1445, 320=1446, 321=1447, 322=1448, 323=1449, 324=1371, 325=1372, 326=1373, 327=1374, 328=1375, 329=1376, 330=1377, 331=1378, 332=1288, 333=1289, 334=1290, 335=1291, 336=1292, 337=1451, 338=1452, 339=1453, 340=1454, 341=1455, 342=1456, 343=1457, 344=1458, 345=1459, 346=1248, 347=1249, 348=1250, 350=1252, 351=1222, 352=1223, 353=1224, 354=1225, 355=1226, 356=1227, 357=1228, 358=1524, 359=1525, 360=1526, 361=1527, 362=1519, 363=1518, 365=1521, 366=1523, 367=1531, 368=1528, 369=1529, 370=1530, 371=1532, 372=1533, 374=1535, 376=1537, 377=1538, 378=1539, 379=1540, 380=1541, 381=1542, 382=1543, 383=1544, 384=1545, 385=1546, 386=1547, 387=1548, 388=1549, 389=1550, 391=1552, 392=1553, 393=1554, 394=1555, 395=1556, 396=1557, 397=1558, 398=1559, 399=1560, 400=1564, 401=1565, 402=1566, 403=1567, 404=1568, 405=1569, 406=1570, 407=1571, 408=1572, 409=1573, 410=1574, 411=1575, 412=1520, 413=1522, 414=1561, 415=1562, 416=1563, 417=1450, 418=1729, 419=1752, 420=1753, 421=28248, 422=29002, 426=1760, 427=1759, 428=1768, 429=2426, 430=2427, 431=2428, 432=2429, 434=7196, 435=7201, 436=7197, 437=7199, 438=7200, 439=7202, 440=6748, 441=6749, 442=6750, 443=6751, 444=6718, 445=6752, 446=6753, 447=6756, 448=6754, 449=6755, 450=6757, 451=6758, 452=6725, 453=6726, 454=6727, 455=6728, 456=6729, 457=6730, 458=6731, 459=6733, 460=7127, 461=7132, 462=7205, 463=7204, 464=7131, 465=7222, 466=7223, 467=7224, 468=7225, 469=7227, 470=7226, 471=7128, 472=7130, 473=7129, 474=6734, 475=6735, 476=6736, 477=6737, 478=7125, 479=7126, 480=6739, 481=6740, 482=6741, 483=6742, 484=6743, 485=6744, 486=7301, 487=7302, 488=7308, 489=7306, 490=7298, 491=7303, 492=7304, 493=7300, 494=7305, 495=7307, 496=7299, 497=7133, 498=6719, 499=6720, 500=6721, 501=6722, 502=7212, 503=7209, 504=7213, 505=7214, 506=7215, 507=7210, 508=7211, 509=7208, 510=7221, 511=6745, 512=6723, 513=7206, 514=6738, 515=7203, 516=7228, 517=6732, 518=22572, 519=7216, 520=7218, 521=6746, 522=7229, 523=6724, 524=7219, 525=7134, 526=7230, 527=7198, 528=7217, 529=7220, 530=6747, 531=29200, 534=6977, 544=6987, 545=6988, 546=6989, 549=6992, 550=6993, 551=6994, 555=6998, 556=6999, 557=7000, 562=7005, 563=7021, 564=7006, 566=7008, 567=7009, 568=7010, 570=6900, 571=6902, 572=6903, 573=6901, 574=7012, 577=7015, 578=7016, 579=7017, 580=7018, 581=7019, 582=7020, 583=7037, 584=7041, 585=7042, 586=7043, 587=7044, 588=7045, 589=7046, 590=7047, 591=7048, 592=7049, 593=7050, 594=6967, 595=6968, 596=6969, 597=6970, 598=6971, 599=6972, 600=6973, 601=6849, 602=6850, 603=6854, 604=6855, 605=6856, 606=6857, 607=6858, 608=6859, 609=6860, 610=6861, 611=6862, 612=6863, 613=6864, 614=6865, 615=6866, 616=6867, 617=6868, 618=6851, 619=7085, 620=6852, 621=6853, 622=6870, 623=6871, 624=6869, 625=7067, 626=7068, 627=7069, 628=7070, 629=7071, 630=7072, 631=7073, 632=7074, 633=7075, 634=7076, 635=7077, 636=7078, 637=7079, 638=7080, 639=7081, 640=7082, 641=7083, 642=7084, 643=7135, 644=7136, 645=7140, 646=7137, 648=7141, 649=7139, 650=7142, 651=7145, 652=7143, 653=7144, 654=6832, 655=6834, 656=6835, 657=6836, 658=6837, 659=6838, 660=6848, 661=6839, 662=6840, 663=6847, 664=6845, 665=6846, 666=6841, 667=6842, 668=6843, 669=6844, 670=6833, 671=6943, 672=6949, 673=6944, 674=6945, 675=6946, 676=6947, 677=6948, 678=6965, 679=6942, 680=6950, 681=6951, 682=6952, 683=6953, 684=6954, 685=6955, 686=6956, 687=6957, 688=6958, 689=6959, 690=6960, 691=6961, 692=6962, 693=6963, 694=6964, 695=6966, 696=6790, 697=6789, 698=6785, 701=6784, 702=6791, 703=6786, 704=6792, 706=6787, 707=6793, 708=6794, 709=6788, 710=6795, 711=6760, 712=6761, 713=6778, 714=6762, 715=6779, 716=6763, 717=6764, 718=6759, 719=6765, 720=6780, 721=6766, 722=6767, 723=6768, 724=6769, 725=6770, 726=6771, 727=6772, 728=6773, 729=6782, 730=6774, 731=6776, 732=6777, 733=6781, 734=6775, 735=6783, 736=7160, 737=7161, 738=7162, 740=7163, 741=7164, 742=7165, 743=7166, 744=7167, 745=7168, 746=7169, 747=7170, 748=7171, 749=7172, 750=7173, 751=7174, 752=7175, 753=7176, 754=7177, 755=7178, 756=7195, 757=7179, 759=7180, 760=7181, 761=7182, 762=7183, 763=7184, 764=7185, 765=7186, 766=7187, 767=7188, 769=7189, 770=7190, 771=7191, 772=7192, 773=7193, 774=7194, 775=7159, 776=7146, 777=7147, 778=7148, 779=7149, 780=7150, 781=7151, 782=7152, 783=7153, 784=7154, 785=7155, 787=7156, 788=7157, 789=7158, 790=7087, 791=7086, 792=7088, 793=7089, 794=7090, 795=7091, 796=7092, 797=7093, 798=7094, 799=7095, 801=7096, 802=7097, 803=7098, 804=7099, 805=7100, 806=7101, 807=7102, 808=7103, 809=7104, 810=7105, 811=7106, 812=7107, 813=7108, 814=7109, 815=7110, 816=7111, 817=6872, 818=6873, 819=6874, 820=6875, 821=6877, 822=6876, 823=6821, 825=6806, 828=6807, 829=6808, 830=6809, 831=6810, 832=6811, 833=6812, 834=6813, 835=6814, 837=6815, 838=6816, 840=6817, 841=6818, 843=6819, 844=6820, 845=7053, 846=7056, 847=7057, 848=7058, 849=7059, 850=7054, 851=7055, 852=6909, 853=6910, 854=6911, 855=6912, 856=6913, 857=6914, 858=6915, 859=6916, 860=6908, 861=6917, 862=6918, 863=6919, 864=6920, 865=6921, 866=6922, 867=6923, 868=6924, 869=6925, 870=6926, 871=6927, 872=6928, 873=6929, 874=6930, 875=6931, 876=6932, 877=6933, 878=6934, 879=6935, 880=6936, 881=6937, 882=6938, 883=6939, 884=6940, 885=6941, 886=6906, 887=6907, 888=6905, 889=6796, 890=6797, 891=6798, 892=6799, 893=6800, 894=6801, 895=6802, 896=6803, 897=6804, 898=6805, 899=7061, 900=7060, 901=7062, 902=7063, 903=7064, 904=7065, 905=6890, 906=6891, 907=6893, 908=6892, 909=6880, 910=6883, 911=6884, 912=6885, 913=6886, 914=6887, 915=6888, 916=6889, 917=6827, 918=6823, 919=6822, 920=6828, 921=6824, 922=6829, 923=6830, 924=6825, 925=6831, 926=6826, 927=7113, 928=7114, 929=7116, 930=7124, 931=7118, 932=7117, 933=7115, 934=7119, 935=7120, 936=7123, 937=7121, 938=7122, 939=7052, 940=7001, 941=7051, 942=7112, 943=7066, 944=9816, 945=9817, 946=9818, 947=9819, 948=9820, 949=9821, 950=9822, 951=9823, 3000=1652, 952=9824, 3001=1653, 953=9825, 3002=1646, 954=9826, 3003=1647, 955=9815, 3004=1648, 956=9796, 3005=1649, 957=9797, 3006=1650, 958=9798, 3007=1651, 959=9814, 3008=1654, 960=9799, 3009=1655, 961=9800, 3010=1656, 962=9843, 3011=1657, 963=9802, 3012=1658, 964=9803, 3013=1659, 965=9804, 3014=1660, 966=9805, 3015=1661, 967=9806, 3016=1662, 968=9807, 3017=1663, 969=9808, 3018=1664, 970=9809, 3019=1665, 971=9810, 3020=1666, 972=9811, 3021=1667, 973=9812, 3022=1668, 974=9813, 3023=1669, 975=9827, 3024=1670, 976=9829, 3025=1671, 977=9830, 3026=1672, 978=9831, 3027=1673, 979=9832, 3028=1674, 980=9833, 3029=1675, 981=9834, 3030=1676, 982=9835, 3031=1677, 983=9836, 3032=1678, 984=9837, 3033=1679, 985=9828, 3034=1680, 986=9787, 3035=11490, 987=9788, 3036=12297, 988=9789, 3037=12298, 989=9790, 3038=12299, 990=9791, 3039=12300, 991=9792, 3040=12301, 992=9793, 3041=12302, 993=9794, 994=9795, 3042=11513, 995=9711, 3043=11514, 3044=16568, 996=9712, 3045=16569, 998=9713, 3046=18797, 999=9714, 3047=19037, 1000=9715, 3048=19595, 3049=24035, 1001=9716, 3050=24036, 3051=24037, 1003=9717, 3052=24120, 1004=9718, 3053=24121, 1005=9719, 3054=24122, 1006=9720, 3055=24119, 1007=9721, 1008=9710, 3056=24123, 3057=24124, 1009=9861, 1010=10280, 3058=21188, 1011=14292, 3059=25012, 1012=10525, 1013=10470, 3061=3107, 1014=11511, 3062=28049, 3063=28247, 1015=12332, 3064=24380, 1016=13739, 3065=28358, 1017=13740, 3066=29001, 1018=13748, 1019=14293, 1020=14996, 3068=29198, 1021=14997, 3069=31393, 1022=14998, 3070=31394, 1023=14999, 3071=31557, 1024=15000, 3072=31558, 3073=31697, 1026=15002, 1027=15043, 1028=15044, 1029=15045, 1030=15046, 1031=9890, 1032=15042, 1033=15017, 1034=15018, 1035=15019, 1036=15020, 1037=15021, 1038=15029, 1039=15030, 1040=15031, 1041=15032, 1042=15033, 1043=15034, 1044=15035, 1045=15036, 1046=15037, 1047=15038, 1048=15039, 1049=15040, 1050=15041, 1051=15022, 1052=15023, 1053=15024, 1054=15025, 1055=15026, 1056=15027, 1057=15028, 1058=15003, 1059=15004, 1060=15005, 1061=15006, 1062=15007, 1063=15008, 1064=15009, 1065=15010, 1066=15011, 1067=15012, 1068=15013, 1069=15014, 1070=15015, 1071=15016, 1073=9932, 1074=9933, 1075=16566, 1076=16567, 1077=19038, 1078=19082, 1079=19083, 1080=19084, 1081=19085, 1082=19086, 1083=19087, 1084=19088, 1085=19089, 1086=19090, 1087=19091, 1088=19092, 1089=19093, 1090=19108, 1091=19109, 1092=19110, 1093=19111, 1094=19112, 1095=19113, 1096=19114, 1097=19115, 1098=19116, 1099=19117, 1100=19118, 1101=19094, 1102=19095, 1103=19096, 1104=19097, 1105=19098, 1106=19099, 1107=19100, 1108=19101, 1109=19102, 1110=19103, 1111=19104, 1112=19105, 1113=19106, 1114=19107, 1115=19072, 1116=19073, 1117=19074, 1118=19075, 1119=19076, 1120=19077, 1121=19143, 1122=19256, 1123=19612, 1125=19596, 1126=19671, 1127=19702, 1128=19703, 1129=19704, 1130=19705, 1131=19706, 1132=19707, 1133=19708, 1134=20284, 1135=21331, 1136=22742, 1137=22750, 1138=22743, 1139=22744, 1140=22745, 1141=22748, 1142=22746, 1143=22747, 1144=22749, 1145=22751, 1146=23134, 1147=23135, 1148=23136, 1149=23137, 1150=23138, 1151=23139, 1152=23140, 1153=23141, 1154=23142, 1155=23143, 1156=23144, 1157=23145, 1158=23146, 1159=23147, 1160=23148, 1161=23149, 1162=23156, 1163=23157, 1164=23158, 1165=23159, 1166=23160, 1167=23161, 1168=23162, 1169=23163, 1170=23164, 1171=23165, 1172=23166, 1173=23167, 1174=23168, 1175=23169, 1176=23170, 1177=23171, 1178=23172, 1179=23173, 1180=23174, 1181=23175, 1182=23176, 1183=23177, 1184=23178, 1185=23179, 1186=23180, 1187=23150, 1188=23151, 1189=23152, 1190=23153, 1191=23154, 1192=23155, 1193=24060, 1194=24034, 1196=26439, 1197=26603, 1198=27612, 1199=28115, 1200=28275, 1201=28363, 1202=24252, 1203=28936, 1204=29849, 1205=29161, 1206=29744, 1207=29853, 1208=29854, 1209=29855, 1210=29856, 1211=29857, 1212=29858, 1213=29859, 1214=29860, 1215=29861, 1216=29862, 1217=29894, 1218=29895, 1219=29896, 1220=29897, 1221=29898, 1222=29899, 1223=29900, 1224=29901, 1225=29902, 1226=29903, 1227=29904, 1228=29873, 1229=29874, 1230=29875, 1231=29876, 1232=29877, 1233=29878, 1234=29879, 1235=29880, 1236=29881, 1237=29882, 1238=29883, 1239=29884, 1240=29885, 1241=29886, 1242=29887, 1243=29888, 1244=29889, 1245=29890, 1246=29891, 1247=29892, 1248=29893, 1249=29863, 1250=29864, 1251=29865, 1252=29866, 1253=29867, 1254=29868, 1255=29869, 1256=29870, 1257=29871, 1258=29872, 1259=30145, 1260=32003, 1261=30763, 1300=1641, 3500=1703, 3501=1704, 3502=1705, 3503=1706, 3504=1707, 3505=1708, 3506=1709, 3507=1712, 3508=1710, 3509=1711, 3510=1714, 3511=1715, 3512=1716, 3513=1717, 3514=1718, 3515=1719, 3516=1720, 3517=1721, 3518=1722, 3519=1723, 3520=1724, 3521=1725, 3522=1702, 3523=1713, 3531=24971, 4000=1218, 4001=1219, 4002=1220, 4003=1221, 4004=1615, 4005=1616, 4006=1617, 4007=1618, 4008=1324, 4009=1325, 4010=1326, 4011=1327, 4012=1417, 4013=1418, 4014=1419, 4015=1420, 4016=1367, 4017=1368, 4018=1369, 4019=1370, 4020=1305, 4021=1306, 4022=1307, 4023=1308, 4024=1473, 4025=1474, 4026=1475, 4027=1476, 4028=9838, 4029=9839, 4030=9840, 4031=9841, 4032=19078, 4033=19079, 4034=19080, 4035=19081, 4036=23181, 4037=23182, 4038=23183, 4039=23184, 4040=29905, 4041=29906, 4042=29907, 4043=29908, 4091=1642, 4092=1643, 4094=1645, 4095=1644};
	enumType.valueType = STRUCT;
	enumType.defaultint = 1645;
	enumType.keyType = INT;
	enumType.size = 1354;
	break;

case 3484:
	enumType.valueMap = {0=3000, 6=3008, 7=3009, 8=3010, 72=3032, 9=3030, 12=3001, 13=3012, 14=3013, 78=3022, 15=3061, 79=3023, 18=3015, 84=3028, 85=3029, 86=3031, 24=3014, 90=3021, 30=3016, 31=3017, 32=3019, 33=3018, 36=3020, 42=3034, 48=3024, 49=3026, 50=3027, 51=3025, 54=3001, 55=3013, 60=3033};
	enumType.valueType = INT;
	enumType.defaultint = 4092;
	enumType.keyType = INT;
	enumType.size = 31;
	break;

case 3485:
	enumType.valueType = INT;
	enumType.defaultint = 4092;
	enumType.keyType = INT;
	enumType.valueArray = [null, 3007, 3002, 3004, 3006, 3003, 3005, 3035, 3047];
	enumType.size = 8;
	break;

case 3487:
	enumType.valueMap = {0=D&Ds/Minigames, 64=Ashdale, 1=Lumbridge/Draynor, 2=Varrock, 3=Falador, 4=Seers' Village, 5=Ardougne, 6=Karamja, 7=Fremennik, 8=Burthorpe/Taverley, 9=Morytania, 10=Lodestone Network, 11=Desert, 12=Daemonheim, 13=Tirannwn, 14=Feldip Hills, 15=Gnome Lands, 16=Wilderness, 17=Keldagrim, 18=Dorgesh-Kaan, 19=Outer Planes, 20=Piscatoris, 60=, 61=, 62=Islands, 63=Elsewhere...};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 26;
	break;

case 3488:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Beginner, Easy, Medium, Hard, Elite];
	enumType.size = 5;
	break;

case 3491:
	enumType.valueMap = {64=23198, 1=4283, 2=4280, 3=4281, 4=9121, 5=4282, 6=4278, 7=4279, 8=9118, 9=9119, 11=9611, 13=24263};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 12;
	break;

case 3492:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4330, 4331, 4332, 4333, 4334];
	enumType.size = 5;
	break;

case 3493:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [60096601, 60096602, 60096603, 60096604, 60096605, 60096606, 60096607, 60096608, 60096609, 60096610, 60096611, 60096612];
	enumType.size = 12;
	break;

case 3494:
	enumType.valueType = STRUCT;
	enumType.defaultint = 1645;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1218, 1219, 1220, 1221, null, null, 1473, 1474, 1475, 1476, null, 1324, 1325, 1326, 1327, null, 1305, 1306, 1307, 1308, null, 1615, 1616, 1617, 1618, null, 1367, 1368, 1369, 1370, null, 1417, 1418, 1419, 1420, null, null, null, null, null, null, 9838, 9839, 9840, 9841, null, null, null, null, null, null, 19078, 19079, 19080, 19081, null, 23181, 23182, 23183, 23184, null, 29905, 29906, 29907, 29908];
	enumType.size = 44;
	break;

case 3495:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 1085;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1085, 1086, 1088, 1090, 1087, 1091, 1089, 1092, 1093, 1094, 1095, 1103, 1097, 1098, 1099, 1100, 1101, 1102, 1096, 1104, 1105, 1109, 1108, 1110, 3029, 9174];
	enumType.size = 26;
	break;

case 3554:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [49741829, 49741834, 49741839, 49741844, 49741849, 49741854, 49741859, 49741864, 49741869, 49741874];
	enumType.size = 10;
	break;

case 3555:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [851976, 851977, 851978, 851979, 851980, 851981, 851982, 851983, 851984, 851985];
	enumType.size = 10;
	break;

case 3556:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [49741825, 49741830, 49741835, 49741840, 49741845, 49741850, 49741855, 49741860, 49741865, 49741870];
	enumType.size = 10;
	break;

case 3557:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [49741828, 49741833, 49741838, 49741843, 49741848, 49741853, 49741858, 49741863, 49741868, 49741873];
	enumType.size = 10;
	break;

case 3622:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 20632, 20633, 20634, 20635, 20636, 20637, 20638, 20639, 20640, 20641, 20642, 20643, 20644, 20645, 20646];
	enumType.size = 15;
	break;

case 3644:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced , You've just advanced ];
	enumType.size = 26;
	break;

case 3645:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null,  Attack levels!,  Strength levels!,  Ranged levels!,  Magic levels!,  Defence levels!,  Constitution levels!,  Prayer levels!,  Agility levels!,  Herblore levels!,  Thieving levels!,  Crafting levels!,  Runecrafting levels!,  Mining levels!,  Smithing levels!,  Fishing levels!,  Cooking levels!,  Firemaking levels!,  Woodcutting levels!,  Fletching levels!,  Slayer levels!,  Farming levels!,  Construction levels!,  Hunter levels!,  Summoning levels!,  Dungeoneering levels!,  Divination levels!];
	enumType.size = 26;
	break;

case 3656:
	enumType.valueType = INT;
	enumType.defaultint = 4094;
	enumType.keyType = INT;
	enumType.valueArray = [419, 420, 363, 346, 372, 362, 73, 358, 359, 360, 361, 365, 412, 413, 366, 379, 383, 368, 65, 369, 370, 384, 414, 71, 415, 416, 367, 347, 386, 387, 69, 427, 256, 426, 80, 81, 82, 83, 77];
	enumType.size = 39;
	break;

case 3657:
	enumType.valueType = INT;
	enumType.defaultint = 4094;
	enumType.keyType = INT;
	enumType.valueArray = [374, 371];
	enumType.size = 2;
	break;

case 3674:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [6984, 13976, 22712, 31448, 40184, 48920, 57656, 66392, 74440, 80640, 85000];
	enumType.size = 11;
	break;

case 3685:
	enumType.valueType = unknownScriptVarType4669;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 665, 740, 724, 643, 680, 730, 722, 652, 629, 677, 651, 633, 713, 667, 664, 688, 624, 649, 637, 657, 725, 660, 707, 733, 694, 675, 662, 706, 717, 682, 693, 690, 646, 635, 644, 632, 655, 732, 721, 640, 729, 674, 739, 683, 741, 648, 627, 696, 641, 699, 650, 727, 679, 681, 700, 711, 719, 728, 626, 656, 628, 639, 704, 687, 714, 692, 638, 685, 742, 636, 726, 695, 731, 661, 673, 712, 672, 734, 668, 645, 659, 669, 738, 676, 678, 653, 686, 697, 671, 631, 634, 703, 716, 698, 658, 701, 647, 720, 702, 691, 715, 705, 654, 670, 666, 630, 623, 737, 710, 663, 723, 708, 718, 689, 709, 684, 625, 3871, 4222, 5393, 5394, 5395];
	enumType.size = 122;
	break;

case 3686:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 5723, 5789, 5691, 5692, 5693, 5694, 5695, 5696, 5697, 5698, 5699, 5700, 5701, 5702, 5703, 5704, 5705, 5706, 5707, 5708, 5709, 5710, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719, 5720, 5721, 5722, 5724, 5725, 5726, 5727, 5728, 5729, 5730, 5731, 5732, 5733, 5734, 5735, 5736, 5737, 5738, 5739, 5740, 5741, 5742, 5743, 5744, 5745, 5746, 5747, 5748, 5749, 5750, 5751, 5752, 5753, 5754, 5755, 5756, 5757, 5758, 5759, 5760, 5761, 5762, 5763, 5764, 5765, 5766, 5767, 5768, 5769, 5770, 5771, 5772, 5773, 5774, 5775, 5776, 5777, 5778, 5779, 5780, 5781, 5782, 5783, 5784, 5785, 5786, 5787, 5788, 5790, 5791, 5792, 5793, 5794, 5795, 5796, 5797, 5798, 5799, 5800, 5801, 5802, 7472, 7473, 9136, 9137, 9138, 20343, 20734, 25014, 25015, 25016];
	enumType.size = 122;
	break;

case 3687:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Quest, PvP, Activities, Dungeon, Tasks, Roleplay, Gathering, Party, Clan meeting, Meeting, Skilling, Distractions & Diversions, PvM, Clan event, Special];
	enumType.size = 15;
	break;

case 3688:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 6210, 6212, 6209, 6214, 6211, 6216, 6215, 6215, 6111, 6215, 6213, 6208, 7655, 6111, 7656];
	enumType.size = 15;
	break;

case 3689:
	enumType.valueMap = {3=8559, 11=8557, 12=3694, 5=8558, 13=8556, 14=4664};
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 6;
	break;

case 3694:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Ancient effigies, Circus, Champions' Challenge, Court Cases, Evil Tree, Familiarisation, Fish Flingers, Penguin Hide and Seek, Phoenix Lair, Shattered Heart, Shooting Star, Tears of Guthix, Treasure Trails, Big Chinchompa, God Statues, Sinkholes, Troll Invasion, The Pit, Wilderness Warbands];
	enumType.size = 19;
	break;

case 3695:
	enumType.valueMap = {0=00:00, 193=19:30, 130=13:00, 3=00:30, 133=13:30, 70=07:00, 200=20:00, 73=07:30, 10=01:00, 203=20:30, 140=14:00, 13=01:30, 143=14:30, 80=08:00, 210=21:00, 83=08:30, 20=02:00, 213=21:30, 150=15:00, 23=02:30, 153=15:30, 90=09:00, 220=22:00, 93=09:30, 30=03:00, 223=22:30, 160=16:00, 33=03:30, 163=16:30, 100=10:00, 230=23:00, 103=10:30, 40=04:00, 233=23:30, 170=17:00, 43=04:30, 173=17:30, 110=11:00, 113=11:30, 50=05:00, 180=18:00, 53=05:30, 183=18:30, 120=12:00, 123=12:30, 60=06:00, 190=19:00, 63=06:30};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 48;
	break;

case 3696:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Abandoned Mine, Abyss, Agility Arena - Wilderness, Agility Pyramid, Agility Training Area, Al Kharid, Al Kharid Scorpion Mine, Al Kharid Palace, Al Kharid Palace Roof, Ancient Cavern, Ape Atoll, Ape Atoll Agility Course, Ardougne, Ardougne Sewers, Ardougne Zoo, Ardougne Market Place, Asgarnia Blurite Dungeon, Asp and Snake, Aubury's, Axe Hut - Wilderness, Bandit Camp, Bandit Camp - Wilderness, Barbarian Agility Course, Barbarian Assault, Barbarian Village, Barrows, Baxtorian Falls, Big Heist Lodge, Black Knights' Fortress, Black Salamanders - Wilderness, Blue Moon Inn, Blurberry's Bar, Boneyard - Wilderness, Bork, Braindeath Island, Brimhaven, Brimhaven Agility Arena, Brimhaven Dungeon, Brimhaven Moss Giants, Burgh de Rott, Burgh de Rott - Fishing, Burgh de Rott - Temple Trekking, Burgh de Rott - Vyrewatch, Burthorpe, Burthorpe Games Room, Camelot Castle, Canifis, Canifis Bank, Castle Wars, Catherby, Champions' Guild, Chaos Battlefield, Chaos Elemental, Chaos Temple, Chaos Tunnels, Chaos Tunnels - Dust Devils, Chaos Tunnels - Fire Giants, Chaos Tunnels - Green Dragons, Chaos Tunnels - Mummies, Chaos Tunnels - Nechryael, Chaos Tunnels - Rock Crabs, Clan Wars, Coal Trucks, Combat Training Camp, Conquest, Cooks' Guild, Corporeal Beast, Crafting Guild, Crandor, Daemonheim, Dagannoth Cave, Dagannoth Kings, Dancing Donkey Inn, Dark Knight Stronghold, Dark Warriors' Fortress, Dark Wizards' Tower, Dead Man's Chest, Demonic Ruins - Wilderness, Desert Lizards, Desert Quarry, Digsite, Dorgesh-Kaan, Dorgesh-Kaan Agility Course, Dragon Inn, Draynor Village, Draynor Manor, Draynor Market, Draynor Potato Field, Duel Arena, Dungeoneering, Dwarven Mine, Eagles' Peak Hunting Areas, Eagles' Peak, East Ardougne, Ecteria, Ectofuntus, Edgeville, Edgeville Bank, Edgeville Dungeon, Elf Camp, Isafdar Hunting Area, Arandar Limestone Quarry, Tirannwn, Enchanted Valley, Entrana, Entrana Law Running, Esoterican Arms, Essence Mine, Exam Centre, Falador, Falador Castle Roof, Falador Farm, Falador Garden, Falador Mole Dungeon, Falador Square, Falconer, Feldip Hills - Hunting Areas, Feldip Hills - Strykewyrms, Fenkenstrain's Castle, Fight Arena Bar, Fight Pit, Fisher King Realm, Fishing Guild, Fishing Platform, Fishing Trawler, Fist of Guthix, Flying Horse Inn, Forester's Arms, Forgotten Cemetery - Wilderness, Forinthry Dungeon, Fremennik Isle, Fremennik Isle - Rune Rock, Fremennik Province, Fremennik Slayer Dungeon - Aquanites, Fremennik Slayer Dungeon - Basilisks, Fremennik Slayer Dungeon - Cave Crawlers, Fremennik Slayer Dungeon - Cockatrice, Fremennik Slayer Dungeon - Jellies, Fremennik Slayer Dungeon - Kurasks, Fremennik Slayer Dungeon - Pyrefiends, Fremennik Slayer Dungeon - Rock Slugs, Fremennik Slayer Dungeon - Turoths, Gamers' Grotto, Gnome Agility Training Area, Gnome Ball Field, Gnome Restaurant, Goblin Village, God Wars - Armadyl, God Wars - Bandos, God Wars Dungeon, God Wars - Nex, God Wars - Saradomin, God Wars - Zamorak, Gorak Plane, Grand Exchange, Grand Tree, Graveyard of Shadows - Wilderness, Great Orb Project, Green Ghost Inn, Gunnarsgrunn, Gu'Tanoth, H.A.M. Cult Dungeon, Hair of the Dog, Harpoon Joe's House of 'Rum', Haunted Woods, Haunted Woods Hunting Area, Heroes' Guild, Ice Mountain, Iceberg Agility Course, Isfdar, Jatizo, Jolly Boar Inn, Kalphite Hive, Kalphite Queen, Karamja Shipyard, Karamja Spirits Bar, Keldagrim, Kharazi Jungle, King Black Dragon, King's Axe Inn, Lair of Tarn Razorlor, Laughing Miner, Lava Flow Mine, Legends' Guild, Legends' Guild - Shadow Warriors, Lighthouse, Living Rock Caverns, Lletya, Long Hall, Lumber Yard, Lumbridge Swamp Hut, Lumbridge Castle, Lumbridge Castle Cellar, Lumbridge Graveyard, Lumbridge Mine - South-East, Lumbridge Mine - South-West, Lumbridge Swamp, Lunar Isle, Mage Arena - Wilderness, Mage Training Arena, Magic Guild, Maple Trees North of Seers' Village, Mausoleum - Experiments, Meiyerditch, Mining Guild, Miscellania, Mithril Dragons, Mobilising Armies, Monastery, Mort Myre Swamp, Mort'ton, Mos Le'Harmless, Mos Le'Harmless Cave, Mudskipper Point, Musa Point, Musa Point Fishing, Nardah, Nature Altar, Necromancer Tower, Neitiznot, Oo'glog, Ork's Rift, Other Inn, Ourania Altar, Outpost, Paramayer Inn, Party room, Paterdomus, Pest Control, Piscatoris, Piscatoris Fishing Colony, POH, Poison Arrow Pub, Pollnivneach, Pollnivneach Slayer Dungeon, Port Khazard, Port Phasmatys, Port Sarim, Port Tyras, Puro-Puro, Pyramid Plunder, Ranging Guild, Rat Pits, Ratpit Bar - Varrock, Ratpit Bar - Keldagrim, Ratpit Bar - Port Sarim, Red Dragon Isle - Wilderness, Rellekka, Rellekka Longhall, Rimmington, Rimmington Square, Rising Sun Pub, Rouges' Castle - Wilderness, Runecrafting Guild, Rusty Anchor Pub, Seers' Village -  Flax Field, Seers' Village, Shilo Village, Slayer Tower, Sophanem, Sorceress's Garden, Soul Wars, Stealing Creation, Steel Dragons - Wilderness, Stronghold of Player Safety, Stronghold of Security, Tai Bwo Wannai Village, Taverley, Taverley Dungeon, Tears of Guthix, Temple of Guthix, Toad and Chicken Pub, Tormented Demon Cave, Tree Gnome Stronghold, Tree Gnome Village, Trouble Brewing, Tyras Camp, TzHaar, Uzer, Varrock, Varrock Castle Courtyard, Varrock Mine - South-East, Varrock Mine - South-West, Varrock Palace, Varrock Palace Roof, Varrock Square, Varrock West Bank, Vinesweeper, Warriors' Guild, Waterbirth Island, Waterbirth Island Dungeon, Werewolf Agility Course, West Ardougne, White Knight Castle, White Wolf Mountain, Wilderness, Wilderness Lava Maze, Wilderness Ruins, Wilderness Volcano, Witchaven, Wizards' Tower, Yanille, Yanille Bank, Yanille Dungeon, Yu'biusk, Zanaris, Zygomites, Clan Camp, Clan Citadel, Clan Keep, Clan Party Room, Clan Private Meeting Room, Clan Citadel Tent, Clan Battlefield, Clan Skilling Plot, Exiled Kalphite Hive, Shadow Realm, Borehole, Guthix Memorial, Dominion Tower, Lumbridge Crater, Artisans Workshop, Citharede Abbey, Darkmeyer, Monastery of Ascension, Botany Bay, Herblore Habitat, Jadinko Lair, Pale colony, Flickering colony, Bright colony, Glowing colony, Sparkling colony, Gleaming colony, Vibrant colony, Lustrous colony, Brilliant colony, Radiant colony, Luminous colony, Incandescent colony, To be decided, Kalphite King, Clan Theatre, Prifddinas, Max Guild, World Gate, New Varrock, Araxyte Hive];
	enumType.size = 348;
	break;

case 3697:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
	enumType.size = 31;
	break;

case 3698:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
	enumType.size = 12;
	break;

case 3699:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025];
	enumType.size = 15;
	break;

case 3700:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, N/A];
	enumType.size = 201;
	break;

case 3701:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, 1 min, 2 min, 3 min, 4 min, 5 min, 6 min, 7 min, 8 min, 9 min, 10 min];
	enumType.size = 10;
	break;

case 3702:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Skills, Combat, Minigames, Quests, Distractions, Social, Miscellaneous, Citadel, Gods];
	enumType.size = 9;
	break;

case 3703:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 3704, 3705, 3706, 3708, 3707, 3709, 3710, 7374, 7646];
	enumType.size = 9;
	break;

case 3704:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Agility, Attack, Constitution, Construction, Cooking, Crafting, Defence, Dungeoneering, Farming, Firemaking, Fishing, Fletching, Herblore, Hunter, Magic, Mining, Prayer, Ranged, Runecrafting, Slayer, Smithing, Strength, Summoning, Thieving, Woodcutting, All skills, Divination, Total Level 500+, Total Level 1000+, Total Level 1250+, Total Level 1500+, Total Level 1750+, Total Level 2000+, Total Level 2100+, Total Level 2200+, Total Level 2300+, Total Level 2400+, Total Level 2500+, Total Level Maxed];
	enumType.size = 39;
	break;

case 3705:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Combat level 0+, Combat level 50+, Combat level 100+, Combat level 120+, Combat level 130+, Highest combat level, PvP, PvP - Wilderness, PvP - Duelling, PvP - Warring, PvM, Pure, Boss hunting, Combat level 60+, Combat level 70+, Combat level 80+, Combat level 90+, Combat level 110+, Combat level 115+, Combat level 125+, PvM - Group, PvP - Group, Instanced Bossing, Ranged, Melee, Mage, Hybrid, Combat level Maxed, PvM - Challenges, PvM - Mass, PvM - Regular];
	enumType.size = 31;
	break;

case 3706:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Barbarian Assault, Barrows, Burgh de Rott Ramble, Castle Wars, Clan Wars, Duel Arena, Fist of Guthix, Mage Arena, Mobilising Armies, Temple Trekking, TzHaar Fight Cave, TzHaar Fight Pit, Beacon Network, Blast Furnace, Brimhaven Agility Arena, Fishing Trawler, Gnome Ball, Gnome Restaurant, Great Orb Project, Herblore Habitat, Impetuous Impulses, Mage Training Arena, Pyramid Plunder, Ranging Guild, Flash Powder Factory, Trouble Brewing, Vinesweeper, Shades of Mort'ton, Stealing Creation, Tai Bwo Wannai Cleanup, Burthorpe Games Room, Rat Pits, Rogue Trader, God Wars, Soul Wars, Conquest, Dominion Tower, Pest Control, Fight Cauldron, Fight Kiln, Runespan, Sorceress's Garden, Player-owned Port, Any Minigames, Cabbage Facepunch];
	enumType.size = 45;
	break;

case 3707:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Ancient effigies, Champions' Challenge, Circus, Court Cases, Evil Tree, Familiarisation, Fish Flingers, Penguin Hide and Seek, Phoenix Lair, Shattered Heart, Shooting Star, Tears of Guthix, Treasure Trails, Big Chinchompa, God Statues, Sinkholes, Troll Invasion, The Pit, Wilderness Warbands, Any Distractions];
	enumType.size = 20;
	break;

case 3708:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Quest Cape, Quest help, Questing];
	enumType.size = 3;
	break;

case 3709:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Social, Community, Everyone welcome, Roleplay, Events, Loyalty, Friendly, Company, Corporation, International, Regional, Mature, Homeworld-based, Clan Citadels, Easy Going, No Profanity, All inclusive];
	enumType.size = 17;
	break;

case 3710:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, General, Atmosphere, Creativity, Relaxing, No requirements, 24/7, Help/Support, All levels, No compulsory events, Some compulsory events, F2P only, P2P only, Mixed F2P & P2P, Player-owned cities, Double runes, RuneScape Classic, Rune running - Air, Rune running - Mind, Rune running - Water, Rune running - Earth, Rune running - Fire, Rune running - Body, Rune running - Cosmic, Rune running - Chaos, Rune running - Astral, Rune running - Nature, Rune running - Law, Rune running - Death, Rune running - Blood, Invite Only, Competitive, Motivated, Casual, RuneScape 2007, Ironwoman, Ironman, Hardcore Ironwoman, Hardcore Ironman, Skilling only];
	enumType.size = 39;
	break;

case 3711:
	enumType.valueMap = {0=-12:00, 129=+09:30, 3=-11:30, 132=+10:00, 6=-11:00, 135=+10:30, 9=-10:30, 138=+11:00, 12=-10:00, 141=+11:30, 15=-09:30, 144=+12:00, 18=-09:00, 21=-08:30, 24=-08:00, 27=-07:30, 30=-07:00, 33=-06:30, 36=-06:00, 39=-05:30, 42=-05:00, 45=-04:30, 48=-04:00, 51=-03:30, 54=-03:00, 57=-02:30, 60=-02:00, 63=-01:30, 66=-01:00, 69=-00:30, 72=+00:00, 75=+00:30, 78=+01:00, 81=+01:30, 84=+02:00, 87=+02:30, 90=+03:00, 93=+03:30, 96=+04:00, 99=+04:30, 102=+05:00, 105=+05:30, 108=+06:00, 111=+06:30, 114=+07:00, 117=+07:30, 120=+08:00, 123=+08:30, 126=+09:00};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 49;
	break;

case 3712:
	enumType.valueMap = {0=6226, 1=6225, 2=6224, 3=6232, 4=6233, 100=6977, 5=6231, 101=6978, 102=6979, 103=6228, 125=6229, 126=6227, 127=1005};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 13;
	break;

case 3713:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Anyone, Clanmates];
	enumType.size = 2;
	break;

case 3714:
	enumType.valueMap = {-1=Guest, 0=Recruit, 1=Corporal, 2=Sergeant, 3=Lieutenant, 4=Captain, 100=Admin, 5=General, 101=Organiser, 102=Coordinator, 103=Overseer, 125=Deputy Owner, 126=Owner};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 13;
	break;

case 3715:
	enumType.valueMap = {-1=Guest, 0=Recruit, 1=Corporal, 2=Sergeant, 3=Lieutenant, 4=Captain, 100=Admin, 5=General, 101=Organiser, 102=Coordinator, 103=Overseer, 125=Deputy Owner, 126=Owner, 127=Jagex Moderator};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 14;
	break;

case 3716:
	enumType.valueMap = {-1=Anyone, 0=Recruit+, 1=Corporal+, 2=Sergeant+, 3=Lieutenant+, 4=Captain+, 100=Admin+, 5=General+, 101=Organiser+, 102=Coordinator+, 103=Overseer+, 125=Deputy Owner+, 126=Owner};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 13;
	break;

case 3717:
	enumType.valueMap = {-1=Guest+, 0=Recruit+, 1=Corporal+, 2=Sergeant+, 3=Lieutenant+, 4=Captain+, 100=Admin+, 5=General+, 101=Organiser+, 102=Coordinator+, 103=Overseer+, 125=Deputy Owner+, 126=Owner};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 13;
	break;

case 3718:
	enumType.valueType = STRING;
	enumType.defaultstr = "Recruit+";
	enumType.keyType = INT;
	enumType.valueArray = [Recruit+, Anyone];
	enumType.size = 2;
	break;

case 3719:
	enumType.valueMap = {0=6226, 1=6225, 2=6224, 3=6232, 4=6233, 100=6977, 5=6231, 101=6978, 102=6979, 103=6228, 125=6229, 126=6227, 127=1005};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 13;
	break;

case 3720:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [None, Council, , High Council, , Elder, , Advisor, , Ambassador, , PvP Leader, , PvM Leader, , Skilling Leader, , Courier, , Warmonger, , Diplomat, , Member of the Month, , Skill Master, , Skiller, , Adventurer, , Slayer, , Woodcutter, , Hunter, , Wizard, , Warrior, , Miner, , Runecrafter, , Monk, , Smith, , Summoner, , Thief, , Event Organiser, , Event Leader, , Mage, , Warlord, , Ranger, , Priest, Priestess, Bishop, , Royal Knight, , Fisher, , Forester, , Honour Knight, , Firemaker, , Assassin, , Ninja, , Thug, , Administrator, , Treasurer, , Auditor, , Recruiter, , Mayor, Mayoress, Soldier, , Guide, , Seer, , Druid, , Witchfinder, , Inquisitor, , Vampire Hunter, , Assistant Secretary, , Retired, , Hero, Heroine, Head Seer, , Assistant, , Missionary, , Subgroup Leader, , Scout, , Tank, , Ancienter, , Scryer, , Events Leader, , Recruiting Leader, , Secretary, , Scapegoat, , Minigame Leader, , Legendary Member, , Trainee, , Fresh Meat, , Veteran Member, , Troll, , Newbie, , Knight, , High Priest, , Paladin, , Elite Guard, , Founder, , New Clanmate, , New Clanmate Mentor, , Prince, Princess, Disciplinary, , Forum Leader, , Elite Clanmate, , Rookie, , Squire, , Honorary Clanmate, , On Vacation, , Forum Bumper, , Mentor, , Range Leader, , Melee Leader, , War Caller, , Inactive Clanmate, , King, Queen, Lord, Lady, Archchancellor, , President, , Prime Minister, , Emperor, Empress, Duke, Duchess, Expert, , Low Council, , Legend, , Retired Leader, , Conflict Resolution, , Councillor, , Formal Mediator, , Head Priest, Head Priestess, Avatar Warden, , Ironman, Ironwoman];
	enumType.size = 227;
	break;

case 3721:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 6239;
	enumType.keyType = INT;
	enumType.valueArray = [6239, 6575, 6576, 6577, 6578, 6579, 6580, 6581, 6582, 6583, 6584, 6585, 6586, 6587, 6588, 6589, 6590, 6591, 6592, 6593, 6594, 6595, 6596, 6597, 6598, 6599, 6600, 6601, 6602, 6603, 6604, 6605, 6606, 6607, 6608, 6609, 6610, 6611, 6612, 6613, 6614, 6615, 6616, 6617, 6618, 6619, 6620, 6621, 6622, 6623, 6624, 6625, 6626, 6627, 6628, 6629, 6630, 6631, 6632, 6633, 6634, 6635, 6636, 6637, 6638, 6639, 6640, 6641, 6642, 6643, 6644, 6645, 6646, 6647, 6648, 6649, 6650, 6651, 6652, 6653, 6654, 6655, 6656, 6657, 6658, 6659, 6660, 6661, 6662, 6663, 6664, 6665, 6666, 6667, 6668, 6669, 6670, 6671, 6672, 6673, 6674, 6675, 6676, 6677, 6678, 6679, 6680, 6681, 6682, 6683, 6684, 6685, 6686, 6687, 6688, 6689, 6690, 6691, 6692, 6693, 6694, 6695, 6696, 6697, 6698, 6699, 6700, 6701, 6702, 6703, 6704, 6705, 6706, 6707, 6708, 6709, 6710, 6711, 6712, 6713, 6714, 6715, 6716, 6717, 6718, 6719, 6720, 6721, 6722, 6723, 6724, 6725, 6726, 6727, 6728, 6729, 6730, 6731, 6732, 6733, 6734, 6735, 6736, 6737, 6738, 6739, 6740, 6741, 6742, 6743, 6744, 6745, 6746, 6747, 6748, 6749, 6750, 6751, 6752, 6753, 6754, 6755, 6756, 6757, 6758, 6759, 6760, 6761, 6762, 6763, 6764, 6765, 6766, 6767, 6768, 6769, 6770, 6771, 6772, 6773, 6774, 6775, 6776, 6777, 6778, 6779, 6780, 6781, 6782, 6783, 6784, 6785, 6786, 6787, 6788, 6789, 6790, 6791, 6792, 6793, 6794, 6795, 6796, 6797, 6798, 6799, 6800, 6801, 6802, 6803, 6804, 6805, 6806, 6807, 6808, 6809, 6810, 6811, 6812, 6813, 6814, 6815];
	enumType.size = 242;
	break;

case 3722:
	enumType.valueType = STRING;
	enumType.defaultstr = "RuneScape";
	enumType.keyType = INT;
	enumType.valueArray = [RuneScape, Abkhazia, Afghanistan, Aland, Albania, Algeria, American Samoa, Andorra, Angola, Anguilla, Antarctica, Antigua and Barbuda, Argentina, Armenia, Aruba, Australia, Austria, Azerbaijan, Bahamas, Bahrain, Bangladesh, Barbados, Belarus, Belgium, Belize, Benin, Bermuda, Bhutan, Bolivia, Bosnia and Herzegovina, Botswana, Brazil, British Virgin Islands, Brunei, Bulgaria, Burkina Faso, Burundi, Cambodia, Cameroon, Canada, Cape Verde, Cayman Islands, Central African Republic, Chad, Chile, China, Columbia, Commonwealth, Comoros, Costa Rica, Cote d'Ivoire, Croatia, Cuba, Cyprus, Czech Republic, Democratic Republic of the Congo, Denmark, Djibouti, Dominica, Dominican Republic, East Timor, Ecuador, Egypt, El Salvador, England, Equatorial Guinea, Eritrea, Estonia, Ethiopia, European Union, Falkland Islands, Faroes, Fiji, Finland, France, Gabon, Gambia, Georgia, Germany, Ghana, Greece, Greenland, Grenada, Guam, Guatemala, Guernsey, Guinea, Guinea Bissau, Guyana, Haiti, Honduras, Hong Kong, Hungary, Iceland, India, Indonesia, Iran, Iraq, Ireland, Isle of Man, Israel, Italy, Jamaica, Japan, Jersey, Jordan, Kazakhstan, Kenya, Kiribati, Kosovo, Kuwait, Kyrgyzstan, Laos, Latvia, Lebanon, Lesotho, Liberia, Libya, Liechtenstein, Lithuania, Luxembourg, Macau, Macedonia, Madagascar, Malawi, Malaysia, Maldives, Mali, Malta, Mars, Marshall Islands, Mauritania, Mauritius, Mexico, Micronesia, Moldova, Monaco, Mongolia, Montenegro, Montserrat, Morocco, Mozambique, Myanmar, Nagorno Karabakh, Namibia, NATO, Nauru, Nepal, Netherlands, Netherlands Antilles, New Zealand, Nicaragua, Niger, Nigeria, Norfolk Island, North Cyprus, Northern Mariana Islands, North Korea, Norway, Olympics, Oman, Pakistan, Palau, Palestine, Panama, Papua New Guinea, Paraguay, Peru, Philippines, Pitcairn Islands, Poland, Portugal, Puerto Rico, Qatar, Red Cross, Republic of the Congo, Romania, Russia, Rwanda, Saint Barthelemy, Saint Helena, Saint Kitts and Nevis, Saint Lucia, Saint Vincent and the Grenadines, Samoa, San Marino, Sao Tome and Principe, Saudi Arabia, Scotland, Senegal, Serbia, Seychelles, Sierra Leone, Singapore, Slovakia, Slovenia, Solomon Islands, Somalia, Somaliland, South Africa, South Georgia and the South Sandwich Islands, South Korea, South Ossetia, Spain, Sri Lanka, Sudan, Suriname, Swaziland, Sweden, Switzerland, Syria, Taiwan, Tajikistan, Tanzania, Thailand, Togo, Tonga, Trinidad and Tobago, Tunisia, Turkey, Turkmenistan, Turks and Caicos Islands, Tuvalu, Uganda, Ukraine, United Arab Emirates, United Kingdom, United Nations, United States, Uruguay, US Virgin Islands, Uzbekistan, Vanuatu, Vatican City, Venezuela, Vietnam, Wales, Western Sahara, World, Yemen, Zambia, Zimbabwe];
	enumType.size = 242;
	break;

case 3723:
	enumType.valueType = INT;
	enumType.defaultint = 65535;
	enumType.keyType = INT;
	enumType.valueArray = [65280, null, 45055, 255, 16732758, 10485663, 28416, 16748431, 16750623, 16740096, 16776960, 15663104, 15663279, 16732159, 11501567, 0, 16777215, 12566463, 8388607, 8388608, 3158064];
	enumType.size = 20;
	break;

case 3724:
	enumType.valueType = INT;
	enumType.defaultint = 65535;
	enumType.keyType = INT;
	enumType.valueArray = [10485663, null, 45055, 16732758, 65280, 255, 28416, 16748431, 16750623, 16740096, 16776960, 15663104, 15663279, 16732159, 11501567, 0, 16777215, 12566463, 8388607, 8388608, 3158064];
	enumType.size = 20;
	break;

case 3725:
	enumType.valueMap = {0=Anyone, 1=Recruit+, 2=Corporal+, 3=Sergeant+, 4=Lieutenant+, 5=Captain+, 101=Admin+, 6=General+, 102=Organiser+, 103=Coordinator+, 104=Overseer+, 126=Deputy Owner+, 127=Owner};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 13;
	break;

case 3726:
	enumType.valueType = INT;
	enumType.defaultint = 65535;
	enumType.keyType = INT;
	enumType.valueArray = [16740096, null, 45055, 16732758, 65280, 10485663, 28416, 16748431, 16750623, 3158064, 16776960, 15663104, 15663279, 16732159, 11501567, 0, 16777215, 12566463, 8388607, 8388608, 255];
	enumType.size = 20;
	break;

case 3727:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [None, Ratsmitglied, , Hohes Ratsmitglied, , ?ltester, ?lteste, Betreuer, Betreuerin, Botschafter, Botschafterin, Anf?hrer im Spielerkampf, Anf?hrerin im Spielerkampf, Anf?hrer im Kampf gegen NSC, Anf?hrerin im Kampf gegen NSC, Anf?hrer der Skiller, Anf?hrerin der Skiller, Kurier, Kurierin, Kriegstreiber, Kriegstreiberin, Diplomat, Diplomatin, Clanangeh?riger des Monats, , Meister der Fertigkeiten, Meisterin der Fertigkeiten, Skiller, Skillerin, Abenteurer, Abenteurerin, Berserker, Berserkerin, Holzf?ller, Holzf?llerin, J?ger, J?gerin, Zauberer, Zauberin, Krieger, Kriegerin, Bergarbeiter, Bergarbeiterin, Runenfertiger, Runenfertigerin, M?nch, Nonne, Schmied, Schmiedin, Beschw?rer, Beschw?rerin, Dieb, Diebin, Event-Organisator, Event-Organisatorin, Event-Chef, Event-Chefin, Magier, Magierin, Kriegsf?rst, Kriegsf?rstin, Fernk?mpfer, Fernk?mpferin, Priester, Priesterin, Bischof, Bisch?fin, K?niglicher Ritter, K?nigliche Ritterin, Fischer, Fischerin, F?rster, F?rsterin, Ehrenritter, Ehrenritterin, Feuerteufel, Feuerteufelin, Auftragsm?rder, Auftragsm?rderin, Ninja, , Schl?ger, Schl?gerin, Verwalter, Verwalterin, Schatzmeister, Schatzmeisterin, Buchpr?fer, Buchpr?ferin, Rekrutierungsbeauftragter, Rekrutierungsbeauftragte, B?rgermeister, B?rgermeisterin, Soldat, Soldatin, Fremdenf?hrer, Fremdenf?hrerin, Seher, Seherin, Druide, Druidin, Hexenj?ger, Hexenj?gerin, Inquisitor, Inquisitorin, Vampirj?ger, Vampirj?gerin, Hilfssekret?r, Hilfssekret?rin, Pension?r, Pension?rin, Held, Heldin, Oberster Seher, Oberste Seherin, Assistent, Assistentin, Mission?r, Mission?rin, Gruppenanf?hrer, Gruppenanf?hrerin, Sp?her, Sp?herin, Tank, , Urgestein, , Wahrsager, Wahrsagerin, Event-Enthusiast, , Rekrutierungschef, Rekrutierungschefin, Sekret?r, Sekret?rin, S?ndenbock, , Minispielechef, Minispielechefin, Legend?res Clanmitglied, , Azubi, , Frischfleisch, , Veteran, Veteranin, Troll, , Neuling, , Ritter, Ritterin, Hohepriester, Hohepriesterin, Paladin, , Elite-Wachposten, , Gr?nder, Gr?nderin, Neues Clanmitglied, , Mentor f?r Neulinge, Mentorin f?r Neulinge, Prinz, Prinzessin, Disziplinarbeauftragter, Disziplinarbeauftragte, Forum-Chef, Forum-Chefin, Elite-Clanmitglied, , Gr?nschnabel, , Knappe, , Ehrenmitglied, , Beurlaubt, , Forum-Quasselstrippe, , Mentor, Mentorin, Anf?hrer der Fernk?mpfer, Anf?hrerin der Fernk?mpfer, Anf?hrer der Nahk?mpfer, Anf?hrerin der Nahk?mpfer, Kriegsausrufer, Kriegsausruferin, Inaktives Clanmitglied, , K?nig, K?nigin, Lord, Lady, Erzkanzler, Erzkanzlerin, Pr?sident, Pr?sidentin, Premierminister, Premierministerin, Kaiser, Kaiserin, Herzog, Herzogin, Experte, Expertin, Unterratsmitglied, , Legende, , Chef a.D., Chefin a.D., Streitschlichter, Streitschlichterin, Berater, Beraterin, Vermittler, Vermittlerin, Oberster Priester, Oberste Priesterin, Avatar Warden0, Avatar Warden1, Ironman, Ironwoman];
	enumType.size = 227;
	break;

case 3728:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [None, Council0, , High Council0, High Council1, Elder0, Elder1, Advisor0, Advisor1, Ambassador0, Ambassador1, PvP Leader0, , PvM Leader0, , Skilling Leader0, , Courier0, Courier1, Warmonger0, Warmonger1, Diplomat0, , Member of the Month0, , Skill Master0, , Skiller0, , Adventurer0, Adventurer1, Slayer0, Slayer1, Woodcutter0, Woodcutter1, Hunter0, Hunter1, Wizard0, Wizard1, Warrior0, Warrior1, Miner0, Miner1, Runecrafter0, Runecrafter1, Monk0, , Smith0, Smith1, Summoner0, Summoner1, Thief0, Thief1, Event Organiser0, Event Organiser1, Event Leader0, , Mage0, , Warlord0, , Ranger0, Ranger1, Priest0, Priest1, Bishop0, , Royal Knight0, , Fisher0, Fisher1, Forester0, Forester1, Honour Knight0, , Firemaker0, Firemaker1, Assassin0, , Ninja0, , Thug0, , Administrator0, Administrator1, Treasurer0, Treasurer1, Auditor0, Auditor1, Recruiter0, Recruiter1, Mayor0, , Soldier0, , Guide0, , Seer0, , Druid0, , Witchfinder0, Witchfinder1, Inquisitor0, Inquisitor1, Vampire Hunter0, Vampire Hunter1, Assistant Secretary0, Assistant Secretary1, Retired0, Retired1, Hero0, Hero1, Head Seer0, , Assistant0, , Missionary0, , Subgroup Leader0, , Scout0, , Tank0, , Ancienter0, Ancienter1, Scryer0, Scryer1, Events Leader0, , Recruiting Leader0, , Secretary0, , Scapegoat0, , Minigame Leader0, , Legendary Member0, , Trainee0, Trainee1, Fresh Meat0, , Veteran Member0, , Troll0, , Newbie0, , Knight0, , High Priest0, High Priest1, Paladin0, , Elite Guard0, , Founder0, Founder1, New Clanmate0, New Clanmate1, New Clanmate Mentor0, , Prince0, Prince1, Disciplinary0, , Forum Leader0, , Elite Clanmate0, Elite Clanmate1, Rookie0, Rookie1, Squire0, Squire1, Honorary Clanmate0, Honorary Clanmate1, On Vacation0, , Forum Bumper0, , Mentor0, , Range Leader0, Range Leader1, Melee Leader0, Melee Leader1, War Caller0, War Caller1, Inactive Clanmate0, , King0, King1, Lord0, Lord1, Archchancellor0, Archchancellor1, President0, President1, Prime Minister0, , Emperor0, Emperor1, Duke0, Duke1, Expert0, Expert1, Low Council0, , Legend0, , Retired Leader0, , Conflict Resolution0, , Counciller0, Counciller1, Formal Mediator0, Formal Mediator1, Head Priest0, Head Priest1, Avatar Warden0, Avatar Warden1, T?m?raire, ];
	enumType.size = 227;
	break;

case 3729:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [None, Council0, Council1, High Council0, High Council1, Elder0, Elder1, Advisor0, Advisor1, Ambassador0, Ambassador1, PvP Leader0, , PvM Leader0, , Skilling Leader0, , Courier0, Courier1, Warmonger0, Warmonger1, Diplomat0, , Member of the Month0, , Skill Master0, , Skiller0, , Adventurer0, Adventurer1, Slayer0, Slayer1, Woodcutter0, Woodcutter1, Hunter0, Hunter1, Wizard0, Wizard1, Warrior0, Warrior1, Miner0, Miner1, Runecrafter0, Runecrafter1, Monk0, Monk1, Smith0, Smith1, Summoner0, Summoner1, Thief0, Thief1, Event Organiser0, Event Organiser1, Event Leader0, , Mage0, Mage1, Warlord0, Warlord1, Ranger0, Ranger1, Priest0, Priest1, Bishop0, , Royal Knight0, Royal Knight1, Fisher0, Fisher1, Forester0, , Honour Knight0, Honour Knight1, Firemaker0, , Assassin0, Assassin1, Ninja0, , Thug0, Thug1, Administrator0, Administrator1, Treasurer0, Treasurer1, Auditor0, Auditor1, Recruiter0, Recruiter1, Mayor0, Mayor1, Soldier0, , Guide0, , Seer0, , Druid0, , Witchfinder0, , Inquisitor0, Inquisitor1, Vampire Hunter0, Vampire Hunter1, Assistant Secretary0, , Retired0, Retired1, Hero0, Hero1, Head Seer0, , Assistant0, , Missionary0, Missionary1, Subgroup Leader0, , Scout0, Scout1, Tank0, Tank1, Ancienter0, , Scryer0, Scryer1, Events Leader0, , Recruiting Leader0, , Secretary0, Secretary1, Scapegoat0, , Minigame Leader0, , Legendary Member0, Legendary Member1, Trainee0, Trainee1, Fresh Meat0, Fresh Meat1, Veteran Member0, Veteran Member1, Troll0, , Newbie0, Newbie1, Knight0, Knight1, High Priest0, High Priest1, Paladin0, Paladin1, Elite Guard0, , Founder0, Founder1, New Clanmate0, New Clanmate1, New Clanmate Mentor0, New Clanmate Mentor1, Prince0, Prince1, Disciplinary0, Disciplinary1, Forum Leader0, , Elite Clanmate0, , Rookie0, , Squire0, Squire1, Honorary Clanmate0, Honorary Clanmate1, On Vacation0, , Forum Bumper0, Forum Bumper1, Mentor0, Mentor1, Range Leader0, , Melee Leader0, , War Caller0, War Caller1, Inactive Clanmate0, Inactive Clanmate1, King0, King1, Lord0, Lord1, Archchancellor0, , President0, , Prime Minister0, Prime Minister1, Emperor0, Emperor1, Duke0, Duke1, Expert0, , Low Council0, Low Council1, Legend0, , Retired Leader0, Retired Leader1, Conflict Resolution0, Conflict Resolution1, Counciller0, Counciller1, Formal Mediator0, Formal Mediator1, Head Priest0, Head Priest1, Avatar Warden0, Avatar Warden1, Ironman0, Ironwoman1];
	enumType.size = 227;
	break;

case 3792:
	enumType.valueType = STRING;
	enumType.defaultstr = "Lumbridge";
	enumType.keyType = INT;
	enumType.valueArray = [null, Varrock, Edgeville, Falador, Seers' Village, Ardougne, Yanille, Keldagrim, Dorgesh-kaan, Lletya, Etceteria, Daemonheim, Canifis, TzHaar Area, Burthorpe, Al Kharid, Draynor Village, Ashdale, Prifddinas];
	enumType.size = 18;
	break;

case 3793:
	enumType.valueType = STRING;
	enumType.defaultstr = "Lumbridge";
	enumType.keyType = INT;
	enumType.valueArray = [null, Varrock, Edgeville, Falador, Seers' Village, Ardougne, Yanille, Keldagrim, Dorgesh-kaan, Lletya, Etceteria, Daemonheim, Canifis, TzHaar Area, Burthorpe, Al Kharid, Draynor Village, Ashdale, Prifddinas];
	enumType.size = 18;
	break;

case 3794:
	enumType.valueType = STRING;
	enumType.defaultstr = "Lumbridge";
	enumType.keyType = INT;
	enumType.valueArray = [null, Varrock, Edgeville, Falador, Seers' Village, Ardougne, Yanille, Keldagrim, Dorgesh-kaan, Lletya, Etceteria, Daemonheim, Canifis, TzHaar Area, Burthorpe, Al Kharid, Draynor Village, Ashdale, Prifddinas];
	enumType.size = 18;
	break;

case 3796:
	enumType.valueType = STRING;
	enumType.defaultstr = "Lumbridge Castle";
	enumType.keyType = INT;
	enumType.valueArray = [null, Falador Castle, Camelot, Soul Wars, Burthorpe];
	enumType.size = 4;
	break;

case 3797:
	enumType.valueMap = {0=Show all, 1=Recruits, 2=Corporals, 3=Sergeants, 4=Lieutenants, 5=Captains, 101=Admins, 6=Generals, 102=Organisers, 103=Coordinators, 104=Overseers, 126=Deputy Owners, 127=Owner};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 13;
	break;

case 3839:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 100, 125, 125, 145, 160, 175, 200, 200, 200];
	enumType.size = 9;
	break;

case 3840:
	enumType.valueType = INT;
	enumType.defaultint = 5;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2];
	enumType.size = 10;
	break;

case 3841:
	enumType.valueMap = {8=1, 9=1, 10=1};
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.size = 3;
	break;

case 3842:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 48, 53, 39, 36, 30, 28, 31, 36, 36, 48];
	enumType.size = 10;
	break;

case 3843:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 49, 33, 28, 27, 28, 35, 52, 56, 56, 49];
	enumType.size = 10;
	break;

case 3855:
	enumType.valueType = STRING;
	enumType.defaultstr = "Second Wind";
	enumType.keyType = INT;
	enumType.valueArray = [null, Second Wind, Double Kill, Caffeine Hit, Extra Hands];
	enumType.size = 4;
	break;

case 3856:
	enumType.valueType = INT;
	enumType.defaultint = 75;
	enumType.keyType = INT;
	enumType.valueArray = [null, 75, 75, 75, 75];
	enumType.size = 4;
	break;

case 3857:
	enumType.valueType = INT;
	enumType.defaultint = 50;
	enumType.keyType = INT;
	enumType.valueArray = [null, 50, 50, 50, 50];
	enumType.size = 4;
	break;

case 3872:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [, <col=aa44aa>Junior Cadet </col>, <col=aa44aa>Serjeant </col>, <col=aa44aa>Commander </col>, <col=aa44aa>War-chief </col>, <col=c86400>Dame </col>, <col=c86400>Lady </col>, <col=c86400>Dudette </col>, <col=c86400>Lionheart </col>, <col=c86400>Hellraiser </col>, <col=c86400>Crusader </col>, <col=c86400>Desperado </col>, <col=c86400>Baroness </col>, <col=c86400>Countess </col>, <col=c86400>Overlord </col>, <col=c86400>Bandito </col>, <col=c86400>Duchess </col>, <col=c86400>Queen </col>, <col=c86400>Big Cheese </col>, <col=c86400>Bigwig </col>, <col=c86400>Wunderkind </col>, <col=466afa>Vyreling </col>, <col=7d3fec>Vyre Grunt </col>, <col=6c0b2b>Vyrewatch </col>, <col=c12006>Vyrelady </col>, <col=c12006>Yt'Haar-</col>, <col=c86400>Empress </col>, <col=c86400>Princess </col>, <col=c86400>Witch Queen </col>, <col=c86400>Archon </col>, <col=c86400>Justiciar </col>, <col=c86400>The Awesome </col>, <col=c86400> the Magnificent</col>, <col=c86400> the Undefeated</col>, <col=c86400> the Strange</col>, <col=c86400> the Divine</col>, <col=c86400> the Fallen</col>, <col=c86400> the Warrior</col>, <col=c86400>The Real </col>, <col=aa44aa>Cowardly </col>, <col=aa44aa> the Redundant</col>, <col=aa44aa>Everyone attack </col>, <col=aa44aa>Smelly </col>, <col=aa44aa> the Idiot</col>, <col=aa44aa>Dame Lame </col>, <col=aa44aa> the Flamboyant</col>, <col=aa44aa>Weakling </col>, <col=aa44aa> was punished</col>, <col=aa44aa> lost</col>, <col=aa44aa> ... you fail</col>, <col=aa44aa>No-mates </col>, <col=aa44aa> ate dirt</col>, <col=aa44aa>Delusional </col>, <col=aa44aa> the Respawner</col>, <col=aa44aa>Butch </col>, <col=aa44aa> the Fail Magnet</col>, <col=aa44aa> was terminated</col>, <col=aa44aa>Lazy </col>, <col=aa44aa> ? Who?</col>, <col=c86400> the Thrifty</col>, <col=c86400> the Beautiful</col>, <col=c86400> the Elegant</col>, <col=c86400> the Skilful</col>, <col=c86400> the Intimidating</col>, <col=c86400>The Mysterious </col>, <col=c86400> the Stylish </col>, <col=c86400>The Untouchable </col>, <col=c86400>The Outrageous </col>, <col=c86400>Cheerful </col>, <col=c86400>Grumpy </col>, <col=c86400>Assassin </col>, <col=c86400>Athlete </col>, <col=c86400> the Tanned</col>, <col=c86400> the Hot</col>, <col=c86400>The </col>, <col=c86400> Junior</col>, <col=c86400>Mrs </col>, <col=c86400>Miss </col>, <col=c86400>Ms </col>, <col=c86400>Doctor </col>, <col=c12006>Artful Dodger </col>, <col=c12006> the Enforcer</col>, <col=c12006>Don </col>, <col=c12006> the Swindler</col>, <col=c86400> the Wild</col>, <col=c86400>The Adorable </col>, <col=c86400>The Mighty </col>, <col=c86400>Flygirl </col>, <col=c86400> the Stuffed</col>, <col=4040ff> the Blue</col>, <col=0fbd0f> the Green</col>, <col=f50202> the Red</col>, <col=6d6d75> the Grey</col>, <col=c12006>Archmage </col>, <col=c12006>TzHaar-</col>, <col=c12006> the Cabin Girl</col>, <col=c12006>Bo'sun </col>, <col=c12006>First Mate </col>, <col=c12006>Cap'n </col>, <col=c12006>Commodore </col>, <col=c12006>Admiral </col>, <col=9f2212>Santa </col>, ,<col=047f06> the World Guardian</col>, <col=8080ff> of Armadyl</col>, <col=047f06> of Bandos</col>, <col=4040ff> of Saradomin</col>, <col=00ffff> of Seren</col>, <col=047f06> of Sliske</col>, <col=c12006> of Zamorak</col>, <col=c120c1> of Zaros</col>, <col=c86400> of the Godless</col>, <col=2c7cae>Acolyte </col>, <col=2c7cae>High Priestess </col>, <col=2c7cae>Hierophant </col>, <col=c63131>Acolyte </col>, <col=c63131>High Priestess </col>, <col=c63131>Hierophant </col>, <col=2c7cae> the Virtuous</col>, <col=c63131> the Powerful</col>, <col=6f28c6> the Boundless</col>, <col=6f28c6> the Eternal</col>, <col=fab402> Slayer of Imps</col>, <col=fab402> Zilyana's Bane</col>, <col=fab402> Ruler of the Tower</col>, <col=fab402> Scourge of the Wild</col>, <col=fab402> Master of Clay</col>, <col=c12006> the Gallant</col>, <col=c12006> the Pious</col>, <col=c12006> the Brave</col>, <col=c12006> the Valiant</col>, <col=4040ff>Super </col>, <col=4040ff>Supervillain </col>, <col=4040ff>Super Super </col>, <col=4040ff>Super Supervillain </col>, <col=a6f9fd> the Defeater</col>, <col=c12006> of Daemonheim</col>, <col=fab402> Chroniclator</col>, <col=fab402> Slapsaroth</col>, <col=c86400> the Builder</col>, <col=c86400> the Philanthropist</col>, <col=c86400> the Wishful</col>, <col=c86400> the Generous</col>, <col=fab402> the Charitable</col>, <col=8080ff>Scout </col>, <col=8080ff>Wingman </col>, <col=8080ff>Wingleader </col>, <col=047f06>Grunt </col>, <col=047f06>Soldier </col>, <col=047f06>Veteran </col>, <col=8080ff>, Vanguard of Armadyl</col>, <col=047f06>, Warmaster of Bandos</col>, <col=8080ff>, Armadyl Warrior</col>, <col=06a010>, Bandos Warrior</col>, <col=6060a0>, Armadyl Follower</col>, <col=106010>, Bandos Follower</col>, <col=c12006>Admiral of the Fleet </col>, <col=dc2833> the Scrumptious</col>, <col=933cdb> the Forlorn</col>, <col=fab402>Piggy </col>, <col=fab402>, Scion of Viggora</col>, <col=c120c1>Pontifex </col>, <col=c120c1>Legatus </col>, <col=8904b1> the Annihilator</col>, <col=c12006>Maxed </col>, <col=f7fe2e> the Completionist</col>, <col=fab402> the Supreme</col>, <col=6d6d75> Slayer of Imps</col>, <col=f334c4> the Naabe</col>, <col=bae7fd> the Bloodchiller</col>, <col=d7f388> the Riftsplitter</col>, <col=faac59> the Pummeller</col>, <col=795daa> the Thunderous</col>, <col=d8432b> the Warmonger</col>, <col=047f06> the Champion</col>, <col=6d6d75> Slapsaroth</col>, <col=fab402>Undertaker </col>, <col=6d6d75>Undertaker </col>, <col=00ffff> of the Elves</col>, <col=1d689e> the Reaper</col>, <col=ba061f>Final Boss </col>, <col=c12006>Attacker </col>, <col=4040ff>Defender </col>, <col=d7f388>Collector </col>, <col=047f06>Healer </col>, <col=c12006>Supreme Attacker </col>, <col=4040ff>Supreme Defender </col>, <col=d7f388>Supreme Collector </col>, <col=047f06>Supreme Healer </col>, <col=c86400> the Penance Slayer</col>, <col=c120c1> the Empty</col>, <col=c120c1> the Shadow</col>, <col=c120c1>Praetor </col>, <col=c120c1> Dream of Mah</col>, <col=c120c1> of Senntisten</col>, <col=c120c1> of the Second Age</col>, <col=c120c1> the Betrayed</col>, <col=c120c1> the Muspah</col>, <col=c120c1> the Nihil</col>, <col=6d6d75> Zilyana's Bane</col>, <col=fab402> the Gardener</col>, <col=6d6d75> the Gardener</col>, <col=787878>Peg Leg </col>, <col=960f05>Cutthroat </col>, <col=cc0099> the Swashbuckler</col>, <col=729de4>One-Eyed </col>, <col=048f06>Dread Pirate </col>, <col=c80000>Red-Hand </col>, <col=323232> Blackbeard</col>, <col=63e2f3> Runebeard</col>, <col=da6924> the Rum Thief</col>, <col=3c036c>Pirate Queen </col>, <col=df01a5> of the Trahaearn</col>, <col=2d2d2d> of the Iorwerth</col>, <col=04b431> of the Cadarn</col>, <col=dbd838> of the Crwys</col>, <col=0080ff> of the Amlodd</col>, <col=ebf7f1> of the Ithell</col>, <col=d80010> of the Hefin</col>, <col=2efef7> of the Meilyr</col>, <col=df7401> the Elven</col>, <col=0b610b>Dark Elf </col>, <col=0b610b> of Tarddiad</col>, <col=8904b1>Lorehound </col>, <col=df7401> the Statuesque</col>, <col=0b610b> of the Naragi</col>, <col=0c868a>Lord of the Wait </col>, <col=513a33> the Mourner</col>, <col=8a0808>Dark Lord </col>, <col=8a0808> the Fractured</col>, <col=8a0808> the Corrupted</col>, <col=df01d7> the Elfborne</col>, <col=8904b1> the Ravensworn</col>, <col=8a0808> the Stupendous</col>, <col=8a0808> the Meandering</col>, <col=df7401>The Famous </col>, <col=d8432b>The Abyssal </col>, <col=d8432b>The Dark </col>, <col=d8432b>The Beast </col>, <col=d8432b>Slayer Master </col>, <col=6d6d75>Ironwoman </col>, <col=6d6d75> the Ironwoman</col>, <col=ba061f>Hardcore Ironwoman </col>, <col=ba061f> the Hardcore Ironwoman</col>, <col=bae7fd>Ghost Hunter </col>, <col=c12006> the Trickster</col>, <col=c12006> the Treated</col>, <col=808080> the Ghostly</col>, <col=c86400> the Millionaire</col>, <col=fab402> the Billionaire</col>, <col=6d6d75> Ruler of the Tower</col>, <col=6d6d75> Scourge of the Wild</col>, <col=8a0808> the Coedensworn</col>, <col=8a0808> the Huntress</col>, <col=10cff8>Sword Artist </col>, <col=8a0808> the Challenged</col>, <col=8904b1>Sneaky </col>, <col=8a0808>Sweet Tooth </col>, <col=893d89> the Troublesome</col>, <col=860111> the Thanksgiver</col>, <col=c81e1e> the Festive</col>, <col=c12006> the Survivor</col>, <col=fab402> the Puzzle Hunter</col>, <col=6d6d75> the Puzzle Hunter</col>, <col=fab402>The Late </col>, <col=6d6d75>The Late </col>, <col=c12006>Portmaster </col>, <col=0f5c0f>General </col>, <col=8c1111>Executioner </col>, <col=572714>Castellan </col>, <col=ded82f>Deacon </col>, <col=eda011> the Blazing</col>, <col=309e2b> the Corrupting</col>, <col=2cc6e8> the Frostborn</col>, <col=e3e020> the Glorious</col>, <col=b02600> the Infernal</col>, <col=949a9c> the Obscured</col>, <col=21751d> the Pestilent</col>, <col=851b1b> the Rending</col>, <col=1ec8c8> the Shattering</col>, <col=949a9c> the Terrifying</col>, <col=fab402>Final Boss </col>, <col=6d6d75> Master of Clay</col>, <col=fab402> the Delver</col>, <col=6d6d75> the Delver</col>, <col=c81e1e> the Master</col>, <col=c81414> the Gamebreaker</col>, <col=ffffff> the Gam<col=c81414>ebreaker</col>, <col=c81414> the Gaembreaker</col>, <col=c81414> le testeur b?ta</col>, <col=c81414> the Gamebreakr</col>, <col=c81414>the Gamebreaker </col>, <col=c81414> <str=14a914>the Gamebreaker</str></col>, <col=c81414> thE gAmEbrEAkEr</col>, <col=7fa9ff> the Gamebreaker</col>, <col=c81414>  the   Gamebreaker </col>, <col=ff4b0a> the Prepared</col>, <col=96c8ff> the Ultimate Quester</col>, <col=fab402>Questival Queen </col>, <col=32c832> the Egg-cellent</col>, <col=df7401>Champion of Champions </col>, <col=a4a4a4> the Detective</col>, <col=b432c9> the <col=ffff00>Distract<col=b432c9>ed</col>, <col=00ffff>Harbinger </col>, <col=047f06> of Gielinor</col>, <col=990000> the Beast Slayer</col>, <col=00ffff> the Tuska Raider</col>, <col=c86400> the Contender</col>, <col=6d6d75> the Loser</col>, <col=6d6d75> the Struggle</col>, <col=6d6d75> the Real Struggle</col>, <col=d7f388> the Victor</col>, <col=d7f388> the MVP</col>, <col=d7f388> the Real MVP</col>, <col=643200> the <col=6d6d75>Tool</col>, <col=c86400> of V</col>, <col=df7401> the Bronzed</col>, <col=c81414> the Sunburned</col>, <col=fab402>Beachcomber </col>, <col=c81414>Lif<col=ffffff>egu<col=c81414>ard </col>, <col=fadc02> the Quackers</col>, <col=fadc02> the Totally Quackers</col>, <col=b432c9> the Beachbum</col>, <col=96c8ff> the Chilled</col>, <col=6d6d75>Piggy </col>, <col=6d6d75>, Scion of Viggora</col>, <col=6d6d75> Chroniclator</col>, <col=3088f0> the Reputable</col>, <col=925b07> of the Goebies</col>, <col=8b0000> the Daredevil</col>, <col=df7401>, Queen of the Sandcastle</col>, <col=ebf7f1>, Snowy Assassin</col>, <col=c12006>, Stealth Predator</col>, <col=2e8b57>, Queen of the Jungle</col>];
	enumType.size = 333;
	break;

case 3873:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [All, All (unlocked), Greetings, Conversation, Dance, Feelings, Mime, Zombie, Holiday, Achievements, Weather, Treasure Trail, Loyalty, Clan Stage, Clan Audience, Store Emotes];
	enumType.size = 16;
	break;

case 3874:
	enumType.valueType = STRUCT;
	enumType.defaultint = 1783;
	enumType.keyType = INT;
	enumType.valueArray = [1796, 1797, 1783, 1790, 1792, 1793, 1829, 1804, 1795, 1798, 1825, 1827, 1794, 1822, 1823, 1824, 1791, 1820, 1821, 1826, 1805, 1828, 1830, 1831, 1817, 1818, 1819, 1806, 1838, 1839, 1836, 1837, 1834, 1833, 1835, 1832, 1840, 1855, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1853, 1852, 2658, 2654, 2651, 2652, 2657, 2661, 2653, 2650, 2659, 2660, 2655, 2656, 1854, 2662, 2663, 2664, 2665, 2666, 2667, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2708, 2709, 2702, 2703, 2704, 2706, 2707, 2705, 2749, 2812, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 9780, 9781, 9782, 9783, 10516, 11187, 11188, 11189, 11190, 11191, 11192, 11387, 11388, 11410, 11408, 11409, 13875, 13876, 5559, 9925, 19211, 19212, 14966, 19334, 19541, 19542, 19543, 19544, 19545, 19546, 19547, 19548, 19549, 19550, 19551, 19552, 19553, 19554, 19555, 19556, 19557, 19431, 19432, 19437, 19559, 21071, 21072, 21073, 21074, 21075, 21076, 21077, 22600, 22601, 19684, 24033, 25670, 25671, 25672, 25673, 25674, 25675, 25739, 26549, 26550, 7265, 28034, 28035, 28036, 28421, 28732, 28733, 24283, 29165, 29164, 29196, 29404, 29405, 29406, 29407, 29766, 9693, 9694, 30752, 31586, 31587, 31588, 31844];
	enumType.size = 192;
	break;

case 3875:
	enumType.valueType = STRUCT;
	enumType.defaultint = 2650;
	enumType.keyType = INT;
	enumType.valueArray = [2658, 2654, 2651, 2652, 2657, 2661, 2653, 2650, 2659, 2660, 2655, 2656, 2662, 2663, 2664, 2665, 2666, 2667, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 9780, 9781, 9782, 9783];
	enumType.size = 30;
	break;

case 3876:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Logs, Stone blocks, Charcoal, Metal ores, Metal bars, Precious ores, Precious bars, Cloth, Rations, Minions];
	enumType.size = 10;
	break;

case 3877:
	enumType.valueType = OBJ;
	enumType.defaultint = 20957;
	enumType.keyType = INT;
	enumType.valueArray = [20957, 20958, 20963, 20961, 20967, 20962, 20964, 20965, 20966, 20959, 22268, 22270, 22272, 22274, 22276, 22278, 22280, 22282, 22284, 22286, 22288, 22290, 22292, 22294, 22296, 22298, 22300, 22302, 22889, 22893, 22891, 22897, 22895, 22883, 22885, 22887, 22927, 22929, 22931, 22899, 22901, 22903, 22905, 22907, 22909, 22911, 22913, 22915, 22917, 22919, 22921, 22923, 22925, 22933, 23876, 23874, 23848, 23850, 23852, 23854, 23840, 23842, 23844, 23846, 23856, 23858, 23860, 23862, 23864, 23866, 23868, 23870, 23872, 23878, 30794, 30796, 30798, 30800, 30802, 30804, 30784, 30786, 30788, 30790, 30792, 30806, 30808, 31434, 26120];
	enumType.size = 89;
	break;

case 3879:
	enumType.valueType = TYPE_39;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 95, 93, 94, 530, 90, 540];
	enumType.size = 6;
	break;

case 3880:
	enumType.valueMap = {530=4, 90=5, 540=6, 93=2, 94=3, 95=1};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = TYPE_39;
	enumType.size = 6;
	break;

case 3881:
	enumType.valueMap = {2577=Ranger boots, 4675=Ancient Staff, 15492=Full slayer helm, 2581=Robin Hood hat, 6583=Ring of Stone, 9096=Lunar equipment, 6889=Mage's Book, 13101=Top Hat, 15486=Staff of Light, 9470=Gnome scarf, 3695=Pet rock};
	enumType.valueType = STRING;
	enumType.defaultstr = "Pet rock";
	enumType.keyType = OBJ;
	enumType.size = 11;
	break;

case 3882:
	enumType.valueMap = {530=beast of burden, 90=trade offer, 540=lent items, 93=inventory, 94=worn, 95=bank};
	enumType.valueType = STRING;
	enumType.keyType = TYPE_39;
	enumType.size = 6;
	break;

case 3883:
	enumType.valueMap = {530=Beast of burden, 90=Trade offer, 540=Lent items, 93=Inventory, 94=Worn, 95=Bank};
	enumType.valueType = STRING;
	enumType.keyType = TYPE_39;
	enumType.size = 6;
	break;

case 3886:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Sir , Lord , Duderino , Lionheart , Hellraiser , Crusader , Desperado , Baron , Count , Overlord , Bandito , Duke , King , Big Cheese , Bigwig , Wunderkind , Emperor , Prince , Witch king , Archon , Justiciar , The Awesome , The Magnificent , The Undefeated , The Strange , The Divine , The Fallen , The Warrior , Athlete ];
	enumType.size = 29;
	break;

case 3887:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Dame , Lady , Dudette , Lionheart , Hellraiser , Crusader , Desperado , Baroness , Countess , Overlord , Bandito , Duchess , Queen , Big Cheese , Bigwig , Wunderkind , Empress , Princess , Witch queen , Archon , Justiciar , The Awesome , The magnificent , The undefeated , The strange , The divine , The fallen , The warrior , Athlete ];
	enumType.size = 29;
	break;

case 3891:
	enumType.valueType = STRUCT;
	enumType.defaultint = 1888;
	enumType.keyType = INT;
	enumType.valueArray = [1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2891, 2892, 2893, 2894, 2895, 2901, 2902, 2903, 2904, 2905, 2911, 2912, 2913, 2914, 2915, 2921, 2922, 2923, 2924, 2925, 9747, 9748, 9749, 9750, 9751, 9757, 9758, 9759, 9760, 9761];
	enumType.size = 70;
	break;

case 3892:
	enumType.valueType = STRUCT;
	enumType.defaultint = 1868;
	enumType.keyType = INT;
	enumType.valueArray = [1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2886, 2887, 2888, 2889, 2890, 2896, 2897, 2898, 2899, 2900, 2906, 2907, 2908, 2909, 2910, 2916, 2917, 2918, 2919, 2920, 9742, 9743, 9744, 9745, 9746, 9752, 9753, 9754, 9755, 9756];
	enumType.size = 70;
	break;

case 3893:
	enumType.valueMap = {22568=22608, 22570=22610, 22572=22612, 22574=22614, 22576=22616, 22578=22618, 22580=22620, 22582=22622, 22584=22624, 22586=22626, 22588=22628, 22590=22630, 22592=22632, 22594=22634, 22596=22636, 22598=22638, 22600=22639, 22602=22640, 22604=22641, 22606=22642, 22608=22568, 22610=22570, 22612=22572, 22614=22574, 22616=22576, 22618=22578, 22620=22580, 22622=22582, 22624=22584, 22626=22586, 22628=22588, 22630=22590, 22632=22592, 22634=22594, 22636=22596, 22638=22598, 22639=22600, 22640=22602, 22641=22604, 22642=22606, 22643=22683, 22645=22685, 22647=22687, 22649=22689, 22651=22691, 22653=22693, 22655=22695, 22657=22697, 22659=22699, 22661=22701, 22663=22703, 22665=22705, 22667=22707, 22669=22709, 22671=22711, 22673=22713, 22675=22715, 22677=22717, 22679=22719, 22681=22721, 22683=22643, 22685=22645, 22687=22647, 22689=22649, 22691=22651, 22693=22653, 22695=22655, 22697=22657, 22699=22659, 22701=22661, 22703=22663, 22705=22665, 22707=22667, 22709=22669, 22711=22671, 22713=22673, 22715=22675, 22717=22677, 22719=22679, 22721=22681, 22723=22763, 22725=22765, 22727=22767, 22729=22769, 22731=22771, 22733=22773, 22735=22775, 22737=22777, 22739=22779, 22741=22781, 22743=22783, 22745=22785, 22747=22787, 22749=22789, 22751=22791, 22753=22793, 22755=22795, 22757=22797, 22759=22799, 22761=22801, 22763=22723, 22765=22725, 22767=22727, 22769=22729, 22771=22731, 22773=22733, 22775=22735, 22777=22737, 22779=22739, 22781=22741, 22783=22743, 22785=22745, 22787=22747, 22789=22749, 22791=22751, 22793=22753, 22795=22755, 22797=22757, 22799=22759, 22801=22761, 22803=22843, 22805=22845, 22807=22847, 22809=22849, 22811=22851, 22813=22853, 22815=22855, 22817=22857, 22819=22859, 22821=22861, 22823=22863, 22825=22865, 22827=22867, 22829=22869, 22831=22871, 22833=22873, 22835=22875, 22837=22877, 22839=22879, 22841=22881, 22843=22803, 22845=22805, 22847=22807, 22849=22809, 22851=22811, 22853=22813, 22855=22815, 22857=22817, 22859=22819, 22861=22821, 22863=22823, 22865=22825, 22867=22827, 22869=22829, 22871=22831, 22873=22833, 22875=22835, 22877=22837, 22879=22839, 22881=22841, 23912=23952, 23914=23954, 23916=23956, 23918=23958, 23920=23960, 23922=23962, 23924=23964, 23926=23966, 23928=23968, 23930=23970, 23932=23972, 23934=23974, 21887=21927, 23936=23976, 21889=21929, 23938=23978, 21891=21931, 23940=23980, 21893=21933, 23942=23982, 21895=21935, 23944=23984, 21897=21937, 23946=23986, 21899=21939, 23948=23988, 21901=21941, 23950=23990, 21903=21943, 23952=23912, 21905=21945, 23954=23914, 21907=21947, 23956=23916, 21909=21949, 23958=23918, 21911=21951, 23960=23920, 21913=21953, 23962=23922, 21915=21955, 23964=23924, 21917=21957, 23966=23926, 21919=21959, 23968=23928, 21921=21961, 23970=23930, 21923=21963, 23972=23932, 21925=21965, 23974=23934, 21927=21887, 23976=23936, 21929=21889, 23978=23938, 21931=21891, 23980=23940, 21933=21893, 23982=23942, 21935=21895, 23984=23944, 21937=21897, 23986=23946, 21939=21899, 23988=23948, 21941=21901, 23990=23950, 21943=21903, 23992=24042, 21945=21905, 23994=24044, 21947=21907, 23996=24046, 21949=21909, 23998=24048, 21951=21911, 24000=24050, 21953=21913, 24002=24052, 21955=21915, 24004=24054, 21957=21917, 24006=24056, 21959=21919, 24008=24058, 21961=21921, 24010=24060, 21963=21923, 24012=24062, 21965=21925, 24014=24064, 21967=22007, 24016=24066, 21969=22009, 24018=24068, 21971=22011, 24020=24070, 21973=22013, 24022=24072, 21975=22015, 24024=24074, 21977=22017, 24026=24076, 21979=22019, 24028=24078, 21981=22021, 24030=24080, 21983=22023, 24032=24082, 21985=22025, 24034=24084, 21987=22027, 24036=24086, 21989=22029, 24038=24088, 21991=22031, 24040=24090, 21993=22033, 20970=21010, 24042=23992, 21995=22035, 20972=21012, 24044=23994, 21997=22037, 20974=21014, 24046=23996, 21999=22039, 20976=21016, 24048=23998, 22001=22041, 20978=21018, 24050=24000, 22003=22043, 20980=21020, 24052=24002, 22005=22045, 20982=21022, 24054=24004, 22007=21967, 20984=21024, 24056=24006, 22009=21969, 20986=21026, 24058=24008, 22011=21971, 20988=21028, 24060=24010, 22013=21973, 20990=21030, 24062=24012, 22015=21975, 20992=21032, 24064=24014, 22017=21977, 20994=21034, 24066=24016, 22019=21979, 20996=21036, 24068=24018, 22021=21981, 20998=21038, 24070=24020, 22023=21983, 21000=21040, 24072=24022, 22025=21985, 21002=21042, 24074=24024, 22027=21987, 21004=21044, 24076=24026, 22029=21989, 21006=21046, 24078=24028, 22031=21991, 21008=21048, 24080=24030, 22033=21993, 21010=20970, 24082=24032, 22035=21995, 21012=20972, 24084=24034, 22037=21997, 21014=20974, 24086=24036, 22039=21999, 21016=20976, 24088=24038, 22041=22001, 21018=20978, 24090=24040, 22043=22003, 21020=20980, 22045=22005, 21022=20982, 22047=22087, 21024=20984, 22049=22089, 21026=20986, 22051=22091, 21028=20988, 22053=22093, 21030=20990, 22055=22095, 21032=20992, 22057=22097, 21034=20994, 22059=22099, 21036=20996, 22061=22101, 21038=20998, 22063=22103, 21040=21000, 22065=22105, 21042=21002, 22067=22107, 21044=21004, 22069=22109, 21046=21006, 22071=22111, 21048=21008, 22073=22113, 21050=21074, 22075=22115, 21052=21076, 22077=22117, 21054=21078, 22079=22119, 21056=21080, 22081=22121, 21058=21082, 22083=22123, 21060=21084, 22085=22125, 21062=21086, 22087=22047, 21064=21088, 22089=22049, 21066=21090, 22091=22051, 21068=21092, 22093=22053, 21070=21094, 22095=22055, 21072=21096, 22097=22057, 21074=21050, 22099=22059, 21076=21052, 22101=22061, 21078=21054, 22103=22063, 21080=21056, 22105=22065, 21082=21058, 22107=22067, 21084=21060, 22109=22069, 21086=21062, 22111=22071, 21088=21064, 22113=22073, 21090=21066, 22115=22075, 21092=21068, 22117=22077, 21094=21070, 22119=22079, 21096=21072, 22121=22081, 21098=21072, 22123=22083, 21100=21072, 22125=22085, 21102=21072, 22127=22167, 21104=21072, 22129=22169, 21106=21146, 22131=22171, 21108=21148, 22133=22173, 21110=21150, 22135=22175, 21112=21152, 22137=22177, 21114=21154, 22139=22179, 21116=21156, 22141=22181, 21118=21158, 22143=22183, 21120=21160, 22145=22185, 21122=21162, 22147=22187, 21124=21164, 22149=22189, 21126=21166, 22151=22191, 21128=21168, 22153=22193, 21130=21170, 22155=22195, 21132=21172, 22157=22197, 21134=21174, 22159=22199, 21136=21176, 22161=22201, 21138=21176, 22163=22203, 21140=21176, 22165=22205, 21142=21176, 22167=22127, 21144=21176, 22169=22129, 21146=21106, 22171=22131, 21148=21108, 22173=22133, 21150=21110, 22175=22135, 21152=21112, 22177=22137, 21154=21114, 22179=22139, 21156=21116, 22181=22141, 21158=21118, 22183=22143, 21160=21120, 22185=22145, 21162=21122, 22187=22147, 21164=21124, 22189=22149, 21166=21126, 22191=22151, 21168=21128, 22193=22153, 21170=21130, 22195=22155, 21172=21132, 22197=22157, 21174=21134, 22199=22159, 21176=21136, 22201=22161, 21178=21218, 22203=22163, 21180=21220, 22205=22165, 21182=21222, 21184=21224, 21186=21226, 21188=21228, 21190=21230, 21192=21232, 21194=21234, 21196=21236, 21198=21238, 21200=21240, 21202=21242, 21204=21244, 21206=21246, 21208=21248, 21210=21248, 21212=21248, 21214=21248, 21216=21248, 21218=21178, 21220=21180, 21222=21182, 21224=21184, 21226=21186, 21228=21188, 21230=21190, 21232=21192, 21234=21194, 21236=21196, 21238=21198, 21240=21200, 21242=21202, 21244=21204, 21246=21206, 21248=21208};
	enumType.valueType = OBJ;
	enumType.defaultint = 21010;
	enumType.keyType = OBJ;
	enumType.size = 550;
	break;

case 3894:
	enumType.valueMap = {22568=22568, 22570=22570, 22572=22572, 22574=22574, 22576=22576, 22578=22578, 22580=22580, 22582=22582, 22584=22584, 22586=22586, 22588=22588, 22590=22590, 22592=22592, 22594=22594, 22596=22596, 22598=22598, 22600=22600, 22602=22602, 22604=22604, 22606=22606, 22608=22608, 22610=22610, 22612=22612, 22614=22614, 22616=22616, 22618=22618, 22620=22620, 22622=22622, 22624=22624, 22626=22626, 22628=22628, 22630=22630, 22632=22632, 22634=22634, 22636=22636, 22638=22638, 22639=22639, 22640=22640, 22641=22641, 22642=22642, 22643=22643, 22645=22645, 22647=22647, 22649=22649, 22651=22651, 22653=22653, 22655=22655, 22657=22657, 22659=22659, 22661=22661, 22663=22663, 22665=22665, 22667=22667, 22669=22669, 22671=22671, 22673=22673, 22675=22675, 22677=22677, 22679=22679, 22681=22681, 22683=22683, 22685=22685, 22687=22687, 22689=22689, 22691=22691, 22693=22693, 22695=22695, 22697=22697, 22699=22699, 22701=22701, 22703=22703, 22705=22705, 22707=22707, 22709=22709, 22711=22711, 22713=22713, 22715=22715, 22717=22717, 22719=22719, 22721=22721, 22723=22723, 22725=22725, 22727=22727, 22729=22729, 22731=22731, 22733=22733, 22735=22735, 22737=22737, 22739=22739, 22741=22741, 22743=22743, 22745=22745, 22747=22747, 22749=22749, 22751=22751, 22753=22753, 22755=22755, 22757=22757, 22759=22759, 22761=22761, 22763=22763, 22765=22765, 22767=22767, 22769=22769, 22771=22771, 22773=22773, 22775=22775, 22777=22777, 22779=22779, 22781=22781, 22783=22783, 22785=22785, 22787=22787, 22789=22789, 22791=22791, 22793=22793, 22795=22795, 22797=22797, 22799=22799, 22801=22801, 22803=22803, 22805=22805, 22807=22807, 22809=22809, 22811=22811, 22813=22813, 22815=22815, 22817=22817, 22819=22819, 22821=22821, 22823=22823, 22825=22825, 22827=22827, 22829=22829, 22831=22831, 22833=22833, 22835=22835, 22837=22837, 22839=22839, 22841=22841, 22843=22843, 22845=22845, 22847=22847, 22849=22849, 22851=22851, 22853=22853, 22855=22855, 22857=22857, 22859=22859, 22861=22861, 22863=22863, 22865=22865, 22867=22867, 22869=22869, 22871=22871, 22873=22873, 22875=22875, 22877=22877, 22879=22879, 22881=22881, 23912=23912, 23914=23914, 23916=23916, 23918=23918, 23920=23920, 23922=23922, 23924=23924, 23926=23926, 23928=23928, 23930=23930, 23932=23932, 23934=23934, 21887=21887, 23936=23936, 21889=21889, 23938=23938, 21891=21891, 23940=23940, 21893=21893, 23942=23942, 21895=21895, 23944=23944, 21897=21897, 23946=23946, 21899=21899, 23948=23948, 21901=21901, 23950=23950, 21903=21903, 23952=23952, 21905=21905, 23954=23954, 21907=21907, 23956=23956, 21909=21909, 23958=23958, 21911=21911, 23960=23960, 21913=21913, 23962=23962, 21915=21915, 23964=23964, 21917=21917, 23966=23966, 21919=21919, 23968=23968, 21921=21921, 23970=23970, 21923=21923, 23972=23972, 21925=21925, 23974=23974, 21927=21927, 23976=23976, 21929=21929, 23978=23978, 21931=21931, 23980=23980, 21933=21933, 23982=23982, 21935=21935, 23984=23984, 21937=21937, 23986=23986, 21939=21939, 23988=23988, 21941=21941, 23990=23990, 21943=21943, 23992=23992, 21945=21945, 23994=23994, 21947=21947, 23996=23996, 21949=21949, 23998=23998, 21951=21951, 24000=24000, 21953=21953, 24002=24002, 21955=21955, 24004=24004, 21957=21957, 24006=24006, 21959=21959, 24008=24008, 21961=21961, 24010=24010, 21963=21963, 24012=24012, 21965=21965, 24014=24014, 21967=21967, 24016=24016, 21969=21969, 24018=24018, 21971=21971, 24020=24020, 21973=21973, 24022=24022, 21975=21975, 24024=24024, 21977=21977, 24026=24026, 21979=21979, 24028=24028, 21981=21981, 24030=24030, 21983=21983, 24032=24032, 21985=21985, 24034=24034, 21987=21987, 24036=24036, 21989=21989, 24038=24038, 21991=21991, 24040=24040, 21993=21993, 20970=20970, 24042=24042, 21995=21995, 20972=20972, 24044=24044, 21997=21997, 20974=20974, 24046=24046, 21999=21999, 20976=20976, 24048=24048, 22001=22001, 20978=20978, 24050=24050, 22003=22003, 20980=20980, 24052=24052, 22005=22005, 20982=20982, 24054=24054, 22007=22007, 20984=20984, 24056=24056, 22009=22009, 20986=20986, 24058=24058, 22011=22011, 20988=20988, 24060=24060, 22013=22013, 20990=20990, 24062=24062, 22015=22015, 20992=20992, 24064=24064, 22017=22017, 20994=20994, 24066=24066, 22019=22019, 20996=20996, 24068=24068, 22021=22021, 20998=20998, 24070=24070, 22023=22023, 21000=21000, 24072=24072, 22025=22025, 21002=21002, 24074=24074, 22027=22027, 21004=21004, 24076=24076, 22029=22029, 21006=21006, 24078=24078, 22031=22031, 21008=21008, 24080=24080, 22033=22033, 21010=21010, 24082=24082, 22035=22035, 21012=21012, 24084=24084, 22037=22037, 21014=21014, 24086=24086, 22039=22039, 21016=21016, 24088=24088, 22041=22041, 21018=21018, 24090=24090, 22043=22043, 21020=21020, 22045=22045, 21022=21022, 22047=22047, 21024=21024, 22049=22049, 21026=21026, 22051=22051, 21028=21028, 22053=22053, 21030=21030, 22055=22055, 21032=21032, 22057=22057, 21034=21034, 22059=22059, 21036=21036, 22061=22061, 21038=21038, 22063=22063, 21040=21040, 22065=22065, 21042=21042, 22067=22067, 21044=21044, 22069=22069, 21046=21046, 22071=22071, 21048=21048, 22073=22073, 21050=21050, 22075=22075, 21052=21052, 22077=22077, 21054=21054, 22079=22079, 21056=21056, 22081=22081, 21058=21058, 22083=22083, 21060=21060, 22085=22085, 21062=21062, 22087=22087, 21064=21064, 22089=22089, 21066=21066, 22091=22091, 21068=21068, 22093=22093, 21070=21070, 22095=22095, 21072=21072, 22097=22097, 21074=21074, 22099=22099, 21076=21076, 22101=22101, 21078=21078, 22103=22103, 21080=21080, 22105=22105, 21082=21082, 22107=22107, 21084=21084, 22109=22109, 21086=21086, 22111=22111, 21088=21088, 22113=22113, 21090=21090, 22115=22115, 21092=21092, 22117=22117, 21094=21094, 22119=22119, 21096=21096, 22121=22121, 21098=21098, 22123=22123, 21100=21100, 22125=22125, 21102=21102, 22127=22127, 21104=21104, 22129=22129, 21106=21106, 22131=22131, 21108=21108, 22133=22133, 21110=21110, 22135=22135, 21112=21112, 22137=22137, 21114=21114, 22139=22139, 21116=21116, 22141=22141, 21118=21118, 22143=22143, 21120=21120, 22145=22145, 21122=21122, 22147=22147, 21124=21124, 22149=22149, 21126=21126, 22151=22151, 21128=21128, 22153=22153, 21130=21130, 22155=22155, 21132=21132, 22157=22157, 21134=21134, 22159=22159, 21136=21136, 22161=22161, 21138=21138, 22163=22163, 21140=21140, 22165=22165, 21142=21142, 22167=22167, 21144=21144, 22169=22169, 21146=21146, 22171=22171, 21148=21148, 22173=22173, 21150=21150, 22175=22175, 21152=21152, 22177=22177, 21154=21154, 22179=22179, 21156=21156, 22181=22181, 21158=21158, 22183=22183, 21160=21160, 22185=22185, 21162=21162, 22187=22187, 21164=21164, 22189=22189, 21166=21166, 22191=22191, 21168=21168, 22193=22193, 21170=21170, 22195=22195, 21172=21172, 22197=22197, 21174=21174, 22199=22199, 21176=21176, 22201=22201, 21178=21178, 22203=22203, 21180=21180, 22205=22205, 21182=21182, 21184=21184, 21186=21186, 21188=21188, 21190=21190, 21192=21192, 21194=21194, 21196=21196, 21198=21198, 21200=21200, 21202=21202, 21204=21204, 21206=21206, 21208=21208, 21210=21210, 21212=21212, 21214=21214, 21216=21216, 21218=21218, 21220=21220, 21222=21222, 21224=21224, 21226=21226, 21228=21228, 21230=21230, 21232=21232, 21234=21234, 21236=21236, 21238=21238, 21240=21240, 21242=21242, 21244=21244, 21246=21246, 21248=21248};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 550;
	break;

case 3906:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [an aura, a costume, a recoloured item, a title, an emote, an effect];
	enumType.size = 6;
	break;

case 3907:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Oddball, Poison Purge, Friend in Need, Knock-out, Sharpshooter, Runic Accuracy, Surefooted, Reverence, Call of the Sea, Jack of Trades, Greater Poison Purge, Greater Runic Accuracy, Greater Sharpshooter, Greater Call of the Sea, Greater Reverence, Greater Surefooted, Lumberjack, Greater Lumberjack, Quarrymaster, Greater Quarrymaster, Five Finger Discount, Greater Five Finger Discount, Resourceful, Equilibrium, Inspiration, Vampyrism, Penance, Aegis, Regeneration, Dark Magic, Berserker, Ancestor Spirits, Greenfingers, Greater Greenfingers, Master Greenfingers, Tracker, Greater Tracker, Master Tracker, Salvation, Greater Salvation, Master Salvation, Corruption, Greater Corruption, Master Corruption, Master Five Finger Discount, Master Quarrymaster, Master Lumberjack, Master Poison Purge, Master Runic Accuracy, Master Sharpshooter, Master Call of the Sea, Master Reverence, Master Knockout, Invigorate, Greater Invigorate, Master Invigorate, Supreme Invigorate, Harmony, Greater Harmony, Master Harmony, Supreme Harmony, Supreme Corruption, Supreme Salvation, Supreme Five Finger Discount, Supreme Quarrymaster, Supreme Lumberjack, Supreme Poison Purge, Supreme Runic Accuracy, Supreme Sharpshooter, Supreme Call of the Sea, Supreme Reverence, Supreme Tracker, Supreme Greenfingers];
	enumType.size = 74;
	break;

case 3908:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Muscle-man Pose, Shake Hands, High Five, Levitate, Talk to the Hand, Storm, Snow, Face-palm, Cat Fight, ROFL, Breathe Fire, Surrender, Head in the Sand, Hula Hoop, Disappear, Ghost, Bring-it!, Palm-fist, Evil laugh, Golf clap, Lolcano, Infernal power, Divine power, You're dead, Scream, Tornado, ROFLcopter, Inner Power, Nature's Might, Werewolf Transformation];
	enumType.size = 30;
	break;

case 3909:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Sir , Lord , Duderino , Lionheart , Hellraiser , Crusader , Desperado , Baron , Count , Overlord , Bandito, Duke , King , Big Cheese , Bigwig , Wunderkind , Dame , Lady , Dudette , Baroness , Countess , Overlord , Duchess , Queen , Emperor	, Prince	, Witch king	, Archon	, Justiciar	, The Awesome	, Empress	, Princess	, Witch queen	, The Fallen , The Warrior , The Strange , The Divine , The Magnificent , The Undefeated ];
	enumType.size = 39;
	break;

case 3910:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Dervish outfit, Eastern outfit, Saxon outfit, Samba outfit, Theatrical outfit, Pharaoh outfit, Changshan outfit, Silken outfit, Colonist's outfit, Aztec outfit, Highlander outfit, Muskateer outfit, Werewolf outfit, Elf outfit];
	enumType.size = 14;
	break;

case 3911:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Pet rock, Robin Hood hat, Staff of Light, Gnome Scarf, Lunar equipment, Ring of Stone, Full Slayer Helmet, Ranger Boots, Ancient Staff, Mages' Book, Top Hat];
	enumType.size = 11;
	break;

case 3921:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3922, 3923, 3924, 3939, 3925, 3926, 3927, 3929, 3931, 3932, 3933, 3934, 3935, 3936, 3937, 3938, 3941, 3942];
	enumType.size = 18;
	break;

case 3922:
	enumType.valueType = STRING;
	enumType.defaultstr = "Battlefield layout:";
	enumType.keyType = INT;
	enumType.valueArray = [A, B, C, D];
	enumType.size = 4;
	break;

case 3923:
	enumType.valueType = STRING;
	enumType.defaultstr = "Single-way or multi-way combat:";
	enumType.keyType = INT;
	enumType.valueArray = [Single-way, Multi-way];
	enumType.size = 2;
	break;

case 3924:
	enumType.valueType = STRING;
	enumType.defaultstr = "Enable PVP:";
	enumType.keyType = INT;
	enumType.valueArray = [No, Yes];
	enumType.size = 2;
	break;

case 3925:
	enumType.valueType = STRING;
	enumType.defaultstr = "Team vs team:";
	enumType.keyType = INT;
	enumType.valueArray = [No teams, Optional, Enforced];
	enumType.size = 3;
	break;

case 3926:
	enumType.valueType = STRING;
	enumType.defaultstr = "Battle ends when a team scores:";
	enumType.keyType = INT;
	enumType.valueArray = [N/A, 5 points, 10 points, 20 points, 50 points, 100 points, 250 points, 500 points, 1,000 points, 1,500 points, 3,000 points, 5,000 points, 10,000 points, 15,000 points, 30,000 points, 65,000 points];
	enumType.size = 16;
	break;

case 3927:
	enumType.valueType = STRING;
	enumType.defaultstr = "Battle ends when a player scores:";
	enumType.keyType = INT;
	enumType.valueArray = [N/A, 5 points, 10 points, 20 points, 50 points, 100 points, 250 points, 500 points, 1,000 points, 1,500 points, 3,000 points, 5,000 points, 10,000 points, 15,000 points, 30,000 points, 65,000 points];
	enumType.size = 16;
	break;

case 3928:
	enumType.valueType = INT;
	enumType.defaultint = 2147483647;
	enumType.keyType = INT;
	enumType.valueArray = [null, 5, 10, 20, 50, 100, 250, 500, 1000, 1500, 3000, 5000, 10000, 15000, 30000, 65000];
	enumType.size = 15;
	break;

case 3929:
	enumType.valueType = STRING;
	enumType.defaultstr = "Battle ends after:";
	enumType.keyType = INT;
	enumType.valueArray = [N/A, 5 mins, 10 mins, 15 mins, 30 mins, 45 mins, 60 mins, 120 mins];
	enumType.size = 8;
	break;

case 3931:
	enumType.valueType = STRING;
	enumType.defaultstr = "When time is up, winner is:";
	enumType.keyType = INT;
	enumType.valueArray = [N/A, Player with most points, Team with most points, Team with most players];
	enumType.size = 4;
	break;

case 3932:
	enumType.valueType = STRING;
	enumType.defaultstr = "Forbid melee:";
	enumType.keyType = INT;
	enumType.valueArray = [No, Yes];
	enumType.size = 2;
	break;

case 3933:
	enumType.valueType = STRING;
	enumType.defaultstr = "Forbid ranging:";
	enumType.keyType = INT;
	enumType.valueArray = [No, Yes];
	enumType.size = 2;
	break;

case 3934:
	enumType.valueType = STRING;
	enumType.defaultstr = "Allow magic spells:";
	enumType.keyType = INT;
	enumType.valueArray = [All, Standard, Binding, None];
	enumType.size = 4;
	break;

case 3935:
	enumType.valueType = STRING;
	enumType.defaultstr = "Forbid Summoning:";
	enumType.keyType = INT;
	enumType.valueArray = [No, Yes];
	enumType.size = 2;
	break;

case 3936:
	enumType.valueType = STRING;
	enumType.defaultstr = "Forbid food:";
	enumType.keyType = INT;
	enumType.valueArray = [No, Yes];
	enumType.size = 2;
	break;

case 3937:
	enumType.valueType = STRING;
	enumType.defaultstr = "Forbid drinks:";
	enumType.keyType = INT;
	enumType.valueArray = [No, Yes];
	enumType.size = 2;
	break;

case 3938:
	enumType.valueType = STRING;
	enumType.defaultstr = "Forbid prayer:";
	enumType.keyType = INT;
	enumType.valueArray = [No, Yes];
	enumType.size = 2;
	break;

case 3939:
	enumType.valueType = STRING;
	enumType.defaultstr = "Reward for killing players:";
	enumType.keyType = INT;
	enumType.valueArray = [None, A key, 1 point, 5 points];
	enumType.size = 4;
	break;

case 3940:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, -1, 1, 5];
	enumType.size = 3;
	break;

case 3941:
	enumType.valueType = STRING;
	enumType.defaultstr = "Players with flags or balls may be tackled:";
	enumType.keyType = INT;
	enumType.valueArray = [No, Yes];
	enumType.size = 2;
	break;

case 3942:
	enumType.valueType = STRING;
	enumType.defaultstr = "Lighting:";
	enumType.keyType = INT;
	enumType.valueArray = [Day, Night];
	enumType.size = 2;
	break;

case 3943:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1918, 1919, 1920, 1921, 1922, 1923, 1928, 1929, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1942, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1930, 1924, 1925, 1926, 1927, 1938, 1939, 1940, 1941, 1943, 1944, 1945, 1946];
	enumType.size = 55;
	break;

case 3944:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 2, 3, 4, 5, 43, 44, 45, 46, 14, 47, 48, 49, 50, 15, 51, 52, 53, 54, 8, 11, 9, 12, 10, 13];
	enumType.size = 26;
	break;

case 3945:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 33, 34, 35, 36, 37, 38, 39, 40, 41, 22, 23];
	enumType.size = 12;
	break;

case 3946:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 6, 7, 16, 17, 42, 18, 19, 20, 21];
	enumType.size = 10;
	break;

case 3947:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 24, 25, 26, 27, 28, 29, 30, 31, 32];
	enumType.size = 10;
	break;

case 3949:
	enumType.valueType = STRING;
	enumType.defaultstr = "Reward:";
	enumType.keyType = INT;
	enumType.valueArray = [Nothing, A key, 1 point, 2 points, 3 points, 4 points, 5 points, 7 points, 10 points, 12 points, 15 points];
	enumType.size = 11;
	break;

case 3951:
	enumType.valueType = STRING;
	enumType.defaultstr = "Approximate respawn time:";
	enumType.keyType = INT;
	enumType.valueArray = [Never, Immediate, 15 secs, 30 secs, 45 secs, 1 min, 1.5 mins, 2 mins, 5 mins, Next goal, Next red goal, Next blue goal];
	enumType.size = 12;
	break;

case 3953:
	enumType.valueType = STRING;
	enumType.defaultstr = "Damage:";
	enumType.keyType = INT;
	enumType.valueArray = [5, 10, 50, 100, 200, 300, 500, 750, 1000, 5%, 10%, 25%, 33%, 50%, 75%, 100%];
	enumType.size = 16;
	break;

case 3955:
	enumType.valueType = STRING;
	enumType.defaultstr = "Overcome by:";
	enumType.keyType = INT;
	enumType.valueArray = [A key, Strength, Woodcutting, Mining, Thieving];
	enumType.size = 5;
	break;

case 3962:
	enumType.valueType = STRING;
	enumType.defaultstr = "Resilience to damage:";
	enumType.keyType = INT;
	enumType.valueArray = [Very low, Low, Medium, High, Very high, Elite];
	enumType.size = 6;
	break;

case 3964:
	enumType.valueType = STRING;
	enumType.defaultstr = "Level requirement:";
	enumType.keyType = INT;
	enumType.valueArray = [None, 5 or above, 10 or above, 15 or above, 20 or above, 25 or above, 30 or above, 35 or above, 40 or above, 45 or above, 50 or above, 55 or above, 60 or above, 65 or above, 70 or above, 75 or above, 80 or above, 85 or above, 90 or above, 95 or above, 99 or above, 100 or above];
	enumType.size = 22;
	break;

case 3966:
	enumType.valueType = STRING;
	enumType.defaultstr = "Affects:";
	enumType.keyType = INT;
	enumType.valueArray = [Attack, Strength, Ranged, Magic, Constitution, Prayer, Agility, Summoning];
	enumType.size = 8;
	break;

case 3968:
	enumType.valueType = STRING;
	enumType.defaultstr = "Effect:";
	enumType.keyType = INT;
	enumType.valueArray = [Reset, Increase to +1, Increase to +2, Increase to +3, Increase to +5, Increase to +10, Increase to +10%, Decrease to -1, Decrease to -2, Decrease to -3, Decrease to -5, Decrease to -10, Decrease to -10%, Decrease to -25%, Decrease to -50%, Decrease to -75%, Decrease to 0];
	enumType.size = 17;
	break;

case 3970:
	enumType.valueType = STRING;
	enumType.defaultstr = "Affects:";
	enumType.keyType = INT;
	enumType.valueArray = [Health, Run energy, Special attack, Prayer points];
	enumType.size = 4;
	break;

case 3971:
	enumType.valueType = STRING;
	enumType.defaultstr = "Set to:";
	enumType.keyType = INT;
	enumType.valueArray = [100%, 75%, 50%, 25%, Zero];
	enumType.size = 5;
	break;

case 3973:
	enumType.valueType = STRING;
	enumType.defaultstr = "Vanish:";
	enumType.keyType = INT;
	enumType.valueArray = [Never, After 1 use, After 2 uses, After 3 uses, After 5 uses, After 7 uses, After 10 uses, After 15 uses, After 25 uses, After 30 uses, After 40 uses, After 50 uses, After 75 uses, After 100 uses];
	enumType.size = 14;
	break;

case 3975:
	enumType.valueType = STRING;
	enumType.defaultstr = "Type:";
	enumType.keyType = INT;
	enumType.valueArray = [Level 30, Level 60, Level 90, Level 120, Level 150];
	enumType.size = 5;
	break;

case 3985:
	enumType.valueType = STRING;
	enumType.defaultstr = "Item:";
	enumType.keyType = INT;
	enumType.valueArray = [Key, Healing potion, Hatchet, Pickaxe, Runes, Arrows (bronze), Arrows (rune)];
	enumType.size = 7;
	break;

case 3987:
	enumType.valueType = STRING;
	enumType.defaultstr = "This ball may be:";
	enumType.keyType = INT;
	enumType.valueArray = [Kicked, Carried, Kicked and carried];
	enumType.size = 3;
	break;

case 3989:
	enumType.valueType = STRING;
	enumType.defaultstr = "Player carrying ball:";
	enumType.keyType = INT;
	enumType.valueArray = [Moves normally, Cannot run, Cannot move];
	enumType.size = 3;
	break;

case 3991:
	enumType.valueType = STRING;
	enumType.defaultstr = "Carrier can use Agility obstacles:";
	enumType.keyType = INT;
	enumType.valueArray = [Yes, No];
	enumType.size = 2;
	break;

case 3992:
	enumType.valueType = STRING;
	enumType.defaultstr = "Flag's team may pick up flag:";
	enumType.keyType = INT;
	enumType.valueArray = [Yes, No];
	enumType.size = 2;
	break;

case 3993:
	enumType.valueType = STRING;
	enumType.defaultstr = "Player carrying flag:";
	enumType.keyType = INT;
	enumType.valueArray = [Moves normally, Cannot run];
	enumType.size = 2;
	break;

case 3997:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3999, 3998];
	enumType.size = 2;
	break;

case 3998:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4000, 4001, 4002, 4003];
	enumType.size = 4;
	break;

case 3999:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4004, 4005, 4006, 4007];
	enumType.size = 4;
	break;

case 4000:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7474, 7474, 7476, 7476, 7478, 7478, 7480];
	enumType.size = 7;
	break;

case 4001:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7488, 7488, 7490, 7490, 7492, 7492, 7494];
	enumType.size = 7;
	break;

case 4002:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7502, 7502, 7504, 7504, 7506, 7506, 7508];
	enumType.size = 7;
	break;

case 4003:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7516, 7516, 7518, 7518, 7520, 7520, 7522];
	enumType.size = 7;
	break;

case 4004:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7481, 7481, 7483, 7483, 7485, 7485, 7487];
	enumType.size = 7;
	break;

case 4005:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7495, 7495, 7497, 7497, 7499, 7499, 7501];
	enumType.size = 7;
	break;

case 4006:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7509, 7509, 7511, 7511, 7513, 7513, 7515];
	enumType.size = 7;
	break;

case 4007:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7523, 7523, 7525, 7525, 7527, 7527, 7529];
	enumType.size = 7;
	break;

case 4008:
	enumType.valueMap = {1=1973, 2=1975, 3=1974, 4=1976, 5=1977, 6=1978, 7=1979, 8=1980, 9=1981, 10=1982, 11=1983, 12=1984, 13=1985, 14=1986, 15=1987, 16=2507, 17=2508, 18=2509, 301=1988, 302=1990, 303=1989, 304=1991, 305=1992, 306=1993, 307=1994, 308=1995, 309=1996, 310=1997, 311=1998, 312=1999, 313=2000, 314=2001, 315=2002, 601=2003, 602=2005, 603=2004, 604=2006, 605=2007, 606=2008, 607=2009, 608=2010, 609=2011, 610=2012, 611=2013, 612=2014, 613=2015, 614=2016, 615=2017, 616=2018, 617=2019, 618=2020};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 51;
	break;

case 4009:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2034, 2035, 2037, 2038, 2039, 2036, 2040];
	enumType.size = 7;
	break;

case 4010:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2024, 2025, 2027, 2028, 2029, 2026, 2030];
	enumType.size = 7;
	break;

case 4011:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315];
	enumType.size = 15;
	break;

case 4012:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4016, 4017, 4018, 4019, 4021, 4020, 4022, null, null, null, null, null, null, null, null, null, 4013, 4014, 4015];
	enumType.size = 10;
	break;

case 4013:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048];
	enumType.size = 8;
	break;

case 4014:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056];
	enumType.size = 8;
	break;

case 4015:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064];
	enumType.size = 8;
	break;

case 4016:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072];
	enumType.size = 8;
	break;

case 4017:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080];
	enumType.size = 8;
	break;

case 4018:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088];
	enumType.size = 8;
	break;

case 4019:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104];
	enumType.size = 8;
	break;

case 4020:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096];
	enumType.size = 8;
	break;

case 4021:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112];
	enumType.size = 8;
	break;

case 4022:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120];
	enumType.size = 8;
	break;

case 4023:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4024, 4025, 4026];
	enumType.size = 3;
	break;

case 4024:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4027];
	enumType.size = 1;
	break;

case 4025:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4028];
	enumType.size = 1;
	break;

case 4026:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4029];
	enumType.size = 1;
	break;

case 4027:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2248];
	enumType.size = 1;
	break;

case 4028:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2249, 2250];
	enumType.size = 2;
	break;

case 4029:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2251, 2252];
	enumType.size = 2;
	break;

case 4030:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4031, 4032, 4033];
	enumType.size = 3;
	break;

case 4031:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4034, 4035, 4036];
	enumType.size = 3;
	break;

case 4032:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4037, 4038, 4039];
	enumType.size = 3;
	break;

case 4033:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4040, 4041, 4042];
	enumType.size = 3;
	break;

case 4034:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2231];
	enumType.size = 1;
	break;

case 4035:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2232];
	enumType.size = 1;
	break;

case 4036:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2233];
	enumType.size = 1;
	break;

case 4037:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2234, 2235, 2236, 2237];
	enumType.size = 4;
	break;

case 4038:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2238];
	enumType.size = 1;
	break;

case 4039:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2239];
	enumType.size = 1;
	break;

case 4040:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2240, 2241, 2242, 2243];
	enumType.size = 4;
	break;

case 4041:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2244];
	enumType.size = 1;
	break;

case 4042:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2245, 2246, 2247];
	enumType.size = 3;
	break;

case 4043:
	enumType.valueMap = {1=4104, 100=4234, 101=4186, 102=4030, 103=4111, 104=4241, 40=6096, 105=4193, 10=4206, 106=4159, 107=4118, 11=4213, 108=4128, 12=4220, 109=4227, 110=4023, 111=4135, 112=4169, 113=4179, 20=4149, 21=4142, 30=4176};
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 22;
	break;

case 4044:
	enumType.valueMap = {1=Statues, 100=Chairs, 101=Tables, 102=Top, 103=Potted Plants, 104=Sundial, 40=Avatar Habitat, 105=Top, 10=Pillars, 106=Top, 107=Top, 11=Statues, 108=Shields, 12=Weaponracks, 109=Fireplaces, 110=Windows, 111=Windows, 112=Doors, 113=Keep Wall Pattern, 20=Hedges, 21=Fountains, 30=Dragons};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 22;
	break;

case 4045:
	enumType.valueMap = {105=Pennant, 106=Flag, 107=Flag, 20=Base, 102=Flag};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 5;
	break;

case 4046:
	enumType.valueMap = {105=Pole, 102=Base};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 4047:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 10, 11, 12];
	enumType.size = 3;
	break;

case 4048:
	enumType.valueMap = {12=Weapon Rack, 10=Combat Pillar, 11=Combat Statue};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 3;
	break;

case 4049:
	enumType.valueMap = {12=7247, 10=7045, 11=7054};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 3;
	break;

case 4050:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1];
	enumType.size = 1;
	break;

case 4051:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Statue];
	enumType.size = 1;
	break;

case 4052:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7151];
	enumType.size = 1;
	break;

case 4053:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 20, 21];
	enumType.size = 2;
	break;

case 4054:
	enumType.valueMap = {20=Topiary, 21=Fountain};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 4055:
	enumType.valueMap = {20=7099, 21=7087};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 4056:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 30];
	enumType.size = 1;
	break;

case 4057:
	enumType.valueMap = {30=Dragon Perch};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4058:
	enumType.valueMap = {30=7062};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4059:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113];
	enumType.size = 14;
	break;

case 4060:
	enumType.valueMap = {100=Party Room Chairs, 101=Party Room Tables, 102=Flags, 103=Potted Plants, 104=Sundial, 105=Pennants, 106=Keep Tapestry, 107=Keep Banners, 108=Keep Shields, 109=Keep Fireplace, 110=Keep Windows (0F), 111=Keep Windows (1F), 112=Keep Doors, 113=Keep Walls};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 14;
	break;

case 4061:
	enumType.valueMap = {100=7232, 101=7229, 102=7072, 103=7131, 104=7222, 105=7115, 106=7238, 107=7032, 108=7138, 109=7277, 110=7262, 111=7258, 112=7254, 113=7267};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 14;
	break;

case 4062:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 100];
	enumType.size = 1;
	break;

case 4063:
	enumType.valueMap = {100=Party Room Chairs};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4064:
	enumType.valueMap = {100=7232};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4065:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 101];
	enumType.size = 1;
	break;

case 4066:
	enumType.valueMap = {101=Party Room Tables};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4067:
	enumType.valueMap = {101=7229};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4068:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 102];
	enumType.size = 1;
	break;

case 4069:
	enumType.valueMap = {102=Flags};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4070:
	enumType.valueMap = {102=7072};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4071:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 103];
	enumType.size = 1;
	break;

case 4072:
	enumType.valueMap = {103=Potted Plants};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4073:
	enumType.valueMap = {103=7131};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4074:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 104];
	enumType.size = 1;
	break;

case 4075:
	enumType.valueMap = {104=Sundial};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4076:
	enumType.valueMap = {104=7222};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4077:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 105];
	enumType.size = 1;
	break;

case 4078:
	enumType.valueMap = {105=Pennant};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4079:
	enumType.valueMap = {105=7115};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4080:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 106];
	enumType.size = 1;
	break;

case 4081:
	enumType.valueMap = {106=Keep Tapestry};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4082:
	enumType.valueMap = {106=7238};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4083:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 107];
	enumType.size = 1;
	break;

case 4084:
	enumType.valueMap = {107=Keep Banners};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4085:
	enumType.valueMap = {107=7032};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4086:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 108];
	enumType.size = 1;
	break;

case 4087:
	enumType.valueMap = {108=Keep Shields};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4088:
	enumType.valueMap = {108=7138};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4089:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 109];
	enumType.size = 1;
	break;

case 4090:
	enumType.valueMap = {109=Keep Fireplace};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4091:
	enumType.valueMap = {109=7277};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4092:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 110];
	enumType.size = 1;
	break;

case 4093:
	enumType.valueMap = {110=Keep Windows (0F)};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4094:
	enumType.valueMap = {110=7262};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4095:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 111];
	enumType.size = 1;
	break;

case 4096:
	enumType.valueMap = {111=Keep Windows (1F)};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4097:
	enumType.valueMap = {111=7258};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4098:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 112];
	enumType.size = 1;
	break;

case 4099:
	enumType.valueMap = {112=Keep Doors, 113=Keep Walls};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 4100:
	enumType.valueMap = {112=7254};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4101:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 113];
	enumType.size = 1;
	break;

case 4102:
	enumType.valueMap = {113=Keep Walls};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4103:
	enumType.valueMap = {113=7267};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4104:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4105, 4106, 4107];
	enumType.size = 3;
	break;

case 4105:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4108];
	enumType.size = 1;
	break;

case 4106:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4109];
	enumType.size = 1;
	break;

case 4107:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4110];
	enumType.size = 1;
	break;

case 4108:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274];
	enumType.size = 22;
	break;

case 4109:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296];
	enumType.size = 22;
	break;

case 4110:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318];
	enumType.size = 22;
	break;

case 4111:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4112, 4113, 4114];
	enumType.size = 3;
	break;

case 4112:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4115];
	enumType.size = 1;
	break;

case 4113:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4116];
	enumType.size = 1;
	break;

case 4114:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4117];
	enumType.size = 1;
	break;

case 4115:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2173];
	enumType.size = 1;
	break;

case 4116:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2174, 2175];
	enumType.size = 2;
	break;

case 4117:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2176, 2177, 2178, 2179];
	enumType.size = 4;
	break;

case 4118:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4119, 4120, 4121];
	enumType.size = 3;
	break;

case 4119:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4122, 4123];
	enumType.size = 2;
	break;

case 4120:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4124, 4125];
	enumType.size = 2;
	break;

case 4121:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4126, 4127];
	enumType.size = 2;
	break;

case 4122:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2121];
	enumType.size = 1;
	break;

case 4123:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2122];
	enumType.size = 1;
	break;

case 4124:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2123, 2124, 2125];
	enumType.size = 3;
	break;

case 4125:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2126, 2127];
	enumType.size = 2;
	break;

case 4126:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2128, 2129, 2130];
	enumType.size = 3;
	break;

case 4127:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2131, 2132];
	enumType.size = 2;
	break;

case 4128:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4129, 4130, 4131];
	enumType.size = 3;
	break;

case 4129:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4132];
	enumType.size = 1;
	break;

case 4130:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4133];
	enumType.size = 1;
	break;

case 4131:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4134];
	enumType.size = 1;
	break;

case 4132:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2187];
	enumType.size = 1;
	break;

case 4133:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2188, 2189];
	enumType.size = 2;
	break;

case 4134:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197];
	enumType.size = 8;
	break;

case 4135:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4136, 4137, 4138];
	enumType.size = 3;
	break;

case 4136:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4139];
	enumType.size = 1;
	break;

case 4137:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4140];
	enumType.size = 1;
	break;

case 4138:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4141];
	enumType.size = 1;
	break;

case 4139:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2226];
	enumType.size = 1;
	break;

case 4140:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2227, 2228];
	enumType.size = 2;
	break;

case 4141:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2229, 2230];
	enumType.size = 2;
	break;

case 4142:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4143, 4144, 4145];
	enumType.size = 3;
	break;

case 4143:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4146];
	enumType.size = 1;
	break;

case 4144:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4147];
	enumType.size = 1;
	break;

case 4145:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4148];
	enumType.size = 1;
	break;

case 4146:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2156];
	enumType.size = 1;
	break;

case 4147:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2157, 2158];
	enumType.size = 2;
	break;

case 4148:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2159, 2160, 2161, 2162];
	enumType.size = 4;
	break;

case 4149:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4150, 4151, 4152];
	enumType.size = 3;
	break;

case 4150:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4153, 4154];
	enumType.size = 2;
	break;

case 4151:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4155, 4156];
	enumType.size = 2;
	break;

case 4152:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4157, 4158];
	enumType.size = 2;
	break;

case 4153:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2210];
	enumType.size = 1;
	break;

case 4154:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2211];
	enumType.size = 1;
	break;

case 4155:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2212, 2213, 2214, 2215, 2216];
	enumType.size = 5;
	break;

case 4156:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2217, 2218];
	enumType.size = 2;
	break;

case 4157:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2219, 2220, 2221, 2222, 2223];
	enumType.size = 5;
	break;

case 4158:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2224, 2225];
	enumType.size = 2;
	break;

case 4159:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4160, 4161, 4162];
	enumType.size = 3;
	break;

case 4160:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4163, 4164];
	enumType.size = 2;
	break;

case 4161:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4165, 4166];
	enumType.size = 2;
	break;

case 4162:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4167, 4168];
	enumType.size = 2;
	break;

case 4163:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2198];
	enumType.size = 1;
	break;

case 4164:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2199];
	enumType.size = 1;
	break;

case 4165:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2200, 2201];
	enumType.size = 2;
	break;

case 4166:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2202, 2203];
	enumType.size = 2;
	break;

case 4167:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2204, 2205, 2207, 2206];
	enumType.size = 4;
	break;

case 4168:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2208, 2209];
	enumType.size = 2;
	break;

case 4169:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4170, 4171, 4172];
	enumType.size = 3;
	break;

case 4170:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4173];
	enumType.size = 1;
	break;

case 4171:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4174];
	enumType.size = 1;
	break;

case 4172:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4175];
	enumType.size = 1;
	break;

case 4173:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2347];
	enumType.size = 1;
	break;

case 4174:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2348];
	enumType.size = 1;
	break;

case 4175:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2349];
	enumType.size = 1;
	break;

case 4176:
	enumType.valueMap = {3=4177};
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 4177:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4178];
	enumType.size = 1;
	break;

case 4178:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2350, 2351, 2352, 2353, 2354];
	enumType.size = 5;
	break;

case 4179:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4180, 4181, 4182];
	enumType.size = 3;
	break;

case 4180:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4183];
	enumType.size = 1;
	break;

case 4181:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4184];
	enumType.size = 1;
	break;

case 4182:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4185];
	enumType.size = 1;
	break;

case 4183:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2163, 2164, 2165, 2166];
	enumType.size = 4;
	break;

case 4184:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2167, 2168, 2169];
	enumType.size = 3;
	break;

case 4185:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2170, 2171, 2172];
	enumType.size = 3;
	break;

case 4186:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4187, 4188, 4189];
	enumType.size = 3;
	break;

case 4187:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4190];
	enumType.size = 1;
	break;

case 4188:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4191];
	enumType.size = 1;
	break;

case 4189:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4192];
	enumType.size = 1;
	break;

case 4190:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2355];
	enumType.size = 1;
	break;

case 4191:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2356];
	enumType.size = 1;
	break;

case 4192:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2357];
	enumType.size = 1;
	break;

case 4193:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4194, 4195, 4196];
	enumType.size = 3;
	break;

case 4194:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4197, 4198, 4199];
	enumType.size = 3;
	break;

case 4195:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4200, 4201, 4202];
	enumType.size = 3;
	break;

case 4196:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4203, 4204, 4205];
	enumType.size = 3;
	break;

case 4197:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2328];
	enumType.size = 1;
	break;

case 4198:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2329];
	enumType.size = 1;
	break;

case 4199:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2330];
	enumType.size = 1;
	break;

case 4200:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2331, 2332];
	enumType.size = 2;
	break;

case 4201:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2333, 2334];
	enumType.size = 2;
	break;

case 4202:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2335, 2336];
	enumType.size = 2;
	break;

case 4203:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2337, 2338, 2340];
	enumType.size = 4;
	break;

case 4204:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2341, 2342];
	enumType.size = 2;
	break;

case 4205:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2343, 2344, 2345, 2346];
	enumType.size = 4;
	break;

case 4206:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4207, 4208, 4209];
	enumType.size = 3;
	break;

case 4207:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4210];
	enumType.size = 1;
	break;

case 4208:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4211];
	enumType.size = 1;
	break;

case 4209:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4212];
	enumType.size = 1;
	break;

case 4210:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2319, 2320, 2321];
	enumType.size = 3;
	break;

case 4211:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2322, 2323, 2324];
	enumType.size = 3;
	break;

case 4212:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2325, 2326, 2327];
	enumType.size = 3;
	break;

case 4213:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4214, 4215, 4216];
	enumType.size = 3;
	break;

case 4214:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4217];
	enumType.size = 1;
	break;

case 4215:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4218];
	enumType.size = 1;
	break;

case 4216:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4219];
	enumType.size = 1;
	break;

case 4217:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2140, 2141, 2142];
	enumType.size = 3;
	break;

case 4218:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2143, 2144, 2145];
	enumType.size = 3;
	break;

case 4219:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2146, 2147, 2148];
	enumType.size = 3;
	break;

case 4220:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4221, 4222, 4223];
	enumType.size = 3;
	break;

case 4221:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4224];
	enumType.size = 1;
	break;

case 4222:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4225];
	enumType.size = 1;
	break;

case 4223:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4226];
	enumType.size = 1;
	break;

case 4224:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2133];
	enumType.size = 1;
	break;

case 4225:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2134, 2135];
	enumType.size = 2;
	break;

case 4226:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2136, 2137, 2138, 2139];
	enumType.size = 4;
	break;

case 4227:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4228, 4229, 4230];
	enumType.size = 3;
	break;

case 4228:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4231];
	enumType.size = 1;
	break;

case 4229:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4232];
	enumType.size = 1;
	break;

case 4230:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4233];
	enumType.size = 1;
	break;

case 4231:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2180];
	enumType.size = 1;
	break;

case 4232:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2181, 2182];
	enumType.size = 2;
	break;

case 4233:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2183, 2184, 2185, 2186];
	enumType.size = 4;
	break;

case 4234:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4235, 4236, 4237];
	enumType.size = 3;
	break;

case 4235:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4238];
	enumType.size = 1;
	break;

case 4236:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4239];
	enumType.size = 1;
	break;

case 4237:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4240];
	enumType.size = 1;
	break;

case 4238:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2358];
	enumType.size = 1;
	break;

case 4239:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2359];
	enumType.size = 1;
	break;

case 4240:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2360];
	enumType.size = 1;
	break;

case 4241:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4242, 4243, 4244];
	enumType.size = 3;
	break;

case 4242:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4245];
	enumType.size = 1;
	break;

case 4243:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4246];
	enumType.size = 1;
	break;

case 4244:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4247];
	enumType.size = 1;
	break;

case 4245:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2149];
	enumType.size = 1;
	break;

case 4246:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2150, 2151];
	enumType.size = 2;
	break;

case 4247:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2152, 2153, 2154, 2155];
	enumType.size = 4;
	break;

case 4255:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [None, Island, Citadel, Keep];
	enumType.size = 4;
	break;

case 4285:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Logs, Stone blocks, Charcoal, Metal ores, Metal bars, Precious ores, Precious bars, Cloth, Rations, Minions];
	enumType.size = 10;
	break;

case 4286:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7381, 7380, 7384, 7378, 7377, 7379, 7376, 7383, 7382, 7385];
	enumType.size = 10;
	break;

case 4287:
	enumType.valueType = STRING;
	enumType.defaultstr = "Empty plot";
	enumType.keyType = INT;
	enumType.valueArray = [null, Woodcutter, Mine, Kiln, Furnace, Loom, Barbecue, Obelisk];
	enumType.size = 7;
	break;

case 4288:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 7392;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7410, 7412, 7411, 7414, 7415, 7413, 7416];
	enumType.size = 7;
	break;

case 4335:
	enumType.valueType = INT;
	enumType.defaultint = 70;
	enumType.keyType = INT;
	enumType.valueArray = [null, 70, 75, 80, 85, 90, 95, 100];
	enumType.size = 7;
	break;

case 4336:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2223, 2407, 2590, 2774, 2957, 3141, 3324, 3508, 3691, 3875, 4058, 4242, 4425, 4609, 4792, 4976, 5159, 5343, 5526, 5710, 5893, 6077, 6260, 6444, 6627, 6811, 6994, 7178, 7361, 7545, 7927, 8212, 8497, 8782, 9067, 9352, 9637, 9922, 10207, 14688, 15087, 15486, 15885, 16284, 16683, 17082, 17481, 17880, 18279, 18678, 19077, 19476, 19875, 20274, 20673, 21072, 21471, 21870, 22269, 22668, 23067, 23466, 23865, 24264, 24663, 25062, 25461, 25860, 26259, 26658, 27057, 27456, 27855, 28254, 28653, 29052, 29451, 29850, 30249, 30648, 31047, 31446, 31845, 32244, 32643, 33042, 33441, 33840, 34239, 34638, 35037, 35436, 35835, 36234, 36633, 37032, 37431, 37830, 38173];
	enumType.size = 99;
	break;

case 4337:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2754, 2985, 3216, 3447, 3678, 3910, 4141, 4372, 4603, 4834, 5065, 5296, 5528, 5759, 5990, 6221, 6452, 6683, 6915, 7146, 7377, 7608, 7839, 8070, 8301, 8533, 8764, 8995, 9226, 9457, 9688, 9919, 10151, 10382, 10613, 10844, 11075, 11306, 11538, 14122, 14400, 14677, 14954, 15231, 15508, 15787, 16064, 16341, 16618, 16896, 17173, 17450, 17728, 18006, 18283, 18560, 18837, 19114, 19393, 19670, 19947, 20224, 20502, 20779, 21056, 21334, 21612, 21889, 22166, 22443, 22720, 22998, 23276, 23553, 23830, 24108, 24385, 24662, 24940, 25218, 25495, 25772, 26049, 26326, 26604, 26882, 27159, 27436, 27714, 27991, 28268, 28545, 28824, 29101, 29378, 29655, 29932, 30210, 30488];
	enumType.size = 99;
	break;

case 4338:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2889, 3505, 4120, 4736, 5351, 5967, 6582, 7198, 7813, 8429, 9044, 9660, 10275, 10891, 11506, 12122, 12737, 13353, 13968, 14584, 15199, 15815, 16430, 17046, 17661, 18277, 18892, 19508, 20123, 20739, 21354, 21970, 22585, 23201, 23816, 24432, 25047, 25663, 26278, 37651, 38512, 39375, 40236, 41098, 41959, 42821, 43682, 44545, 45406, 46268, 47129, 47992, 48853, 49715, 50576, 51438, 52299, 53162, 54023, 54885, 55746, 56609, 57470, 58332, 59193, 60055, 60916, 61779, 62640, 63502, 64363, 65226, 66087, 66949, 67810, 68672, 69533, 70396, 71257, 72119, 72980, 73843, 74704, 75566, 76427, 77289, 78150, 79013, 79874, 80736, 81597, 82460, 83321, 84183, 85044, 85906, 86767, 87630, 88491];
	enumType.size = 99;
	break;

case 4339:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4500, 4762, 5025, 5287, 5550, 5812, 6075, 6337, 6600, 6862, 7125, 7387, 7650, 7912, 8175, 8437, 8700, 8962, 9225, 9487, 9750, 10012, 10275, 10537, 10800, 11062, 11325, 11587, 11850, 12112, 12375, 12637, 12900, 13162, 13425, 13687, 13950, 14212, 14475, 17684, 18000, 18314, 18630, 18944, 19260, 19574, 19890, 20204, 20520, 20834, 21150, 21464, 21780, 22094, 22410, 22724, 23040, 23354, 23670, 23984, 24300, 24614, 24930, 25244, 25560, 25874, 26190, 26504, 26820, 27134, 27450, 27764, 28080, 28394, 28710, 29024, 29340, 29654, 29970, 30284, 30600, 30914, 31230, 31544, 31860, 32174, 32490, 32804, 33120, 33434, 33750, 34064, 34380, 34694, 35010, 35324, 35640, 35954, 36270];
	enumType.size = 99;
	break;

case 4340:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 6456, 6984, 7511, 8039, 8567, 9095, 9622, 10150, 10678, 11206, 11733, 12261, 12789, 13317, 13844, 14372, 14900, 15428, 15955, 16483, 17011, 17539, 18066, 18594, 19122, 19650, 20177, 20705, 21233, 21761, 22288, 22816, 23344, 23872, 24399, 24927, 25455, 25983, 26510, 27038, 27566, 28094, 28621, 29149, 29677, 30205, 30732, 31260, 31788, 32316, 32843, 33371, 33899, 34427, 34954, 35482, 36010, 36538, 37065, 37593, 38121, 38649, 39176, 39704, 40232, 40760, 41287, 41815, 42343, 42871, 43398, 43926, 44454, 44982, 45509, 46037, 46565, 47093, 47620, 48148, 48676, 49204, 49731, 50259, 50787, 51315, 51842, 52370, 52898, 53426, 53953, 54481, 55009, 55537, 56064, 56592, 57120, 57648, 58175];
	enumType.size = 99;
	break;

case 4341:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 260, 320, 380, 440, 500, 560, 620, 680, 740, 800, 860, 920, 980, 1040, 1100, 1160, 1220, 1280, 1340, 1400, 1460, 1520, 1580, 1640, 1700, 1760, 1820, 1880, 1940, 2000, 2060, 2120, 2180, 2240, 2300, 2360, 2420, 2480, 2540, 4680, 4788, 4896, 5004, 5112, 5220, 5328, 5436, 5544, 5652, 5760, 5868, 5976, 6084, 6192, 6300, 6408, 6516, 6624, 6732, 6840, 6948, 7056, 7164, 7272, 7380, 7488, 7596, 7704, 7812, 7920, 8028, 8136, 8244, 8352, 8460, 8568, 8676, 8784, 8892, 9000, 9108, 9216, 9324, 9432, 9540, 9648, 9756, 9864, 9972, 10080, 10188, 10296, 10404, 10512, 10620, 10728, 10836, 10944, 11052];
	enumType.size = 99;
	break;

case 4342:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 8500, 9304, 10109, 10913, 11718, 12522, 13327, 14131, 14936, 15740, 16545, 17349, 18154, 18958, 19763, 20567, 21372, 22176, 22981, 23785, 24590, 25394, 26199, 27003, 27808, 28612, 29417, 30221, 31026, 31830, 32635, 33439, 34244, 35048, 35853, 36657, 37462, 38266, 39071, 39875, 40680, 41484, 42289, 43093, 43898, 44702, 45507, 46311, 47116, 47920, 48725, 49529, 50334, 51138, 51943, 52747, 53552, 54356, 55161, 55965, 56770, 57574, 58379, 60000, 61449, 62899, 64348, 65798, 67247, 68697, 70146, 71596, 73045, 74495, 75944, 77394, 78843, 80293, 81742, 83192, 84641, 86091, 87540, 88990, 90439, 91889, 93338, 94788, 96237, 97687, 99136, 100586, 102035, 103485, 104934, 106384, 107833, 109283, 110729];
	enumType.size = 99;
	break;

case 4483:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11358, 11363, 11385];
	enumType.size = 3;
	break;

case 4484:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11344, 11343, 11364];
	enumType.size = 3;
	break;

case 4485:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11386, 11351, 11352];
	enumType.size = 3;
	break;

case 4486:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11384, 11349, 11347];
	enumType.size = 3;
	break;

case 4487:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11401, 11428, 11406];
	enumType.size = 3;
	break;

case 4488:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11405, 11394, 11387];
	enumType.size = 3;
	break;

case 4489:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11403, 11393, 11429];
	enumType.size = 3;
	break;

case 4490:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11388, 11392, 11407];
	enumType.size = 3;
	break;

case 4491:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 13699, 13684];
	enumType.size = 2;
	break;

case 4492:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 13698, 13701, 13700, 13685];
	enumType.size = 4;
	break;

case 4493:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11683, 11700];
	enumType.size = 2;
	break;

case 4494:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11686, 11623];
	enumType.size = 2;
	break;

case 4495:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11624, 11716, 11681, 11684, 11606];
	enumType.size = 5;
	break;

case 4496:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11627, 11682, 11629, 11630, 11640];
	enumType.size = 5;
	break;

case 4497:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 40415, 11604];
	enumType.size = 2;
	break;

case 4498:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 40418, 40420, 40424, 40421];
	enumType.size = 4;
	break;

case 4499:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 12622, 12652, 12691, 12412, 12742, 12026, 11944, 12018, 12192, 12741, 12957, 13305, 12236, 12135, 12746, 12242, 12772, 11919, 11987, 12124, 12693, 13189];
	enumType.size = 22;
	break;

case 4500:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 12631, 12641, 12692, 12411, 12744, 12122, 11935, 12023, 12225, 12740, 12925, 13278, 12229, 12190, 12745, 12368, 12870, 11914, 11986, 12133, 12738, 13274];
	enumType.size = 22;
	break;

case 4501:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 12620, 12634, 12689, 12383, 12743, 12025, 11940, 11997, 12228, 12739, 12898, 13284, 12232, 12191, 12748, 12239, 12850, 11920, 11979, 12132, 12694, 13277];
	enumType.size = 22;
	break;

case 4502:
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 59991, 59992, 59993];
	enumType.size = 3;
	break;

case 4503:
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 59995, 59996, 59997];
	enumType.size = 3;
	break;

case 4504:
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 59999, 60000, 60001];
	enumType.size = 3;
	break;

case 4505:
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 60007, 60008, 60009];
	enumType.size = 3;
	break;

case 4506:
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 60003, 60004, 60005];
	enumType.size = 3;
	break;

case 4507:
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 60011, 60012, 60013];
	enumType.size = 3;
	break;

case 4508:
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 60015, 60016, 60017];
	enumType.size = 3;
	break;

case 4509:
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 60019, 60020, 60021];
	enumType.size = 3;
	break;

case 4510:
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 60027, 60028, 60029];
	enumType.size = 3;
	break;

case 4511:
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 60023, 60024, 60025];
	enumType.size = 3;
	break;

case 4512:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 40237, 40253, 40206, 40213, 40219];
	enumType.size = 5;
	break;

case 4513:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 40217, 40212, 40248, 40215, 40216];
	enumType.size = 5;
	break;

case 4514:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Allied clans, Friendly clans+, Neutral clans+, All listed clans, Anyone];
	enumType.size = 5;
	break;

case 4515:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4516, 4517, 4518, 4519];
	enumType.size = 4;
	break;

case 4516:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2403, 2403, 2404, 2404, 2405, 2405, 2406];
	enumType.size = 7;
	break;

case 4517:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2407, 2407, 2408, 2408, 2409, 2409, 2410];
	enumType.size = 7;
	break;

case 4518:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2411, 2411, 2412, 2412, 2413, 2413, 2414];
	enumType.size = 7;
	break;

case 4519:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2415, 2415, 2416, 2416, 2417, 2417, 2418];
	enumType.size = 7;
	break;

case 4520:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4521, 4522, 4523, 4524];
	enumType.size = 4;
	break;

case 4521:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2375, 2376, 2377, 2378, 2379, 2380, 2381];
	enumType.size = 7;
	break;

case 4522:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2382, 2383, 2384, 2385, 2386, 2387, 2388];
	enumType.size = 7;
	break;

case 4523:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2389, 2390, 2391, 2392, 2393, 2394, 2395];
	enumType.size = 7;
	break;

case 4524:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2396, 2397, 2398, 2399, 2400, 2401, 2402];
	enumType.size = 7;
	break;

case 4664:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Clan Visit, Battlefield Building Event, Battlefield Event, Clan Resource Gathering, Clan Party, Theatre Rehersal, Theatre Show, Clan Game, Citadel Reset, Council Meeting];
	enumType.size = 10;
	break;

case 4848:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1, 5, 9];
	enumType.size = 3;
	break;

case 4849:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2814];
	enumType.size = 15;
	break;

case 4850:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [-1, 2480, 2481, 2482, 2483, 2484, 2815];
	enumType.size = 7;
	break;

case 5033:
	enumType.valueType = STRUCT;
	enumType.defaultint = 2525;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2525, 2527, 2529, 2526, 2528, 2530, 2531];
	enumType.size = 7;
	break;

case 5034:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 0, 4, 5, 6, 7, 9, 10, 13, 15, 18, 22, 27, 32, 38, 46, 56, 67, 80, 96, 116, 139, 167, 200, 241, 289, 347, 416, 500, 600, 720, 806, 896, 990, 1088, 1190, 1296, 1406, 1520, 1638, 1760, 1886, 2016, 2150, 2288, 2430, 2576, 2726, 2880, 3038, 3200, 3366, 3536, 3710, 3888, 4070, 4256, 4446, 4640, 4838, 5040, 5246, 5456, 5670, 5888, 6110, 6336, 6566, 6800, 7038, 7280, 7526, 7776, 8030, 8288, 8550, 8816, 9086, 9360, 9638, 9920, 10206, 10496, 10790, 11088, 11390, 11696, 12006, 12320, 12638, 12960, 13286, 13616, 13950, 14288, 14630, 14976, 15326, 15680, 16000];
	enumType.size = 99;
	break;

case 5079:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 57722, 57740, 57744, 57742, 57748, 57745, 57738, 57743, 57747, 57744];
	enumType.size = 10;
	break;

case 5080:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 57740, 57744, 57722, 57745, 57742, 57748, 57743, 57747, 57738, 57747];
	enumType.size = 10;
	break;

case 5081:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 57747, 57743, 57738, 57744, 57740, 57722, 57745, 57748, 57742, 57740];
	enumType.size = 10;
	break;

case 5133:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [74580002, 74580004, 74580005, 74580007, 74580008, 74580009, null, 74580010, null, 74580012, 74580011, null, 74580013, 74580006, 74580003];
	enumType.size = 12;
	break;

case 5134:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [-18, -18, -18, -40, 171, 100, 87, 112, 128, 98, 95, 0, 22, 10, 0, 60, 3, 0];
	enumType.size = 18;
	break;

case 5135:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [23119, null, null, 11235, 23120, null, null, 23121, null, 23663, null, null, null, 11229, 20967];
	enumType.size = 7;
	break;

case 5136:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, -1, 65, 73, 0, 5, 7, 4, 73, 0, 49, 6, 2, 0, 72, 0, 0, 20];
	enumType.size = 18;
	break;

case 5137:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [23109, null, null, 18355, 23108, null, null, 23112, null, 23111, 23110, null, null, null, 20962];
	enumType.size = 7;
	break;

case 5138:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [8, 67, -2, -67, -13, 302, 306, 282, -12, 281, 161, 14, 0, 30, 73, 0, 0, 0];
	enumType.size = 18;
	break;

case 5139:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [23114, null, null, 4587, 23113, 1187, null, 23117, null, 23116, 23115, null, null, null, 20961];
	enumType.size = 8;
	break;

case 5173:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2630, 1864, 1865, 1866, 1867, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2676, 2675, 2677, 2679, 2680, 2681, 2682, 2683, 2685, 2684, 2686, 2678];
	enumType.size = 24;
	break;

case 5176:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 2901;
	enumType.keyType = INT;
	enumType.valueArray = [2083, 2084, 2081, 2087, 2086, 2870, 2873, 2875, 2869, 2874, 2872, 2871, 3190, 3188, 3189, 3762, 172, 3757, 591, 601, 263, 3759, 201, 2877, 2881, 2878, 2876, 2880, 2879, 5291, 5527, 7639, 7640, 7636, 7629, 2076, 4438, 3471, 2512, 2198, 2360, 2897, 2893, 2586, 3964, 3387, 3647, 3644, 307, 1957, 1932, 2986, 2985, 1928, 1930, 1927, 1935, 1934, 1933, 1929, 1936, 1926, 1925, 1939, 1956, 1913, 6028, 3073, 3548, 3549, 3550, 4708, 4734, 4833, 3918, 3913, 4700, 3858, 3837, 7641, 4721, 4886, 3468, 3458, 3465, 3464, 5555, 4009, 7631, 4004, 3783, 4018, 7610, 7635, 5568, 3195, 3201, 3192, 7638, 3581, 3592, 7624, 3162, 3150, 4242, 3050, 3445, 6699, 7612, 6736, 4696, 6382, 7619, 7193, 7613, 3185, 5643, 4903, 5420, 5479, 5174, 5360, 4008, 7621, 7625, 7617, 7637, 7630, 7620, 7627, 7623];
	enumType.size = 131;
	break;

case 5177:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Duck Quack 1, Duck Quack 2, Duck Quack 3, Duck Quack 4, Duck Quack 5, Woodcutting 1, Woodcutting 2, Woodcutting 3, Woodcutting 4, Tree Falling 1, Tree Falling 2, Tree Falling 3, Anvil 1, Anvil 2, Anvil 3, Break Sword, Drop Metal 1, Drop Metal 2, Drop Metal 3, Drop Metal 4, Drop Metal 5, Fire Cannon, Smash Glass, Mining 1, Mining 2, Mining 3, Mining 4, Mining 5, Mining 6, Eat, Teleport, Bat, Bear, Camel, Chicken, Cow, Demon, Dragonfire, Goat, Death, Male, Death, Female, Pig, Sheep, Horse, Bell, Wolf, Hammer Stone, Hammer Wood, Fireworks 1, Fireworks 2, Glass-blowing, Demon Growl, You Summoned Me, Master?, Another Kill!, Come Closer, Fear My Wrath!, My Turn!, There Is No Escape!, Release Me!, This Is, True Power!, You Dare Steal My Power?, Ghostly Moan, Ghostly Chant, Ghostly Crying, Evil Chant, Squelch, Punch, Book Open, Book Close, Book Page Turn, Dog, Seagull, Bird Tweet, Owl, Raven, Bee, Flies, Frog, Monkey, Pigeon Wing Flap, Gentle Waves, Fire, Wind, Lava Impact, Earthquake, Creak, Fuse, Hiccup, Fall, Smash Wood, Smash Metal, Pain: Female, Pain: Male, Water Splash 1, Explosion 1, Body Fall, Rock Scrape, Rock Break, Alarm, Drip, Push Boulder, Hand Clap, Seal, Raspberry, Turkey, Bubbling Liquid, Heavy Rock, Chain Rattle 1, Chain Rattle 2, Church Bell, Water Splash 2, Thunder 1, Unsheath Sword, Shield Hit, Explosion 2, Thunder 2, Strong Waves, Magic: Air Impact, Magic: Earth Impact, Magic: Fire Impact, Magic: Water Impact, Lever, Music: Danger, Music: Comedy, Music: Tiptoe, Music: Twinkle, Music: Fanfare, Music: Villain, Music: Princess, Music: Sad];
	enumType.size = 131;
	break;

case 5178:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [, <col=aa44aa>Junior Cadet</col>, <col=aa44aa>Serjeant</col>, <col=aa44aa>Commander</col>, <col=aa44aa>War-chief</col>, <col=c86400>Sir</col>, <col=c86400>Lord</col>, <col=c86400>Duderino</col>, <col=c86400>Lionheart</col>, <col=c86400>Hellraiser</col>, <col=c86400>Crusader</col>, <col=c86400>Desperado</col>, <col=c86400>Baron</col>, <col=c86400>Count</col>, <col=c86400>Overlord</col>, <col=c86400>Bandito</col>, <col=c86400>Duke</col>, <col=c86400>King</col>, <col=c86400>Big Cheese</col>, <col=c86400>Bigwig</col>, <col=c86400>Wunderkind</col>, <col=466afa>Vyreling</col>, <col=7d3fec>Vyre Grunt</col>, <col=6c0b2b>Vyrewatch</col>, <col=c12006>Vyrelord</col>, <col=c12006>Yt'Haar-</col>, <col=c86400>Emperor</col>, <col=c86400>Prince</col>, <col=c86400>Witch King</col>, <col=c86400>Archon</col>, <col=c86400>Justiciar</col>, <col=c86400>The Awesome</col>, <col=c86400>the Magnificent</col>, <col=c86400>the Undefeated</col>, <col=c86400>the Strange</col>, <col=c86400>the Divine</col>, <col=c86400>the Fallen</col>, <col=c86400>the Warrior</col>, <col=c86400>The Real</col>, <col=aa44aa>Cowardly</col>, <col=aa44aa>the Redundant</col>, <col=aa44aa>Everyone attack</col>, <col=aa44aa>Smelly</col>, <col=aa44aa>the Idiot</col>, <col=aa44aa>Sir Lame</col>, <col=aa44aa>the Flamboyant</col>, <col=aa44aa>Weakling</col>, <col=aa44aa>was punished</col>, <col=aa44aa>lost</col>, <col=aa44aa>... you fail</col>, <col=aa44aa>No-mates</col>, <col=aa44aa>ate dirt</col>, <col=aa44aa>Delusional</col>, <col=aa44aa>the Respawner</col>, <col=aa44aa>Cutie-pie</col>, <col=aa44aa>the Fail Magnet</col>, <col=aa44aa>was terminated</col>, <col=aa44aa>Lazy</col>, <col=aa44aa>? Who?</col>, <col=c86400>the Thrifty</col>, <col=c86400>the Handsome</col>, <col=c86400>the Suave</col>, <col=c86400>the Skilful</col>, <col=c86400>the Intimidating</col>, <col=c86400>The Mysterious</col>, <col=c86400>the Stylish </col>, <col=c86400>The Untouchable</col>, <col=c86400>The Outrageous</col>, <col=c86400>Cheerful</col>, <col=c86400>Grumpy</col>, <col=c86400>Assassin</col>, <col=c86400>Athlete</col>, <col=c86400>the Tanned</col>, <col=c86400>the Hot</col>, <col=c86400>The</col>, <col=c86400>Junior</col>, <col=c86400>Mr</col>, <col=c86400>Master</col>, <col=c86400>Esquire</col>, <col=c86400>Doctor</col>, <col=c12006>Artful Dodger</col>, <col=c12006>the Enforcer</col>, <col=c12006>Don</col>, <col=c12006>the Swindler</col>, <col=c86400>the Wild</col>, <col=c86400>The Adorable</col>, <col=c86400>The Mighty</col>, <col=c86400>Flyboy</col>, <col=c86400>the Stuffed</col>, <col=4040ff>the Blue</col>, <col=0fbd0f>the Green</col>, <col=f50202>the Red</col>, <col=6d6d75>the Grey</col>, <col=c12006>Archmage</col>, <col=c12006>TzHaar-</col>, <col=c12006>the Cabin Boy</col>, <col=c12006>Bo'sun</col>, <col=c12006>First Mate</col>, <col=c12006>Cap'n</col>, <col=c12006>Commodore</col>, <col=c12006>Admiral</col>, <col=9f2212>Santa</col>, <col=047f06>the World Guardian</col>, <col=8080ff>of Armadyl</col>, <col=047f06>of Bandos</col>, <col=4040ff>of Saradomin</col>, <col=00ffff>of Seren</col>, <col=047f06>of Sliske</col>, <col=c12006>of Zamorak</col>, <col=c120c1>of Zaros</col>, <col=c86400>of the Godless</col>, <col=2c7cae>Acolyte</col>, <col=2c7cae>High Priest</col>, <col=2c7cae>Hierophant</col>, <col=c63131>Acolyte</col>, <col=c63131>High Priest</col>, <col=c63131>Hierophant</col>, <col=2c7cae>the Virtuous</col>, <col=c63131>the Powerful</col>, <col=6f28c6>the Boundless</col>, <col=6f28c6>the Eternal</col>, <col=fab402>Slayer of Imps</col>, <col=fab402>Zilyana's Bane</col>, <col=fab402>Ruler of the Tower</col>, <col=fab402>Scourge of the Wild</col>, <col=fab402>Master of Clay</col>, <col=c12006>the Gallant</col>, <col=c12006>the Pious</col>, <col=c12006>the Brave</col>, <col=c12006>the Valiant</col>, <col=4040ff>Super</col>, <col=4040ff>Supervillain</col>, <col=4040ff>Super Super</col>, <col=4040ff>Super Supervillain</col>, <col=a6f9fd>the Defeater</col>, <col=c12006>of Daemonheim</col>, <col=fab402>Chroniclator</col>, <col=fab402>Slapsaroth</col>, <col=c86400>the Builder</col>, <col=c86400>the Philanthropist</col>, <col=c86400>the Wishful</col>, <col=c86400>the Generous</col>, <col=fab402>the Charitable</col>, <col=8080ff>Scout</col>, <col=8080ff>Wingman</col>, <col=8080ff>Wingleader</col>, <col=047f06>Grunt</col>, <col=047f06>Soldier</col>, <col=047f06>Veteran</col>, <col=8080ff>Vanguard of Armadyl</col>, <col=047f06>Warmaster of Bandos</col>, <col=8080ff>Armadylean Warrior</col>, <col=06a010>Bandosian Warrior</col>, <col=6060a0>Armadylean Follower</col>, <col=106010>Bandosian Follower</col>, <col=c12006>Admiral of the Fleet</col>, <col=dc2833>the Scrumptious</col>, <col=933cdb>the Forlorn</col>, <col=fab402>Piggy</col>, <col=fab402>, Scion of Viggora</col>, <col=c120c1>Pontifex</col>, <col=c120c1>Legatus</col>, <col=8904b1>the Annihilator</col>, <col=c12006>Maxed</col>, <col=f7fe2e>the Completionist</col>, <col=fab402>the Supreme</col>, <col=6d6d75>Slayer of Imps</col>, <col=f334c4>the Naabe</col>, <col=bae7fd>the Bloodchiller</col>, <col=d7f388>the Riftsplitter</col>, <col=faac59>the Pummeller</col>, <col=795daa>the Thunderous</col>, <col=d8432b>the Warmonger</col>, <col=047f06>the Champion</col>, <col=6d6d75>Slapsaroth</col>, <col=fab402>Undertaker</col>, <col=6d6d75>Undertaker</col>, <col=00ffff>of the Elves</col>, <col=1d689e>the Reaper</col>, <col=ba061f>Final Boss</col>, <col=c12006>Attacker</col>, <col=4040ff>Defender</col>, <col=d7f388>Collector</col>, <col=047f06>Healer</col>, <col=c12006>Supreme Attacker</col>, <col=4040ff>Supreme Defender</col>, <col=d7f388>Supreme Collector</col>, <col=047f06>Supreme Healer</col>, <col=c86400>the Penance Slayer</col>, <col=c120c1>the Empty</col>, <col=c120c1>the Shadow</col>, <col=c120c1>Praetor</col>, <col=c120c1>Dream of Mah</col>, <col=c120c1>of Senntisten</col>, <col=c120c1>of the Second Age</col>, <col=c120c1>the Betrayed</col>, <col=c120c1>the Muspah</col>, <col=c120c1>the Nihil</col>, <col=6d6d75>Zilyana's Bane</col>, <col=fab402>the Gardener</col>, <col=6d6d75>the Gardener</col>, <col=787878>Peg Leg</col>, <col=960f05>Cutthroat</col>, <col=cc0099>the Swashbuckler</col>, <col=729de4>One-Eyed</col>, <col=048f06>Dread Pirate</col>, <col=c80000>Red-Hand</col>, <col=323232>Blackbeard</col>, <col=63e2f3>Runebeard</col>, <col=da6924>the Rum Thief</col>, <col=1a1c91>Pirate King</col>, <col=df01a5>of the Trahaearn</col>, <col=2d2d2d>of the Iorwerth</col>, <col=04b431>of the Cadarn</col>, <col=dbd838>of the Crwys</col>, <col=0080ff>of the Amlodd</col>, <col=ebf7f1>of the Ithell</col>, <col=d80010>of the Hefin</col>, <col=2efef7>of the Meilyr</col>, <col=df7401>the Elven</col>, <col=0b610b>Dark Elf</col>, <col=0b610b>of Tarddiad</col>, <col=8904b1>Lorehound</col>, <col=df7401>the Statuesque</col>, <col=0b610b>of the Naragi</col>, <col=0c868a>Lord of the Wait</col>, <col=513a33>the Mourner</col>, <col=8a0808>Dark Lord</col>, <col=8a0808>the Fractured</col>, <col=8a0808>the Corrupted</col>, <col=df01d7>the Elfborne</col>, <col=8904b1>the Ravensworn</col>, <col=8a0808>the Stupendous</col>, <col=8a0808>the Meandering</col>, <col=df7401>The Famous</col>, <col=d8432b>The Abyssal</col>, <col=d8432b>The Dark</col>, <col=d8432b>The Beast</col>, <col=d8432b>Slayer Master</col>, <col=6d6d75>Ironman</col>, <col=6d6d75>the Ironman</col>, <col=ba061f>Hardcore Ironman</col>, <col=ba061f>the Hardcore Ironman</col>, <col=bae7fd>Ghost Hunter</col>, <col=c12006>the Trickster</col>, <col=c12006>the Treated</col>, <col=808080>the Ghostly</col>, <col=c86400>the Millionaire</col>, <col=fab402>the Billionaire</col>, <col=6d6d75>Ruler of the Tower</col>, <col=6d6d75>Scourge of the Wild</col>, <col=8a0808>the Coedensworn</col>, <col=8a0808>the Hunter</col>, <col=10cff8>Sword Artist</col>, <col=8a0808>the Challenged</col>, <col=8904b1>Sneaky</col>, <col=8a0808>Sweet Tooth</col>, <col=893d89>the Troublesome</col>, <col=860111>the Thanksgiver</col>, <col=c81e1e>the Festive</col>, <col=c12006>the Survivor</col>, <col=fab402>the Puzzle Hunter</col>, <col=6d6d75>the Puzzle Hunter</col>, <col=fab402>The Late</col>, <col=6d6d75>The Late</col>, <col=c12006>Portmaster</col>, <col=0f5c0f>General</col>, <col=8c1111>Executioner</col>, <col=572714>Castellan</col>, <col=ded82f>Deacon</col>, <col=eda011>the Blazing</col>, <col=309e2b>the Corrupting</col>, <col=2cc6e8>the Frostborn</col>, <col=e3e020>the Glorious</col>, <col=b02600>the Infernal</col>, <col=949a9c>the Obscured</col>, <col=21751d>the Pestilent</col>, <col=851b1b>the Rending</col>, <col=1ec8c8>the Shattering</col>, <col=212345>the Terrifying</col>, <col=fab402>Final Boss</col>, <col=6d6d75>Master of Clay</col>, <col=fab402>the Delver</col>, <col=6d6d75>the Delver</col>, <col=c81e1e>the Master</col>, <col=c81414>the Gamebreaker</col>, <col=ffffff>the Gam<col=c81414>ebreaker</col>, <col=c81414>the Gaembreaker</col>, <col=c81414>le testeur b?ta</col>, <col=c81414>the Gamebreakr</col>, <col=c81414>the Gamebreaker</col>, <col=c81414><str=14a914>the Gamebreaker</str></col>, <col=c81414>thE gAmEbrEAkEr</col>, <col=7fa9ff>the Gamebreaker</col>, <col=c81414>the Gamebreaker</col>, <col=ff4b0a>the Prepared</col>, <col=96c8ff>the Ultimate Quester</col>, <col=fab402>Questival King</col>, <col=32c832>the Egg-cellent</col>, <col=df7401>Champion of Champions</col>, <col=a4a4a4>the Detective</col>, <col=b432c9>the <col=ffff00>Distract<col=b432c9>ed</col>, <col=00ffff>Harbinger</col>, <col=047f06>of Gielinor</col>, <col=990000>the Beast Slayer</col>, <col=00ffff>the Tuska Raider</col>, <col=c86400>the Contender</col>, <col=6d6d75>the Loser</col>, <col=6d6d75>the Struggle</col>, <col=6d6d75>the Real Struggle</col>, <col=d7f388>the Victor</col>, <col=d7f388>the MVP</col>, <col=d7f388>the Real MVP</col>, <col=643200>the <col=6d6d75>Tool</col>, <col=c86400>of V</col>, <col=df7401>the Bronzed</col>, <col=c81414>the Sunburned</col>, <col=fab402>Beachcomber</col>, <col=c81414>Lif<col=ffffff>egu<col=c81414>ard </col>, <col=fadc02>the Quackers</col>, <col=fadc02>the Totally Quackers</col>, <col=b432c9>the Beachbum</col>, <col=96c8ff>the Chilled</col>, <col=6d6d75>Piggy</col>, <col=6d6d75>, Scion of Viggora</col>, <col=6d6d75>Chroniclator</col>, <col=3088f0>the Reputable</col>, <col=925b07>of the Goebies</col>, <col=8b0000>the Daredevil</col>, <col=df7401>King of the Sandcastle</col>, <col=ebf7f1>Snowy Assassin</col>, <col=c12006>Stealth Predator</col>, <col=2e8b57>King of the Jungle</col>];
	enumType.size = 333;
	break;

case 5179:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [, <col=aa44aa>Junior Cadet</col>, <col=aa44aa>Serjeant</col>, <col=aa44aa>Commander</col>, <col=aa44aa>War-chief</col>, <col=c86400>Dame</col>, <col=c86400>Lady</col>, <col=c86400>Dudette</col>, <col=c86400>Lionheart</col>, <col=c86400>Hellraiser</col>, <col=c86400>Crusader</col>, <col=c86400>Desperado</col>, <col=c86400>Baroness</col>, <col=c86400>Countess</col>, <col=c86400>Overlord</col>, <col=c86400>Bandito</col>, <col=c86400>Duchess</col>, <col=c86400>Queen</col>, <col=c86400>Big Cheese</col>, <col=c86400>Bigwig</col>, <col=c86400>Wunderkind</col>, <col=466afa>Vyreling</col>, <col=7d3fec>Vyre Grunt</col>, <col=6c0b2b>Vyrewatch</col>, <col=c12006>Vyrelady</col>, <col=c12006>Yt'Haar</col>, <col=c86400>Empress</col>, <col=c86400>Princess</col>, <col=c86400>Witch Queen</col>, <col=c86400>Archon</col>, <col=c86400>Justiciar</col>, <col=c86400>The Awesome</col>, <col=c86400>the Magnificent</col>, <col=c86400>the Undefeated</col>, <col=c86400>the Strange</col>, <col=c86400>the Divine</col>, <col=c86400>the Fallen</col>, <col=c86400>the Warrior</col>, <col=c86400>The Real</col>, <col=aa44aa>Cowardly</col>, <col=aa44aa>the Redundant</col>, <col=aa44aa>Everyone attack</col>, <col=aa44aa>Smelly</col>, <col=aa44aa>the Idiot</col>, <col=aa44aa>Dame Lame</col>, <col=aa44aa>the flamboyant</col>, <col=aa44aa>Weakling</col>, <col=aa44aa>was punished</col>, <col=aa44aa>lost</col>, <col=aa44aa>... you fail</col>, <col=aa44aa>No-mates</col>, <col=aa44aa>ate dirt</col>, <col=aa44aa>Delusional</col>, <col=aa44aa>the Respawner</col>, <col=aa44aa>Butch</col>, <col=aa44aa>the Fail Magnet</col>, <col=aa44aa>was terminated</col>, <col=aa44aa>Lazy</col>, <col=aa44aa>? Who?</col>, <col=c86400>the Thrifty</col>, <col=c86400>the Beautiful</col>, <col=c86400>the Elegant</col>, <col=c86400>the Skilful</col>, <col=c86400>the Intimidating</col>, <col=c86400>The Mysterious</col>, <col=c86400>the Stylish </col>, <col=c86400>The Untouchable</col>, <col=c86400>The Outrageous</col>, <col=c86400>Cheerful</col>, <col=c86400>Grumpy</col>, <col=c86400>Assassin</col>, <col=c86400>Athlete </col>, <col=c86400>the Tanned</col>, <col=c86400>the Hot</col>, <col=c86400>The</col>, <col=c86400>Junior</col>, <col=c86400>Mrs</col>, <col=c86400>Miss</col>, <col=c86400>Ms</col>, <col=c86400>Doctor</col>, <col=c12006>Artful Dodger</col>, <col=c12006>the Enforcer</col>, <col=c12006>Don</col>, <col=c12006>the Swindler</col>, <col=c86400>the Wild</col>, <col=c86400>The Adorable</col>, <col=c86400>The Mighty</col>, <col=c86400>Flygirl</col>, <col=c86400>the Stuffed</col>, <col=4040ff>the Blue</col>, <col=0fbd0f>the Green</col>, <col=f50202>the Red</col>, <col=6d6d75>the Grey</col>, <col=c12006>Archmage</col>, <col=c12006>TzHaar</col>, <col=c12006>the Cabin Girl</col>, <col=c12006>Bo'sun</col>, <col=c12006>First Mate</col>, <col=c12006>Cap'n</col>, <col=c12006>Commodore</col>, <col=c12006>Admiral</col>, <col=9f2212>Santa</col>, <col=047f06>the World Guardian</col>, <col=8080ff>of Armadyl</col>, <col=047f06>of Bandos</col>, <col=4040ff>of Saradomin</col>, <col=00ffff>of Seren</col>, <col=047f06>of Sliske</col>, <col=c12006>of Zamorak</col>, <col=c120c1>of Zaros</col>, <col=c86400>of the Godless</col>, <col=2c7cae>Acolyte</col>, <col=2c7cae>High Priestess</col>, <col=2c7cae>Hierophant</col>, <col=c63131>Acolyte</col>, <col=c63131>High Priestess</col>, <col=c63131>Hierophant</col>, <col=2c7cae>the Virtuous</col>, <col=c63131>the Powerful</col>, <col=6f28c6>the Boundless</col>, <col=6f28c6>the Eternal</col>, <col=fab402>Slayer of Imps</col>, <col=fab402>Zilyana's Bane</col>, <col=fab402>Ruler of the Tower</col>, <col=fab402>Scourge of the Wild</col>, <col=fab402>Master of Clay</col>, <col=c12006>the Gallant</col>, <col=c12006>the Pious</col>, <col=c12006>the Brave</col>, <col=c12006>the Valiant</col>, <col=4040ff>Super</col>, <col=4040ff>Supervillain</col>, <col=4040ff>Super Super</col>, <col=4040ff>Super Supervillain</col>, <col=a6f9fd>the Defeater</col>, <col=c12006>of Daemonheim</col>, <col=fab402>Chroniclator</col>, <col=fab402>Slapsaroth</col>, <col=c86400>the Builder</col>, <col=c86400>the Philanthropist</col>, <col=c86400>the Wishful</col>, <col=c86400>the Generous</col>, <col=fab402>the Charitable</col>, <col=8080ff>Scout</col>, <col=8080ff>Wingman</col>, <col=8080ff>Wingleader</col>, <col=047f06>Grunt</col>, <col=047f06>Soldier</col>, <col=047f06>Veteran</col>, <col=8080ff>Vanguard of Armadyl</col>, <col=047f06>Warmaster of Bandos</col>, <col=8080ff>Armadylean Warrior</col>, <col=06a010>Bandosian Warrior</col>, <col=6060a0>Armadylean Follower</col>, <col=106010>Bandosian Follower</col>, <col=c12006>Admiral of the Fleet</col>, <col=dc2833>the Scrumptious</col>, <col=933cdb>the Forlorn</col>, <col=fab402>Piggy</col>, <col=fab402>, Scion of Viggora</col>, <col=c120c1>Pontifex</col>, <col=c120c1>Legatus</col>, <col=8904b1>the Annihilator</col>, <col=c12006>Maxed</col>, <col=f7fe2e>the Completionist</col>, <col=fab402>the Supreme</col>, <col=6d6d75>Slayer of Imps</col>, <col=f334c4>the Naabe</col>, <col=bae7fd>the Bloodchiller</col>, <col=d7f388>the Riftsplitter</col>, <col=faac59>the Pummeller</col>, <col=795daa>the Thunderous</col>, <col=d8432b>the Warmonger</col>, <col=047f06>the Champion</col>, <col=6d6d75>Slapsaroth</col>, <col=fab402>Undertaker</col>, <col=6d6d75>Undertaker</col>, <col=00ffff>of the Elves</col>, <col=1d689e>the Reaper</col>, <col=ba061f>Final Boss</col>, <col=c12006>Attacker</col>, <col=4040ff>Defender</col>, <col=d7f388>Collector</col>, <col=047f06>Healer</col>, <col=c12006>Supreme Attacker</col>, <col=4040ff>Supreme Defender</col>, <col=d7f388>Supreme Collector</col>, <col=047f06>Supreme Healer</col>, <col=c86400>the Penance Slayer</col>, <col=c120c1>the Empty</col>, <col=c120c1>the Shadow</col>, <col=c120c1>Praetor</col>, <col=c120c1>Dream of Mah</col>, <col=c120c1>of Senntisten</col>, <col=c120c1>of the Second Age</col>, <col=c120c1>the Betrayed</col>, <col=c120c1>the Muspah</col>, <col=c120c1>the Nihil</col>, <col=6d6d75>Zilyana's Bane</col>, <col=fab402>the Gardener</col>, <col=6d6d75>the Gardener</col>, <col=787878>Pegleg</col>, <col=960f05>Cutthroat</col>, <col=cc0099>the Swashbuckler</col>, <col=729de4>One-eyed</col>, <col=048f06>Dread Pirate</col>, <col=c80000>Red-hand</col>, <col=323232>Blackbeard</col>, <col=63e2f3>Runebeard</col>, <col=da6924>the Rum Thief</col>, <col=3c036c>Pirate Queen</col>, <col=df01a5>of the Trahaearn</col>, <col=2d2d2d>of the Iorwerth</col>, <col=04b431>of the Cadarn</col>, <col=dbd838>of the Crwys</col>, <col=0080ff>of the Amlodd</col>, <col=ebf7f1>of the Ithell</col>, <col=d80010>of the Hefin</col>, <col=2efef7>of the Meilyr</col>, <col=df7401>the Elven</col>, <col=0b610b>Dark Elf</col>, <col=0b610b>of Tarddiad</col>, <col=8904b1>Lorehound</col>, <col=df7401>the Statuesque</col>, <col=0b610b>of the Naragi</col>, <col=0c868a>Lord of the Wait</col>, <col=513a33>the Mourner</col>, <col=8a0808>Dark Lord</col>, <col=8a0808>the Fractured</col>, <col=8a0808>the Corrupted</col>, <col=df01d7>the Elfborne</col>, <col=8904b1>the Ravensworn</col>, <col=8a0808>the Stupendous</col>, <col=8a0808>the Meandering</col>, <col=df7401>The Famous</col>, <col=d8432b>The Abyssal</col>, <col=d8432b>The Dark</col>, <col=d8432b>The Beast</col>, <col=d8432b>Slayer Master</col>, <col=6d6d75>Ironwoman</col>, <col=6d6d75>the Ironwoman</col>, <col=ba061f>Hardcore Ironwoman</col>, <col=ba061f>the Hardcore Ironwoman</col>, <col=bae7fd>Ghost Hunter</col>, <col=c12006>the Trickster</col>, <col=c12006>the Treated</col>, <col=808080>the Ghostly</col>, <col=c86400>the Millionaire</col>, <col=fab402>the Billionaire</col>, <col=6d6d75>Ruler of the Tower</col>, <col=6d6d75>Scourge of the Wild</col>, <col=8a0808>the Coedensworn</col>, <col=8a0808>the Huntress</col>, <col=10cff8>Sword Artist</col>, <col=8a0808>the Challenged</col>, <col=8904b1>Sneaky</col>, <col=8a0808>Sweet Tooth</col>, <col=893d89>the Troublesome</col>, <col=860111>the Thanksgiver</col>, <col=c81e1e>the Festive</col>, <col=c12006>the Survivor</col>, <col=fab402>the Puzzle Hunter</col>, <col=6d6d75>the Puzzle Hunter</col>, <col=fab402>The Late</col>, <col=6d6d75>The Late</col>, <col=c12006>Portmaster</col>, <col=0f5c0f>General</col>, <col=8c1111>Executioner</col>, <col=572714>Castellan</col>, <col=ded82f>Deacon </col>, <col=eda011>the Blazing</col>, <col=309e2b>the Corrupting</col>, <col=2cc6e8>the Frostborn</col>, <col=e3e020>the Glorious</col>, <col=b02600>the Infernal</col>, <col=949a9c>the Obscured</col>, <col=21751d>the Pestilent</col>, <col=851b1b>the Rending</col>, <col=1ec8c8>the Shattering</col>, <col=949a9c>the Terrifying</col>, <col=fab402>Final Boss</col>, <col=6d6d75>Master of Clay</col>, <col=fab402>the Delver</col>, <col=6d6d75>the Delver</col>, <col=c81e1e>the Master</col>, <col=c81414>the Gamebreaker</col>, <col=ffffff>the Gam<col=c81414>ebreaker</col>, <col=c81414>the Gaembreaker</col>, <col=c81414>le testeur b?ta</col>, <col=c81414>the Gamebreakr</col>, <col=c81414>the Gamebreaker</col>, <col=c81414><str=14a914>the Gamebreaker</str></col>, <col=c81414>thE gAmEbrEAkEr</col>, <col=7fa9ff>the Gamebreaker</col>, <col=c81414>the Gamebreaker</col>, <col=ff4b0a>the Prepared</col>, <col=96c8ff>the Ultimate Quester</col>, <col=fab402>Questival Queen</col>, <col=32c832>the Egg-cellent</col>, <col=df7401>Champion of Champions</col>, <col=a4a4a4>the Detective</col>, <col=b432c9>the <col=ffff00>Distract<col=b432c9>ed</col>, <col=00ffff>Harbinger</col>, <col=047f06>of Gielinor</col>, <col=990000>the Beast Slayer</col>, <col=00ffff>the Tuska Raider</col>, <col=c86400>the Contender</col>, <col=6d6d75>the Loser</col>, <col=6d6d75>the Struggle</col>, <col=6d6d75>the Real Struggle</col>, <col=d7f388>the Victor</col>, <col=d7f388>the MVP</col>, <col=d7f388>the Real MVP</col>, <col=643200>the <col=6d6d75>Tool</col>, <col=c86400>of V</col>, <col=df7401>the Bronzed</col>, <col=c81414>the Sunburned</col>, <col=fab402>Beachcomber</col>, <col=c81414>Lif<col=ffffff>egu<col=c81414>ard </col>, <col=fadc02>the Quackers</col>, <col=fadc02>the Totally Quackers</col>, <col=b432c9>the Beachbum</col>, <col=96c8ff>the Chilled</col>, <col=6d6d75>Piggy</col>, <col=6d6d75>, Scion of Viggora</col>, <col=6d6d75>Chroniclator</col>, <col=3088f0>the Reputable</col>, <col=925b07>of the Goebies</col>, <col=8b0000>the Daredevil</col>, <col=df7401>Queen of the Sandcastle</col>, <col=ebf7f1>Snowy Assassin</col>, <col=c12006>Stealth Predator</col>, <col=2e8b57>Queen of the Jungle</col>];
	enumType.size = 333;
	break;

case 5181:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26454, 26520, 26455];
	enumType.size = 3;
	break;

case 5182:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 9722, 9723, 9738, 9739, 9740, 9741, 9734, 9735, 9736, 9737, 9724, 9725, 9726, 9727, 9728, 9729, 9730, 9731, 9733, 9732, 26513, 26512, 26455, 26456, 26515, 26514, 26516, 26517, 26518, 26519, 26520, 26453, 26454, 28301, 16069];
	enumType.size = 89;
	break;

case 5183:
	enumType.valueType = STRUCT;
	enumType.defaultint = 2582;
	enumType.keyType = INT;
	enumType.valueArray = [2582, 2581, 2583, 2584, 2585, 2926, 2927, 2928, 9762, 9763, 9764];
	enumType.size = 11;
	break;

case 5184:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2929, 2930, 2931, 2932, 2933, 2934, 9773, 9774, 9775, 9776, 9777, 9778, 11193];
	enumType.size = 29;
	break;

case 5185:
	enumType.valueMap = {2624=10, 2625=11, 2626=12, 2627=13, 2628=14, 2629=15, 9773=22, 9774=23, 9775=24, 9776=25, 2929=16, 9777=26, 2930=17, 9778=27, 2931=18, 2932=19, 2933=20, 2614=0, 2934=21, 2615=1, 2616=2, 2617=3, 11193=28, 2618=4, 2619=5, 2620=6, 2621=7, 2622=8, 2623=9};
	enumType.valueType = INT;
	enumType.keyType = STRUCT;
	enumType.size = 29;
	break;

case 5186:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Sir, Lord, Duderino, Lionheart, Hellraiser, Crusader, Desperado, Baron, Count, Overlord, Bandito, Duke, King, Big Cheese, Bigwig, Wunderkind, Emperor, Prince, Witch king, Archon, Justiciar, The Awesome, The Magnificent, The Undefeated, The Strange, The Divine, The Fallen, The Warrior, Athlete];
	enumType.size = 29;
	break;

case 5187:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Dame, Lady, Dudette, Lionheart, Hellraiser, Crusader, Desperado, Baroness, Countess, Overlord, Bandito, Duchess, Queen, Big Cheese, Bigwig, Wunderkind, Empress, Princess, Witch queen, Archon, Justiciar, The Awesome, The Magnificent, The Undefeated, The Strange, The Divine, The Fallen, The Warrior, Athlete];
	enumType.size = 29;
	break;

case 5188:
	enumType.valueType = STRUCT;
	enumType.defaultint = 1888;
	enumType.keyType = INT;
	enumType.valueArray = [1888, 1893, 1898, 1903, 2561, 2566, 2571, 2576, 2891, 2901, 2911, 2921, 9747, 9757];
	enumType.size = 14;
	break;

case 5189:
	enumType.valueType = STRUCT;
	enumType.defaultint = 1868;
	enumType.keyType = INT;
	enumType.valueArray = [1868, 1873, 1878, 1883, 2541, 2546, 2551, 2556, 2886, 2896, 2906, 2916, 9742, 9752];
	enumType.size = 14;
	break;

case 5213:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 29739, 29740, 29741, 29799, 29800, 29801, 29802, 29803, 29804, 29805, 29806, 29807];
	enumType.size = 60;
	break;

case 5214:
	enumType.valueType = STRING;
	enumType.defaultstr = "invalid";
	enumType.keyType = INT;
	enumType.valueArray = [null, Reduced Melee Attack, No Shield, No Food, Reduced Melee Defence, Random Freeze, Halved Life Points, No Body Armour, Reduced Ranged Attack, No Familiar, Monster Stun, No Prayers, Slippery Fingers, Reduced Magic Attack, Reduced Adrenaline Gain, No Ultimate Abilities, Reduced Magic Defence, Random Daze, Poison, Reduced Ranged Defence, No Power-ups, No Potions, Life Saver];
	enumType.size = 22;
	break;

case 5215:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 8, 6, 4, 2, -2, -4, -6, -8];
	enumType.size = 8;
	break;

case 5216:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7, 5, 3, 1, -5, -7, -9, -11];
	enumType.size = 8;
	break;

case 5222:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 6230, 5195, 4595, 4055, 3300, 3245, 3130, 2400, 1970, 2000, 1635, 1500, 1455, 1345, 1205, 1015, 1020, 1020, 985, 905, 910, 770, 835, 705, 755, 760, 760, 660, 630, 715, 720, 620, 620, 590, 555, 480, 505, 485, 510, 475, 435, 540, 440, 445, 425, 450, 390, 395, 2405, 2285, 420, 2370, 1370, 1325, 2170, 555, 520, 1640, 705, 375];
	enumType.size = 60;
	break;

case 5223:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 602, 533, 493, 457, 388, 403, 302, 328, 262, 320, 277, 212, 265, 183, 211, 161, 180, 180, 215, 135, 210, 126, 205, 103, 181, 200, 200, 100, 98, 197, 216, 172, 172, 170, 149, 88, 127, 107, 146, 125, 85, 204, 104, 123, 103, 142, 82, 101, 347, 283, 84, 326, 222, 275, 294, 149, 128, 296, 159, 81];
	enumType.size = 60;
	break;

case 5224:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1780, 1600, 1650, 2930, 1940, 1500, 875, 695, 4250, 0];
	enumType.size = 10;
	break;

case 5225:
	enumType.valueType = INT;
	enumType.defaultint = 15710;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4000, 4050, 4150, 4300, 4500, 4750, 5070, 5460, 5920, 6470, 7110, 7840, 8660, 9570, 10570, 11660, 12810, 13960, 14860, 15510, 15760, 15810, 15810];
	enumType.size = 23;
	break;

case 5226:
	enumType.valueType = INT;
	enumType.defaultint = 12860;
	enumType.keyType = INT;
	enumType.valueArray = [null, 200, 300, 430, 610, 840, 1120, 1450, 1830, 2260, 2740, 3270, 3850, 4480, 5160, 5880, 6640, 7420, 8180, 8920, 9640, 10280, 10860, 11360, 11780, 12140, 12420, 12620, 12740, 12820, 12860];
	enumType.size = 30;
	break;

case 5331:
	enumType.valueMap = {20032=30, 20036=30, 1925=255, 20040=30, 19977=30, 19979=30, 19980=30, 19981=30, 19982=30, 32206=255, 19983=30, 6032=255, 32208=255, 6034=255, 6036=255, 6103=255, 6059=5, 20012=30, 22444=2000, 32623=255, 22448=8191, 22449=8191, 32625=255, 22450=8191, 32626=255, 22451=8191, 20024=30, 20028=30};
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = OBJ;
	enumType.size = 28;
	break;

case 5332:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 7335, 7336];
	enumType.size = 10;
	break;

case 5348:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 17314, 8907, 8901, 17307, 8911, 8926, 8920, 8913, 25474, 8933, 8931, 8921, 8934, 8935, 25471];
	enumType.size = 15;
	break;

case 5349:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 17328, 8865, 8859, 17321, 8869, 8884, 8878, 8871, 25474, 8891, 8889, 8879, 8892, 8893, 25473];
	enumType.size = 15;
	break;

case 5350:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1265, 2347, 1755, 1351, 946, 590, 8794, 233, 975, 2575, 2576, 1735, 10150, 2574, 20565];
	enumType.size = 15;
	break;

case 5351:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 8904, 8902, 8923, 8898, 8905, 8908, 8912, 8929];
	enumType.size = 8;
	break;

case 5352:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 8862, 8860, 8881, 8856, 8863, 8866, 8870, 8887];
	enumType.size = 8;
	break;

case 5353:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 307, 13431, 303, 305, 309, 311, 301, 11323];
	enumType.size = 8;
	break;

case 5354:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 8915, 8906, 8897, 8900, 8914, 8918, 8925, 8896, 8899, 8910, 8928, 8922, 8930];
	enumType.size = 13;
	break;

case 5355:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 8873, 8864, 8855, 8858, 8872, 8876, 8883, 8854, 8857, 8868, 8886, 8880, 8888];
	enumType.size = 13;
	break;

case 5356:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1733, 1785, 1595, 11065, 1597, 1592, 5523, 4, 9434, 1599, 1594, 2976, 13153];
	enumType.size = 13;
	break;

case 5357:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 8917, 25470, 8924, 8927, 8919, 8937];
	enumType.size = 6;
	break;

case 5358:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 8875, 25472, 8882, 8885, 8877, 8895];
	enumType.size = 6;
	break;

case 5359:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 5341, 5343, 952, 5325, 5329, 18682];
	enumType.size = 6;
	break;

case 5361:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 14221336, 14221348, 14221359, 14221370, 14221381, 14221392];
	enumType.size = 6;
	break;

case 5398:
	enumType.valueType = INT;
	enumType.defaultint = 74;
	enumType.keyType = INT;
	enumType.valueArray = [null, 74, 78, 82, 87, 91, 95];
	enumType.size = 6;
	break;

case 5399:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 5401, 5400];
	enumType.size = 2;
	break;

case 5400:
	enumType.valueMap = {74=yellow breath., 82=green breath., 91=purple breath., 78=pink breath., 87=blue breath., 95=red breath.};
	enumType.valueType = STRING;
	enumType.defaultstr = "something.";
	enumType.keyType = INT;
	enumType.size = 6;
	break;

case 5401:
	enumType.valueMap = {74=Twig's Try., 82=Isis Spiral., 91=Spinning Sera., 78=The Lazy Lina., 87=The Flint Fling., 95=The Big 'E'.};
	enumType.valueType = STRING;
	enumType.defaultstr = "something.";
	enumType.keyType = INT;
	enumType.size = 6;
	break;

case 5402:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22997, 22998, 22999, 23000, 23001, 23002];
	enumType.size = 6;
	break;

case 5420:
	enumType.valueType = ENUM;
	enumType.defaultint = 5469;
	enumType.keyType = INT;
	enumType.valueArray = [null, 5467, 5450, 5454, 5457, 5470, 5468, 5455, 5469, 5459, 5449, 5465, 5453, 5456, 5451, 5461, 5466, 5462, 5448, 5460, 5452, 5463, 5471, 5458, 5447, 5464, 7788];
	enumType.size = 26;
	break;

case 5421:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 5442, 5425, 5429, 5432, 5446, 5443, 5430, 5445, 5434, 5424, 5440, 5428, 5431, 5426, 5436, 5441, 5437, 5423, 5435, 5427, 5438, 5444, 5433, 5422, 5439, 7787];
	enumType.size = 26;
	break;

case 5422:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Familiars, Pets, Other, Dungeoneering];
	enumType.size = 6;
	break;

case 5423:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Trees, Tools, Other, Dungeoneering];
	enumType.size = 6;
	break;

case 5424:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Pickpocket, Multiples, Stalls, Chests, Other];
	enumType.size = 7;
	break;

case 5425:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Weapons, Equipment, Other, Dungeoneering];
	enumType.size = 6;
	break;

case 5426:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Smelting, Bronze, Iron, Steel, Mithril, Adamant, Rune, Artisan, Other, Dungeoneering];
	enumType.size = 12;
	break;

case 5427:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Items, Monsters, Masters];
	enumType.size = 5;
	break;

case 5428:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Runes, Multiple, The Runespan, Other, Dungeoneering];
	enumType.size = 7;
	break;

case 5429:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Weapons, Thrown, Equipment, Other, Dungeoneering];
	enumType.size = 7;
	break;

case 5430:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Prayers, Curses, Equipment];
	enumType.size = 5;
	break;

case 5431:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Ores, Tools, Other, Dungeoneering];
	enumType.size = 6;
	break;

case 5432:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Standard, Ancient, Lunar, Armour, Weapons, Other, Dungeoneering];
	enumType.size = 9;
	break;

case 5433:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Tracking, Traps, Butterfly/Imp, Other, Dungeoneering, Soporith moths];
	enumType.size = 8;
	break;

case 5434:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Herbs, Potions, Barbarian, Other, Dungeoneering, Combination];
	enumType.size = 8;
	break;

case 5435:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Ammo, Thrown, Weapons, Other, Dungeoneering];
	enumType.size = 7;
	break;

case 5436:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Techniques, Catches, Barbarian, Multiple, Other, Dungeoneering];
	enumType.size = 8;
	break;

case 5437:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Standard, Barbarian, Other, Dungeoneering];
	enumType.size = 6;
	break;

case 5438:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Produce, Trees, Special, Other, Dungeoneering];
	enumType.size = 7;
	break;

case 5439:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Bosses, Floors, Rewards];
	enumType.size = 5;
	break;

case 5440:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Armour, Jewellery, Objects, Other, Dungeoneering];
	enumType.size = 7;
	break;

case 5441:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Meats, Drinks, Other, Dungeoneering];
	enumType.size = 6;
	break;

case 5442:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Standard, Special, Misc, Dungeoneering];
	enumType.size = 6;
	break;

case 5443:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Armour];
	enumType.size = 3;
	break;

case 5444:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Rooms, Skills, Furniture, Storage, Games, Other];
	enumType.size = 8;
	break;

case 5445:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Courses, Areas, Shortcuts, Multiples, Other];
	enumType.size = 7;
	break;

case 5446:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Armours, Other, Dungeoneering];
	enumType.size = 5;
	break;

case 5447:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5162, 5163, 5164, 5165, 5166, 5167, 5168, 5169, 5170, 5171, 5172, 5173, 5174, 5175, 5176, 5177, 5178, 5179, 5180, 5181, 5182, 5183, 5184, 5185, 5186, 5187, 5188, 5189, 5190, 5191, 5192, 5193, 5194, 5195, 5196, 5197, 5198, 5199, 5200, 5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208, 5209, 5210, 5211, 5212, 5213, 5214, 5215, 5216, 5217, 5218, 5219, 5220, 5221, 5222, 5223, 5224, 5225, 5226, 5227, 5228, 5229, 5230, 5231, 5232, 5233, 5234, 5235, 5236, 5237, 5238, 5239, 5240, 5241, 5242, 5243, 5244, 5245, 5246, 5247, 5248, 5249, 5250, 5251, 5252, 5253, 5254, 5255, 5256, 5257, 5258, 5259, 5260, 5261, 5262, 5263, 5264, 5265, 5266, 5267, 5268, 5269, 5270, 5271, 5272, 5273, 5274, 5275, 5276, 5277, 5278, 5279, 5280, 5281, 5282, 5283, 5284, 5285, 5286, 5287, 5288, 5289, 5290, 5291, 5292, 5293, 5294, 5295, 5296, 5297, 5298, 5299, 5300, 5301, 5302, 5303, 5304, 5305, 5306, 5307, 5308, 5309, 5310, 5311, 5312, 5313, 5314, 5315, 5316, 5317, 5318, 5319, 5320, 5321, 5322, 5323, 5324, 5325, 5326, 5327, 5328, 5329, 5330, 5331, 5332, 5333, 5334, 5335, 5336, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5348, 5349, 5350, 5351, 5352, 5353, 5354, 5355, 3208, 10506, 11049, 19441, 20286, 20287, 20288, 20289, 28195, 28277, 28278, 28279, 28280, 28327, 29495, 29747, 29850, 29514, 31556];
	enumType.size = 213;
	break;

case 5448:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3693, 3694, 3695, 3696, 3697, 3698, 3699, 3700, 3701, 3702, 3703, 3704, 3705, 3706, 3707, 3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717, 3718, 3719, 3720, 3721, 3722, 3723, 3724, 3725, 3726, 3727, 3728, 3729, 3730, 3731, 3732, 3733, 3734, 3735, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3743, 3744, 3745, 3746, 3747, 3748, 3749, 3750, 3751, 3752, 3753, 3754, 3755, 3756, 3757, 3758, 3759, 3760, 3761, 3762, 3763, 3764, 3765, 9786, 18700, 18701, 23235, 23236, 28401, 28402, 28403, 28404, 29504];
	enumType.size = 83;
	break;

case 5449:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6368, 6369, 6370, 6371, 6372, 6373, 6374, 6375, 6376, 6377, 6378, 6379, 6380, 6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6389, 6390, 6391, 6392, 6393, 6394, 6395, 6396, 6397, 6398, 6399, 6400, 6401, 6402, 6403, 6404, 6405, 6406, 6407, 6408, 6409, 6410, 6411, 6412, 6413, 6414, 6415, 6416, 6417, 6418, 6419, 6420, 6421, 6422, 6423, 6424, 6425, 6426, 6427, 6428, 6429, 6430, 6431, 6432, 6433, 6434, 6435, 6436, 6437, 6438, 6439, 6440, 6441, 6442, 6443, 6444, 6445, 6446, 6447, 6448, 6449, 6450, 6451, 6452, 6453, 6454, 6455, 6456, 6457, 6458, 6459, 6460, 6461, 6462, 6463, 6464, 6465, 6466, 6467, 6468, 6469, 6470, 6471, 6472, 6473, 6474, 6475, 6476, 6477, 6478, 6479, 6480, 6481, 6482, 6483, 6484, 6485, 6487, 6488, 6489, 6490, 6491, 6492, 6493, 6494, 7315, 24244, 29496, 29497, 29498, 29499, 29500, 29501, 29502, 29503];
	enumType.size = 136;
	break;

case 5450:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6321, 6322, 6324, 6325, 6326, 6327, 6328, 6331, 6332, 6333, 6335, 6337, 6338, 6340, 6341, 6342, 6343, 6344, 6345, 6346, 6347, 6348, 6349, 6350, 6351, 6352, 6353, 6354, 6355, 6356, 6357, 6358, 6359, 6360, 6361, 6362, 6363, 6364, 6365, 6366, 6367, 11506, 15394, 15395, 15396, 15397, 15398, 15399, 15400, 15401, 15402, 15403, 15404, 15405, 15406, 15407, 18702, 28367, 28368, 28425, 28426, 28427, 28428, 24238];
	enumType.size = 64;
	break;

case 5451:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4058, 4059, 4060, 4061, 4062, 4063, 4064, 4065, 4066, 4067, 4068, 4069, 4070, 4071, 4072, 4073, 4074, 4075, 4076, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 4086, 4087, 4088, 4089, 4090, 4091, 4092, 4093, 4094, 4095, 4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4127, 4128, 4129, 4130, 4131, 4132, 4133, 4134, 4135, 4136, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178, 4179, 4180, 4181, 4182, 4183, 4184, 4185, 4186, 4187, 4188, 4189, 4190, 4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 4211, 4212, 4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256, 4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272, 4273, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343, 4344, 4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4353, 4354, 4355, 4356, 4357, 4358, 4359, 4360, 4361, 4362, 4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377, 4378, 4379, 4380, 4381, 4382, 4383, 4384, 4385, 4386, 4387, 4388, 4389, 4390, 4391, 4392, 4393, 4394, 4395, 4396, 4397, 4398, 4399, 4400, 4401, 4402, 4403, 4404, 4405, 4406, 4407, 4408, 4409, 4410, 4411, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4419, 4420, 4421, 4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4432, 4433, 4434, 4435, 4436, 4437, 4438, 4439, 4440, 4441, 4442, 4443, 4444, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4459, 4460, 4461, 4462, 4463, 4464, 4465, 4466, 4467, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4500, 4501, 4502, 4503, 4504, 16571, 16572, 16573, 16574, 16575, 16576, 16577, 16578, 16579, 16580, 18711, 18712, 19041, 19443, 19444, 19445, 19446, 19447, 19448, 19449, 19450, 19451, 19452, 28996, 24184, 24185, 24186, 29489, 29490, 29491, 29492, 29493, 29494];
	enumType.size = 480;
	break;

case 5452:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6628, 6629, 6630, 6631, 6632, 6633, 6634, 6635, 6636, 6637, 6638, 6639, 6640, 6641, 6642, 6643, 6644, 6645, 6646, 6647, 6648, 6649, 6650, 6651, 6652, 6653, 6654, 6655, 6656, 6657, 6658, 6659, 6660, 6661, 6662, 6663, 6664, 6665, 6666, 6667, 6668, 6669, 6670, 6671, 6672, 6673, 6674, 6675, 6676, 6677, 6678, 6679, 6680, 6681, 6682, 6683, 6684, 6685, 6686, 6687, 6688, 6689, 6690, 6691, 6692, 6693, 6694, 6695, 6696, 6697, 6698, 6699, 6700, 6701, 6702, 6703, 6704, 6705, 6706, 6707, 6708, 6709, 7313, 7314, 19258, 19665, 19666, 19667, 19668, 25014, 28282, 28283, 28991, 28992, 28993, 28994, 28995, 30516];
	enumType.size = 98;
	break;

case 5453:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3018, 3023, 3024, 3025, 10225, 10226, 10227, 10228, 10229, 10230, 10231, 10232, 10233, 10234, 10235, 10236, 10237, 10238, 10239, 10240, 10241, 10242, 10243, 10244, 10245, 10246, 10247, 10248, 10249, 10250, 10251, 10252, 10253, 10254, 10255, 10256, 10257, 10258, 10259, 10260, 10261, 10262, 10263, 10264, 10265, 10266, 10267, 10268, 10269, 10270, 10271, 10272, 10273, 10274, 10275, 10276, 10277, 10278, 18727, 18728, 19519, 19520, 19521, 19522, 21226, 21227, 21228, 32155, 32156, 32157, 32158];
	enumType.size = 140;
	break;

case 5454:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 29487, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3099, 3100, 3106, 3118, 3127, 3135, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 7316, 7317, 9784, 10293, 10510, 11509, 11510, 15507, 15508, 15509, 15510, 15511, 15512, 15513, 15514, 15515, 15516, 15517, 15518, 15519, 15520, 15521, 15522, 15523, 15524, 15525, 18729, 18730, 19141, 19142, 19259, 19335, 19336, 19523, 19524, 19525, 19526, 19527, 19528, 19529, 19530, 19531, 19532, 19533, 19658, 23189, 23225, 23226, 26386, 28290, 28291, 28349, 28350, 28351, 28769, 24239, 24257, 29488, 30515];
	enumType.size = 206;
	break;

case 5455:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3209, 19613, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3277, 3278, 3281, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 15410, 15411, 15412, 15413, 15414, 15415, 15416, 15417, 15418, 15419, 15420, 15421, 15422, 15423, 24256, 29486];
	enumType.size = 95;
	break;

case 5456:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4505, 4506, 4507, 4508, 4509, 4510, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4542, 4543, 4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576, 4577, 7329, 14526, 18731, 18732, 23190, 28352, 28413, 28414, 28415, 28416, 24243, 28986, 28987, 28988, 28989, 28990, 29483, 29484, 29485];
	enumType.size = 92;
	break;

case 5457:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5525, 5526, 5527, 5528, 5529, 5530, 5531, 5532, 5533, 5534, 5535, 5536, 5537, 5538, 5539, 5540, 5541, 5542, 5543, 19831, 5545, 5546, 5547, 5548, 5549, 5550, 5551, 5553, 5554, 5555, 5556, 5557, 5558, 5562, 5563, 5564, 5565, 5566, 5567, 5568, 5569, 5570, 5571, 5572, 5573, 5575, 5576, 5577, 5578, 5579, 5580, 5581, 5582, 5583, 5584, 5585, 5586, 5587, 5588, 5589, 5591, 5592, 5593, 5594, 5595, 5596, 5598, 5599, 5600, 5601, 5602, 5603, 5605, 5606, 5607, 5608, 5609, 5610, 5612, 5613, 5614, 5615, 5616, 5617, 5618, 5619, 5620, 5621, 5622, 5623, 5624, 5625, 5626, 5627, 5628, 5629, 5630, 5631, 5632, 5633, 5634, 5635, 5636, 5637, 5638, 5639, 5640, 5641, 5642, 5643, 5644, 5645, 5646, 5647, 5648, 5649, 5650, 5651, 5652, 5653, 5654, 5655, 5656, 5657, 5658, 5659, 5660, 5661, 5662, 5663, 5664, 5665, 5666, 5669, 5671, 5673, 5676, 5680, 5681, 5682, 5684, 5686, 5687, 5688, 5690, 5691, 5694, 5695, 5699, 5701, 5702, 5703, 5704, 5705, 5706, 5707, 5708, 5709, 5710, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719, 5720, 5721, 5722, 5723, 5724, 5725, 5726, 5727, 5728, 5729, 5730, 5731, 5732, 5733, 5734, 5735, 5736, 5737, 5738, 5739, 5740, 5741, 5742, 5743, 5745, 5746, 5747, 5748, 5749, 5750, 5756, 5757, 5758, 5759, 5760, 5761, 5762, 5763, 5764, 5765, 5766, 5767, 5768, 5769, 5770, 5771, 5772, 5773, 5774, 5775, 5776, 5777, 5778, 5779, 5780, 5781, 5782, 5783, 5785, 5786, 5787, 5788, 5789, 5790, 5791, 5792, 5793, 7311, 5795, 5796, 5797, 5798, 5799, 5800, 7312, 10222, 10223, 10224, 11507, 11508, 15478, 15479, 15480, 15481, 15482, 15483, 15484, 15485, 15486, 15487, 15488, 15489, 15490, 15491, 15492, 15493, 15494, 15495, 15496, 15497, 15498, 15499, 15500, 15501, 15502, 15503, 15504, 15505, 15506, 9929, 9930, 9931, 18725, 18726, 19120, 19260, 19338, 19339, 19436, 19493, 19494, 19495, 19496, 19497, 19498, 19499, 19500, 19501, 19502, 19503, 19504, 19505, 19506, 19507, 19508, 19509, 19510, 19511, 19512, 19513, 19514, 19515, 19516, 19517, 19518, 19601, 19602, 19603, 19604, 23188, 26449, 26546, 28289, 28492, 28767, 1699, 28877, 28878, 24270, 24242, 29481, 29482, 28540, 30514];
	enumType.size = 332;
	break;

case 5458:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3916, 3917, 3918, 3919, 3920, 3921, 3922, 3923, 3924, 3925, 3926, 3927, 3928, 3929, 3930, 3931, 3932, 3933, 3934, 3935, 3936, 3937, 3938, 3939, 3940, 3941, 3942, 3943, 3944, 3945, 3946, 3947, 3948, 3949, 3950, 3951, 3952, 3953, 3954, 3955, 3956, 3957, 3958, 3959, 3960, 3961, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3969, 3970, 3971, 3972, 3973, 3974, 3975, 3976, 3977, 3978, 3979, 3980, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3992, 3993, 3994, 3995, 3996, 3997, 3998, 3999, 4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4036, 4037, 4038, 4039, 4040, 4041, 4042, 4043, 4044, 4045, 4046, 4047, 4048, 4049, 4050, 4051, 4052, 4053, 4054, 4055, 4056, 4057, 28193, 28194, 28409, 28410, 28411, 28412, 11491, 11492, 11493, 11494, 11495, 11496, 11497, 11498, 11499, 24249, 28983, 28984];
	enumType.size = 160;
	break;

case 5459:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5356, 5357, 5358, 5359, 5360, 5361, 5362, 5363, 5364, 5365, 5366, 5367, 5368, 5369, 5370, 5371, 5372, 5373, 5374, 5375, 5376, 5377, 5378, 5379, 5380, 5381, 5382, 5383, 5384, 5385, 5386, 5387, 5388, 5389, 5390, 5391, 5392, 5393, 5394, 5395, 5396, 5397, 5398, 5399, 5400, 5401, 5402, 5403, 5404, 5405, 5406, 5407, 5408, 5409, 5410, 5411, 5412, 5413, 5414, 5415, 5416, 5417, 5418, 5419, 5420, 5421, 5422, 5423, 5424, 5425, 5426, 5427, 5428, 5429, 5430, 5431, 5432, 5433, 5434, 5435, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5444, 5445, 5446, 5447, 5448, 5449, 5450, 5451, 5452, 5453, 5454, 5455, 5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5465, 5466, 5467, 5468, 5469, 5470, 5471, 5472, 5473, 5474, 5475, 5476, 5477, 5478, 5479, 5480, 5481, 5482, 5483, 5484, 5485, 5486, 5487, 5488, 5489, 5490, 5491, 5492, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 5500, 5501, 5502, 5503, 5504, 5505, 5506, 5507, 5508, 5509, 5510, 5511, 5512, 5513, 5514, 5515, 5516, 5517, 5518, 5519, 5520, 5521, 5522, 5523, 19299, 19300, 19301, 19302, 19629, 19630, 19631, 19632, 29447, 29448, 29449, 29450, 29451, 29452, 29453, 29454, 29455, 29456, 29457, 29458, 29459, 29460, 29461, 29462, 29463, 29464, 29465, 29466, 29467, 29468, 29469, 29470, 29471, 29472, 29473, 29474, 29475, 29476, 29477, 29478, 29479, 29480, 32152, 32153, 32154];
	enumType.size = 213;
	break;

case 5460:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3585, 3586, 3587, 3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3598, 3599, 3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618, 3619, 3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629, 3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 3663, 3664, 3665, 3666, 3667, 3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675, 3676, 3677, 3678, 3679, 3680, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3690, 3691, 3692, 9785, 15436, 15437, 15438, 15439, 15440, 15441, 15442, 15443, 15444, 18713, 18714, 18715, 18716, 18717, 18718, 18719, 18720, 18721, 18722, 19453, 19454, 19455, 19456, 19457, 19458, 19459, 19460, 19461, 19462, 19662, 19663, 19664, 23231, 23232, 23233, 26383, 24269, 30144, 30148];
	enumType.size = 184;
	break;

case 5461:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6182, 6183, 6184, 6185, 6186, 6187, 6188, 6189, 6190, 6191, 6192, 6193, 6194, 6195, 6196, 6197, 6198, 6199, 6200, 6201, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6210, 6211, 6212, 6213, 6214, 6215, 6216, 6217, 6218, 6219, 6220, 6221, 6222, 6223, 6224, 6225, 6226, 6227, 6228, 6229, 6231, 6232, 6234, 6235, 6237, 6238, 6239, 6240, 6241, 6242, 6243, 6244, 6245, 6246, 6247, 6248, 6249, 6250, 6251, 6252, 6253, 6254, 6255, 25016, 28397, 28398, 28399, 28400, 9699, 9700, 31221, 31222, 31223, 32149, 32150, 32151];
	enumType.size = 84;
	break;

case 5462:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6087, 6088, 6089, 6090, 6091, 6092, 6093, 6094, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6102, 6103, 6104, 6105, 6106, 6107, 6108, 6109, 6110, 6111, 6112, 6113, 6114, 6115, 6116, 6117, 6118, 6119, 6120, 6121, 6122, 6123, 6124, 6125, 6126, 6127, 6128, 6129, 6130, 6131, 6132, 6133, 6134, 6135, 6136, 6137, 6138, 6139, 6140, 6141, 6142, 6143, 6144, 6145, 6146, 6147, 6148, 6149, 6150, 6151, 6152, 6153, 6154, 6155, 6156, 6157, 6158, 6159, 6160, 6161, 6162, 6163, 6164, 6165, 6166, 6167, 6168, 6169, 6170, 6171, 6172, 6173, 6174, 6175, 6176, 6177, 6178, 6179, 6180, 6181, 23227, 23228, 23229, 23230, 24241];
	enumType.size = 100;
	break;

case 5463:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3439, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455, 3456, 3457, 3458, 3459, 3460, 3461, 3462, 3463, 3464, 3465, 3466, 3467, 3468, 3469, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516, 3517, 3518, 3519, 3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529, 3530, 3531, 3532, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3540, 3541, 3542, 3543, 3544, 3545, 3546, 3547, 3548, 19619, 19620, 19621, 19622, 19623, 19624, 19625, 19626, 19627, 19628, 28980, 28981, 28982, 29446];
	enumType.size = 124;
	break;

case 5464:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3766, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3781, 3782, 3783, 3784, 3785, 3786, 3787, 3788, 3789, 3790, 3791, 3792, 3793, 3794, 3795, 3796, 3797, 3798, 3799, 3800, 3801, 3802, 3803, 3804, 3805, 3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3815, 3816, 3817, 3818, 3819, 3820, 3821, 3822, 3823, 3824, 3825, 3826, 3827, 3828, 3829, 3830, 3831, 3832, 3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840, 3841, 3842, 3843, 3844, 3845, 3846, 3847, 3848, 3849, 3850, 3851, 3852, 3853, 3854, 3855, 3856, 3857, 3858, 3859, 3860, 3861, 3862, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3871, 3872, 3873, 3874, 3875, 3876, 3877, 3878, 3879, 3880, 3881, 3882, 3883, 3884, 3886, 3889, 3890, 3891, 3892, 3893, 3894, 3895, 3896, 3897, 3898, 3899, 3900, 3901, 3902, 3903, 3904, 3905, 3906, 3907, 3908, 3909, 3910, 3911, 3912, 3913, 3914, 3915, 14527, 19442, 26607, 28328, 28329, 28330, 28331, 28332, 28333, 28334, 28335, 28336, 28337, 28338, 28339, 28340, 28341, 28342, 28343, 29444, 29445, 9698];
	enumType.size = 168;
	break;

case 5465:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5801, 5802, 5803, 5804, 5805, 5806, 5807, 5808, 5809, 5810, 5811, 5812, 5813, 5814, 5815, 5816, 5817, 5818, 5819, 5820, 5821, 5822, 5823, 5824, 5825, 5826, 5827, 5828, 5829, 5830, 5831, 5832, 5833, 5834, 5835, 5836, 5837, 5838, 5839, 5840, 5841, 5842, 5843, 5844, 5845, 5846, 5847, 5848, 5849, 5850, 5851, 5852, 5853, 5854, 5855, 5856, 5857, 5858, 5859, 5860, 5861, 5862, 5863, 5864, 5865, 5866, 5867, 5868, 5869, 5870, 5871, 5872, 5873, 5874, 5875, 5876, 5877, 5878, 5879, 5880, 5881, 5882, 5883, 5884, 5885, 5886, 5887, 5888, 5889, 5890, 5891, 5892, 5893, 5894, 5895, 5896, 5897, 5898, 5899, 5900, 5901, 5902, 5903, 5904, 5905, 5906, 5907, 5908, 5909, 5910, 5911, 5912, 5913, 5914, 5915, 5916, 5917, 5918, 5919, 5920, 5921, 5922, 5923, 5924, 5925, 5926, 5927, 5928, 5929, 5930, 5931, 5932, 5933, 5934, 5935, 5936, 5937, 5938, 5939, 5940, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 5950, 5951, 5952, 5953, 5954, 5955, 5956, 5957, 5958, 5959, 5960, 5961, 5962, 5963, 5964, 5965, 5966, 5967, 5968, 5969, 5970, 5971, 5972, 5973, 5974, 5975, 5976, 5977, 5978, 5979, 5980, 5981, 5982, 5983, 5984, 5985, 5986, 5987, 5988, 5989, 5990, 5991, 5992, 5993, 5994, 5995, 5996, 5997, 5998, 5999, 6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009, 6010, 6011, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6028, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6036, 6037, 6038, 6039, 6040, 6041, 6042, 6043, 6044, 6045, 6046, 6047, 6048, 6049, 6050, 6051, 6052, 6053, 6054, 6055, 6056, 6057, 6058, 6059, 6060, 6061, 6062, 6063, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081, 6082, 6083, 6084, 6085, 6086, 7328, 10507, 10508, 10509, 11418, 14525, 15445, 15446, 15447, 15448, 15449, 15450, 15451, 15452, 15453, 15454, 15455, 15456, 15457, 15458, 15459, 15460, 15461, 15462, 15463, 15464, 15465, 15466, 15467, 15468, 15469, 15470, 15471, 15472, 15473, 15474, 15475, 15476, 15477, 18723, 18724, 18799, 18800, 19463, 19464, 19465, 19466, 19467, 19468, 19469, 19470, 19471, 19472, 19473, 19474, 19475, 19476, 19477, 19478, 19479, 19480, 19481, 19482, 19483, 19484, 19485, 19486, 19487, 19488, 19489, 19490, 19491, 19492, 23234, 19680, 19681, 19682, 26384, 26385, 26473, 25686, 28348, 24260, 24261, 24266, 24267, 24268, 29432, 29433, 29434, 29983, 32144, 32145, 32146, 32147, 32148];
	enumType.size = 382;
	break;

case 5466:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5000, 5001, 5002, 5003, 5004, 5005, 5006, 5007, 5008, 5009, 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 5024, 5025, 5026, 5027, 5028, 5029, 5030, 5031, 5032, 5033, 5034, 5035, 5036, 5037, 5038, 5039, 5040, 5041, 5042, 5043, 5044, 5045, 5046, 5047, 5048, 5049, 5050, 5051, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 5059, 5060, 5061, 5062, 5063, 5064, 5065, 5066, 5067, 5068, 5069, 5070, 5071, 5072, 5073, 5074, 5075, 5076, 5077, 5078, 5079, 5080, 5081, 5082, 5083, 5084, 5085, 5086, 5087, 5088, 5089, 5090, 5091, 5092, 5093, 5094, 5095, 5096, 5097, 5098, 5099, 5100, 5101, 5102, 5103, 5104, 5105, 5106, 5107, 5108, 5109, 5110, 5111, 5112, 5113, 5114, 5115, 5116, 5117, 5118, 5119, 5120, 5121, 5122, 5123, 5124, 5125, 5126, 5127, 5128, 5129, 5130, 5131, 5132, 5133, 5134, 5135, 5136, 5137, 5138, 5139, 5140, 5141, 5142, 5143, 5144, 5145, 5146, 5147, 5148, 5149, 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5157, 5158, 5159, 5160, 5161, 18710, 19337, 19618, 20290, 20291, 20292, 20293, 20294, 20295, 20296, 20297, 20298, 20299, 20300, 25015, 28370, 31218, 31219, 31220];
	enumType.size = 181;
	break;

case 5467:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6256, 6257, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6267, 6268, 6269, 6276, 6277, 6278, 6279, 6282, 6283, 6284, 6285, 6286, 6287, 6288, 6289, 6290, 6291, 6292, 6293, 6297, 6298, 6299, 6304, 6305, 6306, 6307, 6308, 6309, 6310, 6311, 6312, 6314, 6315, 6316, 6317, 6318, 6319, 7310, 11411, 11412, 11413, 11414, 12395, 14305, 15424, 15425, 15426, 15427, 15428, 15429, 15430, 15431, 15432, 15433, 15434, 15435, 19040, 19257, 26446, 26447, 26448, 28284, 28345, 28346, 28347, 28365, 28366, 28768, 24237, 5668, 29430, 29431, 28539, 30512];
	enumType.size = 85;
	break;

case 5468:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6710, 6711, 6712, 6713, 6714, 6715, 6716, 6717, 15408, 15409, 19261, 22712, 22713, 22714, 22715, 22716, 22717, 22718, 22719, 22720, 22721, 22722, 22723, 22724, 22725, 22726, 22727, 22728, 22729, 22730, 22731, 22732, 22733, 22734, 22735, 22736, 22737, 22738, 22739, 22740, 22741, 25731, 25732, 28281, 5697];
	enumType.size = 45;
	break;

case 5469:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3319, 3316, 3317, 3318, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 7309, 10292, 11048, 19039, 979, 28353, 28354, 28355, 28396, 28766, 3137, 29408, 29409, 29410, 29411, 29412, 29413, 29414, 29415, 29416, 29417, 29418, 29419, 29420, 29421, 29422, 29423, 29424, 29425, 29426, 29427, 29428, 29429, 3282];
	enumType.size = 181;
	break;

case 5470:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6495, 6496, 6497, 6498, 6499, 6500, 6501, 6502, 6503, 6504, 6505, 6506, 6507, 6508, 6509, 6510, 6511, 6512, 6513, 6514, 6515, 6516, 6517, 6518, 6519, 6520, 6521, 6522, 6523, 6524, 6525, 6526, 6527, 6528, 6529, 6530, 6531, 6532, 6533, 6534, 6535, 6536, 6537, 6538, 6539, 6540, 6541, 6542, 6543, 6544, 6545, 6546, 6547, 6548, 6549, 6550, 6551, 6552, 6553, 6554, 6555, 6556, 6557, 6558, 6559, 6560, 6561, 6562, 6563, 6564, 6566, 6567, 6568, 6569, 6570, 6571, 6572, 6573, 6574, 6575, 6576, 6577, 6578, 6579, 6580, 6581, 6582, 6583, 6584, 6585, 6586, 6587, 6588, 6589, 6590, 6591, 6592, 6593, 6594, 6595, 6596, 6597, 6598, 6599, 6600, 6601, 6602, 6603, 6604, 6605, 6606, 6607, 6608, 6609, 6610, 6611, 6612, 6613, 6614, 6615, 6616, 6617, 6618, 6619, 6620, 6621, 6622, 6623, 6624, 6625, 6626, 6627, 10515, 11505, 12394, 13877, 13878, 14302, 14303, 14304, 15378, 15379, 15380, 15381, 15382, 15383, 15384, 15385, 15386, 15387, 15388, 15389, 15390, 15391, 15392, 15393, 16570, 18694, 18695, 18696, 18697, 18698, 18699, 19262, 19263, 19264, 19265, 19597, 19695, 19830, 19679, 24182, 25724, 25727, 25725, 25728, 25726, 25729, 21369, 21370, 21371, 21372, 21373, 21374, 22573, 24183, 25013, 25730, 26379, 26380, 26474, 26475, 26476, 25685, 28150, 28050, 28051, 28276, 24245, 24240, 29167, 29168, 29169, 28594, 29397, 29190, 29435, 29436, 29437, 29438, 29439, 29440, 30513, 31712, 31713, 31714];
	enumType.size = 216;
	break;

case 5471:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4629, 4630, 4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649, 4650, 4651, 4652, 4653, 4654, 4655, 4656, 4657, 4658, 4659, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4667, 4668, 4669, 4670, 4671, 4672, 4673, 4674, 4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 4684, 4685, 4686, 4687, 4688, 4689, 4690, 4691, 4692, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4700, 4701, 4702, 4703, 4704, 4705, 4706, 4707, 4708, 4709, 4710, 4711, 4712, 4713, 4714, 4715, 4716, 4717, 4718, 4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739, 4740, 4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4761, 4762, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4770, 4771, 4772, 4773, 4774, 4775, 4776, 4777, 4778, 4779, 4780, 4781, 4782, 4783, 4784, 4785, 4786, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4794, 4795, 4796, 4797, 4798, 4799, 4800, 4801, 4802, 4803, 4804, 4805, 4806, 4807, 4808, 4809, 4810, 4811, 4812, 4813, 4814, 4815, 4816, 4817, 4818, 4819, 4820, 4821, 4822, 4823, 4824, 4825, 4826, 4827, 4828, 4829, 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4837, 4838, 4839, 4840, 4841, 4842, 4843, 4844, 4845, 4846, 4847, 4848, 4849, 4850, 4851, 4852, 4853, 4854, 4855, 4856, 4857, 4858, 4859, 4860, 4861, 4862, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894, 4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916, 4917, 4918, 4919, 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4937, 4938, 4939, 4940, 4941, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949, 4950, 4951, 4952, 4953, 4954, 4955, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971, 4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979, 4980, 4981, 4982, 4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991, 4992, 4993, 4994, 4995, 4996, 4997, 4998, 4999, 19033, 19034, 19035, 19036, 3014, 19633, 28344, 31202, 31203, 31204, 31205, 31206, 31207, 31208, 31209, 31210, 31211, 31212, 31213, 31214, 31215, 31216, 31217, 32072, 32073, 32074, 32075, 32076, 32077, 32078, 32079, 32080, 32081, 32082, 32083, 32084, 32085, 32086, 32087, 32088, 32089, 32090, 32091, 32092];
	enumType.size = 466;
	break;

case 5472:
	enumType.valueType = SKILL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [16, 15, 17, 9, 18, 19, 22, 21, 23, 25];
	enumType.size = 10;
	break;

case 5473:
	enumType.valueMap = {0=0, 1=1, 2=2, 3=3, 4=4, 5=5, 6=6, 23=23};
	enumType.valueType = SKILL;
	enumType.defaultint = -1;
	enumType.keyType = SKILL;
	enumType.size = 8;
	break;

case 5478:
	enumType.valueMap = {0=3034, 64=4091, 1=350, 2=345, 3=315, 4=336, 5=60, 6=331, 7=428, 8=593, 9=992, 10=1007, 11=1120, 12=1192, 13=1258, 14=4091, 15=4091, 16=4091, 17=4091, 18=4091, 19=4091, 20=4091, 60=3523, 62=4091, 63=4090};
	enumType.valueType = INT;
	enumType.defaultint = 4094;
	enumType.keyType = INT;
	enumType.size = 25;
	break;

case 5479:
	enumType.valueMap = {592=1, 593=1, 584=1, 585=1, 586=1, 587=1, 588=1, 589=1, 590=1, 591=1};
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.size = 10;
	break;

case 5480:
	enumType.valueType = INT;
	enumType.defaultint = 4094;
	enumType.keyType = INT;
	enumType.valueArray = [584, 73, 358, 359, 398, 414, 385, 415, 416, 585, 365, 366, 586, 549, 383, 370, 451, 587, 550, 551, 386, 555, 588, 556, 557, 940, 589, 412, 413, 1010, 562, 564, 590, 566, 567, 440, 387, 591, 574, 441];
	enumType.size = 40;
	break;

case 5482:
	enumType.valueType = STRING;
	enumType.defaultstr = "Tutorial Mode";
	enumType.keyType = INT;
	enumType.valueArray = [null, Stop Them In Their Tracks, Machinery of War, Hell's Kitchen, War Profiteers, Corrupted Depths, Spirit Masters, Watery Grave, The Hand of Guthix, Return to the Front, Troll Warzone];
	enumType.size = 10;
	break;

case 5483:
	enumType.valueMap = {1540=7040, 1542=6899, 1543=6904, 1544=7036, 1546=7031, 1547=7039, 1548=7030, 1553=6881, 1554=6882, 1559=7025, 1561=7026, 1562=7032, 1563=7033, 1243=6898, 1520=7028, 1521=7034, 1522=7029, 1523=7035, 1524=7023, 1525=7024, 1526=6896, 1527=6895, 1529=7037, 1530=7038, 1211=7022, 1532=7324, 1535=6894};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = STRUCT;
	enumType.size = 28;
	break;

case 5487:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 6890, 6891, 6872, 1553, 1554, 1248, 9710, 10470, 7112, 7306, 7228, 7124, 1249, 6719, 7196, 6893, 6745, 6723, 6873, 6884, 7203, 6743, 6740, 7131, 6720, 6721, 7221, 7125, 7206, 6729, 7216, 6727, 6732, 6738, 7298, 7226, 6722, 6880, 7304, 7200, 6874, 6883, 6892, 7127, 6875];
	enumType.size = 46;
	break;

case 5488:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 6967, 6968, 7209, 6739, 7301, 6735, 6752, 7222, 6969, 6741, 7308, 7302, 7128, 7196, 6970, 7298, 6753, 7303, 7201, 6971, 6972, 6736, 7223, 6973, 6742, 7225, 7227, 7304, 7130, 7127];
	enumType.size = 31;
	break;

case 5489:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 6832, 6833, 6848, 6834, 7209, 6847, 6836, 7196, 6835, 6837, 6838, 6754, 6839, 6840, 6755, 6845, 6846, 6742, 6841, 6842, 6843, 6844];
	enumType.size = 23;
	break;

case 5490:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 6849, 6850, 6851, 6852, 6853, 6751, 6854, 7208, 6739, 7125, 6740, 7196, 7197, 6869, 6855, 6856, 6734, 7298, 6857, 6741, 6870, 7300, 7209, 6725, 6858, 6859, 6860, 6726, 7204, 6861, 6862, 6742, 6863, 6727, 7199, 6864, 6722, 6865, 6871, 7200, 6866, 6867, 6868, 7127];
	enumType.size = 45;
	break;

case 5491:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 7067, 7068, 7131, 7069, 7070, 6728, 7071, 7072, 7073, 7074, 7224, 7075, 7076, 7077, 7078, 7079, 7080, 7081, 7082, 7083, 7084];
	enumType.size = 22;
	break;

case 5492:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 7087, 7086, 7088, 7089, 7090, 7091, 7092, 7093, 7208, 7094, 7095, 7096, 7097, 7126, 7098, 7099, 7213, 7100, 7214, 7101, 7102, 7215, 7103, 7104, 7105, 7106, 7107, 7108, 7299, 7109, 7110, 7111];
	enumType.size = 33;
	break;

case 5493:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 7018, 7146, 7298, 7147, 7202, 7208, 7148, 7149, 7159, 7303, 7150, 6743, 7151, 7152, 7153, 7201, 7154, 6729, 7155, 7214, 7156, 7157, 7132, 7199, 7158];
	enumType.size = 26;
	break;

case 5494:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 6806, 6807, 6808, 6809, 7201, 7208, 6810, 6811, 6812, 6813, 6814, 6815, 7134, 6816, 6817, 6818, 6821, 6819, 7199, 6820];
	enumType.size = 21;
	break;

case 5495:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 6943, 6966, 6949, 6944, 6942, 6945, 6946, 6947, 6948, 6965, 7214, 6950, 6951, 6952, 6953, 6954, 6955, 6956, 6957, 6958, 6959, 6960, 6961, 6962, 6963, 6964];
	enumType.size = 27;
	break;

case 5496:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 6872, 6873, 6874, 6875, 7220, 6876, 7299];
	enumType.size = 8;
	break;

case 5497:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 6790, 6789, 6785, 6788, 6784, 6791, 6786, 6792, 6787, 6793, 6794, 6736, 6795];
	enumType.size = 14;
	break;

case 5498:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 6796, 6797, 6798, 6799, 6743, 6800, 6801, 7204, 6802, 7218, 6722, 6803, 6804, 6805];
	enumType.size = 15;
	break;

case 5499:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 7135, 7143, 7144, 7137, 7136, 7140, 6719, 6728, 6720, 7141, 6721, 7139, 7145, 6722, 7142];
	enumType.size = 16;
	break;

case 5500:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 7161, 7160, 7162, 7163, 7164, 7165, 7166, 7167, 7168, 7212, 7170, 7171, 7169, 7172, 7125, 7173, 7174, 7159, 7175, 7176, 7177, 7178, 6740, 7195, 7300, 6719, 6725, 6736, 7179, 7180, 7306, 7181, 7183, 7182, 7204, 6731, 7201, 6744, 7184, 7185, 7298, 7187, 7301, 6729, 7188, 7215, 7186, 7224, 7189, 7190, 6722, 7299, 7192, 7193, 7191, 7194];
	enumType.size = 57;
	break;

case 5501:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 6762, 6760, 6779, 6735, 6761, 6763, 7205, 6764, 6759, 6765, 6780, 6766, 6767, 6768, 6769, 6770, 6771, 6772, 6773, 6782, 6742, 6774, 6776, 6777, 6781, 6775, 6783, 7299];
	enumType.size = 29;
	break;

case 5502:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 6908, 1250, 6905, 6909, 6910, 6911, 6912, 6906, 6746, 6913, 6914, 6916, 6907, 6917, 6918, 6919, 7302, 6920, 7126, 6921, 6922, 6923, 6924, 6925, 6926, 7131, 6735, 6927, 6928, 6929, 6729, 6930, 6931, 6932, 6933, 6934, 6935, 6936, 6937, 6938, 6939, 6940, 6941];
	enumType.size = 44;
	break;

case 5503:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 7061, 7228, 7062, 7159, 7125, 7215, 7198, 7063, 7064, 7065, 7229, 7303, 7217, 6732, 7219];
	enumType.size = 16;
	break;

case 5504:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 6827, 6823, 6826, 7228, 6822, 6828, 6824, 6829, 6830, 6740, 6744, 7219, 6825, 6831];
	enumType.size = 15;
	break;

case 5505:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 7053, 1249, 6733, 7054, 7216, 7302, 7056, 6745, 6742, 7058, 6724, 7214, 6729, 7059, 7057, 6732, 7055, 7299, 7219];
	enumType.size = 20;
	break;

case 5506:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7066;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 7112, 7113, 7114, 7116, 7124, 7118, 7117, 7115, 7119, 7120, 7123, 7121, 7122];
	enumType.size = 14;
	break;

case 5507:
	enumType.valueType = STRUCT;
	enumType.defaultint = 6893;
	enumType.keyType = INT;
	enumType.valueArray = [6893, 6884, 6883, 6892, 6970, 6858, 6861, 7086, 7159, 6816, 7139, 6937, 7060];
	enumType.size = 13;
	break;

case 5508:
	enumType.valueType = STRUCT;
	enumType.defaultint = 6783;
	enumType.keyType = INT;
	enumType.valueArray = [6783, 7113, 7114, 7115, 7116, 7117, 7118, 7119, 7120, 7121, 7122, 7064, 6870, 6871, 7018, 7147, 7148, 7149, 7150, 7151, 7152, 7153, 7154, 7155, 7156, 7157, 7158, 1553, 1554, 6788, 6826, 6821, 6880, 6746, 6848];
	enumType.size = 35;
	break;

case 5509:
	enumType.valueType = INT;
	enumType.defaultint = 8;
	enumType.keyType = INT;
	enumType.valueArray = [8, 1, 22, 16, 11, 25, 21, 17, 15, 19, 9, 23, 13, 7, 12, 20, 14, 24, 10, 18];
	enumType.size = 20;
	break;

case 5510:
	enumType.valueMap = {899=0, 643=0, 901=0, 711=0, 905=0, 845=0, 654=0, 594=0, 853=0, 917=0, 790=0, 920=0, 601=0, 602=0, 603=0, 860=0, 670=0, 606=0, 671=0, 736=0, 672=0, 737=0, 677=0, 678=0, 743=0, 618=0, 747=0, 748=0, 620=0, 621=0, 943=0, 624=0, 625=0, 817=5, 626=0, 627=0, 628=0, 629=0, 695=0, 696=0, 825=0, 697=0, 889=0, 890=0, 828=0, 830=0};
	enumType.valueType = INT;
	enumType.defaultint = 10;
	enumType.keyType = INT;
	enumType.size = 46;
	break;

case 5513:
	enumType.valueType = STRUCT;
	enumType.defaultint = 11946;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11946, 11947, 11948, 11949, 11950, 11951, 11952, 11953, 11954, 11955, 11956, 11957, 11958, 11959, 11960, 11961, 11962, 11963, 11964, 11965, 11966, 26452, 26558];
	enumType.size = 23;
	break;

case 5514:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7232;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11682, 7232, 11683, 11684, 11685, 11686, 11687, 11688, 11689, 11690, 11691, 11692, 11693, 11694, 11695, 11696, 11697, 11698, 11699, 11700, 11701, 11702, 11703, 11704, 11705, 11706, 11707, 11708, 11709, 11710, 11711, 11712, 11713, 11714, 11715, 11716];
	enumType.size = 36;
	break;

case 5515:
	enumType.valueType = STRUCT;
	enumType.defaultint = 11816;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11816, 11817, 11818, 11819, 11820, 11821, 11822, 11823, 11824, 11825, 11826, 11827, 11828, 11829, 11830, 11831, 11832, 11833, 11834, 11835, 11836, 11837, 11838, 11839, 11840, 11841, 11842, 11843, 11844, 11845, 11846, 11847, 11848, 11849, 11850, 11851, 11852, 11853, 11854, 11855, 11856, 11857, 20272, 20273];
	enumType.size = 44;
	break;

case 5516:
	enumType.valueType = STRUCT;
	enumType.defaultint = 11625;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11625, 11626, 11627, 11628, 11629, 11630, 11631, 11632, 11633, 11634, 11635, 11636, 11637, 11638, 11639, 11640, 11641, 11642, 11643, 11644, 26555, 29037];
	enumType.size = 22;
	break;

case 5517:
	enumType.valueType = STRUCT;
	enumType.defaultint = 12071;
	enumType.keyType = INT;
	enumType.valueArray = [null, 12071, 12072, 12073, 12074, 12075, 12076, 12077, 12078, 12079, 12080, 12081, 12082, 12083, 12084, 12085, 12086, 12087, 12088, 12089, 12090, 12091, 12092, 12093, 12094, 12095, 12096, 12097, 12098, 12099, 12100, 12101, 12102, 12103, 12104, 12105, 12106, 12107, 12108, 12109, 12110, 12111, 12112, 12113, 12114, 12115, 12116, 12117, 12118, 12119, 12120, 12121, 12122, 12123, 12124, 12125, 12126, 12127, 12128, 12129, 12130, 12131, 20276];
	enumType.size = 62;
	break;

case 5518:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7236;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7236, 11968, 11969, 11970, 11971, 11972, 11973, 11974, 11976, 11977, 11978, 11979, 11980, 11981, 11982, 11983, 11984, 11985, 11987, 11988, 11989, 11990, 11991, 11992, 11994, 11995, 11996, 11997, 11998, 11999, 12000, 12001, 12002, 12003, 12004, 29038];
	enumType.size = 36;
	break;

case 5519:
	enumType.valueType = STRUCT;
	enumType.defaultint = 11577;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11577];
	enumType.size = 1;
	break;

case 5520:
	enumType.valueType = STRUCT;
	enumType.defaultint = 11558;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11558, 11559, 11560, 11561, 11562, 11563, 11564, 11565, 11566, 11567, 11568, 11569, 11570, 11571, 11572, 11573, 11574, 11575, 11576, 23238, 26523];
	enumType.size = 21;
	break;

case 5521:
	enumType.valueType = STRUCT;
	enumType.defaultint = 11529;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11529, 11530, 11531, 11532, 11533, 11534, 11535, 11536, 11537, 11538, 11539, 11540, 11541, 11542, 11543, 11544, 11545, 11546, 11547, 11548, 11549, 11550, 11551, 11552, 11553, 11554, 11555, 11556, 11557];
	enumType.size = 29;
	break;

case 5522:
	enumType.valueType = STRUCT;
	enumType.defaultint = 12032;
	enumType.keyType = INT;
	enumType.valueArray = [null, 12032, 12033, 12034, 12035, 12036, 12037, 12038, 12039, 12040, 12041, 12042, 12043, 12044, 12045, 12046, 12047, 12048, 12049, 12050, 12051, 12052, 12053, 12054, 12055, 12056, 12057, 12058, 12059, 12060, 12061, 12062, 12063, 12064, 12065, 12066, 12067, 12068, 12069, 29518, 32054];
	enumType.size = 40;
	break;

case 5523:
	enumType.valueType = STRUCT;
	enumType.defaultint = 12282;
	enumType.keyType = INT;
	enumType.valueArray = [null, 12282, 12283, 12284, 12285, 12286, 12287, 12288, 12289, 12290, 12291, 12292, 12293, 12294, 12295, 12296, 23243, 23244];
	enumType.size = 17;
	break;

case 5524:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7242;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7242, 11751, 11752, 11753, 11754, 11755, 11756, 11757, 11758, 11759, 11760, 11761, 11762, 11763, 11764, 11765, 11766, 11767, 11768, 11769, 11770, 11771, 11772, 11773, 11774, 11775, 11776, 11777, 11778, 11779, 26557];
	enumType.size = 31;
	break;

case 5525:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7243;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7243, 12132, 12133, 12134, 12135, 12136, 12137, 12138, 12139, 12140, 12141, 12142, 12143, 12144, 12145, 12146, 12147, 12148, 12149, 12150, 12151, 12152, 12153, 12154, 12155, 12156, 12157, 12158, 12159, 12160, 12161, 12162, 12163, 12164, 12165, 12166, 12167, 12168, 12169, 12170, 12171, 12172, 12173, 12174, 12175, 12176, 12177, 12178, 12179, 12180, 12181, 12182, 12183, 12184, 12185, 12186, 12187, 12188, 12189, 12190, 12191, 12192, 12193, 12194, 12195, 12196, 12197, 12198, 12199, 29520, 29521, 29522, 29524, 29525, 29527, 29529, 29532, 29533, 29536, 29537, 29538, 29539, 29540, 29541, 29542, 29543, 29544, 29545, 29546, 29549, 29550, 29551, 29552, 29519, 29523, 29526, 29528, 29530, 29531, 29534, 29535, 29547, 29548];
	enumType.size = 103;
	break;

case 5526:
	enumType.valueType = STRUCT;
	enumType.defaultint = 11858;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11858, 11859, 11860, 11861, 11862, 11863, 11864, 11865, 11866, 11867, 11868, 11869, 11870, 11871, 11872, 11873, 11874, 11875, 11876, 11877, 11878, 11879, 11880, 11881, 11882, 11883, 11884, 11885, 11886, 11887, 11888, 11889, 11890, 11891, 11892, 11893, 11894, 11895, 11896, 11897, 11898, 11899, 11900, 11901, 11902, 11903, 11904, 11905, 11906, 11907, 11908, 11909, 11910, 11911, 11912, 11913, 11914, 11915, 11916, 11917, 11918, 11919, 11920, 11921, 11922, 11923];
	enumType.size = 66;
	break;

case 5527:
	enumType.valueType = STRUCT;
	enumType.defaultint = 11717;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11717, 11718, 11719, 11720, 11721, 11722, 11723, 11724, 11725, 11726, 11727];
	enumType.size = 11;
	break;

case 5528:
	enumType.valueType = STRUCT;
	enumType.defaultint = 12005;
	enumType.keyType = INT;
	enumType.valueArray = [null, 12005, 12006, 12007, 12008, 12009, 12010, 12011, 12012, 12013, 12014, 12015, 12016, 12017, 12018, 12019, 26559, 18704, 18705];
	enumType.size = 18;
	break;

case 5529:
	enumType.valueType = STRUCT;
	enumType.defaultint = 11659;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11659, 11660, 11661, 11662, 11663, 11664, 11665, 11666, 11667, 11668, 11669, 19609, 24160, 26556, 29587, 29588, 30517, 32055];
	enumType.size = 18;
	break;

case 5530:
	enumType.valueType = STRUCT;
	enumType.defaultint = 7248;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11670, 7248, 11671, 11672, 11673, 11674, 11675, 11676, 11677, 11678, 11679, 11680, 11681, 29512];
	enumType.size = 14;
	break;

case 5531:
	enumType.valueType = STRUCT;
	enumType.defaultint = 11924;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11924, 11925, 11926, 11927, 11928, 11929, 11930, 11931, 11932, 11933, 11934, 11935, 23239, 26560, 29039];
	enumType.size = 15;
	break;

case 5532:
	enumType.valueType = STRUCT;
	enumType.defaultint = 11588;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11588, 11589, 11590, 11591, 11592, 11593, 11594, 11595, 11596, 11597, 11598, 11599, 11600, 11601, 11602, 11603, 11604, 11605, 11606, 11607, 11608, 11609, 11610, 11611, 11612, 11613, 11614, 11615, 11616, 11617, 11618, 11619, 11620, 11621, 11622, 11623, 11624, 29513];
	enumType.size = 38;
	break;

case 5572:
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 8920, 9200, 9480, 9750, 10030, 13270, 13270, 13270, 13270, 13270, 13770, 13770, 13770, 13770, 13770, 14180, 14440, 14710, 14970, 15240, 15500, 15640, 15790, 15930, 16080, 16220, 16360, 16510, 16650, 16800, 16940, 16940, 16940, 16940, 16940, 19580, 19870, 20160, 20450, 20740, 21030, 21030, 21030, 21030, 21030, 21030, 21030, 21150, 21320, 21480];
	enumType.size = 50;
	break;

case 5585:
	enumType.valueMap = {5=33522};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 5586:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [None, Adventuring, Away from keyboard, Bankstanding, Chat with me, Doing dailies, Do not disturb, Getting drops, Going for cape, Here to help, Just chilling, Looking for clan, Looking for friends, Looking for group, Nothing interesting happens, PKing, Please help me, Questing, Recruiting for my clan, Roleplaying in character, Skilling, Surfing the web, Trading];
	enumType.size = 23;
	break;

case 5587:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [102367262, 102367263, 102367264];
	enumType.size = 3;
	break;

case 5689:
	enumType.valueMap = {25=8796};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 5694:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 23665, 23666, 23667, 23668, 23669, 23670, 23671, 23672, 23673, 23674, 23675, 23676, 23677, 23678];
	enumType.size = 14;
	break;

case 5695:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 23679, 23680, 23681, 23682, 23691, 23692, 23693, 23694, 23695, 23696, null, 23687, 23688, 23689, 23684, 23685, 23686, 23690, 23697, 23700, 23699, 23698, 23683];
	enumType.size = 22;
	break;

case 5696:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1119, 1125, 1121, 1123, 1127, 1131, 1133, 6322, 1135, 12971, 4091, null, 1295, 1297, 1299, 1301, 1303, 1325, 1327, 1329, 1331, 1333, 1311, 1313, 1315, 1317, 1319, 1365, 1367, 1369, 1371, 1373, null, null, 1273, 1271, 1275, null, 1361, 1355, 1357, 843, 849, 853, 857, 9174, 9177, 9179, 9181, 9183];
	enumType.size = 46;
	break;

case 5697:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2297, 23701, 23702, 23703, 23704, 23705, 1623, 23706, 23707, 23708, 23709, 23710, 1605, 23711, 23712];
	enumType.size = 15;
	break;

case 5698:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1965, 1511, 1205, 438, 327, 555, 556, 882, 1925, 314, 313, 436];
	enumType.size = 12;
	break;

case 5699:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 23713, 23717, 23721, 23725, 23729, 23737, 23733, 23741, 23745, 23749, 23753, 23757, 23761, 23765, 23769, 23774, 23778, 23782, 23786, 23790, 23794, 23798, 23802, 23806, 23810, 23814];
	enumType.size = 26;
	break;

case 5700:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 23714, 23718, 23722, 23726, 23730, 23738, 23734, 23742, 23746, 23750, 23754, 23758, 23762, 23766, 23770, 23775, 23779, 23783, 23787, 23791, 23795, 23799, 23803, 23807, 23811, 23815];
	enumType.size = 26;
	break;

case 5701:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 23715, 23719, 23723, 23727, 23731, 23739, 23735, 23743, 23747, 23751, 23755, 23759, 23763, 23767, 23771, 23776, 23780, 23784, 23788, 23792, 23796, 23800, 23804, 23808, 23812, 23816];
	enumType.size = 26;
	break;

case 5702:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 23716, 23720, 23724, 23728, 23732, 23740, 23736, 23744, 23748, 23752, 23756, 23760, 23764, 23768, 23773, 23777, 23781, 23785, 23789, 23793, 23797, 23801, 23805, 23809, 23813, 23817];
	enumType.size = 26;
	break;

case 5703:
	enumType.valueMap = {23808=Large lamp (Woodcutting), 23809=Huge lamp (Woodcutting), 23810=Small lamp (Farming), 23811=Medium lamp (Farming), 23812=Large lamp (Farming), 23813=Huge lamp (Farming), 23814=Small lamp (Summoning), 23815=Medium lamp (Summoning), 23816=Large lamp (Summoning), 23817=Huge lamp (Summoning), 23665=Tribal tattoo, 23666=Marauder tattoo, 23667=Arcane tattoo, 23668=Bold tattoo, 23669=Mystic tattoo, 23670=Intricate tattoo, 23671=Swagger stick, 23672=Swag Bag, 23673=Flying goblin hat, 23674=Auspicious katana, 23675=Curled horns, 23676=Vile horns, 23677=Long horns, 23678=Twisted horns, 23679=Lucky Armadyl godsword, 23680=Lucky Bandos godsword, 23681=Lucky Saradomin godsword, 23682=Lucky Zamorak godsword, 23683=Lucky Zamorakian spear, 23684=Lucky Armadyl helmet, 23685=Lucky Armadyl chestplate, 23686=Lucky Armadyl chainskirt, 23687=Lucky Bandos chestplate, 23688=Lucky Bandos tassets, 23689=Lucky Bandos boots, 23690=Lucky Saradomin sword, 23691=Lucky abyssal whip, 23692=Lucky dragon full helm, 23693=Lucky dragon platebody, 23694=Lucky dragon chainbody, 23695=Lucky dragon claws, 23696=Lucky dragon 2h sword, 23697=Lucky arcane spirit shield, 23698=Lucky divine spirit shield, 23699=Lucky elysian spirit shield, 23700=Lucky blessed spirit shield, 23714=Medium lamp, 23715=Large lamp, 23716=Huge lamp, 23718=Medium lamp (Attack), 23719=Large lamp (Attack), 23720=Huge lamp (Attack), 23722=Medium lamp (Strength), 23723=Large lamp (Strength), 23724=Huge lamp (Strength), 23726=Medium lamp (Defence), 23727=Large lamp (Defence), 23728=Huge lamp (Defence), 23730=Medium lamp (Ranged), 23731=Large lamp (Ranged), 23732=Huge lamp (Ranged), 23734=Medium lamp (Magic), 23735=Large lamp (Magic), 23736=Huge lamp (Magic), 23738=Medium lamp (Prayer), 23739=Large lamp (Prayer), 23740=Huge lamp (Prayer), 23742=Medium lamp (Runecrafting), 23743=Large lamp (Runecrafting), 23744=Huge lamp (Runecrafting), 23745=Small lamp (Construction), 23746=Medium lamp (Construction), 23747=Large lamp (Construction), 23748=Huge lamp (Construction), 23750=Medium lamp (Dungeoneering), 23751=Large lamp (Dungeoneering), 23752=Huge lamp (Dungeoneering), 23754=Medium lamp (Constitution), 23755=Large lamp (Constitution), 23756=Huge lamp (Constitution), 23757=Small lamp (Agility), 23758=Medium lamp (Agility), 23759=Large lamp (Agility), 23760=Huge lamp (Agility), 23761=Small lamp (Herblore), 23762=Medium lamp (Herblore), 23763=Large lamp (Herblore), 23764=Huge lamp (Herblore), 23765=Small lamp (Thieving), 23766=Medium lamp (Thieving), 9174=Bronze crossbow, 23767=Large lamp (Thieving), 23768=Huge lamp (Thieving), 9177=Iron crossbow, 23770=Medium lamp (Crafting), 23771=Large lamp (Crafting), 9179=Steel crossbow, 23773=Huge lamp (Crafting), 9181=Mithril crossbow, 23774=Small lamp (Fletching), 23775=Medium lamp (Fletching), 9183=Adamant crossbow, 23776=Large lamp (Fletching), 23777=Huge lamp (Fletching), 9185=Rune crossbow, 23778=Small lamp (Slayer), 23779=Medium lamp (Slayer), 23780=Large lamp (Slayer), 23781=Huge lamp (Slayer), 23782=Small lamp (Hunter), 23783=Medium lamp (Hunter), 23784=Large lamp (Hunter), 23785=Huge lamp (Hunter), 23787=Medium lamp (Mining), 23788=Large lamp (Mining), 23789=Huge lamp (Mining), 23791=Medium lamp (Smithing), 23792=Large lamp (Smithing), 23793=Huge lamp (Smithing), 23795=Medium lamp (Fishing), 23796=Large lamp (Fishing), 23797=Huge lamp (Fishing), 23799=Medium lamp (Cooking), 23800=Large lamp (Cooking), 23801=Huge lamp (Cooking), 23803=Medium lamp (Firemaking), 23804=Large lamp (Firemaking), 23805=Huge lamp (Firemaking), 23807=Medium lamp (Woodcutting)};
	enumType.valueType = STRING;
	enumType.defaultstr = "Awesome Members Object!";
	enumType.keyType = OBJ;
	enumType.size = 129;
	break;

case 5704:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14540, 14544, 14548, 14572, 14573, 14575, 14576, 14577, 14578, 14580, 14581, 14582, 14552, 14556, 14560, 14564, 14579, 14568, 14569, 14574, 14570, 14571, 14583, 14584, 14591, 14585, 14586, 14587, 14588, 14590, 14589, 14592, 14593, 14594, 14595, 14596, 14597, 14598, 14599, 14600, 14601, 14602, 14603, 14604, 14605, 14606, 14607, 14608, 14609, 14610];
	enumType.size = 50;
	break;

case 5705:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 9868;
	enumType.keyType = INT;
	enumType.valueArray = [9868, 9893, 9895, 14243];
	enumType.size = 4;
	break;

case 5706:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 9899;
	enumType.keyType = INT;
	enumType.valueArray = [9899, 9906];
	enumType.size = 2;
	break;

case 5707:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 9897;
	enumType.keyType = INT;
	enumType.valueArray = [9897, 14235, 9900];
	enumType.size = 3;
	break;

case 5708:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 9889;
	enumType.keyType = INT;
	enumType.valueArray = [9889, 9888];
	enumType.size = 2;
	break;

case 5709:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 14238;
	enumType.keyType = INT;
	enumType.valueArray = [14238, 9874, 9884];
	enumType.size = 3;
	break;

case 5710:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 14244;
	enumType.keyType = INT;
	enumType.valueArray = [14244, 14233, 9907];
	enumType.size = 3;
	break;

case 5711:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 9902;
	enumType.keyType = INT;
	enumType.valueArray = [9902, 14240];
	enumType.size = 2;
	break;

case 5712:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 14236;
	enumType.keyType = INT;
	enumType.valueArray = [14236, 9867, 14237, 14232, 9886, 9866];
	enumType.size = 6;
	break;

case 5713:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 14241;
	enumType.keyType = INT;
	enumType.valueArray = [14241, 9880, 9903, 14242];
	enumType.size = 4;
	break;

case 5723:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 19019, 19022, 19025, 19061, 21088, 21091, 20281, 26532, 26590, null, 24196, 24199, null, 21109, 7013, 14992, null, 28165, 28168, null, null, null, null, 28444, null, null, null, null, null, null, null, null, 24353, 24356, 24359, 28957, null, null, null, 29786, 29791, 31340, 31341, null, null, null, 32042, 32044, 32046, 32048];
	enumType.size = 29;
	break;

case 5724:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [9765, 9766, 9767, 9768, 9769, 9770, 9771, 9772];
	enumType.size = 8;
	break;

case 5725:
	enumType.valueType = OBJ;
	enumType.defaultint = 23880;
	enumType.keyType = INT;
	enumType.valueArray = [23880, 23882, 23884, 23886, 23888, 23890, 23892, 23894];
	enumType.size = 8;
	break;

case 5726:
	enumType.valueMap = {49335440=Port Sarim, 41487160=Oo'glog, 34164555=Lunar Isle, 51498548=Wilderness Volcano, 43158805=Ardougne, 52661131=Bandit Camp, 54021233=Al Kharid, 48614732=Falador, 304614689=Prifddinas, 50875619=Draynor Village, 50253234=Edgeville, 47500761=Burthorpe, 41438231=Yanille, 52661553=Varrock, 57626044=Canifis, 38768024=Eagles' Peak, 44437086=Fremennik Province, 44060059=Seers' Village, 47156595=Taverley, 36932686=Tirannwn, 52972694=Lumbridge, 45239372=Karamja, 46386556=Catherby, 577407637=Ashdale};
	enumType.valueType = STRING;
	enumType.defaultstr = "Home";
	enumType.keyType = TILE;
	enumType.size = 24;
	break;

case 5727:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [82771982, 82771983, 82771984, 82771985, 82771986, 82771987, 82771988, 82771989, 82771990, 82771991, 82771992, 82771993, 82771994, 82771995, 82771996, 82771997, 82771998, 82771999, 82772000, 82772012, 82772013, 82772015, 82772022, 82772024, 82772027, 82772031];
	enumType.size = 26;
	break;

case 5729:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 10329, 10313, 10314, 10315, 10316, 10317, 10318, 10319, 10320, 10321, 10322];
	enumType.size = 11;
	break;

case 5730:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 10362, 10373, 10384, 10383, 10386, 10387, 10385, 10388];
	enumType.size = 8;
	break;

case 5731:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 16295, 16361, 17754, 17883, 17444, 17794, 17446, 17678];
	enumType.size = 8;
	break;

case 5732:
	enumType.valueType = OBJ;
	enumType.defaultint = 16295;
	enumType.keyType = INT;
	enumType.valueArray = [null, 16295, 16297, 16299, 16301, 16303, 16305, 16307, 16309, 16311, 16313, 16315];
	enumType.size = 11;
	break;

case 5733:
	enumType.valueType = OBJ;
	enumType.defaultint = 16361;
	enumType.keyType = INT;
	enumType.valueArray = [null, 16361, 16363, 16365, 16367, 16369, 16371, 16373, 16375, 16377, 16379, 16381];
	enumType.size = 11;
	break;

case 5734:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 18202, 18204, 18206, 18208, 18210, 18212, 18214, 18216, 18218, 18220, 18222, 18224, 18226, 18228, 18230, 18232, 18234, 18236, 18238, 18240, 18242, 18244, 18246, 18248, 18250, 18252, 18254, 18256, 18258, 18260, 18262, 18264, 18266, 18268, 18270, 18272, 18274, 18276, 18278, 18280, 18282, 18284, 18286, 18288, 18290, 18292, 18294, 18296, 18298, 18300, 18302, 18304, 18306, 18308, 18310, 18312, 18314, 18316, 18318, 18320, 18322, 18324, 18326, 18328];
	enumType.size = 64;
	break;

case 5735:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [9801, 1113, 1114, 1115, 1117, 1127, 1129, 1131, 1130, 1128, 1116, 1118, 1119, 1120, 1123, 1122, 1121, 1124, 1125, 1126, 28120];
	enumType.size = 21;
	break;

case 5756:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 224, 271, 2674, 872, 0, 1637, null, null, 0, 0];
	enumType.size = 8;
	break;

case 5760:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [10654, 10655, 10656, 10657, 10658, 10659, 10660, 10661, 10662, 10663, 10664, 10665, 10666, 10667, 10668, 10669];
	enumType.size = 16;
	break;

case 5761:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [10638, 10639, 10640, 10641, 10642, 10643, 10644, 10645, 10646, 10647, 10648, 10649, 10650, 10651, 10652, 10653];
	enumType.size = 16;
	break;

case 5762:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [10622, 10623, 10624, 10625, 10626, 10627, 10628, 10629, 10630, 10631, 10632, 10633, 10634, 10635, 10636, 10637];
	enumType.size = 16;
	break;

case 5763:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [10606, 10607, 10608, 10609, 10610, 10611, 10612, 10613, 10614, 10615, 10616, 10617, 10618, 10619, 10620, 10621];
	enumType.size = 16;
	break;

case 5767:
	enumType.valueType = STRING;
	enumType.defaultstr = "No";
	enumType.keyType = INT;
	enumType.valueArray = [No, Anne, Aika, Justine, Jan, Charlotte, Ching, Maladetta, Riscisa, Kalista, Ariana, Red-Handed Jill, Grace, Margaret, Mary, Morgan, Rachel, The Bewitching, The Vile, Oathbreaker, Jillian, Ravenna, Himiko, Silver, Nanako];
	enumType.size = 25;
	break;

case 5768:
	enumType.valueType = STRING;
	enumType.defaultstr = "Captain";
	enumType.keyType = INT;
	enumType.valueArray = [Captain, Teach, Bligh, Bonny, Drake, Rackham, Shih, Ng-Tsai, ad Din, Tristar, Piwar, Thorn, Silver, the Cruel, Hook, Song, Sharktooth, Wytche, Skulltaker, Kidd, Morgan, Bonny, Read, Fang, the Ghost];
	enumType.size = 25;
	break;

case 5769:
	enumType.valueType = STRING;
	enumType.defaultstr = "Average";
	enumType.keyType = INT;
	enumType.valueArray = [Exuberant, Abrasive, Calm, Vicious, Eccentric, Approachable];
	enumType.size = 6;
	break;

case 5770:
	enumType.valueType = MODEL;
	enumType.defaultint = 82385;
	enumType.keyType = INT;
	enumType.valueArray = [-1, 82387, 82391, 82402, 82401, 82400, 82406, 82404, 82413];
	enumType.size = 9;
	break;

case 5771:
	enumType.valueType = MODEL;
	enumType.defaultint = 82445;
	enumType.keyType = INT;
	enumType.valueArray = [-1, 82440, 82443, 82455, 82447, 82448, 82458, 82464, 82460];
	enumType.size = 9;
	break;

case 5772:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 17350, 17349, 17351, 17353, 17352, 17354, 17356, 17355, 17357];
	enumType.size = 9;
	break;

case 5773:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5775, 5776];
	enumType.size = 2;
	break;

case 5774:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Tradeable Scrimshaws, Untradeable Scrimshaws];
	enumType.size = 2;
	break;

case 5775:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26283, 26286, 33896, 26289, 26292, 33901, 26295, 26301, 26307, 26298, 26304, 26310];
	enumType.size = 12;
	break;

case 5776:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33892, 33893, 33900, 33894, 33895, 33905, 33909, 33911, 33913, 33910, 33912, 33914];
	enumType.size = 12;
	break;

case 5838:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [10055, 10056, 10058, 10057, 10060, 10061, 10062, 10059];
	enumType.size = 8;
	break;

case 5839:
	enumType.valueMap = {83427409=10051, 83427408=10050, 83427411=10053, 83427410=10052, 83427412=10054, 83427401=10043, 83427400=10042, 83427403=10045, 83427402=10044, 83427405=10047, 83427404=10046, 83427407=10049, 83427406=10048, 83427397=10039, 83427399=10041, 83427398=10040};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 16;
	break;

case 5840:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [83427397, 83427398, 83427399, 83427400, 83427401, 83427402, 83427403, 83427404, 83427405, 83427406, 83427407, 83427408, 83427409, 83427410, 83427411, 83427412];
	enumType.size = 16;
	break;

case 5841:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [10039, 10040, 10041, 10042, 10043, 10044, 10045, 10046, 10047, 10048, 10049, 10050, 10051, 10052, 10053, 10054];
	enumType.size = 16;
	break;

case 5842:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [15, 45, 130, 370, 1000, 2800, 7500, 20000, 55000, 125000];
	enumType.size = 10;
	break;

case 5853:
	enumType.valueMap = {1=Recruit, 2=Corporal, 3=Sergeant, 4=Lieutenant, 5=Captain, 6=General, 7=Channel Owner, 127=Jagex Mod};
	enumType.valueType = STRING;
	enumType.defaultstr = "Not ranked";
	enumType.keyType = INT;
	enumType.size = 8;
	break;

case 5868:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [84082702, 84082703, 84082704, 84082705, 84082706, 84082707, 84082708, 84082709, 84082710, 84082711, 84082712, 84082713, 84082714, 84082715, 84082716, 84082717];
	enumType.size = 16;
	break;

case 5874:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 24427];
	enumType.size = 1;
	break;

case 5875:
	enumType.valueMap = {24427=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 5876:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 24428];
	enumType.size = 1;
	break;

case 5877:
	enumType.valueMap = {24428=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 5878:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 24429];
	enumType.size = 1;
	break;

case 5879:
	enumType.valueMap = {24429=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 5880:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 24430];
	enumType.size = 1;
	break;

case 5881:
	enumType.valueMap = {24430=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 5886:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 110, 230, 470, 900, 1860];
	enumType.size = 6;
	break;

case 5887:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 20, 50, 110, 230, 500];
	enumType.size = 6;
	break;

case 5890:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 15701;
	enumType.keyType = INT;
	enumType.valueArray = [15701, 15666];
	enumType.size = 2;
	break;

case 5891:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 15683;
	enumType.keyType = INT;
	enumType.valueArray = [15683, 15690, 15664];
	enumType.size = 3;
	break;

case 5892:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 15685;
	enumType.keyType = INT;
	enumType.valueArray = [15685, 15703];
	enumType.size = 2;
	break;

case 5893:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 15661;
	enumType.keyType = INT;
	enumType.valueArray = [15661, 15689, 15705];
	enumType.size = 3;
	break;

case 5894:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 15677;
	enumType.keyType = INT;
	enumType.valueArray = [15677, 15687, 15674];
	enumType.size = 3;
	break;

case 5895:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 15667;
	enumType.keyType = INT;
	enumType.valueArray = [15667, 15707];
	enumType.size = 2;
	break;

case 5896:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 15698;
	enumType.keyType = INT;
	enumType.valueArray = [15698, 15671, 15680, 15678, 15706, 15694];
	enumType.size = 6;
	break;

case 5897:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 15670;
	enumType.keyType = INT;
	enumType.valueArray = [15670, 15693, 15688, 15675];
	enumType.size = 4;
	break;

case 5898:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Cowardly <col=999999>[name]</col>, <col=999999>[name]</col> the Redundant, Everyone attack <col=999999>[name]</col>, Smelly <col=999999>[name]</col>, <col=999999>[name]</col> the Idiot, Sir Lame <col=999999>[name]</col>, <col=999999>[name]</col> the Flamboyant, Weakling <col=999999>[name]</col>, <col=999999>[name]</col> was punished., <col=999999>[name]</col> lost, <col=999999>[name]</col>... you fail, No-mates <col=999999>[name]</col>, <col=999999>[name]</col> ate dirt, Delusional <col=999999>[name]</col>, <col=999999>[name]</col> the Respawner, Cutey-pie <col=999999>[name]</col>, <col=999999>[name]</col> the Fail Magnet, <col=999999>[name]</col> was terminated, Lazy <col=999999>[name]</col>, <col=999999>[name]</col>? Who?];
	enumType.size = 20;
	break;

case 5899:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 12, 12, 36, 36, 36, 36, 36, 36, 36, 36];
	enumType.size = 10;
	break;

case 5900:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 12, 12, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30];
	enumType.size = 20;
	break;

case 5901:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 24, 36, 48, 60, 15];
	enumType.size = 5;
	break;

case 5909:
	enumType.valueType = INT;
	enumType.defaultint = 1000;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1000, 1000, 1000, 1000, 1000, 2884, 4769, 6654, 8538, 10423, 12308, 14193, 16077, 17962, 19847, 21731, 23616, 25501, 27386, 29270, 31155, 33040, 34924, 36809, 38694, 40579, 42463, 44348, 46233, 48117, 50002, 51887, 53772, 55656, 57541, 59426, 61310, 63195, 65080, 66965, 68849, 70734, 72619, 74503, 76388, 78273, 81987, 85701, 89415, 93129, 96843, 100557, 104271, 107985, 111700, 115414, 119128, 122842, 126556, 130270, 133984, 137698, 141412, 145126, 148840, 152554, 156268, 159982, 163697, 167411, 171125, 174839, 178553, 182267, 185981, 189695, 193409, 197123, 200837, 204551, 208265, 211980, 215694, 219408, 223122, 226836, 230550, 234264, 237978, 241692, 245406, 249120, 252834, 256548, 260262, 263977, 267691, 271405, 275119, 278833, 282547, 286261, 289975, 293689, 297403, 301117, 304831, 308545, 312260, 315974, 319688, 323402, 327116, 330830, 334544, 338258, 341972, 345686, 349400, 353114, 356828, 360542, 364257, 367971, 371685, 375399, 379113, 382827, 386541, 390255, 393969, 397683, 401397, 405111, 408825, 412540, 416254, 419602, 423133, 426664, 430195, 433726, 437257, 440789, 444320, 447851, 451382, 454913, 458444, 461975, 465507, 469038, 472569, 476100, 479631, 483162, 486693, 490225, 493756, 497287, 500818, 504349, 507880, 511411, 514943, 518474, 522005, 525536];
	enumType.size = 168;
	break;

case 5910:
	enumType.valueType = INT;
	enumType.defaultint = 100;
	enumType.keyType = INT;
	enumType.valueArray = [null, 100, 100, 100, 100, 100, 288, 476, 665, 853, 1042, 1230, 1419, 1607, 1796, 1984, 2173, 2361, 2550, 2738, 2927, 3115, 3304, 3492, 3680, 3869, 4057, 4246, 4434, 4623, 4811, 5000, 5188, 5377, 5565, 5754, 5942, 6131, 6319, 6508, 6696, 6884, 7073, 7261, 7450, 7638, 7827, 8198, 8570, 8941, 9312, 9684, 10055, 10427, 10798, 11170, 11541, 11912, 12284, 12655, 13027, 13398, 13769, 14141, 14512, 14884, 15255, 15626, 15998, 16369, 16741, 17112, 17483, 17855, 18226, 18598, 18969, 19340, 19712, 20083, 20455, 20826, 21198, 21569, 21940, 22312, 22683, 23055, 23426, 23797, 24169, 24540, 24912, 25283, 25654, 26026, 26397, 26769, 27140, 27511, 27883, 28254, 28626, 28997, 29368, 29740, 30111, 30483, 30854, 31226, 31597, 31968, 32340, 32711, 33083, 33454, 33825, 34197, 34568, 34940, 35311, 35682, 36054, 36425, 36797, 37168, 37539, 37911, 38282, 38654, 39025, 39396, 39768, 40139, 40511, 40882, 41254, 41625, 41960, 42313, 42666, 43019, 43372, 43725, 44078, 44432, 44785, 45138, 45491, 45844, 46197, 46550, 46903, 47256, 47610, 47963, 48316, 48669, 49022, 49375, 49728, 50081, 50434, 50788, 51141, 51494, 51847, 52200, 52553];
	enumType.size = 168;
	break;

case 5911:
	enumType.valueMap = {7041=10517, 7042=10518, 7043=10519, 7044=10520, 7045=10521, 7046=10522, 7047=10523, 7048=10524};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 5913:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 46763366, 42896697, 42454352, 37998192, 46893987, 50859365, 47648145, 51875043, 53169240, 50646179, null, 59593695, 40914361, 51776651];
	enumType.size = 13;
	break;

case 5914:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 9891;
	enumType.keyType = INT;
	enumType.valueArray = [9891, 14230, 9908, 9892];
	enumType.size = 4;
	break;

case 5915:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 15663;
	enumType.keyType = INT;
	enumType.valueArray = [15663, 15668, 15665, 15672, 15704, 15712, 15696, 15676, 15695, 15692, 15684, 15699];
	enumType.size = 12;
	break;

case 5916:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 15756;
	enumType.keyType = INT;
	enumType.valueArray = [15756, 15758, 15757, 15755];
	enumType.size = 4;
	break;

case 5917:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 15765;
	enumType.keyType = INT;
	enumType.valueArray = [15765, 15766, 15760, 15759, 15769, 15768, 15767, 15763, 15761];
	enumType.size = 9;
	break;

case 5918:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24494, 24495, 1735, 24502, 24501, 24497, 24496, 8779, 8781, 8783, 24507, 24499, 24503, 24504];
	enumType.size = 14;
	break;

case 5919:
	enumType.valueMap = {0=9, 8=30, 9=10, 7=100};
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 5924:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 6, 6, 5, 4, 4, 3, 2, 2, 1, 1, 0, 0, 0];
	enumType.size = 35;
	break;

case 5925:
	enumType.valueType = INT;
	enumType.defaultint = 255;
	enumType.keyType = INT;
	enumType.valueArray = [254, 249, 240, 227, 211, 193, 172, 150, 128, 105, 83, 62, 44, 28, 15, 6, 1, 0, 3, 10, 21, 35, 53, 72, 94, 116, 139, 161, 183, 202, 220, 234, 245, 252, 255];
	enumType.size = 35;
	break;

case 5926:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [sweet, savoury, bitter, sour, fruity, spicy];
	enumType.size = 6;
	break;

case 5933:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24525, 24536, 24538, 24527, 24528, 24529, 24541, 24542, 24531, 24532, 24533, 24534, 24535, 24530, 24537, 24539, 24526, 24540];
	enumType.size = 18;
	break;

case 5934:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36];
	enumType.size = 19;
	break;

case 5935:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];
	enumType.size = 19;
	break;

case 5936:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16466;
	enumType.keyType = INT;
	enumType.valueArray = [16466, 16506, 16492, 16441];
	enumType.size = 4;
	break;

case 5937:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16439;
	enumType.keyType = INT;
	enumType.valueArray = [16439, 16464, 16495, 16452];
	enumType.size = 4;
	break;

case 5938:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16505;
	enumType.keyType = INT;
	enumType.valueArray = [16505, 16469, 16468];
	enumType.size = 3;
	break;

case 5939:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16503;
	enumType.keyType = INT;
	enumType.valueArray = [16503, 16501, 16475, 16489];
	enumType.size = 4;
	break;

case 5940:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16473;
	enumType.keyType = INT;
	enumType.valueArray = [16473, 16451, 16476];
	enumType.size = 3;
	break;

case 5941:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16471;
	enumType.keyType = INT;
	enumType.valueArray = [16471, 16502, 16450];
	enumType.size = 3;
	break;

case 5942:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16496;
	enumType.keyType = INT;
	enumType.valueArray = [16496, 16443, 16446, 16440];
	enumType.size = 4;
	break;

case 5943:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16493;
	enumType.keyType = INT;
	enumType.valueArray = [16493, 16449, 16480];
	enumType.size = 3;
	break;

case 5944:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16462;
	enumType.keyType = INT;
	enumType.valueArray = [16462, 16461, 16456, 16454, 16472];
	enumType.size = 5;
	break;

case 5945:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16504;
	enumType.keyType = INT;
	enumType.valueArray = [16504, 16491, 16457];
	enumType.size = 3;
	break;

case 5946:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16490;
	enumType.keyType = INT;
	enumType.valueArray = [16490, 16485, 16499];
	enumType.size = 3;
	break;

case 5947:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16458;
	enumType.keyType = INT;
	enumType.valueArray = [16458, 16447, 16494];
	enumType.size = 3;
	break;

case 5948:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16507;
	enumType.keyType = INT;
	enumType.valueArray = [16507, 16460, 16470];
	enumType.size = 3;
	break;

case 5949:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16459;
	enumType.keyType = INT;
	enumType.valueArray = [16459, 16442];
	enumType.size = 2;
	break;

case 5950:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16500;
	enumType.keyType = INT;
	enumType.valueArray = [16500, 16497, 16478];
	enumType.size = 3;
	break;

case 5951:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16474;
	enumType.keyType = INT;
	enumType.valueArray = [16474, 16487, 16479, 16465];
	enumType.size = 4;
	break;

case 5952:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16455;
	enumType.keyType = INT;
	enumType.valueArray = [16455, 16482, 16481];
	enumType.size = 3;
	break;

case 5953:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16483;
	enumType.keyType = INT;
	enumType.valueArray = [16483, 16448];
	enumType.size = 2;
	break;

case 5954:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16488;
	enumType.keyType = INT;
	enumType.valueArray = [16488, 16445];
	enumType.size = 2;
	break;

case 5955:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16508;
	enumType.keyType = INT;
	enumType.valueArray = [16508, 16463, 16453];
	enumType.size = 3;
	break;

case 5956:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16444;
	enumType.keyType = INT;
	enumType.valueArray = [16444, 16467, 16484];
	enumType.size = 3;
	break;

case 5957:
	enumType.valueType = STRING;
	enumType.defaultstr = "Select a Preset";
	enumType.keyType = INT;
	enumType.valueArray = [null, Preset 1, Preset 2, Preset 3];
	enumType.size = 3;
	break;

case 5958:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 5989, 5990, 5991, 5992, 7229];
	enumType.size = 5;
	break;

case 5959:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 5972, 5971, 5973, 5974, 7231];
	enumType.size = 5;
	break;

case 5960:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [85917826, 85917827, 85917828, 85917829, 85917830, 85917831, 85917832, 85917833, 85917834, 85917835, 85917836, 85917837, 85917838, 85917839, 85917840, 85917841, 85917842, 85917843, 85917844, 85917845, 85917846, 85917847];
	enumType.size = 22;
	break;

case 5961:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [85917849, 85917850, 85917851, 85917852, 85917854, 85917855, 85917856, 85917857, 85917858, 85917859, 85917860, 85917861, 85917862, 85917863, 85917864, 85917865, 85917866, 85917867, 85917868, 85917869, 85917870, 85917871];
	enumType.size = 22;
	break;

case 5962:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [85918283, 85918289, 85918307, 85918305, 85918294, 85918290, 85918287, 85918306, 85918295, 85918286, 85918284, 85918288, 85918291, 85918285, 85918293, 85918292];
	enumType.size = 16;
	break;

case 5963:
	enumType.valueType = ANIMATION;
	enumType.defaultint = 855;
	enumType.keyType = INT;
	enumType.valueArray = [17113, 17115, 17116, 17117];
	enumType.size = 4;
	break;

case 5964:
	enumType.valueType = INT;
	enumType.defaultint = 80;
	enumType.keyType = INT;
	enumType.valueArray = [80, 107, 90, 132];
	enumType.size = 4;
	break;

case 5965:
	enumType.valueType = ANIMATION;
	enumType.defaultint = 866;
	enumType.keyType = INT;
	enumType.valueArray = [12931, 17111, 861, 2113];
	enumType.size = 4;
	break;

case 5966:
	enumType.valueType = INT;
	enumType.defaultint = 5;
	enumType.keyType = INT;
	enumType.valueArray = [168, 185, 87, 51];
	enumType.size = 4;
	break;

case 5967:
	enumType.valueType = ANIMATION;
	enumType.defaultint = 9843;
	enumType.keyType = INT;
	enumType.valueArray = [9843, 9840, 9827, 9746];
	enumType.size = 4;
	break;

case 5968:
	enumType.valueType = INT;
	enumType.defaultint = 192;
	enumType.keyType = INT;
	enumType.valueArray = [192, 225, 128, 128];
	enumType.size = 4;
	break;

case 5969:
	enumType.valueType = ANIMATION;
	enumType.defaultint = 9843;
	enumType.keyType = INT;
	enumType.valueArray = [9847, 9841, 9827, 9746];
	enumType.size = 4;
	break;

case 5970:
	enumType.valueType = INT;
	enumType.defaultint = 192;
	enumType.keyType = INT;
	enumType.valueArray = [192, 225, 128, 128];
	enumType.size = 4;
	break;

case 5971:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Head Items, Capes, Necklaces, Main Hand Items, Body Items, Off-hand Items, null, Leg Items, null, Gloves, Boots, null, null, null, Effects, null, null, null, Wings, Keepsake Box, Full Outfits, Reset Outfit];
	enumType.size = 14;
	break;

case 5972:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [null, Hairstyles, Beards, Premium Hairstyles, Premium Hairstyles, Premium Beards];
	enumType.size = 5;
	break;

case 5973:
	enumType.valueMap = {0=Titles of Nobility, 1=Military Ranks, 2=Accolades, 3=Descriptions, 4=Miscellaneous Titles, 20=Reset Title};
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.size = 6;
	break;

case 5974:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Skill Animations, Spell Animations, null, null, PvP Victim Death Animations, Walk Animations, Rest Animations];
	enumType.size = 5;
	break;

case 5975:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24583, null, null, null, 24585, null, null, 24587, null, 24591, 24589];
	enumType.size = 5;
	break;

case 5976:
	enumType.valueMap = {0=24595, 10=24601, 4=24597, 7=24599};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 5977:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24605, 24613, null, null, 24607, null, null, 24609, null, null, 24611];
	enumType.size = 5;
	break;

case 5978:
	enumType.valueMap = {1=24623, 10=24621, 4=24617, 7=24619};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 5979:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24627, 24635, null, null, 24629, null, null, 24631, null, null, 24633];
	enumType.size = 5;
	break;

case 5980:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24639, 24649, null, 24651, 24641, 26029, null, 24643, null, 24647, 24645];
	enumType.size = 8;
	break;

case 5981:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24567];
	enumType.size = 1;
	break;

case 5982:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24569];
	enumType.size = 1;
	break;

case 5983:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24571];
	enumType.size = 1;
	break;

case 5984:
	enumType.valueMap = {5=26025, 3=24573};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 5985:
	enumType.valueMap = {5=26027, 3=24575};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 5986:
	enumType.valueMap = {3=24577};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 5987:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Working towards a party hat., Ex-noob., If you're feeling down, level up!, Zamorak till I die., Guthix till I die., Saradomin till I die., Born to PK., Will dance for cash., RuneScape Classic veteran., Happy holidays!, I challenge you to a duel!, Secret penguin., Ask me anything., Aiming for a comp cape., I'd do anything for XP, but I won't do that., I am victorious!, Offering items for sale., Seeking a Dungeoneering party., Desperately seeking clanmates., Best update ever!];
	enumType.size = 20;
	break;

case 5988:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [85983270, 85983278, 85983286, 85983294, 85983302, 85983310, 85983318, 85983326, 85983334, 85983342, 85983350, 85983358, 85983366, 85983374, 85983382, 85983390, 85983398, 85983406, 85983414, 85983422];
	enumType.size = 20;
	break;

case 5989:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13773, 13774, 13775, 13776, 13777, 13778, 13779, 13780, 13781, 13782, 13783, 13784, 13785, 13786, 13787, 13788, 13789, 13790, 13791, 13792, 13793, 13794, 13795, 13796, 13797, 13798, 13799, 13800, 13801, 13802, 13803, 13804, 13805, 13806, 13807, 13808, 13809, 13810, 13811, 13812, 13813, 13814, 13815, 13816, 13817, 13818, 13819, 13820, 13821, 13822, 13823, 13824, 13825, 13826, 13827, 13828, 13829, 13830, 13831, 13832, 13833, 13834, 13835, 13836, 13837, 13838, 13839, 13840, 13841, 13842, 13843, 13844, 13845, 13846, 13847, 13848, 13849, 13850, 13851, 13852, 13853, 13854, 13855, 13856, 13857, 13858, 13859, 13860, 13861, 14504, 14505, 14506, 14507, 14536, 14537, 3126, 3125, 3109, 1534, 17318, 17319, 17320, 17321, 17322, 17323, 22587, 22588, 22577, 22578, 27763, 27764, 27754, 27755, 27777, 27776, 27785, 27784];
	enumType.size = 117;
	break;

case 5990:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5692, 19139, 19140, 21095, 21096, 21097, 21102, 21103, 11177, 11178, 11179, 11180, 11181, 11182, 11183, 11184, 11185, 11186, 21317, 24294, 11113, 11114, 11115, 11116, 11117, 11118, 11119, 11120, 11121, 11122, 11123, 11124, 11125, 11126, 11127, 11128, 11129, 11130, 11131, 11132, 11133, 11134, 11135, 11136, 11137, 11138, 11139, 11140, 11141, 11142, 11143, 11144, 11145, 11146, 11147, 11149, 11150, 11151, 11398, 11399, 11400, 11401, 11402, 11403, 7231, 7233, 7234, 7237, 7238, 7235, 7239, 7240, 7241, 7245, 7246, 7244, 7247, 7249, 7250, 12326, 12328, 12329, 12327, 13674, 13675, 13676, 13677, 13678, 13679, 13680, 13681, 13682, 13683, 13684, 13685, 13686, 13687, 13688, 13689, 13690, 13691, 13692, 13693, 13694, 13863, 13864, 13865, 13866, 13867, 13868, 28519, 28520, 28521, 28522, 28523, 28524, 28525, 28526, 28527, 28528, 28529, 28530, 28531, 28532, 28533, 28534, 28535, 28536, 28537, 28538, 32106, 32107, 32108, 32109, 32110, 32111, 32112, 32113, 32114, 32115, 11390, 11391, 11392, 11393, 11394, 11395, 11397, 11396, 14490, 14491, 14492, 14493, 14494, 14495, 14496, 14497, 14498, 14499, 14500, 14501, 14502, 975, 3110, 3119, 3120, 3121, 3122, 3128, 3131, 3132, 3134, 3138, 5524, 16548, 16549, 16550, 16551, 16552, 16553, 16554, 16555, 16556, 16557, 16558, 16559, 16560, 16561, 16562, 16563, 16564, 16565, 17294, 17295, 17296, 17297, 17298, 17299, 17306, 17307, 17308, 17309, 17310, 17311, 17300, 17301, 17302, 17303, 17304, 17305, 17312, 17313, 17314, 17315, 17316, 17317, 17330, 17331, 17332, 17333, 17334, 18792, 18793, 383, 19042, 19043, 19044, 19046, 19047, 19045, 19048, 19049, 19050, 19051, 19053, 19054, 19052, 13697, 14961, 14962, 14963, 14964, 19147, 19148, 19149, 19150, 19151, 19152, 19153, 19154, 19155, 19156, 19157, 19158, 19159, 19160, 19167, 19168, 19169, 19170, 19171, 19172, 19173, 19161, 19162, 19163, 19164, 19165, 19166, 19125, 19126, 19127, 19128, 19129, 19130, 19131, 19132, 19133, 19134, 19135, 19136, 19137, 9891, 14509, 14510, 14511, 19059, 19060, 19196, 19213, 19214, 19215, 19216, 19217, 19218, 19219, 19220, 19221, 19222, 19223, 19224, 19225, 19226, 19227, 19228, 19229, 19230, 19231, 19232, 19233, 19234, 19235, 14289, 19308, 19309, 19310, 19312, 19311, 19313, 19315, 19316, 19317, 19319, 19318, 19320, 19321, 19322, 19323, 19325, 19324, 19326, 19328, 19329, 19330, 19332, 19331, 19333, 19417, 19418, 19419, 19421, 19420, 19422, 19195, 19197, 19208, 19209, 19306, 19307, 19210, 19534, 19535, 19536, 19538, 19537, 19539, 19561, 19562, 19563, 19565, 19564, 19566, 19567, 19568, 19569, 19571, 19570, 19572, 19573, 19574, 19575, 19577, 19576, 19578, 19579, 19580, 19581, 19583, 19582, 19584, 20301, 21375, 21376, 21377, 21378, 21379, 21380, 21381, 21382, 21383, 21384, 21385, 21386, 21387, 21388, 21389, 21390, 21391, 21392, 21393, 21394, 21395, 21396, 21397, 21398, 21399, 21400, 21401, 21402, 21403, 21404, 21405, 21406, 21407, 21408, 21409, 21410, 21411, 21412, 21413, 21414, 21415, 21416, 21417, 21418, 21419, 21420, 21421, 21422, 21423, 21424, 21425, 21064, 21065, 22576, 22579, 22580, 22581, 22582, 22586, 22589, 22590, 22591, 22592, 22571, 23004, 23005, 23006, 23007, 23008, 23009, 23010, 23011, 23012, 23013, 23014, 23015, 23016, 23017, 23018, 23019, 23020, 23021, 23022, 23023, 23024, 23025, 23026, 23027, 23028, 23029, 23030, 23031, 23032, 23033, 23034, 23035, 23036, 23037, 23038, 23039, 23040, 23041, 23042, 23043, 23044, 23045, 23046, 23047, 23048, 23049, 23050, 23051, 23052, 23053, 23054, 23055, 23056, 23057, 23058, 23059, 23060, 23061, 23062, 23063, 23064, 23065, 23066, 23067, 23068, 23069, 23070, 23072, 23071, 23073, 23074, 23075, 23076, 23077, 23078, 23079, 23080, 23081, 23197, 23198, 23199, 23200, 23201, 23202, 23203, 23204, 23205, 23206, 23207, 23208, 23209, 23210, 23211, 23212, 23213, 23214, 23215, 23216, 23217, 23218, 23219, 23220, 23221, 23222, 19614, 19644, 19647, 19648, 19649, 19650, 22565, 22566, 22567, 22568, 22569, 22570, 23111, 23112, 23113, 23114, 23115, 23121, 23122, 23123, 23124, 23125, 11051, 11052, 11053, 11054, 11055, 11056, 24043, 24044, 24045, 24046, 24047, 24048, 24051, 24052, 24053, 24054, 24055, 24056, 24057, 24125, 24136, 24137, 24138, 24139, 24140, 24042, 24166, 24167, 24168, 24169, 24170, 24171, 24173, 24174, 24175, 24176, 24177, 24178, 24179, 21104, 21105, 21106, 21107, 24191, 24192, 24193, 24194, 24980, 24981, 24982, 24983, 24984, 24985, 24986, 24987, 24988, 24989, 24990, 24991, 24992, 24993, 24994, 24995, 24996, 24997, 24998, 24999, 25000, 26469, 25001, 26470, 25002, 25003, 25004, 25005, 25006, 25007, 26471, 25008, 25009, 25010, 25011, 26472, 25697, 25698, 25745, 25746, 25747, 25748, 25749, 25750, 25751, 25752, 25755, 25757, 25758, 25759, 25760, 25761, 6975, 25026, 25027, 25677, 25678, 25679, 25680, 25681, 25682, 25683, 25684, 25765, 25766, 25767, 25772, 25773, 25774, 25775, 25780, 25781, 25782, 25783, 25784, 25785, 25786, 25787, 26399, 26400, 26401, 26402, 26404, 26403, 26405, 26407, 26408, 26409, 26410, 26412, 26411, 26413, 26394, 26457, 26458, 26459, 26460, 26461, 26462, 26463, 26464, 26465, 26466, 26467, 24038, 24039, 26415, 26508, 24277, 24329, 24330, 26581, 7271, 7272, 7273, 16590, 19272, 26510, 26511, 26521, 26582, 26583, 26595, 26596, 26597, 26598, 26599, 26616, 26619, 26621, 26622, 26623, 26624, 26627, 26629, 26630, 26631, 26632, 26635, 26637, 26638, 26639, 26640, 26661, 21324, 21325, 27775, 27778, 27779, 27780, 27781, 27782, 27786, 27787, 27788, 27789, 27790, 27791, 27753, 27756, 27757, 27758, 27759, 27762, 27765, 27766, 27767, 27768, 28031, 28032, 28033, 28070, 28071, 28072, 28073, 28074, 28076, 28077, 28078, 28079, 28080, 28081, 28082, 28084, 28085, 28086, 28087, 28088, 28090, 28091, 28092, 28093, 28094, 28095, 28096, 28097, 28156, 28157, 28158, 28159, 28160, 28161, 28162, 28171, 28172, 28200, 28201, 28202, 28376, 28377, 28379, 28380, 28381, 28382, 28383, 28384, 28385, 24284, 24285, 24286, 24287, 28417, 28357, 28625, 28626, 28627, 28628, 28629, 28630, 28631, 28632, 28633, 28634, 28636, 28637, 24288, 24289, 24290, 24291, 24292, 24293, 28893, 28894, 28895, 28896, 28897, 28898, 28899, 28900, 28901, 28902, 28903, 28904, 28905, 28945, 28946, 28947, 28960, 29085, 28961, 29086, 29087, 29088, 29089, 29091, 29090, 29092, 29093, 29094, 29095, 29097, 29096, 29344, 29345, 29346, 29365, 29381, 29760, 29779, 29808, 29813, 29818, 29823, 29828, 29834, 30783, 30784, 30785, 30786, 30787, 30788, 30789, 30790, 30791, 30792, 30796, 30797, 30798, 30799, 30800, 31225, 31226, 31229, 31230, 31232, 31231, 30897, 30898, 30899, 30900, 30901, 30902, 18708, 18709, 26381, 26382, 31698, 31699, 11428, 9924, 12331, 9921, 9913, 9914, 22595, 22596, 27771, 27772, 29152, 29153, 11148, 9918, 11152, 9919, 13869, 9904, 14503, 9917, 9915, 9916, 18794, 18795, 22593, 22594, 19645, 19646, 24040, 27769, 27770, 28254, 28255, 29765, 30835, 30836, 30837, 30838, 30839, 30840, 9911, 9912, 22583, 22584, 24058, 24059, 26509, 26594, 27760, 27761, 11425, 9922, 9909, 9910, 11061, 11062, 23116, 23117, 25057, 25058, 25059, 25060, 29150, 29151, 11426, 9923, 11422, 11423, 9908, 11419, 22597, 6334, 24172, 7270, 27773, 28099, 28098, 28100, 28101, 29919, 30794, 19540, 20340, 20341, 24041, 26414, 28266, 28360, 11404, 11427, 12330, 26416, 26406, 11154, 3123, 20338, 20339, 24180, 27783, 28251, 28386, 29812, 29920, 11421, 25055, 25056, 28252, 19138, 28253, 11420, 5544, 19423, 20342, 20343, 27792, 28378, 29921, 11153, 9920, 13870, 9905, 9906, 9907, 24049, 24050, 28258, 29148, 29149, 29848, 23119, 23120, 25061, 25062, 25063, 25064, 28256, 28257, 11424, 13871, 18796, 22598, 23118, 25065, 25066, 26468, 27774, 28075, 28083, 28089, 28635, 30793, 30795];
	enumType.size = 1087;
	break;

case 5991:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11176, 11080, 11081, 11082, 11083, 11084, 11085, 11086, 11087, 11088, 11089, 11090, 11091, 11092, 11093, 11094, 11095, 11096, 11097, 11098, 11099, 11100, 11101, 11102, 11103, 11104, 11105, 11106, 11107, 11108, 11109, 11110, 11111, 11112, 11155, 11156, 11157, 11158, 11159, 11160, 11161, 11162, 11163, 11164, 11165, 11166, 11389, 11406, 11444, 11445, 11446, 11447, 11448, 11449, 13695, 13696, 13873, 13874, 11405, 14538, 16584, 16585, 16586, 16587, 16588, 16589, 25794, 30149, 19032, 19636, 19637, 19638, 19639, 19640, 31904, 19641, 19642, 19643, 28207, 21066, 28208, 21067, 28734, 21068, 29201, 21069, 29202, 21070, 30382, 11060, 31911, 23191, 28392, 26586, 31912, 26587, 31913, 28393, 28394, 28735, 28736, 29909, 29910, 29911, 29912, 30383, 30384, 21078, 21079, 21080, 21084, 21081, 21082, 21083, 21085, 21086, 21087, 22561, 22562, 22563, 22564, 23127, 23128, 23132, 23133, 23130, 20278, 23223, 24031, 24032, 24126, 24127, 24272, 24128, 28969, 25689, 25690, 25691, 25692, 25693, 25694, 25695, 25696, 26547, 26548, 26657, 26658, 26551, 28249, 28250, 28302, 28197, 28198, 28199, 28203, 28296, 28361, 24255, 24295, 24296, 24297, 24318, 29143, 29144, 24319, 24322, 30508, 24344, 24345, 24346, 24347, 24348, 24349, 24350, 24351, 24352, 28907, 28908, 28909, 28910, 28911, 28912, 28913, 28914, 28915, 28921, 28948, 28949, 28950, 28951, 28952, 28953, 28954, 28955, 28956, 29009, 29010, 29011, 29012, 29013, 29014, 29015, 29016, 29017, 29018, 29019, 29020, 29021, 29022, 29023, 29024, 29025, 29026, 29027, 29028, 29029, 29030, 29031, 29032, 29033, 29034, 29035, 29036, 29139, 29140, 29141, 29142, 29147, 29182, 29183, 29184, 29505, 29506, 29507, 29508, 29509, 29510, 29511, 29738, 29163, 29839, 30422, 30423, 30424, 30425, 30426, 30427, 30428, 30429, 30430, 30431, 30432, 30433, 30434, 30435, 30739, 5670, 30540, 30843, 30844, 30845, 31359, 31360, 31361, 31362, 31363, 31568, 31569, 31570, 31590, 31591, 31592, 31593, 31689, 31690, 31691, 31692, 31693, 31694, 31695, 31696, 31893, 31894, 31895, 31896, 31897, 31898, 31899, 31900, 31384, 31385, 31589, 31793, 32051, 32052, 32053];
	enumType.size = 296;
	break;

case 5992:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11167, 11168, 11169, 11407, 11460, 13872, 3124, 5552, 19121, 19122, 19123, 19124, 19236, 19237, 19238, 19239, 19314, 19327, 19414, 19424, 22585, 22599, 21210, 21211, 25788, 25789, 26576, 26577, 26578, 28418, 28419, 28420, 28906, 6565, 29098, 30548, 31346, 31647, 11170, 11457, 14534, 19411, 28919, 11172, 11456, 14535, 19412, 28944, 11171, 14533, 19676, 11174, 14530, 14531, 14532, 28061, 11173, 11175, 11458, 19674, 11461, 19675, 30552, 11462, 18808, 21187, 21321, 21322, 21323, 30549, 30550, 11459, 19413, 19677, 28297, 28298, 28299, 29008, 29155, 29156, 31817, 31383, 32099, 19605, 19606, 19607, 19608, 21212, 23185, 30394, 32202];
	enumType.size = 91;
	break;

case 5994:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [86179853, 86179854, 86179855, 86179856, 86179857, 86179858, 86179859, 86179860, 86179861, 86179862, 86179863, 86179864, 86179865, 86179866, 86179867, 86179868];
	enumType.size = 16;
	break;

case 5995:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Exhausted, Strained, Focused, Slighted, Demotivated, Struggling, Sprinting, Injured, In a Slipstream];
	enumType.size = 9;
	break;

case 5996:
	enumType.valueType = INT;
	enumType.defaultint = 999999;
	enumType.keyType = INT;
	enumType.valueArray = [2500, 1750, 500, 300, 400, 1000, 1000, 1000, 2500, 2000, 600, 500, 500, 1250, 1250, 1250, 2500, 750, 1000, 1000, 1500, 1500, 1500, 1000, 1000, 500];
	enumType.size = 26;
	break;

case 5997:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24786, 24544, 24547, 24550, 24551, 24552, 24553, 24554, 24787, 24545, 24548, 24555, 24556, 24557, 24558, 24559, 24546, 24549, 24560, 24561, 24562, 24563, 24564, 24788, 24789, 24790];
	enumType.size = 26;
	break;

case 5999:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16792;
	enumType.keyType = INT;
	enumType.valueArray = [16792, 16800, 16783];
	enumType.size = 3;
	break;

case 6000:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16802;
	enumType.keyType = INT;
	enumType.valueArray = [16802, 16782, 16785];
	enumType.size = 3;
	break;

case 6001:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16796;
	enumType.keyType = INT;
	enumType.valueArray = [16796, 16791, 16803, 16789];
	enumType.size = 4;
	break;

case 6002:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 16805;
	enumType.keyType = INT;
	enumType.valueArray = [16813, 16810, 16805];
	enumType.size = 3;
	break;

case 6015:
	enumType.valueMap = {32=[Mr Mordaut]	It can be very tactical. The brain is just as important as the feet., 1=[Raptor]	Running. Waste of time, unless you're chasing after a monster., 33=[Zombie]	Brains...taste better than feet..., 2=[Thok]	Metal-man, races can be fun. Me and brother Marm would race to kill as many monsters as possible., 34=[Mr Mordaut]	So, use your mind to take advantage of your opponents., 3=[Raptor]	That kind of race I can get behind., 41=[Mr Mordaut]	Some people compare running to a card game, with all the mind games and luck that entails., 42=[Thok]	Thok like card games. Snap is a big favourite after a glass of mead., 11=[Troll]	Hur-hur, running good. Me look forward to running event., 43=[Mr Mordaut]	I was thinking of a more intricate card game., 12=[Thok]	Ha! Yes, my rocky friend, Thok thinks this will be good., 44=[Thok]	Snap with two packs of cards? , 45=[Mr Mordaut]	Something like that, yes., 51=[Thok]	Welcome to the Games! I am Thok, champion of Daemonheim, drinker of mead, son of Daddy Thok..., 52=[Mr Mordaut]	Deary me. People are here to watch the games, not hear about you., 21=[Troll]	How do mermaids run when they have no legs?, 53=[Mr Mordaut]	Welcome. My name is Mr. Mordaut and it is my honour to commentate on this event., 22=[Tentacle]	With difficulty. , 23=[Troll]	Humans also run badly with no legs. That's why I eat legs first. , 61=[Mr Mordaut]	Welcome, everyone. My name is Mr. Mordaut and my colleague here is known as ...um...zombie., 62=[Zombie]	So...many...people... So many brains., 31=[Mr Mordaut]	It's a misconception that athletics is solely about strength and speed., 63=[Mr Mordaut]	Indeed, we really have a good turnout today.};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 23;
	break;

case 6016:
	enumType.valueMap = {1=[Raptor]	Not bad. I'm impressed, should use your speed to chase down monsters., 2=[Thok]	Thok agree with metal man. Chase monsters, then crush them with your fists., 71=[Mr Mordaut]	Well done athlete, a fantastic event and a score to be proud of., 72=[Thok]	*Belch*, 73=[Mr Mordaut]	Have you been drinking?, 74=[Thok]	S'victory drink. I shtarted drinkings thish morning jusht incashe. S'good game. Good game., 11=[Thok]	A good race, Thok think this was great., 12=[Troll]	Hur hur, me like fast food., 13=[Thok]	Thok see what you did there!, 21=[Troll]	Little human ran well. Might be too fast for me to eat them., 22=[Thok]	No eating the athletes! Thok want to see more races., 23=[Troll]	Okay., 31=[Tentacle]	They run faster than I can swim!, 32=[Troll]	They not run faster than troll can swim., 33=[Tentacle]	Aren't you made of rock? No troll can swim., 34=[Troll]	Look at it this way: trolls swim very fast downwards., 41=[Mr Mordaut]	This athlete really has got their head in the game., 42=[Zombie]	Zombie go into game, eat head?, 43=[Mr Mordaut]	No, zombie. We can snack at the post-race buffet., 44=[Zombie]	Mmm...brain canapes., 51=[Thok]	Athlete run like the wind!, 52=[Mr Mordaut]	I'd say at least gale force 10., 53=[Thok]	Thok say they have turned it right up to 11!, 61=[Thok]	Thok thought that was...BEST EVENT EVER!, 62=[Mr Mordaut]	Yes, quite. Well done, athlete, a remarkable score that you should be proud of.};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 25;
	break;

case 6017:
	enumType.valueMap = {32=[Thok]	Can't do much worse.	, 1=[Tentacle]	I'd give up now if I were you, human.	, 2=[Thok]	I have faith in athlete. 	, 41=[Mr Mordaut]	A disappointing score for our athlete., 42=[Mr Mordaut]	I'm sure they'll do better in future attempts.	, 11=[Thok]	Not good so far. Think more like Thok, be more like Thok!	, 12=[Tentacle]	You really are full of yourself.	, 13=[Thok]	Thok is full of Thok! Fish-woman is correct.	, 21=[Tentacle]	Haha, that was a terrible round.	, 22=[Thok]	Do not be rude, squishy fishy. Thok don't like rude people.	, 23=[Tentacle]	I'm not scared of you, you great oaf.	, 24=*THWACK*, 25=[Tentacle]	Such pretty butterflies...I think I'll take a nap now.	, 31=[Mr Mordaut]	A disappointing last round, but I'm sure our athlete can recover.	};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 14;
	break;

case 6018:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, [Thok]	Wow, watch them go!	, [Thok]	They faster than Thok going through Daemonheim!	, [Zombie]	Slow down! Too fast for Zombie!	, [Mr Mordaut]	We might see a new Games world record here.	, [Tentacle]	How they can go so fast? Someone must be cheating.	, [Troll]	A rolling troll gathers no moss!	];
	enumType.size = 6;
	break;

case 6019:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, [Thok]	By Thok's mighty beard, what is that thing?	, [Troll]	Hur hur...wait, what is dat?	, [Troll]	What is dis...Troll don't know.	, [Tentacle]	That is very, very strange.	, [Mr Mordaut]	Holy dragonkin, is that a tutu?	, [Zombie]	I like my brains like I like my bacon...streaky	];
	enumType.size = 6;
	break;

case 6020:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, [Raptor]	How did that get there?	, [Troll]	Is food falling from sky now?	, [Troll]	Someone has a beef wiv dis race	, [Thok]	Holy cow!	, [Thok]	Did someone order a cow?	, [Zombie]	All-you-can-eat buffet!	];
	enumType.size = 6;
	break;

case 6021:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, [Thok]	Giving up? Thok fought on with worse injuries.	, [Thok]	Ow, Thok think that must have hurt.	, [Thok]	Don't give up in face of adversity! Punch it in nose!	, [Raptor]	Not impressed. Had worse wounds.	, [Troll]	If they not in race, can Troll eat them?	, [Tentacle]	I've seen sea cucumbers move faster.	, [Zombie]	Weak ones...easier to stumble after...	];
	enumType.size = 7;
	break;

case 6022:
	enumType.valueMap = {1=[Raptor]	Waste of time. Should be killing things.	, 2=[Troll]	But look at the pretty shiny rocks and trees.	, 3=[Raptor]	I should kill you where you stand, monster.	, 4=[Troll]	Wanna see them collect shiny things. Yay shiny!	, 11=[Troll]	Yay, a race! Collect all the shinies, yay!	, 12=[Raptor]	Bah.	, 21=[Troll]	Troll don't get this race.	, 22=[Zombie]	Grab stuff...in short space of time...	, 23=[Troll]	Do they eat them?	, 24=[Zombie]	No...but we eat athletes later...yes?	, 31=[Tentacle]	Why are you surface dwellers fascinated with collecting things?	, 32=[Mr Mordaut]	It's a compulsion. We dragons are probably the worst of the bunch.	, 33=[Tentacle]	You sit on a hoard of gold?	, 34=[Mr Mordaut]	Well, yes, but I only collect the rare coins. I have an Avarrocka guinea, would you believe...	, 35=[Tentacle]	Dragon geek!	, 41=[Thok]	Lemme guess, Zombie - you collect brains.	, 42=[Zombie]	Gotta...collect...em...all	, 43=[Thok]	Haha! Thok thinks you just eat brains. This race all about collecting and keeping.	, 51=[Raptor]	Where is the killing? Why aren't the competitors hitting each other?	, 52=[Mr Mordaut]	It's strictly a non-contact sport.	, 53=[Raptor]	Fine. Then why aren't the competitors throwing axes at each other?	, 54=[Mr Mordaut]	That's still contact, Raptor. Just...at a distance.	, 61=[Mr Mordaut]	Grabbing what you can in a short space of time. A metaphor for life, eh Thok?	, 62=[Thok]	I not know metaphor. My family talks with each other, not use flags.	, 63=[Mr Mordaut]	Good lord, I didn't mean semaphor! You have a beautiful mind, Thok.	};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 25;
	break;

case 6023:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, [Raptor]	Heh. Good choice.	, [Raptor]	That resource? Not impressed.	, [Raptor]	That would be better in weapon form.	, [Troll]	Why do they not eating that?	, [Troll]	Is that a good one to get?	, [Troll]	Yay! Troll woulda picked dat one!	, [Tentacle]	Grab, grab, grab! The time is ticking down.	, [Tentacle]	Grab that one...over there! No, the other one!	, [Tentacle]	Pick that one up to your left! No, your other left!	, [Mr Mordaut]	It's a frenzy of picking things up!	, [Mr Mordaut]	They've missed one there. That might cost them.	, [Mr Mordaut]	Use your body and your brain if you want to win the game!	, [Zombie]	Run...fleshy brainbags...	, [Zombie]	A winner is one who...traaaains	, [Thok]	Grab and pillage!	, [Thok]	You snooze, you lose!	, [Thok]	Thok mentally high-fives all of you!	];
	enumType.size = 17;
	break;

case 6024:
	enumType.valueMap = {32=[Raptor]	Heh. Good event. I'm impressed.	, 64=[Tentacle]	What was that for?	, 1=[Thok]	A performance to sing tales of! It tough for anyone to top that.	, 65=[Thok]	Sorry, Thok thought you were about to make rude comment.	, 2=[Mr Mordaut]	A marvellous display. I've not seen such skill for at least two centuries.	, 41=[Thok]	Haha! A good round! Well done, squishy person!	, 42=[Tentacle]	Squishy person...really?	, 11=[Raptor]	Impressed. Good event.	, 43=*THWACK*, 12=[Tentacle]	Yes, good round...	, 44=[Tentacle]	Why are there two of you?	, 13=[Raptor]	Don't try to escape me fish. I'll be coming after you.	, 14=[Tentacle]	Eep!	, 51=[Thok]	Keep it up, squishy athlete, and you'll be almost as good as Thok.	, 21=[Raptor]	Good event. I'm impressed.	, 22=[Mr Mordaut]	Indeed. A great performance from our athlete.	, 23=[Raptor]	Now, dragon, time to meet my flail!	, 24=[Mr Mordaut]	*Sigh* Oh, do go away, Raptor.	, 61=[Thok]	A good game, you make Thok proud.	, 62=[Tentacle]	Yes human well do-	, 31=[Mr Mordaut]	Wonderful! A fantastic show. Bravo athlete, bravo!	, 63=*THWACK*};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 22;
	break;

case 6025:
	enumType.valueMap = {32=[Zombie]	Zombie...could do better...with half an arm...	, 1=[Tentacle]	A pitiful performance. I thought humans were meant to be good at this?	, 2=[Thok]	Thok sure they just limbering up. They must be rusty.	, 41=[Raptor]	Not impressed. Seems like a practice round.	, 42=[Tentacle]	Or they're just not very good.	, 11=[Tentacle]	Hah! Better luck next time, human.	, 51=[Tentacle]	Not the best score I've ever seen.	, 52=[Raptor]	Seen better.	, 21=[Thok]	Thok can hardly look.	, 22=[Mr Mordaut]	It's not that bad. I'm sure that was just a practice game.	, 61=[Raptor]	Bad score. Not impressed.	, 62=[Mr Mordaut]	Come now, my metal-encased friend, I'm sure this was just a practice game.	, 31=[Mr Mordaut]	A disappointing performance from our athlete. I'm sure they can come back and do better.	, 63=[Mr Mordaut]	With drive and determination, they'll have a top score in no time.	};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 14;
	break;

case 6026:
	enumType.valueMap = {32=[Zombie]	Zombie tried...cheese brains once...	, 1=[Mr Mordaut]	Five Ages. Years of conflict and learning, and our collective culture gives us cheese. Down a hill.	, 33=[Mr Mordaut]	Interesting. Were they moreish? A bit 'Oooh, just one more brain'.	, 2=[Thok]	Cheese rolling is Thok's favourite! CHEESE ROLL - CHEESE ROLL - CHEESE ROLL.	, 34=[Zombie]	They're...cheap...but...unsatisfying.	, 3=[Mr Mordaut]	Heavens preserve me.	, 41=[Raptor]	I refuse to be here while someone rolls cheese.	, 42=[Thok]	Why, Raptor? Bad history with cheese? 	, 11=[Troll]	Cheese is rubbish. Milk is better.	, 43=[Raptor]	No, that's not wh-	, 12=[Tentacle]	You're not meant to troll the cheese, you're meant to roll the cheese!	, 44=[Thok]	Eat too much cheese and have bad Raptor nightmare?	, 45=[Raptor]	If you'll excuse me, I have strykewyrms to kill.	, 51=[Mr Mordaut]	This reminds me of a joke. What did mother bear scream at baby bear when he was running in a cheese rolling race?	, 52=[Mr Mordaut]	Come-on-bear! 	, 21=[Troll]	Look! Cheese roll much better when it in a circle...	, 22=[Tentacle]	You are kidding me. Are you saying that trolls haven't invented the wheel yet?	, 23=[Troll]	Troll can think of many uses for it! 	, 24=[Troll]	After games, Troll go back and tell friends about dis 'wheel'.	, 31=[Mr Mordaut]	You a fan of cheese, Zombie? You kick back in the evening with some cheese and crackers?	};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 20;
	break;

case 6027:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, [Mr Mordaut]	That could have been feta!	, [Mr Mordaut]	Ooh, they really milked that performance.	, [Tentacle]	Like the cheese, that performance stank.	, [Tentacle]	Have a nice trip!	, [Thok]	Look on bright side: ten-second rule means the cheese is good to eat.	, [Thok]	Athlete is clearly merry on mead.	, [Raptor]	Not impressed.	, [Raptor]	Heh.	];
	enumType.size = 8;
	break;

case 6028:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, [Mr Mordaut]	That was a gouda performance!	, [Mr Mordaut]	You really are the big cheese	, [Mr Mordaut]	You're on a roll.	, [Mr Mordaut]	You better grab some of that cheese because your performance was a cracker!	, [Tentacle]	Congratulations! You have a talent for fermented bovine secretions.	, [Thok]	Carve that cheese into a crown! No one beats that score.	, [Zombie]	That's....how...I roll.	];
	enumType.size = 7;
	break;

case 6029:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 2490, 2730, 3060, 3360, 3720, 4140, 4530, 5040, 5550, 6120, 6763, 7434, 8160, 9031, 9928, 10908, 12031, 13237, 14583, 16040, 17693, 19425, 21410, 23587, 25956, 28543, 31461, 34623, 38111, 41952, 46200, 46200, 46200, 46200, 92400, 92400, 92400, 92400, 92400, 92400, 92400, 92400, 138600, 138600, 138600, 138600, 138600, 138600, 184800, 184800, 184800, 184800, 184800, 184800, 231000, 231000, 231000, 231000, 231000, 277200, 277200, 277200, 277200, 277200, 323400, 323400, 323400, 323400, 323400, 369600, 369600, 369600, 369600, 415800, 415800, 415800, 415800, 462000, 462000, 462000, 462000, 508200, 508200, 508200, 554400, 554400, 554400, 554400, 600600, 600600, 600600, 646800, 646800, 646800, 693000, 693000, 693000, 739200, 739200];
	enumType.size = 99;
	break;

case 6034:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11265, 11266, 11267, 11268, 11269, 11270, 11271];
	enumType.size = 7;
	break;

case 6035:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11272, 11273, 11274, 11275, 11276, 11277, 11278, 11279];
	enumType.size = 8;
	break;

case 6036:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11280, 11281, 11282, 11283, 11284];
	enumType.size = 5;
	break;

case 6037:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11285, 11286, 11287, 11288, 11289, 11290];
	enumType.size = 6;
	break;

case 6038:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11291, 11292, 11293, 11294, 11295, 11296];
	enumType.size = 6;
	break;

case 6039:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11297, 11298, 11299, 11300, 11301, 11302];
	enumType.size = 6;
	break;

case 6040:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11303, 11304, 11305, 11306, 11307, 11308, 11309];
	enumType.size = 7;
	break;

case 6041:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11310, 11311, 11312, 11313, 11314, 11316];
	enumType.size = 6;
	break;

case 6042:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11317, 11318, 11319, 11320, 11321, 11322, 11323, 11324, 11325, 11326, 11327, 11328, 11329, 11330, 11331, 11332, 11333];
	enumType.size = 17;
	break;

case 6043:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11334, 11335, 11336, 11337, 11338, 11339, 11340];
	enumType.size = 7;
	break;

case 6044:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11341, 11342, 11343, 11344, 11345, 11346, 11347];
	enumType.size = 7;
	break;

case 6045:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11348, 11349, 11350, 11351, 11352, 11353];
	enumType.size = 6;
	break;

case 6046:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11354, 11355, 11356, 11357, 11358, 11359, 11360, 11361, 11362, 11363, 11364, 11365, 11366, 11367, 11368, 11369, 11370, 11371, 11372, 11373, 11374, 11375, 11376, 11377, 11378, 11379];
	enumType.size = 26;
	break;

case 6047:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11380, 11381, 11382, 11383, 11384, 11385, 11386];
	enumType.size = 7;
	break;

case 6048:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24806];
	enumType.size = 1;
	break;

case 6049:
	enumType.valueMap = {4=24807};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6050:
	enumType.valueMap = {7=24809};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6051:
	enumType.valueMap = {10=24811};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6052:
	enumType.valueMap = {9=24813};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6053:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 24815];
	enumType.size = 1;
	break;

case 6054:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 24817];
	enumType.size = 1;
	break;

case 6055:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24819];
	enumType.size = 1;
	break;

case 6056:
	enumType.valueMap = {0=24827, 10=24832, 4=24828, 7=24830};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 6057:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24822];
	enumType.size = 1;
	break;

case 6058:
	enumType.valueMap = {3=24824};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6060:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4, 4, 3, 3];
	enumType.size = 4;
	break;

case 6061:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4, 4, 3];
	enumType.size = 3;
	break;

case 6062:
	enumType.valueType = OBJ;
	enumType.defaultint = 7100;
	enumType.keyType = INT;
	enumType.valueArray = [7100, 7101, 7102, 7103];
	enumType.size = 4;
	break;

case 6063:
	enumType.valueType = OBJ;
	enumType.defaultint = 7100;
	enumType.keyType = INT;
	enumType.valueArray = [3873, 3874, 3875, 3876];
	enumType.size = 4;
	break;

case 6064:
	enumType.valueMap = {3873=1, 3874=1, 3875=1, 3876=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 4;
	break;

case 6065:
	enumType.valueMap = {7104=3877, 7105=3878, 7097=3870, 7099=7099, 7100=3873, 7101=3874, 7102=3875, 7103=3876};
	enumType.valueType = OBJ;
	enumType.defaultint = 3873;
	enumType.keyType = OBJ;
	enumType.size = 8;
	break;

case 6066:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [16, 54, 72, 42];
	enumType.size = 4;
	break;

case 6067:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2, 1, 1, 1];
	enumType.size = 4;
	break;

case 6068:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [55, 33, 7, 69];
	enumType.size = 4;
	break;

case 6069:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2, 1, 1, 2];
	enumType.size = 4;
	break;

case 6070:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [16, 32, 64, 56];
	enumType.size = 4;
	break;

case 6071:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 2, 1];
	enumType.size = 4;
	break;

case 6072:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 44, 67, 90];
	enumType.size = 4;
	break;

case 6073:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2, 1, 2, 1];
	enumType.size = 4;
	break;

case 6074:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 22, 56, 80];
	enumType.size = 4;
	break;

case 6075:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 2, 1];
	enumType.size = 4;
	break;

case 6076:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 12172;
	enumType.keyType = INT;
	enumType.valueArray = [12172, 12173, 12174, 12175, 12176, 12177, 12178, 12179, 12180, 12181];
	enumType.size = 10;
	break;

case 6077:
	enumType.valueType = STRING;
	enumType.defaultstr = "Haha! Missed me!";
	enumType.keyType = INT;
	enumType.valueArray = [Haha! Missed me!, Haha! Missed me!, Haha! Missed me!, Haha! Missed me!];
	enumType.size = 4;
	break;

case 6078:
	enumType.valueType = STRING;
	enumType.defaultstr = "Blast you and your accuracy.";
	enumType.keyType = INT;
	enumType.valueArray = [Blast you and your accuracy., Blast you and your accuracy., Blast you and your accuracy., Blast you and your accuracy.];
	enumType.size = 4;
	break;

case 6079:
	enumType.valueType = STRING;
	enumType.defaultstr = "Grr. You sunk my battlefish!";
	enumType.keyType = INT;
	enumType.valueArray = [Grr. You sunk my battlefish!, Grr. You sunk my battlefish!, Grr. You sunk my battlefish!, Grr. You sunk my battlefish!];
	enumType.size = 4;
	break;

case 6080:
	enumType.valueType = STRING;
	enumType.defaultstr = "YES! I sunk you!";
	enumType.keyType = INT;
	enumType.valueArray = [Yes! I sunk you!, Yes! I sunk you!, Yes! I sunk you!, Yes! I sunk you!];
	enumType.size = 4;
	break;

case 6081:
	enumType.valueMap = {80=a bunny from hat trick., 50=a levitation trick., 90=a water tank escape., 60=a card trick., 70=a flowers from sleeve trick.};
	enumType.valueType = STRING;
	enumType.defaultstr = "something.";
	enumType.keyType = INT;
	enumType.size = 5;
	break;

case 6083:
	enumType.valueMap = {3=24886};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6084:
	enumType.valueMap = {3=24888};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6085:
	enumType.valueMap = {3=24890};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6086:
	enumType.valueMap = {3=24892};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6087:
	enumType.valueMap = {3=24894};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6088:
	enumType.valueMap = {5=24896};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6089:
	enumType.valueMap = {5=26033, 3=24898};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 6090:
	enumType.valueMap = {5=26035, 3=24900};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 6091:
	enumType.valueMap = {3=24902};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6092:
	enumType.valueMap = {5=26037, 3=24904};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 6093:
	enumType.valueMap = {40=Avatar Habitat};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6094:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 40];
	enumType.size = 1;
	break;

case 6095:
	enumType.valueMap = {40=12299};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6096:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 6097, 6098, 6099];
	enumType.size = 3;
	break;

case 6097:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 6100];
	enumType.size = 1;
	break;

case 6098:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 6101];
	enumType.size = 1;
	break;

case 6099:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 6102];
	enumType.size = 1;
	break;

case 6100:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11433];
	enumType.size = 1;
	break;

case 6101:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11432];
	enumType.size = 1;
	break;

case 6102:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 11431];
	enumType.size = 1;
	break;

case 6103:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 12315, 12332, 12329, 12326, 12327, 12320, 12321];
	enumType.size = 7;
	break;

case 6104:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Heal Over Time, Familiar Faces, Auto Ort, Skill Plot Bonus, Skilling Bonus, Random Resurrection, Protector];
	enumType.size = 7;
	break;

case 6105:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Heal Over Time, Familiar Faces, Auto Ort, Skill Plot Bonus, Skilling Bonus, Random Resurrection, Protector];
	enumType.size = 7;
	break;

case 6106:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Heals a small number of life points over time., Extends the amount of time for which a familiar can be summoned, up to double their usual amount., The avatar will attempt to automatically place anagogic orts in your inventory when they would otherwise be dropped from skilling or killing monsters., Gain 10% more resources from skill plots in the citadel., A 3% XP boost for clan mates on the same world as the avatar, and a 6% XP boost to those in range of the avatar., Randomly chooses a clan mate within range and resurrects them should they die. Limited per day., A percentage of damage that would have been taken in combat is instead redirected to the avatar. This combat must have taken place within range of the avatar.];
	enumType.size = 7;
	break;

case 6108:
	enumType.valueMap = {74503=74511, 74505=74513, 74504=74512, 74506=74514, 74383=74411, 74385=74413, 74384=74412, 74387=74415, 74386=74414, 74389=74417, 74388=74416, 74391=74419, 74390=74418, 74393=74421, 74392=74420, 74395=74423, 74394=74422, 74396=74424, 74468=74470, 74477=74479, 74483=74493, 74485=74493, 74484=74493, 74487=74497, 74486=74493};
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = LOCATION;
	enumType.size = 25;
	break;

case 6109:
	enumType.valueMap = {74503=74507, 74505=74509, 74504=74508, 74506=74510, 74383=74425, 74385=74427, 74384=74426, 74387=74429, 74386=74428, 74389=74431, 74388=74430, 74391=74433, 74390=74432, 74393=74435, 74392=74434, 74395=74437, 74394=74436, 74396=74438, 74468=74471, 74477=74480, 74483=74488, 74485=74490, 74484=74489, 74487=74492, 74486=74491};
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = LOCATION;
	enumType.size = 25;
	break;

case 6110:
	enumType.valueMap = {74503=74507, 74505=74509, 74504=74508, 74506=74510, 74383=74439, 74385=74441, 74384=74440, 74387=74443, 74386=74442, 74389=74445, 74388=74444, 74391=74447, 74390=74446, 74393=74449, 74392=74448, 74395=74451, 74394=74450, 74396=74452, 74468=74472, 74477=74481, 74483=74488, 74485=74490, 74484=74489, 74487=74492, 74486=74491};
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = LOCATION;
	enumType.size = 25;
	break;

case 6111:
	enumType.valueMap = {74503=74507, 74505=74509, 74504=74508, 74506=74510, 74383=74453, 74385=74455, 74384=74454, 74387=74457, 74386=74456, 74389=74459, 74388=74458, 74391=74461, 74390=74460, 74393=74463, 74392=74462, 74395=74465, 74394=74464, 74396=74466, 74468=74473, 74477=74482, 74483=74488, 74485=74490, 74484=74489, 74487=74492, 74486=74491};
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = LOCATION;
	enumType.size = 25;
	break;

case 6112:
	enumType.valueMap = {74503=74515, 74505=74517, 74504=74516, 74506=74518, 74383=74397, 74385=74399, 74384=74398, 74387=74401, 74386=74400, 74389=74403, 74388=74402, 74391=74405, 74390=74404, 74393=74407, 74392=74406, 74395=74409, 74394=74408, 74396=74410, 74468=74469, 74477=74478, 74483=74498, 74485=74500, 74484=74499, 74487=74502, 74486=74501};
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = LOCATION;
	enumType.size = 25;
	break;

case 6113:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, null, 1, null, null, 1, null, 1, null, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, null, null, null, null, null, 1, 1, null, 1, null, null, 1, null, null, 1, null, 1, 1, null, null, null, 1, 1, 1, 1, 1, null, null, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, 1, 1, null, 1, null, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, 1, null, null, null, null, null, null, null, null, null, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, null, null, null, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, null, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, null, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1];
	enumType.size = 199;
	break;

case 6114:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, null, 1, null, null, 1, null, 1, null, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, null, null, null, null, null, 1, 1, null, 1, null, null, null, null, null, 1, null, 1, 1, null, null, null, 1, 1, 1, 1, 1, null, null, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, 1, 1, null, 1, null, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, 1, null, null, null, null, null, null, null, null, null, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, null, null, null, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, null, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, null, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1];
	enumType.size = 198;
	break;

case 6115:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, null, 1, null, null, 1, null, 1, null, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, null, null, null, null, null, 1, 1, null, 1, null, null, null, null, 1, 1, null, 1, 1, null, null, null, 1, 1, 1, 1, 1, null, null, 1, null, null, null, null, null, null, 1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, 1, 1, null, 1, null, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, 1, null, null, null, null, null, null, null, null, null, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, null, null, null, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, null, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, null, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1];
	enumType.size = 190;
	break;

case 6116:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, null, 1, null, null, 1, null, 1, null, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, null, null, null, null, null, 1, 1, null, 1, null, null, null, null, 1, 1, null, 1, 1, null, null, null, 1, 1, 1, 1, 1, null, null, 1, null, null, null, null, null, null, 1, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, 1, 1, null, 1, null, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, 1, null, null, null, null, null, null, null, null, null, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, null, null, null, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, null, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, null, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1];
	enumType.size = 190;
	break;

case 6117:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, null, 1, null, null, 1, null, 1, null, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, null, null, null, null, null, 1, 1, null, 1, null, null, 1, null, 1, 1, null, 1, 1, null, null, null, 1, 1, 1, 1, 1, null, null, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, null, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, null, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1];
	enumType.size = 230;
	break;

case 6118:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, null, 1, null, null, 1, null, 1, null, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, null, null, null, null, null, 1, 1, null, 1, null, null, 1, null, 1, 1, null, 1, 1, null, null, null, 1, 1, 1, 1, 1, null, null, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, null, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, null, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1];
	enumType.size = 230;
	break;

case 6119:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, null, 1, null, null, 1, null, 1, null, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, null, null, null, null, null, 1, 1, null, 1, null, null, null, null, 1, 1, null, 1, 1, null, null, null, 1, 1, 1, 1, 1, null, null, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, 1, 1, null, 1, null, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, null, 1, 1, 1, null, 1, 1, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1];
	enumType.size = 219;
	break;

case 6120:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, null, 1, null, null, 1, null, 1, null, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, null, null, null, null, null, 1, 1, null, 1, null, null, null, null, 1, 1, null, 1, 1, null, null, null, 1, 1, 1, 1, 1, null, null, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, null, 1, 1, null, 1, null, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, null, null, 1, 1, 1, null, 1, 1, null, null, null, null, null, null, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, null, 1, null, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, null, null, 1, 1, 1, 1, null, 1, 1, 1, 1, 1, 1, 1, 1, 1];
	enumType.size = 219;
	break;

case 6121:
	enumType.valueType = STRING;
	enumType.defaultstr = "N/A";
	enumType.keyType = INT;
	enumType.valueArray = [No, Yes];
	enumType.size = 2;
	break;

case 6126:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Jungle north of Oo'glog, Jungle south-west of the Feldip Hills, Lava area north of the Observatory, Woodlands south of the Gnome Stronghold, South of the Piscatoris Fishing Colony, South-west of Lletya, Hunter area north-east of Rellekka, Swamp south-east of Canifis, East of the Dominion Tower, Jadinko habitat, West of Shilo Village];
	enumType.size = 11;
	break;

case 6127:
	enumType.valueMap = {87818252=11489, 87818253=11485, 87818254=11486, 87818255=11488, 87818260=11484, 87818261=11480, 87818256=11487, 87818257=11481, 87818258=11482, 87818259=11483};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 10;
	break;

case 6142:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [700000, 350000, 100000, 50000, 25000, 5000, 1000, 500, 100];
	enumType.size = 9;
	break;

case 6143:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [93, 87, 73, 66, 60, 44, 10, 5, 0];
	enumType.size = 9;
	break;

case 6144:
	enumType.valueType = MODEL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [66307, 66307, 3348, 3348, 3348, 3348, 3348, 3348, 3348];
	enumType.size = 9;
	break;

case 6152:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Daily, Recommended, Agility, Combat, Construction, Cooking, Crafting, Divination, Dungeoneering, Farming, Firemaking, Fishing, Fletching, Herblore, Hunter, Mining, Prayer, Runecrafting, Slayer, Smithing, Summoning, Thieving, Woodcutting];
	enumType.size = 23;
	break;

case 6153:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [63, 0, 8, 1, 22, 16, 11, 26, 25, 21, 17, 15, 19, 9, 23, 13, 7, 12, 20, 14, 24, 10, 18];
	enumType.size = 23;
	break;

case 6154:
	enumType.valueMap = {0=1, 1=3, 7=16, 8=2, 9=13, 10=21, 11=6, 12=17, 13=15, 14=19, 15=11, 16=5, 17=10, 18=22, 19=12, 20=18, 21=9, 22=4, 23=14, 24=20, 25=8, 26=7, 63=0};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 23;
	break;

case 6155:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 197, 198, 200, 202, 199, 203, 201, 204, 205, 206, 207, 215, 209, 210, 211, 212, 213, 214, 208, 216, 217, 221, 220, 222, 3028, 9170];
	enumType.size = 26;
	break;

case 6156:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [All, Favourites, D&Ds, Minigames: All, Minigames: Combat, Minigames: Non-combat];
	enumType.size = 6;
	break;

case 6157:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29958, null, null, null, 29962, null, null, 29960, null, 29964, 29966];
	enumType.size = 5;
	break;

case 6158:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24141;
	enumType.keyType = INT;
	enumType.valueArray = [24141];
	enumType.size = 1;
	break;

case 6159:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24142;
	enumType.keyType = INT;
	enumType.valueArray = [24142];
	enumType.size = 1;
	break;

case 6160:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24143;
	enumType.keyType = INT;
	enumType.valueArray = [24143];
	enumType.size = 1;
	break;

case 6161:
	enumType.valueType = INT;
	enumType.defaultint = 4095;
	enumType.keyType = INT;
	enumType.valueArray = [null, 348, 1121, 1019, 1300, 1300, 1300, 1300, 1300, 1300, 1198, 347, 1300, null, 1300, 1300, 1300, 502, 481, 1300, 464, 1300, 492, 1300, 1300, 1300, 493, 490, 482, 441, 1300, 1300, 503, 440, 1300, 449, 525, 498, 499, 517, 506, 473, 1300, 1300, 507, 453, 1300, 462, 479, 467, 1300, 504, 1300, 487, 478, 452, 471, 436, 486, 1300, 448, 512, 466, 1300, 489, 488, 1300, 1300, 485, 480, 470, 1300, 1300, 1300, 1300, 465, 1300, 1300, 444, 447, 1300, 1300, 477, 1300, 519, 1300, 1300, 521, 1300, 1300, 1300, 469, 496, 523, 527, 463, 494, 458, 1300, 476, 510, 454, 497, 475, 1300, 530, 438, 1300, 455, 1300, 1300, 474, 446, 445, 515, 1300, 434, 435, 468, 439, 495, 520, 522, 511, 1300, 450, 1300, 472, 1300, 483, 1300, 442, 1300, 461, 1300, 491, 509, 514, 457, 1300, 505, 1300, 528, 524, 1300, 1300, 1300, 4095, 350, 526, 1300, 437, 460, 1300, 529, 456, 508, 1300, 1300, 518, 1300, 1300, 1300, 1300, 4095, 484, null, 443, 1300, null, 346, 513, 500, 1300, 1300, null, 1300, null, 1300, 1300, 501, 1300, 1300, 1300, 1300, null, null, 459, 451, null, 1075, 1300, 1013, null, 1073, 1074, 1076, 1122, 1134, 1300, 1193, null, 1199, 1201, null, 531, null, null, 1261];
	enumType.size = 196;
	break;

case 6162:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [170, 163, 184, 167, 181, 182, 179, 172, 180, 160, 149, 17, 14, 168, 162, 187, 171, 176, 192, 152, 190, 191, 151, 174, 150, 173, 131, 161, 196, 197, 199, 10, 203, 204, 205, 207, 208];
	enumType.size = 37;
	break;

case 6163:
	enumType.valueMap = {192=The men of Rimmington have entered a deep sleep. Help save them from their shared dreams., 131=Help Pikkupstix find out what happened to his wayward apprentice., 196=The continued survival of the TzHaar race hangs in the balance. Lead a second expedition into the Elder Kiln, where the TzHaar hope to resurrect their greatest warriors by fusing them painfully with the Ga'al., 197=A museum archaelogist has made a potentially ground-breaking discovery. Join him to explore ancient caverns, fight legendary warriors, and become part of the most important event for thousands of years., 199=Team up with Veldaban and take down the villainous Red Axe., 10=Determine Zaros's fate as he attempts to return to Gielinor., 203=Help the fractured Bandosian forces choose a new leader after Bandos' death at the claws of Armadyl., 204=End the plague of West Ardougne and gain entry to the elf city of Prifddinas., 205=A dangerous ghost is terrorising a mansion and needs to be put to rest., 14=Help the dwarven capital through a crisis and find the long-lost heir to its throne., 207=Zamorak is gathering a team of agents to take part in a dangerous raid., 208=Discover what Varrock would be like in a world without you., 17=Help a love-sick dwarf pursue the unlikely object of his affections!, 149=See old friends in new ways as you delve into their past and help them settle their differences., 150=Join Erjolf in his quest for a trophy, unravel the puzzling story behind a curious corpse, and discover the dark secrets of one of the most fearsome races ever to walk in Gielinor., 214=Deal with the arrival of V and the consequences of his return to Rellekka., 151=There are penguins and a submarine. What more do you need to know?, 152=Discover the truth behind a friend's destiny and take part in the cave goblins' last stand., 160=A message from an unknown benefactor leads Veldaban to strike against a forgotten threat., 161=A new disturbance has been sensed in the Temple of Light. Navigate to the temple's depths to locate the source of this energy, and you might find an unusual way of harnessing it., 162=A dark figure looms with mysterious intent. Find out what he's up to and stop it!, 163=Delve into a stranger's dream and uncover a deadly new dagannoth threat., 167=Help establish a haven for the scoundrels and footpads of the land, and pull off some world-class heists to raise your roguish renown!, 168=The Wise Old man's past comes back to haunt him - and you!, 170=Descend into ancient catacombs and overcome a cult threatening to sacrifice an innocent prisoner., 171=Rumours of pest sightings on the mainland have reached the ears of the Void Knights. Has a pest managed to slip past their defences?, 172=Unravel the mysteries of body energy in the Elemental Workshop!, 173=Continue your hunt for the elusive escaped pests, and your investigations into how they came to escape., 174=Confront the mastermind behind the pests on the mainland, and send them back where they came from!, 176=The planets have aligned, signalling the Ritual of the Mahjarrat. If he becomes rejuvenated, with an arsenal of weapons taken from the gods themselves, will you be able to stop Lucien achieving total dominance?, 179=Help re-establish a simian society in an unlikely locale., 180=Decipher the conundrums of the chaotic cosmos in the Elemental Workshop!, 181=Respond to an unconventional challenge by Rabid Jack's pirates and thwart their latest plan to rule the sea!, 182=A huge fish has been terrorising the northern seas. Help a fisherman end the horror stories by catching beast!, 184=An unexpected ally reveals details of a source of power against the vampyres, but do you have the courage to retrieve it?, 187=Solve a brutal murder and restore harmony to the Abbey of Saint Elspeth., 190=TzHaar eggs are hatching into Ga'al - TzHaar without inborn memories needed to perform their traditional caste roles. Travel with one of these Ga'al to search for a way to bestow these memories upon him, unearthing the secrets of the TzHaar race., 191=A group of adventurers needs your help to guide them through a foreboding cavern, but a simple excursion soon turns into an underground nightmare.};
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.size = 38;
	break;

case 6164:
	enumType.valueMap = {192=22269, 131=22933, 196=22935, 197=22936, 199=22937, 10=22936, 203=23269, 204=14316, 205=24584, 14=22263, 207=19457, 208=24988, 17=22262, 149=22261, 150=22931, 214=25838, 151=22929, 152=22270, 160=17499, 161=22934, 162=22265, 163=17483, 167=17485, 168=22264, 170=17482, 171=22267, 172=17497, 173=22932, 174=22930, 176=22268, 179=17496, 180=17498, 181=17486, 182=17495, 184=17484, 187=22266, 190=22823, 191=22824};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 38;
	break;

case 6452:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1657, 1666, 1661, 1664, 1658, 24037, 1653, 24035, 11514, 1670, 1674, 1676, 24120, 1663, 1648, 24123, 11490, 19037, 24121, 1673, 24036, 24119, 1659, 24122, 24124, 1647, 1652, 1675, 1646, 1651, 11513, 1660, 18797, 3107, 28049, 28247, 16568, 16569, 28358, 29001, 29198, 1679, 31393, 31394, 31557, 31558, 31697];
	enumType.size = 47;
	break;

case 6458:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [170, 17, 159, 202];
	enumType.size = 4;
	break;

case 6459:
	enumType.valueMap = {17=Help a love-sick dwarf pursue the unlikely object of his affections!, 170=Descend into ancient catacombs and overcome a cult threatening to sacrifice an innocent prisoner., 202=Investigate the mysterious disappearance of Ashdale's residents., 159=Infiltrate the Black Knight's Fortress in search of a mysterious weapon hidden since the God Wars.};
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 6460:
	enumType.valueMap = {17=22262, 170=17482, 202=22939, 159=22940};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 6461:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25074, null, null, null, 25076, null, null, 25080, null, 25078, 25082];
	enumType.size = 5;
	break;

case 6462:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25086, null, null, null, 25088, null, null, 25092, null, 25090, 25094];
	enumType.size = 5;
	break;

case 6463:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25098, null, 25100, null, 25102, null, null, 25106, null, 25104, 25108];
	enumType.size = 6;
	break;

case 6464:
	enumType.valueMap = {3=25110};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6465:
	enumType.valueMap = {5=26031, 3=25112};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 6481:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25136, 25142, null, null, 25138, null, null, 25140, null, null, 25144];
	enumType.size = 5;
	break;

case 6482:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25148, 25154, null, null, 25150, null, null, 25152, null, null, 25156];
	enumType.size = 5;
	break;

case 6483:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25160, 25166, null, null, 25162, null, null, 25164, null, null, 25168];
	enumType.size = 5;
	break;

case 6484:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25170];
	enumType.size = 1;
	break;

case 6485:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 25172];
	enumType.size = 1;
	break;

case 6486:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25174];
	enumType.size = 1;
	break;

case 6570:
	enumType.valueType = STRUCT;
	enumType.defaultint = 13741;
	enumType.keyType = INT;
	enumType.valueArray = [null, 13742, 13743, 13744, 13745, 13746];
	enumType.size = 5;
	break;

case 6571:
	enumType.valueMap = {98=2, 99=14, 100=9, 740=21, 101=15, 741=22, 102=12, 103=18, 104=16, 10=6, 11=11, 12=10, 13=1, 14=0, 15=7, 16=8, 305=4, 17=17, 306=13, 307=5, 308=3, 666=19, 667=20};
	enumType.valueType = INT;
	enumType.keyType = IDENTIKIT;
	enumType.size = 23;
	break;

case 6627:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25273, null, null, null, 25275, null, null, 25277, null, 25279, 25281];
	enumType.size = 5;
	break;

case 6628:
	enumType.valueMap = {5=25997, 3=25283};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 6629:
	enumType.valueMap = {5=25287};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 6630:
	enumType.valueMap = {5=25999, 3=25285};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 6651:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [23664];
	enumType.size = 1;
	break;

case 6665:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 2901;
	enumType.keyType = INT;
	enumType.valueArray = [2901];
	enumType.size = 1;
	break;

case 6666:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 20203;
	enumType.keyType = INT;
	enumType.valueArray = [20203, 20212, 20213, 20214, 20190, 20194, 20211, 20200, 20195];
	enumType.size = 9;
	break;

case 6667:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 20202;
	enumType.keyType = INT;
	enumType.valueArray = [20202, 20205, 20207, 20193, 20192, 20209];
	enumType.size = 6;
	break;

case 6668:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 20196;
	enumType.keyType = INT;
	enumType.valueArray = [20196, 20191];
	enumType.size = 2;
	break;

case 6669:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25374, null, null, null, 25376, null, null, 25378, null, 25380, 25382];
	enumType.size = 5;
	break;

case 6670:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25386, 25396, null, null, 25388, null, null, 25390, null, 25392, 25394];
	enumType.size = 6;
	break;

case 6671:
	enumType.valueMap = {5=26023, 3=25398};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 6673:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 2, 7, 3, 8, null, 4, null, 5, 6, null, null, null, 9, null, null, null, 10];
	enumType.size = 11;
	break;

case 6674:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26313];
	enumType.size = 1;
	break;

case 6675:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6677, 6678, 6679, 7112, 8331, 8332, 8330];
	enumType.size = 7;
	break;

case 6676:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Tradeable Magic Gear, Untradeable Magic Gear, Tradeable Ranged Gear, Untradeable Ranged Gear, Tradeable Misc. Gear, Untradeable Misc. Gear, Thrown Weapons];
	enumType.size = 7;
	break;

case 6677:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26337, 26338, 26339];
	enumType.size = 3;
	break;

case 6678:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26334, 26335, 26336, 33886, 33889];
	enumType.size = 5;
	break;

case 6679:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26346, 26347, 26348];
	enumType.size = 3;
	break;

case 6683:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27549, 27554, null, null, 27550, null, null, 27552, null, 27551, 27553];
	enumType.size = 6;
	break;

case 6684:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27557, null, null, null, 27558, null, null, 27560, null, 27559, 27561];
	enumType.size = 5;
	break;

case 6685:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27565, null, null, null, 27566, null, null, 27568, null, 27567, 27569];
	enumType.size = 5;
	break;

case 6686:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27572, null, null, null, 27573, null, null, 27575, null, 27574, 27576];
	enumType.size = 5;
	break;

case 6688:
	enumType.valueMap = {14937=18157, 14930=18158, 14931=18197, 14932=18156, 14933=18156, 14935=18155};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18148;
	enumType.keyType = STRUCT;
	enumType.size = 6;
	break;

case 6689:
	enumType.valueMap = {14937=18189, 14930=18190, 14931=18191, 14932=18189, 14933=18189, 14926=18145};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18144;
	enumType.keyType = STRUCT;
	enumType.size = 6;
	break;

case 6690:
	enumType.valueMap = {14937=18170, 14931=18171, 14932=18170, 14933=18170};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18159;
	enumType.keyType = STRUCT;
	enumType.size = 4;
	break;

case 6691:
	enumType.valueMap = {14921=18152, 14929=18152, 14925=18152, 14926=18151};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18150;
	enumType.keyType = STRUCT;
	enumType.size = 4;
	break;

case 6692:
	enumType.valueMap = {14937=18167, 14930=18169, 14931=18168, 14932=18167, 14933=18167};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18154;
	enumType.keyType = STRUCT;
	enumType.size = 5;
	break;

case 6693:
	enumType.valueMap = {14937=18162, 14930=18164, 14931=18163, 14932=18162, 14933=18162, 14926=18161};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18160;
	enumType.keyType = STRUCT;
	enumType.size = 6;
	break;

case 6694:
	enumType.valueMap = {14937=18186, 14931=18185, 14932=18186, 14933=18186};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18165;
	enumType.keyType = STRUCT;
	enumType.size = 4;
	break;

case 6695:
	enumType.valueMap = {14937=18178, 14930=18180, 14931=18177, 14932=18178, 14933=18178};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18179;
	enumType.keyType = STRUCT;
	enumType.size = 5;
	break;

case 6696:
	enumType.valueMap = {14921=18201, 14929=18201, 24258=24370, 14925=18201};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18201;
	enumType.keyType = STRUCT;
	enumType.size = 4;
	break;

case 6697:
	enumType.valueMap = {14932=18198, 14933=18198, 14931=18199};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18175;
	enumType.keyType = STRUCT;
	enumType.size = 3;
	break;

case 6698:
	enumType.valueMap = {14930=18096, 14931=18095, 14932=18094, 14933=18094, 14937=18094, 14939=18092, 14940=18092, 14942=18093};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18069;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 6699:
	enumType.valueMap = {14930=18135, 14931=18134, 14932=18133, 14933=18133, 14937=18133, 14939=18131, 14940=18131, 14942=18132};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18130;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 6700:
	enumType.valueMap = {14930=18079, 14931=18078, 14932=18077, 14933=18077, 14937=18077, 14939=18075, 14940=18075, 14942=18076};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18074;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 6701:
	enumType.valueMap = {14930=18073, 14931=18072, 14932=18088, 14933=18088, 14937=18088, 14939=18071, 14940=18071};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18070;
	enumType.keyType = STRUCT;
	enumType.size = 7;
	break;

case 6702:
	enumType.valueMap = {14930=18100, 14931=18101, 14932=18099, 14933=18099, 14937=18099, 14939=18102, 14940=18102, 14942=18103};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18098;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 6703:
	enumType.valueMap = {14930=18129, 14931=18128, 14932=18127, 14933=18127, 14937=18127, 14939=18125, 14940=18125, 14942=18126};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18124;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 6704:
	enumType.valueMap = {14930=18123, 14931=18122, 14932=18121, 14933=18121, 14937=18121, 14939=18119, 14940=18119, 14942=18120};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18117;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 6705:
	enumType.valueMap = {14930=18086, 14931=18085, 14932=18084, 14933=18084, 14937=18084, 14939=18087, 14940=18087, 14942=18083};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18082;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 6706:
	enumType.valueMap = {14930=18357, 14931=18381, 14932=18356, 14933=18356, 14937=18379, 14939=18382, 14940=18382};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18355;
	enumType.keyType = STRUCT;
	enumType.size = 7;
	break;

case 6707:
	enumType.valueMap = {14930=18451, 14931=18453, 14932=18450, 14933=18450, 14937=18452, 14939=18454, 14940=18454, 14942=18455};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18449;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 6708:
	enumType.valueMap = {14937=18394, 14930=18398, 14931=18397, 14932=18396, 14933=18396, 14942=18395};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18392;
	enumType.keyType = STRUCT;
	enumType.size = 6;
	break;

case 6709:
	enumType.valueMap = {14930=18432, 14931=18431, 14932=18430, 14933=18430, 14937=18428, 14939=18427, 14940=18427, 14942=18429};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18426;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 6710:
	enumType.valueMap = {14930=18376, 14931=18375, 14932=18374, 14933=18374, 14937=18374, 14939=18372, 14940=18372, 14942=18373};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18371;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 6711:
	enumType.valueMap = {14930=18415, 14931=18411, 14932=18413, 14933=18413, 14937=18380, 14939=18412, 14940=18412, 14942=18414};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18410;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 6712:
	enumType.valueMap = {14930=18369, 14931=18368, 14932=18367, 14933=18367, 14937=18370, 14939=18365, 14940=18365, 14942=18366};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18364;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 6713:
	enumType.valueMap = {14944=18520, 14945=18525, 14946=18521, 14947=18526, 14939=18524, 14940=18524, 14942=18523, 14943=18526};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18522;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 6714:
	enumType.valueMap = {14944=18463, 14945=18463, 14946=18460, 14947=18463, 14939=18459, 14940=18459, 14942=18462, 14943=18463};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18461;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 6715:
	enumType.valueMap = {14940=18528, 14942=18529, 14939=18528};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18527;
	enumType.keyType = STRUCT;
	enumType.size = 3;
	break;

case 6716:
	enumType.valueMap = {14944=18485, 14945=18487, 14946=18484, 14947=18482, 24343=24382, 14939=18481, 14940=18481, 14942=18488, 14943=18482};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18486;
	enumType.keyType = STRUCT;
	enumType.size = 9;
	break;

case 6717:
	enumType.valueMap = {14944=18465, 14945=18467, 14946=18469, 14947=18465, 14939=18464, 14940=18464, 14942=18468, 14943=18465};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18466;
	enumType.keyType = STRUCT;
	enumType.size = 8;
	break;

case 6718:
	enumType.valueMap = {14944=18485, 14945=18487, 14946=18484, 14947=18482, 24343=24382, 14939=18481, 14940=18481, 14942=18488, 14943=18482};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18486;
	enumType.keyType = STRUCT;
	enumType.size = 9;
	break;

case 6719:
	enumType.valueMap = {14944=18508, 14945=18507, 14946=18505, 14947=18504, 24343=24382, 14939=18503, 14940=18503, 14942=18509, 14943=18504};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18506;
	enumType.keyType = STRUCT;
	enumType.size = 9;
	break;

case 6720:
	enumType.valueMap = {14944=18475, 14945=18474, 14946=18472, 14947=18475, 24343=24382, 14939=18471, 14940=18471, 14942=18476, 14943=18475};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18473;
	enumType.keyType = STRUCT;
	enumType.size = 9;
	break;

case 6721:
	enumType.valueMap = {14942=18511, 24343=24382};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18510;
	enumType.keyType = STRUCT;
	enumType.size = 2;
	break;

case 6722:
	enumType.valueMap = {1289=2143, 2762=3493, 572=909, 2766=3492, 63=3489, 2767=3494, 2751=3491};
	enumType.valueType = SPOT;
	enumType.defaultint = 3490;
	enumType.keyType = UNKNOWN1;
	enumType.size = 7;
	break;

case 6723:
	enumType.valueMap = {14937=18592, 14930=18593, 14931=18191, 14932=18594, 14933=18594, 14935=18591};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18590;
	enumType.keyType = STRUCT;
	enumType.size = 6;
	break;

case 6724:
	enumType.valueMap = {14929=18548, 14930=18549, 14931=18554, 14932=18552, 14933=18552, 14935=23259, 14937=18552, 14921=18548, 14925=18548, 14926=18547};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18546;
	enumType.keyType = STRUCT;
	enumType.size = 10;
	break;

case 6725:
	enumType.valueMap = {14937=18578, 14930=18579, 14931=18580, 14932=18578, 14933=18578};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18577;
	enumType.keyType = STRUCT;
	enumType.size = 5;
	break;

case 6726:
	enumType.valueMap = {14937=18558, 14931=18559, 14932=18558, 14933=18558};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18557;
	enumType.keyType = STRUCT;
	enumType.size = 4;
	break;

case 6727:
	enumType.valueMap = {14937=18564, 14930=18563, 14931=18562, 14932=18564, 14933=18564};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18560;
	enumType.keyType = STRUCT;
	enumType.size = 5;
	break;

case 6728:
	enumType.valueMap = {14937=18544, 14931=18545, 14932=18544, 14933=18544};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18543;
	enumType.keyType = STRUCT;
	enumType.size = 4;
	break;

case 6729:
	enumType.valueMap = {14932=18595, 14933=18595, 14931=18588};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18540;
	enumType.keyType = STRUCT;
	enumType.size = 3;
	break;

case 6730:
	enumType.valueMap = {14930=18599, 14931=18598, 14932=18597, 14933=18597};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18569;
	enumType.keyType = STRUCT;
	enumType.size = 4;
	break;

case 6731:
	enumType.valueMap = {14921=18586, 14925=18586, 14929=18586};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18585;
	enumType.keyType = STRUCT;
	enumType.size = 3;
	break;

case 6732:
	enumType.valueMap = {14937=18565, 14930=18567, 14931=18566, 14932=18565, 14933=18565};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18542;
	enumType.keyType = STRUCT;
	enumType.size = 5;
	break;

case 6733:
	enumType.valueMap = {14930=18209, 14931=18213, 14932=18208, 14933=18208};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18205;
	enumType.keyType = STRUCT;
	enumType.size = 4;
	break;

case 6734:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 14677, 14678, 14679, 14680, 14681, 14682, 14683, 14684, 14685, 14686, 14687, 14688, 14689, 19255, 28178, 28505];
	enumType.size = 16;
	break;

case 6735:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 14698, 14699, 14700, 14701, 14702, 14703, 14704, 14705, 14706, 14707, 14708, 14709, 28432];
	enumType.size = 13;
	break;

case 6736:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 14710, 14711, 14712, 14713, 14714, 14715, 14716, 14717, 14718, 14719, 14720, 14721, 19252, 25028];
	enumType.size = 14;
	break;

case 6737:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 14690, 14691, null, 14693, 14694, 14695, null, null, 19253, 24188, 24189, null, null, 28179, 28429, 28430, 24362, 24363, 24364, 24365, 24366, 24367, 24368, 24369, 24370, 24371, 24372, 24373, 31649, 31982, 31983, 31984];
	enumType.size = 27;
	break;

case 6738:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 14663, 14664, 14665, 14666, 14667, 14668, 14669, 14670, 14671, 14672, 14673, 14674, null, 19251, 19340, 19341, 28177, 28504, 31986];
	enumType.size = 18;
	break;

case 6739:
	enumType.valueMap = {1=14541, 2=14545, 3=14549, 4=14542, 5=14546, 6=14550, 7=14572, 8=14573, 9=14575, 10=14543, 11=14547, 12=14551, 13=14576, 14=14577, 15=14578, 16=14580, 17=14581, 18=14582, 19=14553, 20=14561, 21=14554, 22=14562, 23=14555, 24=14563, 25=14579, 26=14568, 27=14569, 28=14574, 29=14570, 30=14571, 31=14583, 32=14584, 33=14585, 34=14587, 35=14589, 36=14592, 37=14593, 38=14594, 39=14595, 40=14596, 41=14597, 42=14598, 43=14600, 44=14602, 45=14603, 46=14604, 47=14605, 48=14606, 49=14607, 50=14608, 51=14557, 52=14558, 53=14559, 54=14565, 55=14566, 56=14567, 1337=14539, 57=14586, 58=14599, 59=14588, 60=14601, 61=14609, 62=14610, 63=14591, 64=14590};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 65;
	break;

case 6740:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 14725, 14726, 14727, 14728, 14729, 14730, 14731, 14732, 14733, 14734, 14735, 14736, null, 14738, 14739, 14741, 14742, 14743, 14744, 14745, 14746, 14747, 14748, 14749, 14750, 14751, 14752, 14753, 14754, 14755, 14756, 14757, 14758, 14759, null, 14760, 14761, 14762, 14763, 14764, 14765, null, 14766, 14767, 14768, 14769, 14770, 14771, 14772, 14773, 14774, 14775, 14776, 14777, null, null, 14778, 14779, 14780, 14781, 14782, 14783, 14784, 14785, 14786, 14787, 14788, 14789, 14790, 14791, 14792, null, 14793, 14794, 14795, 14798, 14797, 14796, 14799, 14800, 14801, 14802, 14803, 14804, 14805, 14806, 14807, 14808, 14809, 14810, 14811, 14812, 14813, 14814, 14815, 14816, 14817, 14818, 14819, 14820, 14821, 14822, 14823, 14824, 14825, 14826, 14827, 14828, 14829, 14830, 14831, 14832, 14833, 14834, 14835, 14836, 14837, 14838, 14839, 14840, 14841, 14842, 14843, 14844, 14845, 14846, 14847, 14848, 14849, 14850, 14851, 14852, 14853, 14854, 14855, 14856, 14857, 14858, 14859, 14860, 14861, 14862, 14863, 14864, 14865, null, 14866, 14867, 14868, 14869, 14870, 14871, 14872, 14873, 14875, 14740, 14874, 14876, 14877, 14878, 14879, 14880, null, 19254, 19342, 19343, 20279, 20280, 28180, 28493, 28431, 31985];
	enumType.size = 164;
	break;

case 6741:
	enumType.valueType = STRING;
	enumType.defaultstr = "Unknown";
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, Fastest, Fast, Average, Slow, Slowest];
	enumType.size = 5;
	break;

case 6742:
	enumType.valueType = STRING;
	enumType.defaultstr = "Unknown";
	enumType.keyType = INT;
	enumType.valueArray = [None, Melee, Ranged, Magic, Ranged, Melee, Ranged, Magic, Hybrid, All, Magic];
	enumType.size = 11;
	break;

case 6743:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 199;
	enumType.keyType = INT;
	enumType.valueArray = [199, 197, 200, 202, 208, 197, 200, 202, null, 199];
	enumType.size = 9;
	break;

case 6744:
	enumType.valueType = STRING;
	enumType.defaultstr = "None";
	enumType.keyType = INT;
	enumType.valueArray = [None, Air, Water, Earth, Fire, Stabbing, Slashing, Crushing, Arrow, Bolt, Thrown];
	enumType.size = 11;
	break;

case 6745:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 197;
	enumType.keyType = INT;
	enumType.valueArray = [197, 14364, 14365, 14366, 14367, 240, 234, 256, 14405, 14370, 251, 202];
	enumType.size = 12;
	break;

case 6746:
	enumType.valueType = STRING;
	enumType.defaultstr = "None";
	enumType.keyType = INT;
	enumType.valueArray = [null, Melee, Ranged, Magic];
	enumType.size = 3;
	break;

case 6747:
	enumType.valueMap = {1024=:, 1025=!, 1=F1, 2=F2, 3=F3, 4=F4, 5=F5, 6=F6, 7=F7, 8=F8, 9=F9, 10=F10, 11=F11, 12=F12, 13=Esc, 16=1, 17=2, 18=3, 19=4, 20=5, 21=6, 22=7, 23=8, 24=9, 25=0, 26=-, 27==, 32=Q, 33=W, 34=E, 35=R, 36=T, 37=Y, 38=U, 39=I, 40=O, 41=P, 42=[, 43=], 48=A, 49=S, 50=D, 51=F, 52=G, 53=H, 54=J, 55=K, 56=L, 57=;, 58=:, 59=#, 64=Z, 65=X, 66=C, 67=V, 68=B, 69=N, 70=M, 71=,, 72=., 73=/, 74=\, 80=Tab, 81=Shift, 82=Ctrl, 83=Space, 84=Enter, 85=Backspace, 86=Alt, 87=Numpad +, 88=Numpad -, 89=*, 90=Numpad /, 96=Left Arrow, 97=Right Arrow, 98=Up Arrow, 99=Down, 100=Insert, 101=Delete, 102=Home, 103=End, 104=Page Up, 105=Page Down, 128= , 129= , 130= , 131= , 132= , 133= , 134= , 135= , 136= , 137= , 138= , 139= , 140= , 141= , 142= , 143= , 150=&, 152= , 153=<, 160=>, 161={, 162=}, 1001=?, 1002=?, 1003=-, 1004=<, 1005=+, 1006=?, 1007=?, 1008=?, 1009=&, 1010=?, 1011=", 1012=', 1013=(, 1014=?, 1015=_, 1016=?, 1017=?, 1018=), 1019=$, 1020=m, 1021=?, 1022=*, 1023=;};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 130;
	break;

case 6748:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14677, 14679, 14681, 14682, 14683, 14685, 14688, 14686, 14698, 14700, 14704, 14707, 14705, 14711];
	enumType.size = 14;
	break;

case 6749:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14674, 14672, 14669, 14671, 14667, 14666, 14664, 14663, 14668, 14711];
	enumType.size = 10;
	break;

case 6750:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14734, 14736, 14731, 14733, 14729, 14727, 14725, 14728, 14711];
	enumType.size = 9;
	break;

case 6759:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14540, 14544, 14548, 14552, 14556, 14560, 14564, 14572, 14573, 14575, 14579, 14576, 14577, 14578, 14580, 14581, 14582, 14568, 14574, 14569, 14571, 14570];
	enumType.size = 22;
	break;

case 6760:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14583, 14584, 14585, 14586, 14587, 14588, 14589, 14590, 14591, 14592, 14593, 14594, 14595, 14596, 14597, 14598, 14599, 14600, 14601, 14602, 14603, 14604, 14605, 14606, 14607, 14608, 14610, 14609];
	enumType.size = 28;
	break;

case 6761:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [9236, 9240, 9237, 9238, 9241, 9239, 9242, 9243, 9244, 9245, 31881];
	enumType.size = 11;
	break;

case 6762:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25613, 25614, 25615, 25616, 25617, 25618, 25619, 25620, 25621];
	enumType.size = 9;
	break;

case 6763:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27181, 27186, null, null, 27182, null, null, 27183, null, 27185, 27184];
	enumType.size = 6;
	break;

case 6764:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [571];
	enumType.size = 1;
	break;

case 6765:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [575];
	enumType.size = 1;
	break;

case 6766:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [569];
	enumType.size = 1;
	break;

case 6767:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [573];
	enumType.size = 1;
	break;

case 6768:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5527, 13630];
	enumType.size = 2;
	break;

case 6769:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5529, 13631];
	enumType.size = 2;
	break;

case 6770:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5531, 13632];
	enumType.size = 2;
	break;

case 6771:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5535, 13633];
	enumType.size = 2;
	break;

case 6772:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5537, 13634];
	enumType.size = 2;
	break;

case 6773:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5533, 13635];
	enumType.size = 2;
	break;

case 6774:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5539, 13636];
	enumType.size = 2;
	break;

case 6775:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5543, 13637];
	enumType.size = 2;
	break;

case 6776:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5541, 13638];
	enumType.size = 2;
	break;

case 6777:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5545, 13639];
	enumType.size = 2;
	break;

case 6778:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5547, 13640];
	enumType.size = 2;
	break;

case 6779:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5549, 13641];
	enumType.size = 2;
	break;

case 6780:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6782, 6783];
	enumType.size = 2;
	break;

case 6781:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Tea, Other Drinks];
	enumType.size = 2;
	break;

case 6782:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4237, 4240, 4242, 4243, 4245, 4246];
	enumType.size = 6;
	break;

case 6783:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7811, 1995, 28255, 28252, 28251];
	enumType.size = 5;
	break;

case 6784:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6787, 6786, 6789, 6788, 6790, 6791, 6793, 6792, 9964];
	enumType.size = 9;
	break;

case 6785:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Dough, Pie, Stew, Pizza, Cake, Cut Ingredients, Baked Potatoes, Kebab, Sushi];
	enumType.size = 9;
	break;

case 6786:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2315, 2321, 2319, 2317, 7164, 7166, 7168, 7172, 7174, 7176, 7182, 7184, 7186, 7192, 7194, 7196, 28655, 7202, 7204, 7206, 7212, 7214, 7216];
	enumType.size = 23;
	break;

case 6787:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2307, 1953, 2283, 1863];
	enumType.size = 4;
	break;

case 6788:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2285, 2287, 2293, 2297, 2301];
	enumType.size = 5;
	break;

case 6789:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1997, 2001, 2009];
	enumType.size = 3;
	break;

case 6790:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7529, 1889, 1897];
	enumType.size = 3;
	break;

case 6791:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7070, 1869, 7074, 7076, 7080, 1871, 7086, 2104, 2106, 2110, 2112, 2116, 2118, 2122, 2124, 5984, 3162, 5976];
	enumType.size = 18;
	break;

case 6792:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1875, 1881, 1885];
	enumType.size = 3;
	break;

case 6793:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7072, 7062, 7064, 6703, 7054, 6705, 7056, 7066, 7058, 7068, 7060, 19949];
	enumType.size = 12;
	break;

case 6794:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6796, 6797, 6800, 6798, 6799, 6801, 6802, 7554, 7739];
	enumType.size = 9;
	break;

case 6795:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Meat, Fish, Bread, Pies, Cake, Stew, Baked Potatoes, Bacon, Other Recipes];
	enumType.size = 9;
	break;

case 6796:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2140, 4291, 2142, 4293, 9436, 23060, 3228, 23062, 1861, 14540, 14543, 3369, 3371, 7521, 3373, 2343];
	enumType.size = 16;
	break;

case 6797:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30075, 13433, 315, 3151, 325, 319, 3146, 347, 355, 333, 339, 351, 329, 3381, 361, 3144, 10136, 5003, 379, 365, 5091, 373, 5089, 2149, 7946, 385, 5093, 19948, 397, 34729, 15266, 391, 15272, 21521];
	enumType.size = 34;
	break;

case 6798:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2325, 2327, 7170, 2323, 7178, 7188, 7198, 28656, 7208, 7218];
	enumType.size = 10;
	break;

case 6799:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7530, 1891];
	enumType.size = 2;
	break;

case 6800:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2309, 2289, 1865];
	enumType.size = 3;
	break;

case 6801:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2003, 2011];
	enumType.size = 2;
	break;

case 6802:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6701, 7078, 7084, 7082];
	enumType.size = 4;
	break;

case 6803:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6805, 6806, 6807];
	enumType.size = 3;
	break;

case 6804:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Milk Churning, Cream Churning, Butter Churning];
	enumType.size = 3;
	break;

case 6805:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2130, 6697, 18789];
	enumType.size = 3;
	break;

case 6806:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25634, 25635];
	enumType.size = 2;
	break;

case 6807:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25636];
	enumType.size = 1;
	break;

case 6808:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25566, 25567, 25568];
	enumType.size = 3;
	break;

case 6809:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6811, 6797, 6812, 6813, 6814, 7555, 6815];
	enumType.size = 7;
	break;

case 6810:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Meat, Fish, Cake, Stew, Potato Toppings, Bacon, Other Recipes];
	enumType.size = 7;
	break;

case 6811:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2140, 4291, 2142, 4293, 23060, 3228, 23062, 1861, 14540, 14543, 9980, 3369, 7223, 6299, 6297, 3371, 7521, 9988, 3373, 2878, 2343];
	enumType.size = 21;
	break;

case 6812:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7530];
	enumType.size = 1;
	break;

case 6813:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2003, 2011];
	enumType.size = 2;
	break;

case 6814:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7084, 7082];
	enumType.size = 2;
	break;

case 6815:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1781, 4456, 4239, 5988];
	enumType.size = 4;
	break;

case 6816:
	enumType.valueMap = {9740=Make, 9741=Make, 9742=Make, 9743=Make, 6674=Cook, 6677=Craft, 6678=Craft, 6679=Craft, 7739=Cook, 9814=Tan, 8791=Smith, 8792=Smith, 8793=Smith, 8794=Smith, 8795=Smith, 8796=Smith, 6761=Enchant, 6762=Tan, 7275=Tune, 7276=Tune, 6764=Enchant, 7277=Tune, 6765=Enchant, 7278=Tune, 6766=Enchant, 6767=Enchant, 6768=Enchant, 6769=Enchant, 6770=Enchant, 6771=Enchant, 6772=Enchant, 6773=Enchant, 6774=Enchant, 6775=Enchant, 6776=Enchant, 6777=Enchant, 6778=Enchant, 7802=Create, 6779=Enchant, 7803=Create, 7804=Create, 7805=Create, 6782=Brew, 7806=Create, 6783=Brew, 7807=Create, 7808=Create, 7809=Create, 6786=Mix, 7810=Create, 6787=Mix, 7811=Create, 6788=Mix, 6789=Mix, 6790=Mix, 7814=Create, 6791=Chop, 7815=Create, 6792=Mix, 7816=Create, 6793=Mix, 7817=Create, 8330=Fletch, 7818=Create, 8331=Craft, 7819=Create, 6796=Cook, 8332=Craft, 7820=Create, 6797=Cook, 7821=Create, 6798=Cook, 7822=Create, 6799=Cook, 5775=Craft, 7823=Create, 6800=Cook, 5776=Craft, 7824=Create, 6801=Cook, 7825=Create, 6802=Cook, 6805=Churn, 6806=Churn, 6807=Churn, 6808=Gut, 6811=Cook, 6812=Cook, 9884=Fletch, 6813=Cook, 6814=Cook, 6815=Cook, 6825=Plant, 6826=Water, 6827=Plant, 6828=Water, 6829=Craft, 6830=Soak, 6831=Harden, 6834=Grind, 6835=Grind, 6836=Grind, 6837=Mush, 6840=Mix, 6841=Clean, 6842=Mix, 6843=Mix, 6844=Mix, 6845=Clean, 6846=Mix, 6847=Mix, 6850=Runecraft, 6851=Runecraft, 6856=Cook, 6857=Cook, 6858=Mix, 6859=Mix, 6860=Mix, 6863=Clean, 6864=Mix, 6865=Mix, 6866=Mix, 6867=Mix, 6868=Fill, 6871=Infuse, 6872=Infuse, 6873=Infuse, 6874=Infuse, 6875=Infuse, 6876=Infuse, 6881=Fletch, 6882=Fletch, 6883=Fletch, 6884=Fletch, 3300=Create, 6885=Fletch, 6886=Fletch, 6887=Fletch, 6888=Fletch, 6889=Fletch, 6890=Fletch, 6891=Add Feather, 9964=Prepare, 6892=Add Tips, 6893=Add String, 6898=Spin, 6899=Sew, 6900=Sew, 6901=Sew, 6902=Sew, 6903=Sew, 6904=Sew, 6905=Sew, 6906=Sew, 9467=Melt, 6907=Sew, 9468=Collect, 6908=Sew, 9469=Craft, 6909=Leatherwork, 9470=Mix, 6910=Leatherwork, 6911=Leatherwork, 6912=Leatherwork, 6913=Leatherwork, 9473=Sing, 6914=Leatherwork, 9474=Sing, 6915=Leatherwork, 9475=Sing, 6916=Leatherwork, 9476=Sing, 6917=Leatherwork, 9477=Sing, 6918=Leatherwork, 6921=Smelt, 6922=Smith, 6923=Smith, 6924=Smith, 6925=Smith, 6926=Smith, 6927=Smith, 6928=Smith, 6929=Smith, 6930=Smith, 6931=Smith, 6934=Infuse, 6935=Infuse, 6936=Infuse, 6937=Infuse, 6938=Infuse, 6947=Fletch, 6948=Fletch, 6949=Fletch, 6950=Fletch, 6951=Fletch, 6952=Fletch, 6953=Fletch, 6954=Fletch, 6955=Fletch, 6956=Fletch, 6957=Fletch, 6958=Add String, 6959=Add String, 6960=Build, 6961=Cut, 6962=Add Tips, 6963=Add Tips, 6964=Add Tips, 6965=Add Tips, 6966=Add Feather, 6967=Add Feather, 6968=Add Feather, 6969=Fletch, 6970=Cut, 7994=Fletch, 6971=Sew, 6972=Craft, 6973=Craft, 6974=Craft, 6975=Craft, 6976=Craft, 6977=Blow, 6978=Melt, 8002=Craft, 6979=Melt, 6980=Craft, 6983=Cut, 6984=Craft, 6985=Craft, 6986=String, 6989=Tan, 6990=Tan, 6991=Leatherwork, 6992=Leatherwork, 6993=Leatherwork, 6994=Leatherwork, 6995=Leatherwork, 6996=Leatherwork, 6997=Leatherwork, 6998=Leatherwork, 6999=Craft, 7000=Craft, 7512=Imbue, 10072=Smelt, 7001=Craft, 7002=Craft, 7003=Craft, 9056=Craft, 7014=Mould, 7015=Fire, 7016=Mould, 7017=Fire, 7018=Add Rune, 7019=Mould, 7020=Fire, 7021=Add Rune, 7022=Mould, 7023=Fire, 7024=Add Rune, 7025=Mould, 7026=Fire, 7027=Add Rune, 7028=Mould, 7029=Fire, 7030=Add Rune, 7031=Mould, 7032=Fire, 9592=Craft, 7033=Add Rune, 9593=Craft, 7034=Soften, 9594=Craft, 7035=Mould, 9595=Craft, 7036=Teleport, 7037=Teleport, 7038=Teleport, 7039=Teleport, 7552=Stack, 7040=Teleport, 7041=Teleport, 7554=Cook, 7555=Cook, 7044=Weave, 7556=Infuse, 7045=Weave, 9605=Construct, 7046=Spin, 7047=Chop, 7048=Order, 7049=Grind, 7050=Order, 8076=Smith, 7053=Fill, 7054=Soften, 7055=Mix, 8083=Create, 7063=Take, 7064=Take, 7065=Take, 7066=Smelt, 7067=Smelt, 7068=Smelt, 7069=Smelt, 7070=Smelt, 7071=Smith, 7072=Smith, 7073=Smith, 7074=Smith, 7075=Smith, 7076=Smith, 7077=Smelt, 7078=Smith, 7083=Smelt, 7084=Smelt, 7085=Smith, 7086=Smith, 7087=Smith, 7088=Smith, 7089=Smith, 7090=Smith, 7091=Smith, 7092=Smith, 7093=Smith, 7096=Smelt, 7097=Smith, 7098=Smith, 7099=Smith, 7100=Smith, 7101=Smith, 7102=Smelt, 7103=Smith, 7104=Smith, 7105=Smith, 7106=Smith, 7112=Craft, 7115=Smith, 7116=Smith, 7652=Smith, 998=Smith};
	enumType.valueType = STRING;
	enumType.defaultstr = "Make";
	enumType.keyType = ENUM;
	enumType.size = 343;
	break;

case 6817:
	enumType.valueMap = {9740=14145, 9741=14145, 9742=14145, 9743=14145, 6674=14145, 6677=14173, 6678=14173, 6679=14149, 7739=14145, 9814=14149, 8791=14177, 8792=14177, 8793=14177, 8794=14177, 8795=14177, 8796=14177, 6761=14169, 6762=14169, 7275=14169, 7276=14169, 6764=14169, 7277=14169, 6765=14169, 7278=14169, 6766=14169, 6767=14169, 6768=14173, 6769=14173, 6770=14173, 6771=14173, 6772=14173, 6773=14173, 6774=14173, 6775=14173, 6776=14173, 6777=14173, 6778=14173, 7802=20390, 6779=14173, 7803=20390, 7804=20390, 7805=20390, 6782=14145, 7806=20390, 6783=14145, 7807=20390, 7808=20390, 7809=20390, 6786=14145, 7810=20390, 6787=14145, 7811=20390, 6788=14145, 6789=14145, 6790=14145, 7814=20390, 6791=14145, 7815=20390, 6792=14145, 7816=20390, 6793=14145, 7817=20390, 8330=14161, 7818=20390, 8331=14149, 7819=20390, 6796=14145, 8332=14149, 7820=20390, 6797=14145, 7821=20390, 6798=14145, 7822=20390, 6799=14145, 5775=14161, 7823=20390, 6800=14145, 5776=14161, 7824=20390, 6801=14145, 7825=20390, 6802=14145, 6805=14145, 6806=14145, 6807=14145, 6808=14145, 6811=14145, 6812=14145, 9884=14161, 6813=14145, 6814=14145, 6815=14145, 6825=14153, 6826=14153, 6827=14153, 6828=14153, 6829=14153, 6830=14157, 6831=14157, 6834=14165, 6835=14145, 6836=14165, 6837=14165, 6840=14165, 6841=14165, 6842=14165, 6843=14165, 6844=14165, 6845=14165, 6846=14165, 6847=14165, 6850=14173, 6851=14173, 6856=14145, 6857=14145, 6858=14145, 6859=14145, 6860=14145, 6863=14165, 6864=14165, 6865=14165, 6866=14165, 6867=14165, 6871=14181, 6872=14181, 6873=14181, 6874=14181, 6875=14181, 6876=14181, 6881=14161, 3298=14181, 6882=14161, 6883=14161, 6884=14161, 3300=20390, 6885=14161, 6886=14161, 6887=14161, 6888=14161, 6889=14161, 6890=14161, 6891=14161, 9964=14145, 6892=14161, 6893=14161, 6898=14149, 6899=14149, 6900=14149, 6901=14149, 6902=14149, 6903=14149, 6904=14149, 6905=14149, 6906=14149, 9467=14149, 6907=14149, 9468=14149, 6908=14149, 9469=14149, 6909=14149, 9470=14165, 6910=14149, 6911=14149, 6912=14149, 6913=14149, 9473=14177, 6914=14149, 9474=14177, 6915=14149, 9475=14177, 6916=14149, 9476=14177, 6917=14149, 9477=14177, 6918=14149, 6921=14177, 6922=14177, 6923=14177, 6924=14177, 6925=14177, 6926=14177, 6927=14177, 6928=14177, 6929=14177, 6930=14177, 6931=14177, 6934=14181, 6935=14181, 6936=14181, 6937=14181, 6938=14181, 6947=14161, 6948=14161, 6949=14161, 6950=14161, 6951=14161, 6952=14161, 6953=14161, 6954=14161, 6955=14161, 6956=14161, 6957=14161, 6958=14161, 6959=14161, 6960=14161, 6961=14161, 6962=14161, 6963=14161, 6964=14161, 6965=14161, 6966=14161, 6967=14161, 6968=14161, 6969=14161, 6970=14149, 7994=14161, 6971=14149, 6972=14149, 6973=14149, 6974=14149, 6975=14149, 6976=14149, 6977=14149, 6978=14149, 8002=14149, 6979=14149, 6980=14149, 6983=14149, 6984=14149, 6985=14149, 6986=14149, 6989=14149, 6990=14149, 6991=14149, 6992=14149, 6993=14149, 6994=14149, 6995=14149, 6996=14149, 6997=14149, 6998=14149, 6999=14149, 7000=14149, 7512=14173, 10072=14177, 7001=14149, 7002=14149, 7003=14149, 9056=14149, 7014=14149, 7015=14149, 7016=14149, 7017=14149, 7018=14149, 7019=14149, 7020=14149, 7021=14149, 7022=14149, 7023=14149, 7024=14149, 7025=14149, 7026=14149, 7027=14149, 7028=14149, 7029=14149, 7030=14149, 7031=14149, 7032=14149, 9592=14149, 7033=14149, 9593=14149, 7034=14149, 9594=14149, 7035=14149, 9595=14149, 7036=14193, 7037=14193, 7038=14193, 7039=14193, 7552=14145, 7040=14193, 7041=14193, 7554=14145, 7555=14145, 7044=14149, 7556=14181, 7045=14149, 9605=24970, 7046=14149, 7047=14185, 7048=14193, 7049=14165, 7050=14193, 8076=14177, 7053=14197, 7054=14197, 7055=14197, 8083=14169, 7063=14177, 7064=14177, 7065=14177, 7066=14177, 7067=14177, 7068=14177, 7069=14177, 7070=14177, 7071=14177, 7072=14177, 7073=14177, 7074=14177, 7075=14177, 7076=14177, 7077=14177, 7078=14177, 7083=14177, 7084=14177, 7085=14177, 7086=14177, 7087=14177, 7088=14177, 7089=14177, 7090=14177, 7091=14177, 7092=14177, 7093=14177, 7096=14177, 7097=14177, 7098=14177, 7099=14177, 7100=14177, 7101=14177, 7102=14177, 7103=14177, 7104=14177, 7105=14177, 7106=14177, 7112=14149, 7115=14177, 7116=14177, 7652=14177, 998=14177};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = ENUM;
	enumType.size = 343;
	break;

case 6818:
	enumType.valueMap = {9740=14146, 9741=14146, 9742=14146, 9743=14146, 6674=14146, 6677=14174, 6678=14174, 6679=14150, 7739=14146, 9814=14150, 8791=14178, 8792=14178, 8793=14178, 8794=14178, 8795=14178, 8796=14178, 6761=14170, 6762=14170, 7275=14170, 7276=14170, 6764=14170, 7277=14170, 6765=14170, 7278=14170, 6766=14170, 6767=14170, 6768=14174, 6769=14174, 6770=14174, 6771=14174, 6772=14174, 6773=14174, 6774=14174, 6775=14174, 6776=14174, 6777=14174, 6778=14174, 7802=20392, 6779=14174, 7803=20392, 7804=20392, 7805=20392, 6782=14146, 7806=20392, 6783=14146, 7807=20392, 7808=20392, 7809=20392, 6786=14146, 7810=20392, 6787=14146, 7811=20392, 6788=14146, 6789=14146, 6790=14146, 7814=20392, 6791=14146, 7815=20392, 6792=14146, 7816=20392, 6793=14146, 7817=20392, 8330=14162, 7818=20392, 8331=14150, 7819=20392, 6796=14146, 8332=14150, 7820=20392, 6797=14146, 7821=20392, 6798=14146, 7822=20392, 6799=14146, 5775=14162, 7823=20392, 6800=14146, 5776=14162, 7824=20392, 6801=14146, 7825=20392, 6802=14146, 6805=14146, 6806=14146, 6807=14146, 6808=14146, 6811=14146, 6812=14146, 9884=14162, 6813=14146, 6814=14146, 6815=14146, 6825=14154, 6826=14154, 6827=14154, 6828=14154, 6829=14154, 6830=14158, 6831=14158, 6834=14166, 6835=14146, 6836=14166, 6837=14166, 6840=14166, 6841=14166, 6842=14166, 6843=14166, 6844=14166, 6845=14166, 6846=14166, 6847=14166, 6850=14174, 6851=14174, 6856=14146, 6857=14146, 6858=14146, 6859=14146, 6860=14146, 6863=14166, 6864=14166, 6865=14166, 6866=14166, 6867=14166, 6871=14182, 6872=14182, 6873=14182, 6874=14182, 6875=14182, 6876=14182, 6881=14162, 3298=14182, 6882=14162, 6883=14162, 6884=14162, 3300=20392, 6885=14162, 6886=14162, 6887=14162, 6888=14162, 6889=14162, 6890=14162, 6891=14162, 9964=14146, 6892=14162, 6893=14162, 6898=14150, 6899=14150, 6900=14150, 6901=14150, 6902=14150, 6903=14150, 6904=14150, 6905=14150, 6906=14150, 9467=14150, 6907=14150, 9468=14150, 6908=14150, 9469=14150, 6909=14150, 9470=14166, 6910=14150, 6911=14150, 6912=14150, 6913=14150, 9473=14178, 6914=14150, 9474=14178, 6915=14150, 9475=14178, 6916=14150, 9476=14178, 6917=14150, 9477=14178, 6918=14150, 6921=14178, 6922=14178, 6923=14178, 6924=14178, 6925=14178, 6926=14178, 6927=14178, 6928=14178, 6929=14178, 6930=14178, 6931=14178, 6934=14182, 6935=14182, 6936=14182, 6937=14182, 6938=14182, 6947=14162, 6948=14162, 6949=14162, 6950=14162, 6951=14162, 6952=14162, 6953=14162, 6954=14162, 6955=14162, 6956=14162, 6957=14162, 6958=14162, 6959=14162, 6960=14162, 6961=14162, 6962=14162, 6963=14162, 6964=14162, 6965=14162, 6966=14162, 6967=14162, 6968=14162, 6969=14162, 6970=14150, 7994=14162, 6971=14150, 6972=14150, 6973=14150, 6974=14150, 6975=14150, 6976=14150, 6977=14150, 6978=14150, 8002=14150, 6979=14150, 6980=14150, 6983=14150, 6984=14150, 6985=14150, 6986=14150, 6989=14150, 6990=14150, 6991=14150, 6992=14150, 6993=14150, 6994=14150, 6995=14150, 6996=14150, 6997=14150, 6998=14150, 6999=14150, 7000=14150, 7512=14174, 10072=14178, 7001=14150, 7002=14150, 7003=14150, 9056=14150, 7014=14150, 7015=14150, 7016=14150, 7017=14150, 7018=14150, 7019=14150, 7020=14150, 7021=14150, 7022=14150, 7023=14150, 7024=14150, 7025=14150, 7026=14150, 7027=14150, 7028=14150, 7029=14150, 7030=14150, 7031=14150, 7032=14150, 9592=14150, 7033=14150, 9593=14150, 7034=14150, 9594=14150, 7035=14150, 9595=14150, 7036=14194, 7037=14194, 7038=14194, 7039=14194, 7552=14146, 7040=14194, 7041=14194, 7554=14146, 7555=14146, 7044=14150, 7556=14182, 7045=14150, 9605=24971, 7046=14150, 7047=14186, 7048=14194, 7049=14166, 7050=14194, 8076=14178, 7053=14198, 7054=14198, 7055=14198, 8083=14170, 7063=14178, 7064=14178, 7065=14178, 7066=14178, 7067=14178, 7068=14178, 7069=14178, 7070=14178, 7071=14178, 7072=14178, 7073=14178, 7074=14178, 7075=14178, 7076=14178, 7077=14178, 7078=14178, 7083=14178, 7084=14178, 7085=14178, 7086=14178, 7087=14178, 7088=14178, 7089=14178, 7090=14178, 7091=14178, 7092=14178, 7093=14178, 7096=14178, 7097=14178, 7098=14178, 7099=14178, 7100=14178, 7101=14178, 7102=14178, 7103=14178, 7104=14178, 7105=14178, 7106=14178, 7112=14150, 7115=14178, 7116=14178, 7652=14178, 998=14178};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = ENUM;
	enumType.size = 343;
	break;

case 6819:
	enumType.valueMap = {9740=14147, 9741=14147, 9742=14147, 9743=14147, 6674=14147, 6677=14175, 6678=14175, 6679=14151, 7739=14147, 9814=14151, 8791=14179, 8792=14179, 8793=14179, 8794=14179, 8795=14179, 8796=14179, 6761=14171, 6762=14171, 7275=14171, 7276=14171, 6764=14171, 7277=14171, 6765=14171, 7278=14171, 6766=14171, 6767=14171, 6768=14175, 6769=14175, 6770=14175, 6771=14175, 6772=14175, 6773=14175, 6774=14175, 6775=14175, 6776=14175, 6777=14175, 6778=14175, 7802=20394, 6779=14175, 7803=20394, 7804=20394, 7805=20394, 6782=14147, 7806=20394, 6783=14147, 7807=20394, 7808=20394, 7809=20394, 6786=14147, 7810=20394, 6787=14147, 7811=20394, 6788=14147, 6789=14147, 6790=14147, 7814=20394, 6791=14147, 7815=20394, 6792=14147, 7816=20394, 6793=14147, 7817=20394, 8330=14163, 7818=20394, 8331=14151, 7819=20394, 6796=14147, 8332=14151, 7820=20394, 6797=14147, 7821=20394, 6798=14147, 7822=20394, 6799=14147, 5775=14163, 7823=20394, 6800=14147, 5776=14163, 7824=20394, 6801=14147, 7825=20394, 6802=14147, 6805=14147, 6806=14147, 6807=14147, 6808=14147, 6811=14147, 6812=14147, 9884=14163, 6813=14147, 6814=14147, 6815=14147, 6825=14155, 6826=14155, 6827=14155, 6828=14155, 6829=14155, 6830=14159, 6831=14159, 6834=14167, 6835=14147, 6836=14167, 6837=14167, 6840=14167, 6841=14167, 6842=14167, 6843=14167, 6844=14167, 6845=14167, 6846=14167, 6847=14167, 6850=14175, 6851=14175, 6856=14147, 6857=14147, 6858=14147, 6859=14147, 6860=14147, 6863=14167, 6864=14167, 6865=14167, 6866=14167, 6867=14167, 6871=14183, 6872=14183, 6873=14183, 6874=14183, 6875=14183, 6876=14183, 6881=14163, 3298=14183, 6882=14163, 6883=14163, 6884=14163, 3300=20394, 6885=14163, 6886=14163, 6887=14163, 6888=14163, 6889=14163, 6890=14163, 6891=14163, 9964=14147, 6892=14163, 6893=14163, 6898=14151, 6899=14151, 6900=14151, 6901=14151, 6902=14151, 6903=14151, 6904=14151, 6905=14151, 6906=14151, 9467=14151, 6907=14151, 9468=14151, 6908=14151, 9469=14151, 6909=14151, 9470=14167, 6910=14151, 6911=14151, 6912=14151, 6913=14151, 9473=14179, 6914=14151, 9474=14179, 6915=14151, 9475=14179, 6916=14151, 9476=14179, 6917=14151, 9477=14179, 6918=14151, 6921=14179, 6922=14179, 6923=14179, 6924=14179, 6925=14179, 6926=14179, 6927=14179, 6928=14179, 6929=14179, 6930=14179, 6931=14179, 6934=14183, 6935=14183, 6936=14183, 6937=14183, 6938=14183, 6947=14163, 6948=14163, 6949=14163, 6950=14163, 6951=14163, 6952=14163, 6953=14163, 6954=14163, 6955=14163, 6956=14163, 6957=14163, 6958=14163, 6959=14163, 6960=14163, 6961=14163, 6962=14163, 6963=14163, 6964=14163, 6965=14163, 6966=14163, 6967=14163, 6968=14163, 6969=14163, 6970=14151, 7994=14163, 6971=14151, 6972=14151, 6973=14151, 6974=14151, 6975=14151, 6976=14151, 6977=14151, 6978=14151, 8002=14151, 6979=14151, 6980=14151, 6983=14151, 6984=14151, 6985=14151, 6986=14151, 6989=14151, 6990=14151, 6991=14151, 6992=14151, 6993=14151, 6994=14151, 6995=14151, 6996=14151, 6997=14151, 6998=14151, 6999=14151, 7000=14151, 7512=14175, 10072=14179, 7001=14151, 7002=14151, 7003=14151, 9056=14151, 7014=14151, 7015=14151, 7016=14151, 7017=14151, 7018=14151, 7019=14151, 7020=14151, 7021=14151, 7022=14151, 7023=14151, 7024=14151, 7025=14151, 7026=14151, 7027=14151, 7028=14151, 7029=14151, 7030=14151, 7031=14151, 7032=14151, 9592=14151, 7033=14151, 9593=14151, 7034=14151, 9594=14151, 7035=14151, 9595=14151, 7036=14195, 7037=14195, 7038=14195, 7039=14195, 7552=14147, 7040=14195, 7041=14195, 7554=14147, 7555=14147, 7044=14151, 7556=14183, 7045=14151, 9605=24972, 7046=14151, 7047=14187, 7048=14195, 7049=14167, 7050=14195, 8076=14179, 7053=14199, 7054=14199, 7055=14199, 8083=14171, 7063=14179, 7064=14179, 7065=14179, 7066=14179, 7067=14179, 7068=14179, 7069=14179, 7070=14179, 7071=14179, 7072=14179, 7073=14179, 7074=14179, 7075=14179, 7076=14179, 7077=14179, 7078=14179, 7083=14179, 7084=14179, 7085=14179, 7086=14179, 7087=14179, 7088=14179, 7089=14179, 7090=14179, 7091=14179, 7092=14179, 7093=14179, 7096=14179, 7097=14179, 7098=14179, 7099=14179, 7100=14179, 7101=14179, 7102=14179, 7103=14179, 7104=14179, 7105=14179, 7106=14179, 7112=14151, 7115=14179, 7116=14179, 7652=14179, 998=14179};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = ENUM;
	enumType.size = 343;
	break;

case 6820:
	enumType.valueMap = {9740=14148, 9741=14148, 9742=14148, 9743=14148, 6674=14148, 6677=14176, 6678=14176, 6679=14152, 7739=14148, 9814=14152, 8791=14180, 8792=14180, 8793=14180, 8794=14180, 8795=14180, 8796=14180, 6761=14172, 6762=14172, 7275=14172, 7276=14172, 6764=14172, 7277=14172, 6765=14172, 7278=14172, 6766=14172, 6767=14172, 6768=14176, 6769=14176, 6770=14176, 6771=14176, 6772=14176, 6773=14176, 6774=14176, 6775=14176, 6776=14176, 6777=14176, 6778=14176, 7802=20393, 6779=14176, 7803=20393, 7804=20393, 7805=20393, 6782=14148, 7806=20393, 6783=14148, 7807=20393, 7808=20393, 7809=20393, 6786=14148, 7810=20393, 6787=14148, 7811=20393, 6788=14148, 6789=14148, 6790=14148, 7814=20393, 6791=14148, 7815=20393, 6792=14148, 7816=20393, 6793=14148, 7817=20393, 8330=14164, 7818=20393, 8331=14152, 7819=20393, 6796=14148, 8332=14152, 7820=20393, 6797=14148, 7821=20393, 6798=14148, 7822=20393, 6799=14148, 5775=14164, 7823=20393, 6800=14148, 5776=14164, 7824=20393, 6801=14148, 7825=20393, 6802=14148, 6805=14148, 6806=14148, 6807=14148, 6808=14148, 6811=14148, 6812=14148, 9884=14164, 6813=14148, 6814=14148, 6815=14148, 6825=14156, 6826=14156, 6827=14156, 6828=14156, 6829=14156, 6830=14160, 6831=14160, 6834=14168, 6835=14148, 6836=14168, 6837=14168, 6840=14168, 6841=14168, 6842=14168, 6843=14168, 6844=14168, 6845=14168, 6846=14168, 6847=14168, 6850=14176, 6851=14176, 6856=14148, 6857=14148, 6858=14148, 6859=14148, 6860=14148, 6863=14168, 6864=14168, 6865=14168, 6866=14168, 6867=14168, 6871=14184, 6872=14184, 6873=14184, 6874=14184, 6875=14184, 6876=14184, 6881=14164, 3298=14184, 6882=14164, 6883=14164, 6884=14164, 3300=20393, 6885=14164, 6886=14164, 6887=14164, 6888=14164, 6889=14164, 6890=14164, 6891=14164, 9964=14148, 6892=14164, 6893=14164, 6898=14152, 6899=14152, 6900=14152, 6901=14152, 6902=14152, 6903=14152, 6904=14152, 6905=14152, 6906=14152, 9467=14152, 6907=14152, 9468=14152, 6908=14152, 9469=14152, 6909=14152, 9470=14168, 6910=14152, 6911=14152, 6912=14152, 6913=14152, 9473=14180, 6914=14152, 9474=14180, 6915=14152, 9475=14180, 6916=14152, 9476=14180, 6917=14152, 9477=14180, 6918=14152, 6921=14180, 6922=14180, 6923=14180, 6924=14180, 6925=14180, 6926=14180, 6927=14180, 6928=14180, 6929=14180, 6930=14180, 6931=14180, 6934=14184, 6935=14184, 6936=14184, 6937=14184, 6938=14184, 6947=14164, 6948=14164, 6949=14164, 6950=14164, 6951=14164, 6952=14164, 6953=14164, 6954=14164, 6955=14164, 6956=14164, 6957=14164, 6958=14164, 6959=14164, 6960=14164, 6961=14164, 6962=14164, 6963=14164, 6964=14164, 6965=14164, 6966=14164, 6967=14164, 6968=14164, 6969=14164, 6970=14152, 7994=14164, 6971=14152, 6972=14152, 6973=14152, 6974=14152, 6975=14152, 6976=14152, 6977=14152, 6978=14152, 8002=14152, 6979=14152, 6980=14152, 6983=14152, 6984=14152, 6985=14152, 6986=14152, 6989=14152, 6990=14152, 6991=14152, 6992=14152, 6993=14152, 6994=14152, 6995=14152, 6996=14152, 6997=14152, 6998=14152, 6999=14152, 7000=14152, 7512=14176, 10072=14180, 7001=14152, 7002=14152, 7003=14152, 9056=14152, 7014=14152, 7015=14152, 7016=14152, 7017=14152, 7018=14152, 7019=14152, 7020=14152, 7021=14152, 7022=14152, 7023=14152, 7024=14152, 7025=14152, 7026=14152, 7027=14152, 7028=14152, 7029=14152, 7030=14152, 7031=14152, 7032=14152, 9592=14152, 7033=14152, 9593=14152, 7034=14152, 9594=14152, 7035=14152, 9595=14152, 7036=14196, 7037=14196, 7038=14196, 7039=14196, 7552=14148, 7040=14196, 7041=14196, 7554=14148, 7555=14148, 7044=14152, 7556=14184, 7045=14152, 9605=24973, 7046=14152, 7047=14188, 7048=14196, 7049=14168, 7050=14196, 8076=14180, 7053=14200, 7054=14200, 7055=14200, 8083=14172, 7063=14180, 7064=14180, 7065=14180, 7066=14180, 7067=14180, 7068=14180, 7069=14180, 7070=14180, 7071=14180, 7072=14180, 7073=14180, 7074=14180, 7075=14180, 7076=14180, 7077=14180, 7078=14180, 7083=14180, 7084=14180, 7085=14180, 7086=14180, 7087=14180, 7088=14180, 7089=14180, 7090=14180, 7091=14180, 7092=14180, 7093=14180, 7096=14180, 7097=14180, 7098=14180, 7099=14180, 7100=14180, 7101=14180, 7102=14180, 7103=14180, 7104=14180, 7105=14180, 7106=14180, 7112=14152, 7115=14180, 7116=14180, 7652=14180, 998=14180};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = ENUM;
	enumType.size = 343;
	break;

case 6821:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6825, 6827];
	enumType.size = 2;
	break;

case 6822:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Plant wood seedlings, Plant fruit seedlings];
	enumType.size = 2;
	break;

case 6823:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6826, 6828];
	enumType.size = 2;
	break;

case 6824:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Water wood seedlings, Water fruit seedlings];
	enumType.size = 2;
	break;

case 6825:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5358, 5359, 5360, 5361, 5362, 5363, 32290];
	enumType.size = 7;
	break;

case 6826:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5364, 5365, 5366, 5367, 5368, 5369, 32292];
	enumType.size = 7;
	break;

case 6827:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5480, 5481, 5482, 5483, 5484, 5485, 5486, 5487];
	enumType.size = 8;
	break;

case 6828:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5488, 5489, 5490, 5491, 5492, 5493, 5494, 5495];
	enumType.size = 8;
	break;

case 6829:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5769];
	enumType.size = 1;
	break;

case 6830:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3438, 3440, 3442, 6211, 3444, 10808, 6213, 12583, 3446, 3448, 29635];
	enumType.size = 11;
	break;

case 6831:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21351];
	enumType.size = 1;
	break;

case 6832:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6834, 6835, 6837, 6836];
	enumType.size = 4;
	break;

case 6833:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Herblore Ingredients, Cooking Ingredients, Salamander tar, Other];
	enumType.size = 4;
	break;

case 6834:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [235, 241, 6693, 10111, 9736, 9594, 11266, 9018];
	enumType.size = 8;
	break;

case 6835:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1975, 6681, 6683, 7527, 7528, 7517, 7515];
	enumType.size = 7;
	break;

case 6836:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [8865, 9082, 21774];
	enumType.size = 3;
	break;

case 6837:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [10142, 10143, 10144, 10145];
	enumType.size = 4;
	break;

case 6838:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6841, 6842, 6843, 6844, 6845, 6846, 6847, 9470];
	enumType.size = 8;
	break;

case 6839:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Clean Herbs, Unfinished Potions, Potions, Barbarian Mixes, Clean Juju Herbs, Unfinished Juju Potions, Juju Potions, Combination Potions];
	enumType.size = 8;
	break;

case 6840:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25569];
	enumType.size = 1;
	break;

case 6841:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [249, 1526, 1528, 1534, 1530, 1532, 251, 253, 255, 257, 2998, 12172, 259, 14854, 261, 263, 3000, 265, 2481, 267, 269, 21624];
	enumType.size = 22;
	break;

case 6842:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5935, 91, 737, 738, 4840, 95, 93, 97, 99, 3002, 12181, 101, 14856, 103, 105, 9019, 3004, 107, 2483, 5942, 109, 5936, 111, 5951, 5939, 21628];
	enumType.size = 26;
	break;

case 6843:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [121, 27506, 27514, 115, 4844, 133, 175, 3410, 4419, 127, 7654, 7662, 1582, 3010, 12633, 3034, 9741, 11810, 139, 12142, 14840, 145, 181, 151, 3018, 10000, 157, 9022, 14848, 25487, 3026, 10911, 10919, 10927, 163, 5943, 2454, 169, 25495, 3042, 189, 5952, 6687, 25503, 15301, 15305, 15309, 15313, 15317, 15321, 15325, 28201, 28193, 28209, 15329, 21632, 15333];
	enumType.size = 57;
	break;

case 6844:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11429, 27496, 27500, 11433, 11437, 11443, 11449, 11453, 11457, 11461, 11445, 11465, 11469, 11473, 11477, 11481, 11517, 11485, 11489, 11493, 11497, 11501, 11505, 11509, 11513, 11521];
	enumType.size = 26;
	break;

case 6845:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19989, 19991, 19990, 19992, 19993];
	enumType.size = 5;
	break;

case 6846:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19998, 19999, 20000, 20001, 20002];
	enumType.size = 5;
	break;

case 6847:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20024, 20028, 20012, 20008, 20020, 20016, 20004, 20032, 20036, 20040, 32757, 32765, 32773, 32781, 32789, 32797, 32805, 32813];
	enumType.size = 18;
	break;

case 6848:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6850, 6851];
	enumType.size = 2;
	break;

case 6849:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Runes, Magic Weapons];
	enumType.size = 2;
	break;

case 6850:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17780, 17784, 17781, 17782, 17783, 17788, 17789, 17785, 17790, 17791, 17792, 17786, 17787];
	enumType.size = 13;
	break;

case 6851:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27707, 27957, 17013, 27709, 27959, 17015];
	enumType.size = 6;
	break;

case 6852:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6856, 6857];
	enumType.size = 2;
	break;

case 6853:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6858, 6859, 6860];
	enumType.size = 3;
	break;

case 6854:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Cook Fish, Cook Potato];
	enumType.size = 2;
	break;

case 6855:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Potatoes+1 topping, Mushroom potatoes + fish, Fish potatoes + mushroom];
	enumType.size = 3;
	break;

case 6856:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18159, 18161, 18163, 18165, 18167, 18169, 18171, 18173, 18175, 18177];
	enumType.size = 10;
	break;

case 6857:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18093];
	enumType.size = 1;
	break;

case 6858:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18095, 18097, 18099, 18101, 18103, 18105, 18107, 18109, 18111, 18113, 18115, 18117];
	enumType.size = 12;
	break;

case 6859:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18119, 18139, 18121, 18141, 18123, 18143, 18125, 18145, 18127, 18147, 18129, 18149, 18131, 18151, 18133, 18153, 18135, 18155, 18137, 18157];
	enumType.size = 20;
	break;

case 6860:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25570, 25580, 25571, 25581, 25572, 25582, 25573, 25583, 25574, 25584, 25575, 25585, 25576, 25586, 25577, 25587, 25578, 25588, 25579, 25589];
	enumType.size = 20;
	break;

case 6861:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6863, 6864, 6865, 6866, 6867];
	enumType.size = 5;
	break;

case 6862:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Clean Herbs, Unfinished Potions, Offensive Potions, Defensive Potions, Skill Potions];
	enumType.size = 5;
	break;

case 6863:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17512, 17514, 17516, 17518, 17520, 17522, 17524, 17526, 17528];
	enumType.size = 9;
	break;

case 6864:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17538, 17540, 17542, 17544, 17546, 17548, 17550, 17552, 17554];
	enumType.size = 9;
	break;

case 6865:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17556, 17558, 17560, 17572, 17582, 17584, 17586, 17596, 17606, 17608, 17610, 17620];
	enumType.size = 12;
	break;

case 6866:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17562, 17564, 17568, 17570, 17588, 17590, 17592, 17594, 17612, 17614, 17616, 17618];
	enumType.size = 12;
	break;

case 6867:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17574, 17576, 17578, 17580, 17598, 17600, 17602, 17604, 17622, 17624, 17626, 17628];
	enumType.size = 12;
	break;

case 6868:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17492];
	enumType.size = 1;
	break;

case 6869:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6871, 6872, 6873, 6874, 6875, 6876];
	enumType.size = 6;
	break;

case 6870:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Bloodrager, Deathslinger, Stormbringer, Hoardstalker, Worldbearer, Skinweaver];
	enumType.size = 6;
	break;

case 6871:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17935, 18027, 17936, 18028, 17937, 18029, 17938, 18030, 17939, 18031, 17940, 18032, 17941, 18033, 17942, 18034, 17943, 18035, 17944, 18036];
	enumType.size = 20;
	break;

case 6872:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17985, 18037, 17986, 18038, 17987, 18039, 17988, 18040, 17989, 18041, 17990, 18042, 17991, 18043, 17992, 18044, 17993, 18045, 17994, 18046];
	enumType.size = 20;
	break;

case 6873:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17945, 18047, 17946, 18048, 17947, 18049, 17948, 18050, 17949, 18051, 17950, 18052, 17951, 18053, 17952, 18054, 17953, 18055, 17954, 18056];
	enumType.size = 20;
	break;

case 6874:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17955, 18057, 17956, 18058, 17957, 18059, 17958, 18060, 17959, 18061, 17960, 18062, 17961, 18063, 17962, 18064, 17963, 18065, 17964, 18066];
	enumType.size = 20;
	break;

case 6875:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17975, 18067, 17976, 18068, 17977, 18069, 17978, 18070, 17979, 18071, 17980, 18072, 17981, 18073, 17982, 18074, 17983, 18075, 17984, 18076];
	enumType.size = 20;
	break;

case 6876:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17965, 18077, 17966, 18078, 17967, 18079, 17968, 18080, 17969, 18081, 17970, 18082, 17971, 18083, 17972, 18084, 17973, 18085, 17974, 18086];
	enumType.size = 20;
	break;

case 6877:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6881, 6882, 6883, 6884, 6885, 6886, 6887, 6888, 6889, 6890];
	enumType.size = 10;
	break;

case 6878:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Tangle gum, Seeping elm, Blood spindle, Utuku, Spinebeam, Bovistrangler, Thigat, Corpsethorn, Entgallow, Grave creeper];
	enumType.size = 10;
	break;

case 6879:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6891, 6892, 6893];
	enumType.size = 3;
	break;

case 6880:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Feather Arrows, Tip Arrows, String Bows];
	enumType.size = 3;
	break;

case 6881:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17742, 17702, 17756, 17722, 27687, 16977];
	enumType.size = 6;
	break;

case 6882:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25982, 17704, 17758, 17724, 27689, 16979];
	enumType.size = 6;
	break;

case 6883:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25983, 17706, 17760, 17726, 27691, 16981];
	enumType.size = 6;
	break;

case 6884:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25984, 17708, 17762, 17728, 27693, 16983];
	enumType.size = 6;
	break;

case 6885:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25985, 17710, 17764, 17730, 27695, 16985];
	enumType.size = 6;
	break;

case 6886:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25986, 17712, 17766, 17732, 27697, 16987];
	enumType.size = 6;
	break;

case 6887:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25987, 17714, 17768, 17734, 27699, 16989];
	enumType.size = 6;
	break;

case 6888:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25988, 17716, 17770, 17736, 27701, 16991];
	enumType.size = 6;
	break;

case 6889:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25989, 17718, 17772, 17738, 27703, 16993];
	enumType.size = 6;
	break;

case 6890:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25990, 17720, 17774, 17740, 27705, 16995];
	enumType.size = 6;
	break;

case 6891:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17747];
	enumType.size = 1;
	break;

case 6892:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [16427, 16432, 16437, 16442, 16447, 16452, 16457, 16462, 16467, 16472];
	enumType.size = 10;
	break;

case 6893:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [16867, 16317, 16869, 16319, 16871, 16321, 16873, 16323, 16875, 16325, 16877, 16327, 16879, 16329, 16881, 16331, 16883, 16333, 16885, 16335];
	enumType.size = 20;
	break;

case 6894:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6899, 6900, 6901, 6902, 6903, 6904, 6905, 6906, 6907, 6908];
	enumType.size = 10;
	break;

case 6895:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Salve, Wildercress, Blightleaf, Roseblood, Bryll, Duskweed, Soulbell, Ectocloth, Runic, Spiritbloom];
	enumType.size = 10;
	break;

case 6896:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6909, 6910, 6911, 6912, 6913, 6914, 6915, 6916, 6917, 6918];
	enumType.size = 10;
	break;

case 6897:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Protoleather, Subleather, Paraleather, Archleather, Dromoleather, Spinoleather, Gallileather, Stegoleather, Megaleather, Tyrannoleather];
	enumType.size = 10;
	break;

case 6898:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17468, 17470, 17472, 17474, 17476, 17478, 17480, 17482, 17484, 17486];
	enumType.size = 10;
	break;

case 6899:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17151, 16911, 16735, 27724, 16845, 17217, 27937];
	enumType.size = 7;
	break;

case 6900:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17153, 16913, 16737, 27726, 16847, 17219, 27939];
	enumType.size = 7;
	break;

case 6901:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17155, 16915, 16739, 27728, 16849, 17221, 27941];
	enumType.size = 7;
	break;

case 6902:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17157, 16917, 16741, 27730, 16851, 17223, 27943];
	enumType.size = 7;
	break;

case 6903:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17159, 16919, 16743, 27732, 16853, 17225, 27945];
	enumType.size = 7;
	break;

case 6904:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17161, 16921, 16745, 27734, 16855, 17227, 27947];
	enumType.size = 7;
	break;

case 6905:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17163, 16923, 16747, 27736, 16857, 17229, 27949];
	enumType.size = 7;
	break;

case 6906:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17165, 16925, 16749, 27738, 16859, 17231, 27951];
	enumType.size = 7;
	break;

case 6907:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17167, 16927, 16751, 27740, 16861, 17233, 27953];
	enumType.size = 7;
	break;

case 6908:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17169, 16929, 16753, 27742, 16863, 17235, 27955];
	enumType.size = 7;
	break;

case 6909:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17195, 17297, 17041, 27871, 17319, 17173];
	enumType.size = 6;
	break;

case 6910:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17197, 17299, 17043, 27873, 17321, 17175];
	enumType.size = 6;
	break;

case 6911:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17199, 17301, 17045, 27875, 17323, 17177];
	enumType.size = 6;
	break;

case 6912:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17201, 17303, 17047, 27877, 17325, 17179];
	enumType.size = 6;
	break;

case 6913:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17203, 17305, 17049, 27879, 17327, 17181];
	enumType.size = 6;
	break;

case 6914:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17205, 17307, 17051, 27881, 17329, 17183];
	enumType.size = 6;
	break;

case 6915:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17207, 17309, 17053, 27883, 17331, 17185];
	enumType.size = 6;
	break;

case 6916:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17209, 17311, 17055, 27885, 17333, 17187];
	enumType.size = 6;
	break;

case 6917:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17211, 17313, 17057, 27887, 17335, 17189];
	enumType.size = 6;
	break;

case 6918:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17213, 17315, 17059, 27889, 17337, 17191];
	enumType.size = 6;
	break;

case 6919:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6922, 6923, 6924, 6925, 6926, 6927, 6928, 6929, 6930, 6931];
	enumType.size = 10;
	break;

case 6920:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Novite, Bathus, Marmaros, Kratonite, Fractite, Zephyrium, Argonite, Katagon, Gorgonite, Promethium];
	enumType.size = 10;
	break;

case 6921:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17650, 17652, 17654, 17656, 17658, 17660, 17662, 17664, 17666, 17668];
	enumType.size = 10;
	break;

case 6922:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17885, 16757, 27974, 16339, 16273, 16361, 16295, 27963, 27713, 16935, 27643, 17019, 27665, 16383, 27893, 16691, 15753, 27915, 17341, 16713, 16669, 16647, 17063, 16405, 16889, 17239];
	enumType.size = 26;
	break;

case 6923:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17890, 16765, 27976, 16341, 16275, 16363, 16297, 27964, 27714, 16937, 27645, 17021, 27667, 16385, 27895, 16693, 15755, 27917, 17343, 16715, 16671, 16649, 17071, 16407, 16891, 17241];
	enumType.size = 26;
	break;

case 6924:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17895, 16773, 27978, 16343, 16277, 16365, 16299, 27965, 27715, 16939, 27647, 17023, 27669, 16387, 27897, 16695, 15757, 27919, 17345, 16717, 16673, 16651, 17079, 16409, 16893, 17243];
	enumType.size = 26;
	break;

case 6925:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17900, 16781, 27980, 16345, 16279, 16367, 16301, 27966, 27716, 16941, 27649, 17025, 27671, 16389, 27899, 16697, 15759, 27921, 17347, 16719, 16675, 16653, 17087, 16411, 16895, 17245];
	enumType.size = 26;
	break;

case 6926:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17905, 16789, 27982, 16347, 16281, 16369, 16303, 27967, 27717, 16943, 27651, 17027, 27673, 16391, 27901, 16699, 15761, 27923, 17349, 16721, 16677, 16655, 17095, 16413, 16897, 17247];
	enumType.size = 26;
	break;

case 6927:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17910, 16797, 27984, 16349, 16283, 16371, 16305, 27968, 27718, 16945, 27653, 17029, 27675, 16393, 27903, 16701, 15763, 27925, 17351, 16723, 16679, 16657, 17103, 16415, 16899, 17249];
	enumType.size = 26;
	break;

case 6928:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17915, 16805, 27986, 16351, 16285, 16373, 16307, 27969, 27719, 16947, 27655, 17031, 27677, 16395, 27905, 16703, 15765, 27927, 17353, 16725, 16681, 16659, 17111, 16417, 16901, 17251];
	enumType.size = 26;
	break;

case 6929:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17920, 16813, 27988, 16353, 16287, 16375, 16309, 27970, 27720, 16949, 27657, 17033, 27679, 16397, 27907, 16705, 15767, 27929, 17355, 16727, 16683, 16661, 17119, 16419, 16903, 17253];
	enumType.size = 26;
	break;

case 6930:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17925, 16821, 27990, 16355, 16289, 16377, 16311, 27971, 27721, 16951, 27659, 17035, 27681, 16399, 27909, 16707, 15769, 27931, 17357, 16729, 16685, 16663, 17127, 16421, 16905, 17255];
	enumType.size = 26;
	break;

case 6931:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [17930, 16829, 27992, 16357, 16291, 16379, 16313, 27972, 27722, 16953, 27661, 17037, 27683, 16401, 27911, 16709, 15771, 27933, 17359, 16731, 16687, 16665, 17135, 16423, 16907, 17257];
	enumType.size = 26;
	break;

case 6932:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6934, 6935, 6936, 6937, 3298, 6938];
	enumType.size = 6;
	break;

case 6933:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Gold Charm Pouches, Green Charm Pouches, Crimson Charm Pouches, Blue Charm Pouches, Elder Charm Pouches, Summoning Scrolls];
	enumType.size = 6;
	break;

case 6934:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [12047, 12043, 12059, 12019, 12009, 12778, 12087, 12007, 12123, 12031, 12057];
	enumType.size = 11;
	break;

case 6935:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [12049, 12091, 12021, 12818, 12071, 12095, 12097, 12099, 12101, 12103, 12105, 12107, 12041, 12035, 12531, 12037, 12029, 12033, 12782, 12013, 12025, 12039, 12796];
	enumType.size = 23;
	break;

case 6936:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [12055, 12808, 12053, 12065, 12051, 12816, 12061, 12085, 12015, 12045, 12820, 14623, 12069, 12011, 12794, 34137, 34139, 34141, 12017, 34852, 12776, 12089, 12822, 12093, 12790];
	enumType.size = 25;
	break;

case 6937:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [12067, 12063, 12800, 12780, 12798, 12814, 12073, 12075, 12027, 12077, 12812, 12784, 12810, 12023, 12079, 12792, 12081, 12802, 12804, 12806, 12788, 12083, 32829, 12786];
	enumType.size = 24;
	break;

case 6938:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [12425, 12445, 12428, 12459, 12533, 12838, 12460, 12432, 12839, 12430, 12446, 12440, 12834, 12447, 12433, 12429, 12443, 25590, 25591, 25592, 12461, 12431, 12422, 12448, 12458, 25595, 25596, 25597, 25598, 25599, 25600, 12462, 12829, 12426, 12444, 12441, 12454, 12453, 12463, 12424, 12836, 12840, 12835, 12455, 12468, 12427, 12436, 12467, 12464, 12452, 12439, 12438, 12423, 12830, 12451, 14622, 34834, 12826, 12449, 12450, 12841, 12465, 12831, 12457, 12824, 25593, 25594, 12442, 31332, 34146, 33965, 33966, 31401, 31380, 31381, 31382, 12456, 12837, 12832, 12466, 12434, 32832, 12833, 12437, 12827, 12828, 12435, 12825];
	enumType.size = 88;
	break;

case 6939:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6947, 6948, 6949, 6950, 6951, 6952, 6953, 6954, 6955, 6956, 7994, 6957];
	enumType.size = 12;
	break;

case 6940:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Normal Wood, Achey, Oak, Willow, Teak, Maple, Mahogany, Yew, Magic, Blisterwood, Elder, Other];
	enumType.size = 12;
	break;

case 6941:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6958, 6960, 6959];
	enumType.size = 3;
	break;

case 6942:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [String Bows, Join Crossbows, String Crossbows];
	enumType.size = 3;
	break;

case 6943:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6966, 6967, 6968];
	enumType.size = 3;
	break;

case 6944:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Feather Arrows, Feather Bolts, Feather Darts];
	enumType.size = 3;
	break;

case 6945:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6963, 6965, 6962, 6964];
	enumType.size = 4;
	break;

case 6946:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Tip Arrows, Tip Ogre Arrows, Tip Bolts, Other Ammo];
	enumType.size = 4;
	break;

case 6947:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [52, 50, 9440, 48];
	enumType.size = 4;
	break;

case 6948:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2864, 4825];
	enumType.size = 2;
	break;

case 6949:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34672, 54, 9442, 56];
	enumType.size = 4;
	break;

case 6950:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34673, 60, 9444, 58];
	enumType.size = 4;
	break;

case 6951:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [9446];
	enumType.size = 1;
	break;

case 6952:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34674, 64, 9448, 62];
	enumType.size = 4;
	break;

case 6953:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [9450];
	enumType.size = 1;
	break;

case 6954:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34675, 68, 9452, 66];
	enumType.size = 4;
	break;

case 6955:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34676, 72, 70, 25483];
	enumType.size = 4;
	break;

case 6956:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21582, 21581, 28575, 21580];
	enumType.size = 4;
	break;

case 6957:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [10158, 10159, 21353];
	enumType.size = 3;
	break;

case 6958:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [841, 839, 843, 845, 4827, 849, 847, 853, 851, 857, 855, 861, 859, 29614, 29611];
	enumType.size = 15;
	break;

case 6959:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [9174, 25881, 25919, 9176, 9177, 25883, 25921, 9179, 25885, 25923, 9181, 25887, 25925, 9183, 25889, 25927, 9185, 25891, 25929, 25917, 25894, 25932];
	enumType.size = 22;
	break;

case 6960:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [9454, 9456, 9457, 9459, 9461, 9463, 9465, 25478];
	enumType.size = 8;
	break;

case 6961:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2861, 45, 9187, 46, 25480, 9188, 9189, 9190, 9191, 9192, 9193, 9194, 31867];
	enumType.size = 13;
	break;

case 6962:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [879, 880, 9335, 9336, 881, 9337, 9338, 9418, 9339, 9340, 9341, 9342, 28463, 28465, 31868];
	enumType.size = 15;
	break;

case 6963:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [882, 884, 886, 888, 4160, 890, 892, 21640, 21650, 21645, 21655, 11212, 29617, 28464];
	enumType.size = 14;
	break;

case 6964:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21364, 21365];
	enumType.size = 2;
	break;

case 6965:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2866, 4773, 4778, 4783, 4788, 4793, 4798, 4803];
	enumType.size = 8;
	break;

case 6966:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [53, 2865];
	enumType.size = 2;
	break;

case 6967:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [877, 9139, 9140, 9145, 9141, 9142, 13280, 9143, 9144, 21660, 21665, 21670, 21675];
	enumType.size = 13;
	break;

case 6968:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [806, 25909, 807, 25910, 808, 25911, 809, 25913, 810, 25914, 811, 25915, 11230, 25916];
	enumType.size = 14;
	break;

case 6969:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24122, 24116];
	enumType.size = 2;
	break;

case 6970:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6979, 6981, 6971, 6973, 6975];
	enumType.size = 5;
	break;

case 6971:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14859];
	enumType.size = 1;
	break;

case 6972:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7539, 7537];
	enumType.size = 2;
	break;

case 6973:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21344, 21346, 21347];
	enumType.size = 3;
	break;

case 6974:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1395, 1399, 1393, 1397, 21777];
	enumType.size = 5;
	break;

case 6975:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3420];
	enumType.size = 1;
	break;

case 6976:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3327, 3337, 3329, 3339, 3331, 3341, 3333, 3343, 3335];
	enumType.size = 9;
	break;

case 6977:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1919, 4527, 4525, 229, 6667, 567, 4542, 10980, 10973, 23191, 32843];
	enumType.size = 11;
	break;

case 6978:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1775];
	enumType.size = 1;
	break;

case 6979:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [23193];
	enumType.size = 1;
	break;

case 6980:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4535, 25622, 4546];
	enumType.size = 3;
	break;

case 6981:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6983, 6961];
	enumType.size = 2;
	break;

case 6982:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Gem Cutting, Bolt Tips];
	enumType.size = 2;
	break;

case 6983:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1609, 1611, 1613, 1607, 1605, 1603, 1601, 1615, 6573, 31855];
	enumType.size = 10;
	break;

case 6984:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1714, 1720, 2961, 9382, 4201, 5525, 7637, 13154];
	enumType.size = 8;
	break;

case 6985:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1635, 1654, 11069, 1673, 1637, 1656, 11072, 1675, 1639, 1658, 11076, 1677, 1641, 1660, 11085, 1679, 1643, 1662, 11092, 1681, 1645, 1664, 11115, 1683, 6575, 6577, 11130, 6579, 31857, 31859, 31865, 31861, 13281];
	enumType.size = 33;
	break;

case 6986:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4021, 1716, 1722, 1692, 1694, 10132, 1696, 6041, 1698, 1700, 1702, 6581, 31863];
	enumType.size = 13;
	break;

case 6987:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6991, 7002, 7001, 7003, 7000, 6992, 6993, 6994, 6995, 6996, 6997, 6998, 6999];
	enumType.size = 13;
	break;

case 6988:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Leather, Imphide Armour, Spider Silk Armour, Carapace Armour, Batwing Armour, Snakeskin, Green Dragonhide, Blue Dragonhide, Red Dragonhide, Black Dragonhide, Royal Dragonhide, Yak-Hide, Enhanced Armour];
	enumType.size = 13;
	break;

case 6989:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1741, 1743, 6289, 25611, 1745, 2505, 2507, 2509, 24374];
	enumType.size = 9;
	break;

case 6990:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25603, 25604, 25610, 25612, 25605, 25606, 25607, 25608, 25609];
	enumType.size = 9;
	break;

case 6991:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1059, 1061, 1167, 1063, 1129, 1095, 25806, 25875, 25821, 1131, 25808, 1169];
	enumType.size = 12;
	break;

case 6992:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6328, 6330, 6326, 6324, 6322];
	enumType.size = 5;
	break;

case 6993:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1065, 1099, 12936, 1135, 25794];
	enumType.size = 5;
	break;

case 6994:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2487, 2493, 12943, 2499, 25796];
	enumType.size = 5;
	break;

case 6995:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2489, 2495, 12950, 2501, 25798];
	enumType.size = 5;
	break;

case 6996:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2491, 2497, 12957, 2503, 25800];
	enumType.size = 5;
	break;

case 6997:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24376, 24379, 24388, 24382];
	enumType.size = 4;
	break;

case 6998:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [10824, 10822];
	enumType.size = 2;
	break;

case 6999:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [10077, 10079, 10081, 10083, 10085, 25553, 1097, 1133, 25877, 25823, 25810];
	enumType.size = 11;
	break;

case 7000:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25829, 25833, 25825, 25831, 25827, 25802, 25660, 25648];
	enumType.size = 8;
	break;

case 7001:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25843, 25841, 25835, 25839, 25837, 25658, 25650];
	enumType.size = 7;
	break;

case 7002:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25851, 25853, 25845, 25849, 25847, 25662, 25642, 25855];
	enumType.size = 8;
	break;

case 7003:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25865, 25863, 25857, 25861, 25859];
	enumType.size = 5;
	break;

case 7004:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7014, 7016, 7019, 7022, 7025, 7028, 7031];
	enumType.size = 7;
	break;

case 7005:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Pottery, Cooking Urns, Fishing Urns, Mining Urns, Prayer Urns, Smithing Urns, Woodcutting Urns];
	enumType.size = 7;
	break;

case 7006:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7015, 7017, 7020, 7023, 7026, 7029, 7032];
	enumType.size = 7;
	break;

case 7007:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Pottery, Cooking Urns, Fishing Urns, Mining Urns, Prayer Urns, Smithing Urns, Woodcutting Urns];
	enumType.size = 7;
	break;

case 7008:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7018, 7021, 7024, 7027, 7030, 7033];
	enumType.size = 6;
	break;

case 7009:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Cooking Urns, Fishing Urns, Mining Urns, Prayer Urns, Smithing Urns, Woodcutting Urns];
	enumType.size = 6;
	break;

case 7010:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7036, 7037, 7038, 7039, 7040, 7041];
	enumType.size = 6;
	break;

case 7011:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Tele. Cooking Urns, Tele. Fishing Urns, Tele. Mining Urns, Tele. Prayer Urns, Tele. Smithing Urns, Tele. Woodcutting Urns];
	enumType.size = 6;
	break;

case 7012:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7034, 7035];
	enumType.size = 2;
	break;

case 7013:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Soft Clay, Mould Clay];
	enumType.size = 2;
	break;

case 7014:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1787, 1789, 1791, 5352, 4438];
	enumType.size = 5;
	break;

case 7015:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1931, 20053, 2313, 1923, 5350, 4440];
	enumType.size = 6;
	break;

case 7016:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20349, 20355, 20361, 20367, 20373];
	enumType.size = 5;
	break;

case 7017:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20350, 20356, 20362, 20368, 20374];
	enumType.size = 5;
	break;

case 7018:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20352, 20358, 20364, 20370, 20376];
	enumType.size = 5;
	break;

case 7019:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20319, 20325, 20331, 20337, 20343];
	enumType.size = 5;
	break;

case 7020:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20320, 20326, 20332, 20338, 20344];
	enumType.size = 5;
	break;

case 7021:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20322, 20328, 20334, 20340, 20346];
	enumType.size = 5;
	break;

case 7022:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20379, 20385, 20391, 20397, 20403];
	enumType.size = 5;
	break;

case 7023:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20380, 20386, 20392, 20398, 20404];
	enumType.size = 5;
	break;

case 7024:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20382, 20388, 20394, 20400, 20406];
	enumType.size = 5;
	break;

case 7025:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20409, 20415, 20421];
	enumType.size = 3;
	break;

case 7026:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20410, 20416, 20422];
	enumType.size = 3;
	break;

case 7027:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20412, 20418, 20424];
	enumType.size = 3;
	break;

case 7028:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20271, 20277, 20283, 20289];
	enumType.size = 4;
	break;

case 7029:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20272, 20278, 20284, 20290];
	enumType.size = 4;
	break;

case 7030:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20274, 20280, 20286, 20292];
	enumType.size = 4;
	break;

case 7031:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20295, 20301, 20307, 20313];
	enumType.size = 4;
	break;

case 7032:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20296, 20302, 20308, 20314];
	enumType.size = 4;
	break;

case 7033:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20298, 20304, 20310, 20316];
	enumType.size = 4;
	break;

case 7034:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1761];
	enumType.size = 1;
	break;

case 7035:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20052];
	enumType.size = 1;
	break;

case 7036:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20354, 20360, 20366, 20372, 20378];
	enumType.size = 5;
	break;

case 7037:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20324, 20330, 20336, 20342, 20348];
	enumType.size = 5;
	break;

case 7038:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20384, 20390, 20396, 20402, 20408];
	enumType.size = 5;
	break;

case 7039:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20414, 20420, 20426];
	enumType.size = 3;
	break;

case 7040:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20276, 20282, 20288, 20294];
	enumType.size = 4;
	break;

case 7041:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20300, 20306, 20312, 20318];
	enumType.size = 4;
	break;

case 7042:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7044, 7045];
	enumType.size = 2;
	break;

case 7043:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [General Weaving, Milestone Capes];
	enumType.size = 2;
	break;

case 7044:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3224, 5418, 5376, 14858];
	enumType.size = 4;
	break;

case 7045:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20754, 20755, 20756, 20757, 20758, 20759, 20760, 20761, 20762];
	enumType.size = 9;
	break;

case 7046:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1759, 1777, 9438, 6038, 954];
	enumType.size = 5;
	break;

case 7047:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [10812, 10826];
	enumType.size = 2;
	break;

case 7048:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3385, 3387, 3389, 3391, 3393, 25804, 25670, 25640];
	enumType.size = 8;
	break;

case 7049:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7650];
	enumType.size = 1;
	break;

case 7050:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25601, 25602];
	enumType.size = 2;
	break;

case 7051:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7053, 7054, 7055];
	enumType.size = 3;
	break;

case 7052:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Fill Containers, Soften Clay, Make Dough];
	enumType.size = 3;
	break;

case 7053:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [227, 1937, 1929, 1921, 1823, 4458, 5340, 6668, 19994, 723, 725, 9086, 11152];
	enumType.size = 13;
	break;

case 7054:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25627];
	enumType.size = 1;
	break;

case 7055:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25623, 25624, 25625, 25626];
	enumType.size = 4;
	break;

case 7056:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [-1, 6805, 6806, 6807, 6808, 6782, 6783, 6811, 6812, 6813, 6814, 6815, 7739, 6786, 6787, 6788, 6789, 6790, 6791, 6792, 6793, 6796, 6797, 6798, 6799, 6800, 6801, 6802, 7552, 7555, 7554, 9964, 9740, 9741, 9742, 9743, 6983, 6984, 6985, 6977, 6989, 6990, 9814, 6991, 7002, 7003, 7001, 7000, 6992, 6993, 6994, 6995, 6996, 6997, 6998, 6999, 7014, 7016, 7019, 7022, 7025, 7028, 7031, 7015, 7017, 7020, 7023, 7026, 7029, 7032, 7018, 7021, 7024, 7027, 7030, 7033, 7044, 7045, 7046, 9468, 6978, 9467, 6979, 6986, 6980, 6970, 6971, 6972, 6973, 6974, 7034, 7035, 7036, 7037, 7038, 7039, 7040, 7041, 6975, 6976, 8002, 9056, 9469, 9592, 9593, 9594, 9595, 6825, 6826, 6827, 6828, 6829, 6830, 6831, 6947, 6948, 6949, 6950, 6951, 6952, 6953, 6954, 6955, 6956, 7994, 6958, 6960, 6959, 6966, 6967, 6968, 6963, 6965, 6962, 6961, 6957, 6964, 6969, 7050, 9884, 6834, 6835, 6836, 6837, 6840, 6841, 6842, 6843, 6844, 6845, 6846, 6847, 9470, 6761, 6762, 7275, 7276, 7277, 7278, 6764, 6765, 6766, 6767, 8083, 6768, 6769, 6770, 6771, 6772, 6773, 6774, 6775, 6776, 6777, 6778, 6779, 7512, 7083, 7084, 7085, 7086, 7087, 7088, 7089, 998, 7090, 7091, 7092, 7093, 7652, 7096, 7097, 7098, 7099, 7100, 7101, 7063, 7064, 7065, 7066, 7067, 7068, 7069, 7070, 10072, 7071, 7072, 7073, 7074, 7075, 7076, 7077, 7078, 7102, 7103, 7104, 7105, 7106, 8076, 8791, 8792, 8793, 8794, 8795, 8796, 6934, 6935, 6936, 6937, 3298, 6938, 7556, 7047, 7053, 7054, 7055, 7048, 7049, 9605, 6856, 6857, 6858, 6859, 6860, 6863, 6864, 6865, 6866, 6867, 6868, 6899, 6900, 6901, 6902, 6903, 6904, 6905, 6906, 6907, 6908, 6909, 6910, 6911, 6912, 6913, 6914, 6915, 6916, 6917, 6918, 6898, 6881, 6882, 6883, 6884, 6885, 6886, 6887, 6888, 6889, 6890, 6891, 6892, 6893, 6850, 6851, 6922, 6923, 6924, 6925, 6926, 6927, 6928, 6929, 6930, 6931, 6921, 6871, 6872, 6873, 6874, 6875, 6876, 7556, 5775, 5776, 6674, 6677, 6678, 7115, 7116, 6679, 7112, 7814, 7815, 7816, 7817, 7818, 7819, 7820, 7821, 3300, 7822, 7823, 7824, 7825, 7802, 7803, 7804, 7805, 7806, 7807, 7808, 7809, 7810, 7811, 8330, 8331, 8332, 9473, 9474, 9475, 9476, 9477];
	enumType.size = 344;
	break;

case 7057:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7066, 7067, 7068];
	enumType.size = 3;
	break;

case 7058:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Ingots, Tier I, Ingots, Tier II, Ingots, Tier III];
	enumType.size = 3;
	break;

case 7059:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7071, 7072, 7073];
	enumType.size = 3;
	break;

case 7060:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Bronze Tracks, Iron Tracks, Steel Tracks];
	enumType.size = 3;
	break;

case 7061:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7074, 7075, 7076];
	enumType.size = 3;
	break;

case 7062:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Miner's Burial Armour, Warrior's Burial Armour, Smith's Burial Armour];
	enumType.size = 3;
	break;

case 7063:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20502];
	enumType.size = 1;
	break;

case 7064:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20503];
	enumType.size = 1;
	break;

case 7065:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20504];
	enumType.size = 1;
	break;

case 7066:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20632, 20633, 20634, 20635, 20636];
	enumType.size = 5;
	break;

case 7067:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20637, 20638, 20639, 20640, 20641];
	enumType.size = 5;
	break;

case 7068:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20642, 20643, 20644, 20645, 20646];
	enumType.size = 5;
	break;

case 7069:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20648, 20649, 20650, 20651, 20652];
	enumType.size = 5;
	break;

case 7070:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20567, 20568, 20569, 20570, 20571];
	enumType.size = 5;
	break;

case 7071:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20506, 20507, 20511, 20508, 20512, 20509, 20513, 20510, 20514];
	enumType.size = 9;
	break;

case 7072:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20515, 20516, 20525, 20517, 20526, 20518, 20527, 20519, 20528];
	enumType.size = 9;
	break;

case 7073:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20520, 20521, 20529, 20522, 20530, 20523, 20531, 20524, 20532];
	enumType.size = 9;
	break;

case 7074:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20572, 20577, 20587, 20582, 20573, 20578, 20588, 20583, 20574, 20579, 20589, 20584, 20575, 20580, 20590, 20585, 20576, 20581, 20591, 20586];
	enumType.size = 20;
	break;

case 7075:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20592, 20597, 20607, 20602, 20593, 20598, 20608, 20603, 20594, 20599, 20609, 20604, 20595, 20600, 20610, 20605, 20596, 20601, 20611, 20606];
	enumType.size = 20;
	break;

case 7076:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20612, 20617, 20627, 20622, 20613, 20618, 20628, 20623, 20614, 20619, 20629, 20624, 20615, 20620, 20630, 20625, 20616, 20621, 20631, 20626];
	enumType.size = 20;
	break;

case 7077:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20475, 20482, 20492];
	enumType.size = 3;
	break;

case 7078:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25628, 20478, 20479, 20480, 20487, 20491];
	enumType.size = 6;
	break;

case 7079:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7083, 7084, 6984, 6985, 6978];
	enumType.size = 5;
	break;

case 7080:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Ore Smelting, Steel Casting, Silver Casting, Gold Casting, Molten Glass];
	enumType.size = 5;
	break;

case 7081:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7085, 7091, 7086, 7087, 7088, 7089, 998, 7090, 7652];
	enumType.size = 9;
	break;

case 7082:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Bronze, Blurite, Iron, Steel, Mithril, Adamantite, Obsidian, Runite, Malevolent];
	enumType.size = 9;
	break;

case 7083:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2349, 9467, 2351, 2355, 2353, 2357, 2365, 2359, 2361, 21783, 21785, 21784, 21786, 26123, 2363, 32263];
	enumType.size = 16;
	break;

case 7084:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2];
	enumType.size = 1;
	break;

case 7085:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1205, 25692, 1139, 1351, 1422, 25674, 9375, 1277, 25710, 1794, 819, 4819, 39, 1321, 25743, 1265, 9420, 1291, 25725, 1155, 864, 25897, 800, 25903, 1173, 1337, 25779, 1375, 25761, 1103, 1189, 3095, 25933, 1307, 1075, 1087, 1117];
	enumType.size = 37;
	break;

case 7086:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1203, 25694, 1349, 1420, 25676, 7225, 1137, 9377, 1279, 25712, 820, 4820, 40, 1323, 25745, 1267, 9423, 1293, 25727, 1153, 863, 25896, 801, 25904, 1175, 1335, 25781, 1363, 25763, 1101, 4540, 1191, 3096, 25935, 1309, 1067, 1081, 1115];
	enumType.size = 38;
	break;

case 7087:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1207, 25696, 1353, 1424, 25678, 1141, 9378, 1281, 25714, 821, 1539, 41, 1325, 25747, 1269, 9425, 1295, 25729, 2370, 1157, 865, 25898, 802, 25905, 1177, 1339, 25783, 1365, 25765, 1105, 1193, 3097, 25937, 1311, 1069, 1083, 1119, 4544];
	enumType.size = 38;
	break;

case 7088:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1209, 25700, 1355, 1428, 25682, 1143, 9379, 1285, 25718, 822, 4822, 42, 1329, 25751, 1273, 9427, 1299, 25733, 1159, 866, 25899, 803, 25906, 1181, 1343, 25787, 9416, 1369, 25769, 1109, 1197, 3099, 25941, 1315, 1071, 1085, 1121];
	enumType.size = 37;
	break;

case 7089:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1211, 25702, 1357, 1430, 25684, 1145, 9380, 1287, 25720, 823, 4823, 43, 1331, 25753, 1271, 9429, 1301, 25735, 1161, 867, 25900, 804, 25907, 1183, 1345, 25789, 1371, 25771, 1111, 1199, 3100, 25943, 1317, 1073, 1091, 1123];
	enumType.size = 36;
	break;

case 7090:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1213, 25704, 1359, 1432, 25686, 1147, 9381, 1289, 25722, 824, 4824, 44, 1333, 25755, 1275, 9431, 1303, 25737, 1163, 868, 25901, 805, 25908, 1185, 1347, 25791, 1373, 25773, 1113, 1201, 3101, 25945, 1319, 1079, 1093, 1127];
	enumType.size = 36;
	break;

case 7091:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [667, 34825, 9376, 9422];
	enumType.size = 4;
	break;

case 7092:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1237, 11367, 1239, 11369, 1241, 11371, 1243, 11373, 1245, 11375, 1247, 11377];
	enumType.size = 12;
	break;

case 7093:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21823, 21828, 21833, 21838, 21843, 21853, 21848, 21858];
	enumType.size = 8;
	break;

case 7094:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7097, 7098, 7099, 7100, 7101];
	enumType.size = 5;
	break;

case 7095:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Elemental Equipment, Mind Equipment, Body Equipment, Cosmic Equipment, Chaos Equipment];
	enumType.size = 5;
	break;

case 7096:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2893];
	enumType.size = 1;
	break;

case 7097:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2890, 9729, 18699, 20458, 20448, 9720];
	enumType.size = 6;
	break;

case 7098:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [9731, 9733, 18697, 20460, 20450];
	enumType.size = 5;
	break;

case 7099:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18691, 18693, 18695, 20462, 20452];
	enumType.size = 5;
	break;

case 7100:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20436, 20440, 20444, 20464, 20454];
	enumType.size = 5;
	break;

case 7101:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20438, 20442, 20446, 20466, 20456];
	enumType.size = 5;
	break;

case 7102:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25329];
	enumType.size = 1;
	break;

case 7103:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25330, 25331];
	enumType.size = 2;
	break;

case 7104:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25334, 25335, 25336];
	enumType.size = 3;
	break;

case 7105:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25338];
	enumType.size = 1;
	break;

case 7106:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25339];
	enumType.size = 1;
	break;

case 7110:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 3068, 6136, 9204, 12272, 15339, 18407, 21474, 24541, 27608, 30675, 33741, 36807, 39873, 42938, 46003, 49068, 52132, 55195, 58258, 61321, 64383, 67444, 70505, 73565, 76624, 79682, 82740, 85797, 88854, 91909, 94963, 98017, 101070, 104122, 107172, 110222, 113271, 116319, 119365, 122411, 125455, 128498, 131540, 134581, 137620, 140658, 143695, 146730, 149765, 152797, 155828, 158858, 161886, 164913, 167938, 170962, 173984, 177004, 180023, 183040, 186055, 189069, 192080, 195090, 198098, 201105, 204109, 207111, 210112, 213110, 216107, 219101, 222094, 225084, 228072, 231058, 234042, 237024, 240003, 242980, 245955, 248928, 251898, 254866, 257831, 260794, 263755, 266713, 269668, 272621, 275572, 278520, 281465, 284408, 287347, 290285, 293219, 296151, 299080, 302006, 304929, 307850, 310767, 313682, 316593, 319502, 322408, 325310, 328210, 331106, 334000, 336890, 339777, 342661, 345541, 348419, 351293, 354164, 357031, 359895, 362756, 365613, 368467, 371317, 374164, 377007, 379847, 382683, 385516, 388345, 391170, 393992, 396810, 399624, 402435, 405241, 408044, 410843, 413638, 416430, 419217, 422000, 424780, 427555, 430326, 433094, 435857, 438616, 441371, 444122, 446869, 449611, 452350, 455084, 457813, 460539, 463260, 465976, 468689, 471397, 474100, 476799, 479494, 482184, 484869, 487550, 490226, 492898, 495565, 498228, 500885, 503538, 506187, 508830, 511469, 514103, 516732, 519356, 521975, 524590, 527199, 529804, 532403, 534998, 537587, 540171, 542751, 545325, 547894, 550458, 553017, 555570, 558119, 560662, 563199, 565732, 568259, 570781, 573297, 575808, 578314, 580814, 583309, 585798, 588282, 590760, 593232, 595699, 598161, 600616, 603067, 605511, 607950, 610383, 612810, 615232, 617647, 620057, 622461, 624859, 627252, 629638, 632019, 634393, 636762, 639124, 641481, 643832, 646176, 648514, 650847, 653173, 655493, 657807, 660114, 662416, 664711, 667000, 669283, 671559, 673829, 676093, 678350, 680601, 682846, 685084, 687315, 689541, 691759, 693971, 696177, 698376, 700569, 702755, 704934, 707107, 709273, 711432, 713585, 715731, 717870, 720003, 722128, 724247, 726359, 728464, 730563, 732654, 734739, 736817, 738887, 740951, 743008, 745058, 747101, 749136, 751165, 753187, 755201, 757209, 759209, 761202, 763188, 765167, 767139, 769103, 771061, 773010, 774953, 776888, 778817, 780737, 782651, 784557, 786455, 788346, 790230, 792107, 793975, 795837, 797691, 799537, 801376, 803208, 805031, 806848, 808656, 810457, 812251, 814036, 815814, 817585, 819348, 821103, 822850, 824589, 826321, 828045, 829761, 831470, 833170, 834863, 836548, 838225, 839894, 841555, 843208, 844854, 846491, 848120, 849742, 851355, 852961, 854558, 856147, 857729, 859302, 860867, 862424, 863973, 865514, 867046, 868571, 870087, 871595, 873095, 874587, 876070, 877545, 879012, 880471, 881921, 883363, 884797, 886223, 887640, 889048, 890449, 891841, 893224, 894599, 895966, 897325, 898674, 900016, 901349, 902673, 903989, 905297, 906596, 907886, 909168, 910441, 911706, 912962, 914210, 915449, 916679, 917901, 919114, 920318, 921514, 922701, 923880, 925049, 926210, 927363, 928506, 929641, 930767, 931884, 932993, 934093, 935184, 936266, 937339, 938404, 939459, 940506, 941544, 942573, 943593, 944605, 945607, 946601, 947586, 948561, 949528, 950486, 951435, 952375, 953306, 954228, 955141, 956045, 956940, 957826, 958703, 959572, 960431, 961280, 962121, 962953, 963776, 964590, 965394, 966190, 966976, 967754, 968522, 969281, 970031, 970772, 971504, 972226, 972940, 973644, 974339, 975025, 975702, 976370, 977028, 977677, 978317, 978948, 979570, 980182, 980785, 981379, 981964, 982539, 983105, 983662, 984210, 984749, 985278, 985798, 986308, 986809, 987301, 987784, 988258, 988722, 989177, 989622, 990058, 990485, 990903, 991311, 991710, 992099, 992480, 992850, 993212, 993564, 993907, 994240, 994565, 994879, 995185, 995481, 995767, 996045, 996313, 996571, 996820, 997060, 997290, 997511, 997723, 997925, 998118, 998302, 998476, 998640, 998795, 998941, 999078, 999205, 999322, 999431, 999529, 999619, 999699, 999769, 999831, 999882, 999925, 999958, 999981, 999995, 1000000];
	enumType.size = 513;
	break;

case 7111:
	enumType.valueMap = {496=496, 3793=3793};
	enumType.valueType = unknownScriptVarType4681;
	enumType.defaultint = 3793;
	enumType.keyType = GRAPHIC;
	enumType.size = 2;
	break;

case 7112:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26352, 26353, 26354];
	enumType.size = 3;
	break;

case 7113:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7115, 7116];
	enumType.size = 2;
	break;

case 7114:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Tradeable Melee Gear, Untradeable Melee Gear];
	enumType.size = 2;
	break;

case 7115:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26325, 26326, 26327];
	enumType.size = 3;
	break;

case 7116:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26322, 26323, 26324, 33879, 33882];
	enumType.size = 5;
	break;

case 7117:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18319, 18320, 18321, 18322, 18323, 18324, 18325, 30150, 30151, 30152, 30153];
	enumType.size = 11;
	break;

case 7118:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18326, 18327, 18328, 18329];
	enumType.size = 4;
	break;

case 7119:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18330, 18331, 18332, 18333, 30154];
	enumType.size = 5;
	break;

case 7120:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [15368, 15369, 15370, 15371, 15372, 15373, 15374];
	enumType.size = 7;
	break;

case 7146:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18334, 18335, 18336, 18337, 18338, 18339, 18340, 30155, 30156, 30157];
	enumType.size = 10;
	break;

case 7147:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18341, 18342, 18343, 18344, 18345, 18346, 18347, 30158, 30159, 30160];
	enumType.size = 10;
	break;

case 7148:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18348, 18349, 18350, 18351, 18352, 18353, 18354, 30161, 30162];
	enumType.size = 9;
	break;

case 7149:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18355, 18359, 18361, 18358, 18357, 18360, 18356, 26367, 26368, 26369, 30163, 30164, 30165];
	enumType.size = 13;
	break;

case 7150:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18355, 18362, 18363, 18364, 18365, 18366, 30166];
	enumType.size = 7;
	break;

case 7151:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [18367, 18368, 18369, 18370, 18371, 18372, 30167, 30168];
	enumType.size = 8;
	break;

case 7152:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [null, Eastern coin, Bamboo, Gunpowder, Slate, Cherrywood, Jade, Steel, Terracotta, Azure, Random resource];
	enumType.size = 10;
	break;

case 7153:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 15708, 15709, 15712, 15710, 15713, 15714, 15711, 21965, 21966, 15720];
	enumType.size = 10;
	break;

case 7154:
	enumType.valueMap = {16=Pearls, 17=Koi scales, 18=Random trade goods, 11=Ancient bones, 12=Plate, 13=Spices, 14=Lacquer, 15=Chi globes};
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.size = 8;
	break;

case 7155:
	enumType.valueMap = {16=21964, 17=21963, 18=15720, 11=15715, 12=15716, 13=15717, 14=15718, 15=15719};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 8;
	break;

case 7156:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The West, The Arc, The Skull, The Hook, The Scythe, The Bowl, The Pincers, The Loop, The Shield];
	enumType.size = 9;
	break;

case 7157:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [The vast landmasses and violent history of the western continent have produced many disparate communities, whose main commonality is in their lust for adventure and advancement. Now they are aware of the east, and the ships begin to sail..., The only part of the archipelago where westerners are often seen, and seen in increasing numbers. It is mostly tribal and its khans are mainly fishermen. Forests of wood and bamboo are common., Parts of the Skull are heavily fortified in fear of an invasion from the west. Khans in this area take advantage of the local gunpowder production to maintain a warlord's status; they tend to mistrust westerners., Less settled than the Skull. Apart from deposits of black slate, which is quarried by a dispersed population of mining colonies, it is otherwise mostly barren and a fine place for those seeking solitude for whatever reason., A large island chain covered in cherry trees. The many soothsayers and seasingers of the area often provoke their khans to do war on each other; this and the preponderance of sea monsters make the Scythe dangerous to traverse., Rich in jade, a draw to pirates and prospectors alike. The khans of the Bowl are more interested in wealth and luxury than in military or political power, an attitude which draws merchants as thickly as flies., These islands are joined by massive bridges and dams, in a failed attempt to engender togetherness and trust. This place is the centre of political power: a hotbed of intrigue and betrayal. Steel production here bolsters the massive shipping industry., The islands are protected by a great reef that is very dangerous to navigate. Some say the reef changes shape like it is alive, while others have claimed it is due to geological instability in the area. The pearls recovered from the reef are very valuable., Not much is known about these far-off islands. Rare koi have been known to congregate in the surrounding waters, and khans send mining expeditions to the islands to find rich veins of minerals and jewels before their rivals.];
	enumType.size = 9;
	break;

case 7158:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Tuai Leit, Whale's Maw, Waiko, Goshima, Aminishi, The Islands That Once Were Turtles, Cyclosis, Ai Jei, Hanto, The Sunlit Veil, Thalassia, Bay of Echoes, Hyu-Ji, Seeker Synapse, The Siren's Shell, Rapa Causeway, Bay of Playful Sirens, The Fistmarks of Genma, Teardrop Islands, The Earthquake Straits, Rei Ti, The Forgotten Chimera Straits, The Keening Reef, Ren Bo, Haranu, The Island that Reflects the Moon, Aloft Dagger, Jade Straits, The Island of Clear Eyes, Winds' Home, Falling Blossom, Isle of Juniper, Tokoko, Glittercaves, Kei Pi, Tattanogi, Panacea, Shattered Beams, Crescent Island, New Heritage, Khanoka, The Hole in the World, Flou Tar-Shei, Ashihama, Yamada Island, The Pearl Fortress, Paradise, The Shambling Lair, Dhar Pei's Vantage, Straits of the Oyster Pearl, The Reef that Lies to Mapmakers, Light Under Sea, Tengu Archipelago, Isle of Adamant, The Lair of Tavi and Vynal, The Island that is Blamed for Nothing, Bladewing Crag, Exile's Point, Carlos's Fusion Kitchen, 'Reggie's' Gunpowder Mills, Hubbub's Lovetubs, The Island of Regret, The Faraway Place where Things are Kept, Kami-shima];
	enumType.size = 64;
	break;

case 7159:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, If a westerner has met a seasinger, soothsayer or siren, it was likely here. It is a minor centre of study and research for those not enamoured of the civilised east., The sea in the area is teeming with fish and turtles, making it a favourite for whales. One named 'Shuma' is particularly storied., A merchant island, where westerners mingle with easterners. The slave trade begins here., The village of Gongdung is here. They are particularly suspicious of anything inhuman: soothsayers, sirens, etc., One large and one small island divided by a wide strip of water shallow enough to wade. Its Khan rules from the northern isle., Legend has it that this island chain was a trio of giant sea turtles, turned to stone by unknown forces. Largely uninhabited., Only known home of the eastern cyclops: a race of semi-sentient humanoids who get on well with everyone., One of the larger eastern islands. Produces gunpowder which is traded with the rest of the Wushanko Isles, and also grows apples. The ruling khan is territorial and hostile towards all westerners., The island of Hanto is ruled by a tyrannical khan who has closed his borders to trade. As a result, smuggling is rife in the area., A thin strip of land nestled in shallow, warm seas. Mermaids have been known to visit this place in large numbers., Sulphur is mined here, and gunpowder is made. At the island's height is a massive jade palace, built by Thalassia's khan., Houses several fishing towns that make strong use of explosives in their fishing. The ruling khan is known to be cruel, especially to his own people., The only major concentration of the seatouched people, a reasonably fertile island with a single, semi-fortified township., A living island (likely an evolved sea monster) with a brain at its centre and floating eyeballs as its sensory system., An island curiously shaped like the shell of a nautilus. Home of a siren seasinger., Vast columns of black stone erupt from the ground across the length of this island; one can walk from coast to coast without ever touching the soil., Honazo, a crabbing town, stands in a wide and peaceful bay here., The scientific and superstitious disagree on what came to form the knuckle-shaped depressions indenting the entire surface of this island., Named not for their shape or anything that goes on there, but for the proliferation of waterfalls that fill the air with mist and spray., The sea between these two islands is an unfathomable depth, a rift of stone from which earthquakes are born., A mining colony originally built to dig for black slate; it has become highly prosperous since discovering large quantities of high-quality gems., The Chimera Isles are here. Since the straits are used by smugglers, a number of inns and smuggling dens can be found on the isles., This is where aging sea monsters go to die. Vast bones scatter the coral outcrops as they plunge to the depths., Swift currents, strong winds and a remarkably stable microclimate make the average temperature of this island lower than its neighbours. Rumours exist of a Purist movement having made it their headquarters., The island of Haranu is awash with cherry forests. The island was once home to occultists before they were rounded up and executed by the Scythe's khans., This is an area renowned for its hospitality and hot springs. Beyond the odd cave giant, the island chain is a paradise., This large island is the home of the soothsayers, where they are educated before they practice their arts elsewhere., This is a narrow pass that has been the scene of many battles. It is now used by jade traders., An island mentioned in whispers as a place where the mind is made sharper, the senses clearer and meditation more effective., The prevailing winds around this island change daily, some say on the whim of the sea witches who live here., An island renowned for its geishas, as well as hibiscus gardens and beautiful scenery., Declared taboo for settlement by an ancient khan; now overgrown with juniper groves and a rare haven for land-dwelling beasts., Training islands for the Death Lotus assassins. It is also pockmarked with fishing villages, which form a useful cover., A cave network made bright by large outcrops of quartz and salt. Home to Shuma the whale., The people of Kei Pi are renowned for their energy and their hedonism, although some say that the vicious group of pirates known as the Pin operate out of a hidden base here., The pirates of this island have an unusual reputation for decency., The only known growing location of a medicinal herb of vast potency., A fishing village built on stilts. Once home to the Whaler; since obliterated. Still home to the Old Man of the Sea, who can psychically link to sea monsters., An outpost of the khans' power, heavily fortified. Serves as a centre of frontier justice and bureaucracy., The most populous city of all the Eastern Lands. The city is largely built on the coast, with some smaller buildings built into a mountain., The diplomatic capital of the Eastern Lands, and the site of the Halls of Reckoning., On this island stands a great hole that has never been explored. Pirates dump bodies here., Officially accorded neutral ground, this island is a place of peace. Khans can relax here, if nowhere else., A heavily fortified island known for the refinement and ambition of its citizens., A major cultural centre and focus of social gathering., Headquarters and stronghold of the Death Lotus assassins., Home of Quin, the seasinger. A small island, surrounded by sea monsters, with jungle and a single palace on four white pillars., Rumour abounds of a tiny island where two beast-headed sorcerers bind the drowned dead to their service., The inhabitants of this island are thought of by other Wushanko peoples with a genuine - if occasionally condescending - fondness. They have an undeserved reputation for dyspraxia., The great fortress-city in these straits, known as the Bubble of Mists, is the centre of the pearl trade in Wushanko., Most of the coral formations of this reef lie below the surface; only the unusual formation known as the Spires of Grief is large enough to house its own city., A faint actinic glow under inky waters is the only sign that wisps inhabit the coral caves honeycombing the stem of this tiny island., This island chain is named not for the legendary bird-demons but for ten equally legendary local sages known as the Gu., Adamant is a rare sight in the Eastern Lands; significant deposits on this inhospitable rock give it its name and its wealth., A jewel of culture within the bleak black rock; it is said that the finest musicians in the East or West can be found here., Six hundred men and women died exploring this island. All was forgiven when the massive azure lodes were discovered here., This island is almost entirely unpopulated. Those brave souls who defy this convention contend daily with the indigenous bladewing population., A man could survive on this island - just about - eating raw seabird eggs and sour lemonberries. It is not recommended., This island is named for the restaurant and hotel Carlos has set up here. It gets three pearls out of five in most Wushanko tourist guides., Reginald Wellington-Smythe has built a factory on this island which produces the finest quality gunpowder in all of The Skull., Hubbub, now something of a hit with the seasingers, is one of few humans allowed to set foot on this secret siren spa resort. It has a proper name - this is just what Hubbub calls it., It's no wonder this island keeps getting lost! Any that step foot on it forget all sorts of things - past lovers, what they had for breakfast, their keys...even the island's location., It's a mystery how one of Daemonheim's hidden dungeons found its way this far out into the Eastern Lands, but here it is, just sitting there., Kami-shima has 'chosen' Sojobo, Kami and Honovi, and now counts them among its guardians. These three have befriended the many shi guardian lions that roam across its land.];
	enumType.size = 64;
	break;

case 7160:
	enumType.valueMap = {32=Declared taboo for settlement by an ancient khan; now overgrown with juniper groves and a rare haven for land-dwelling beasts. Home only to the mercenary group known as the Lost Men., 2=The sea in the area is teeming with fish and turtles, making it a favourite for whales. Here, Shuma attacked and stranded the Whaler., 34=A cave network made bright by large outcrops of quartz and salt. Once home to the mighty Shuma., 36=The pirates of this island have an unusual reputation for decency. They are loyal to Kirau, informer and fence to the Assassin., 42=On this island stands a great hole that has never been explored. Pirates dump bodies here, and the Occultist sought death within., 11=Sulphur is mined here, and gunpowder is made. At the island's height is a massive jade palace, built by Thalassia's Khan before he was killed by the Assassin., 17=Honazo, a crabbing town, stood in a wide and peaceful bay here. It has been largely destroyed by Shuma., 19=Named not for their shape or anything that goes on there, but for the proliferation of waterfalls that fill the air with mist and spray. The Missionary sunk the Pride of Chaos here., 24=Swift currents, strong winds and a remarkably stable microclimate make the average temperature of this island lower than its neighbours. The Missionary discovered a Purist group's headquarters here., 25=The island of Haranu is awash with cherry forests. The island was once home to occultists before they were rounded up and executed by the Scythe's Khans; a renegade group returned to the island only to be outed by the Convict., 26=This is an area renowned for its hospitality and hot springs. Beyond the odd cave giant, the island is a paradise. Wu was killed here by the Assassin., 28=This is a narrow pass that has been the scene of many battles. It is now used by jade trawlers. Here the Whaler tried to set a blockade against Shuma., 31=An island renowned for its geishas, as well as hibiscus gardens and beautiful scenery. Oshoru was khan of this island before his death at the Occultist's hands.};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 13;
	break;

case 7161:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [-1, 90243155, 90243156, 90243157, 90243158, 90243159, 90243160, 90243161, 90243205, 90243206, 90243207, 90243208, 90243209, 90243210, 90243211, 90243212, 90243249, 90243250, 90243251, 90243252, 90243253, 90243254, 90243255, 90243257, 90243269, 90243270, 90243271, 90243272, 90243273, 90243274, 90243075, 90243277, 90243278, 90243279, 90243280, 90243072, 90243073, 90243074, 90243283, 90243281, 90243286, 90243287, 90243288, 90243289, 90243290, 90243291, 90243176, 90243177, 90243178, 90243194, 90243195, 90243196, 90243197, 90243187, 90243188, 90243189, 90243190, 90243191, 90243192, 90243164, 90243154, 90243165, 90243172, 90243185, 90243186];
	enumType.size = 65;
	break;

case 7162:
	enumType.valueType = INT;
	enumType.defaultint = 9001;
	enumType.keyType = INT;
	enumType.valueArray = [null, 200, 300, 400, 500, 600, 800, 1000, 1400, 1800];
	enumType.size = 9;
	break;

case 7164:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Cyclosis, null, Siren's Shell, Chimera Straits, Winds' Home, Crescent Isle, Shambling Lair, null, null, null, null, null, null, Light Under Sea, Exile's Point, Kami-shima, Carlos's Fusion Kitchen, 'Reggie's' Gunpowder Mills, Hubbub's Love Tubs, The Faraway Place where Things are Kept, The Island of Regret];
	enumType.size = 14;
	break;

case 7165:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [, The , Frigate , Galleon , Caravel , Corvette , Sailboat ];
	enumType.size = 7;
	break;

case 7166:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [, Chaser , Watcher , Nomad , Loner , Lament , Jack , Roger , Nigel , John , Robert , Alex , Grinder , Diamond , Engine , Hulk , Whip , Heart , Bone , Crusher , Hammer , Ruby , Axe , Penguin , Kitten , Dragon , Narwhal , Shark , Salmon , Lion , Duck , Octupus , Tentacle , Pig , Monkey , Camel , Dog , Dolphin , Leopard , Tuna , Hawk , Albatross , Pelican , Goose , Warrior , Mage , Ranger , Buccaneer , Knight , Corsair , Prince , Servant , Hunter , Slayer , Fisherman , Craftsman , King , Prince , Count , Duke , Baron , Emperor , Kaiser , Khan , Gnome , Demon , Troll , Vampyre , Werewolf , Devil , Dwarf , Elf , Chaos , Void , Sky , Sun , Blow , Coral , Wind , Nerve , Cannon , Aegis , Crow , Smith , Priest , Alchemist , Miner , Challenger , Inventor , Thief , Farmer , Builder , Diviner , Woodcutter , Smuggler , Acrobat , Mole , Diver , Ghost , Drakewing , Monster , Cabbage , Popsicle ];
	enumType.size = 103;
	break;

case 7167:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 8, 8];
	enumType.size = 103;
	break;

case 7168:
	enumType.valueType = STRING;
	enumType.defaultstr = "Filter by...";
	enumType.keyType = INT;
	enumType.valueArray = [General, Properties/Attributes, Names, Items/Objects, Animals, People/Professions, Nobles, Sentient Races, Nouns, various];
	enumType.size = 9;
	break;

case 7169:
	enumType.valueType = STRING;
	enumType.defaultstr = "Nameless";
	enumType.keyType = INT;
	enumType.valueArray = [Nameless, Saucy, Happy, Nervous, Brave, Wily, Merry, Angry, Morbid, Honest, Jolly, Sad, Serene, Fearful, Proud, of the Queen, of the Prince, of the Gods, of the King, of the Lords, of the Princess, of the Countess, of Zamorak, of Bandos, of Guthix, of Zaros, of Saradomin, of Armadyl, of the Spirits, of Revenge, of Sin, of Death, of the Elements, of Scourge, of the Storm, of Wisdom, of Bane, of Vision, of Fear, of Demise, of Light, Black, Blue, Purple, White, Green, Brown, Red, Yellow, Grey, Cursed, Lusty, Broken, Skilled, Filthy, Mad, Swift, Indomitable, Implacable, Plundering, Solar, Easterly, Salty, Misty, Bloody, Noisome, Threadbare, Fervent, Gangrenous, Beautiful, Shameful, Naughty, Scurvy, Foul, Vile, Hot, Mighty, Deadly, Unimaginable, Excessive, Rising, Unwanted, Lunar, Westerly, Gorgeous, Frivolous, Galant, Earnest, Scornful, Fierce, Terrible, Burning, Rabid, Disgraceful, Cold, Trusty, Massive, Unbearable, Illustrious, Pure, Dark, Northerly, Southerly, Sturdy, Seasick, Rusty, Piebald, Ribald, Toothless, Laughing, Flying, Weeping, Reeking, Wandering, Smiling, Terrifying, Prancing, of Lumbridge, of Ardougne, of Kharyrll, of Sarim, of Falador, of Lletya, of Musa, of Gielinor, of Varrock, of Ghorrock, of Brimhaven, of RuneScape, of Morytania, of Kandarin, of Goblins, of Elves, of Faeries, of Trolls, of Humans, of Monkeys, of Vampyres, of Dawn, of the Evening, of the Oceans, of the Waves, of the Moon, of the Storm, of Dreams, of Despair, of the Daylight, of the Twilight, of the Seas, of the Wind, of the Rainbow, of the Rain, of Nightmares, of the Mist, of the Lights, of the Night, of Clouds, of the Sun, of the Fog, of the Tide, of Hope, of Love, Vibrant, Whimsical, of Kharshai, of Sliske, of Bronze, of Iron, of Steel, of Mithril, of Adamant, of Rune, of Daddy, of Destruction, Crimson, Clever, Grim, Omnipotent, Omniscient, All-powerful, Extreme, Fateful, Unholy, Holy, Lonely, Creaky, Enigmatic, Savage];
	enumType.size = 188;
	break;

case 7170:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
	enumType.size = 188;
	break;

case 7171:
	enumType.valueType = STRING;
	enumType.defaultstr = "Filter by...";
	enumType.keyType = INT;
	enumType.valueArray = [General, Personalities/Moods, Nobles/Gods, Attributes/Dedications, Colours, Properties/Attributes, Actions, Places, Sentient Races, Nouns, various];
	enumType.size = 10;
	break;

case 7172:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [, prefix_de_1 , prefix_de_2 , prefix_de_3 , prefix_de_4 , prefix_de_5 ];
	enumType.size = 6;
	break;

case 7173:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [name1_de_1 , name1_de_2 , name1_de_3 , name1_de_4 , name1_de_5 , name1_de_6 , name1_de_7 , name1_de_8 , name1_de_9 , name1_de_10 , name1_de_11 , name1_de_12 , name1_de_13 , name1_de_14 , name1_de_15 , name1_de_16 , name1_de_17 , name1_de_18 , name1_de_19 , name1_de_20 , name1_de_21 , name1_de_22 , name1_de_23 , name1_de_24 , name1_de_25 , name1_de_26 , name1_de_27 , name1_de_28 , name1_de_29 , name1_de_30 , name1_de_31 , name1_de_32 , name1_de_33 , name1_de_34 , name1_de_35 , name1_de_36 , name1_de_37 , name1_de_38 , name1_de_39 , name1_de_40 , name1_de_41 , name1_de_42 , name1_de_43 , name1_de_44 , name1_de_45 , name1_de_46 , name1_de_47 , name1_de_48 , name1_de_49 , name1_de_50 , name1_de_51 , name1_de_52 , name1_de_53 , name1_de_54 , name1_de_55 , name1_de_56 , name1_de_57 , name1_de_58 , name1_de_59 , name1_de_60 , name1_de_61 , name1_de_62 , name1_de_63 , name1_de_64 , name1_de_65 , name1_de_66 , name1_de_67 , name1_de_68 , name1_de_69 , name1_de_70 , name1_de_71 , name1_de_72 , name1_de_73 , name1_de_74 , name1_de_75 , name1_de_76 , name1_de_77 , name1_de_78 , name1_de_79 , name1_de_80 , name1_de_81 , name1_de_82 , name1_de_83 , name1_de_84 , name1_de_85 , name1_de_86 , name1_de_87 , name1_de_88 , name1_de_89 , name1_de_90 , name1_de_91 , name1_de_92 , name1_de_93 , name1_de_94 , name1_de_95 , name1_de_96 , name1_de_97 , name1_de_98 , name1_de_99 , name1_de_100 , name1_de_101 , name1_de_102 , name1_de_103 , name1_de_104 , name1_de_105 , name1_de_106 , name1_de_107 , name1_de_108 , name1_de_109 , name1_de_110 , name1_de_111 , name1_de_112 , name1_de_113 , name1_de_114 , name1_de_115 , name1_de_116 , name1_de_117 , name1_de_118 , name1_de_119 , name1_de_120 , name1_de_121 , name1_de_122 , name1_de_123 , name1_de_124 , name1_de_125 , name1_de_126 , name1_de_127 , Grumpy , Rampaging , Jaunty , Clever , Shadow of , Stone of , giant , classy , professional , ascended , ultimate , winged , creaky , grim , fateful , all-powerful , holy , ghostly , extreme , fabulous , adamant , enigmatic , lonely , savage , omnipotent , obvious , omniscient , cantankerous , special , loose , whimsical , vibrant , Destroyer , Defence of , Bronze , Iron , Mithril , Steel , Rune , Crimson ];
	enumType.size = 167;
	break;

case 7174:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 4];
	enumType.size = 167;
	break;

case 7175:
	enumType.valueType = STRING;
	enumType.defaultstr = "Filter by...";
	enumType.keyType = INT;
	enumType.valueArray = [name1_filtername_de_1, name1_filtername_de_2, name1_filtername_de_3, name1_filtername_de_4, name1_filtername_de_5, name1_filtername_de_6, name1_filtername_de_7, name1_filtername_de_8, name1_filtername_de_9];
	enumType.size = 9;
	break;

case 7176:
	enumType.valueType = STRING;
	enumType.defaultstr = "Ship";
	enumType.keyType = INT;
	enumType.valueArray = [name2_de_1, name2_de_2, name2_de_3, name2_de_4, name2_de_5, name2_de_6, name2_de_7, name2_de_8, name2_de_9, name2_de_10, name2_de_11, name2_de_12, name2_de_13, name2_de_14, name2_de_15, name2_de_16, name2_de_17, name2_de_18, name2_de_19, name2_de_20, name2_de_21, name2_de_22, name2_de_23, name2_de_24, name2_de_25, name2_de_26, name2_de_27, name2_de_28, name2_de_29, name2_de_30, name2_de_31, name2_de_32, name2_de_33, name2_de_34, name2_de_35, name2_de_36, name2_de_37, name2_de_38, name2_de_39, name2_de_40, name2_de_41, name2_de_42, name2_de_43, name2_de_44, name2_de_45, name2_de_46, name2_de_47, name2_de_48, name2_de_49, name2_de_50, name2_de_51, name2_de_52, name2_de_53, name2_de_54, name2_de_55, name2_de_56, name2_de_57, name2_de_58, name2_de_59, name2_de_60, name2_de_61, name2_de_62, name2_de_63, name2_de_64, name2_de_65, name2_de_66, name2_de_67, name2_de_68, name2_de_69, name2_de_70, name2_de_71, name2_de_72, name2_de_73, name2_de_74, name2_de_75, name2_de_76, name2_de_77, name2_de_78, name2_de_79, name2_de_80, name2_de_81, name2_de_82, name2_de_83, name2_de_84, name2_de_85, name2_de_86, name2_de_87, name2_de_88, name2_de_89, name2_de_90, name2_de_91, name2_de_92, name2_de_93, name2_de_94, name2_de_95, name2_de_96, name2_de_97, name2_de_98, name2_de_99, name2_de_100, name2_de_101, name2_de_102, name2_de_103, Icthlarin, Sliske, Tuska, Kharshai, Gods, Godless, Firemaker, Inventor, Fletcher, Mage, Ranger, Thief, Miner, Priest, Smith, Slayer, Summoner, Woodcutter, Crafter, Acrobat, Farmer, Builder, Diviner, Alchemist, Diver, Smuggler, Harbinger, Innuendo, Mirage, Crow, Chinchompa, Raven, Mole, Pug, Behemoth, Drakewing, Monster];
	enumType.size = 140;
	break;

case 7177:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [, The , U.S.S. , H.M.S. , F.S ];
	enumType.size = 5;
	break;

case 7178:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [, Chaser , Revenge , Calm , Wanderer , Loner , Lament , Jack , Roger , Nigel , John , Robert , Alex , Face , Diamond , Engine , Hulk , Whip , Heart , Sapphire , Crusher , Hammer , Ruby , Knife , Penguin , Kitten , Dragon , Narwhal , Shark , Barnacle , Salmon , Lion , Duck , Squid , Tentacle , Pig , Monkey , Camel , Dog , Serpent , Bass , Tuna , Warrior , Buccaneer , Knight , Corsair , Gent , Prince , Servant , Hunter , Crusader , Dreadnaught , Bane , Defiant , Intrepid , Zamorak , Bandos , Guthix , Zaros , Saradomin , Gnome , Demon , Troll , Vampyre , Seaborn , Devil , Chaos , Law , Cloud , Sun , Blow , Coral , Wind , Blood , Icthlarin , Sliske , Tuska , Kharshai , Papa , Gods , Godless , Firemaker , Inventor , Fletcher , Mage , Ranger , Thief , Miner , Priest , Smith , Slayer , Summoner , Woodcutter , Crafter , Acrobat , Farmer , Builder , Diviner , Alchemist , Diver , Smuggler , Harbinger , Beard , Cabbage , Cannon , Aegis , Schooner , Innuendo , Mirage , Crow , Chinchompa , Raven , Mole , Pug , Behemoth , Drakewing , Monster ];
	enumType.size = 117;
	break;

case 7179:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 8, 8, 4, 4, 4, 4, 4, 7, 7, 7];
	enumType.size = 117;
	break;

case 7180:
	enumType.valueType = STRING;
	enumType.defaultstr = "Filter by...";
	enumType.keyType = INT;
	enumType.valueArray = [General, Properties/Attributes, Names, Items/Objects, Animals, People/Professions, Classics, Sentient Races, Nouns, various];
	enumType.size = 9;
	break;

case 7181:
	enumType.valueType = STRING;
	enumType.defaultstr = "Ship";
	enumType.keyType = INT;
	enumType.valueArray = [Ship, Saucy, Happy, Nervous, Brave, Wily, Merry, Angry, Morbid, Insightful, Honest, Jolly, Sad, Serene, Fearful, Proud, of the Queen, of the Prince, of the Gods, of the King, of the Lords, of the Princess, of the Countess, of the Spirits, of Revenge, of the Crusaders, of Sin, of Death, of the Elements, of Scourge, of the Warrior, of the Storm, of Wisdom, of Bane, of Vision, of Fear, of Demise, of Light, Black, Blue, Purple, White, Green, Brown, Red, Yellow, Grey, Cursed, Lusty, Broken, Skilled, Filthy, Mad, Swift, Indomitable, Unsinkable, Implacable, Plundering, Void, Solar, Easterly, Salty, Misty, Bloody, Noisome, Threadbare, Fervent, Gangrenous, Beautiful, Shameful, Naughty, Scurvy, Foul, Vile, Hot, Mighty, Deadly, Unimaginable, Excessive, Rising, Unwanted, Lunar, Westerly, Gorgeous, Blasted, Frivolous, Gallant, Earnest, Scornful, Fierce, Terrible, Problem, Burning, Rabid, Disgraceful, Cold, Trusty, Massive, Unbearable, Illustrious, Pure, Dark, Northerly, Southerly, Sturdy, Seasick, Rusty, Piebald, Ribald, Toothless, Little, Laughing, Raging, Flying, Weeping, Reeking, Wandering, Smiling, Terrifying, Prancing, of Lumbridge, of Ardougne, of Kharyrll, of Sarim, of Falador, of Lletya, of Musa, of Gielinor, of Varrock, of Ghorrock, of Brimhaven, of RuneScape, of Goblins, of Elves, of Faeries, of Trolls, of Humans, of Monkeys, of Vampyres, of Dawn, of the Evening, of the Oceans, of the Waves, of the Moon, of the Storm, of Dreams, of Despair, of the Daylight, of the Twilight, of the Seas, of the Wind, of the Rainbow, of the Rain, of Nightmares, of the Mist, of the Lights, of the Night, of Clouds, of the Sun, of the Fog, of the Tide, of Hope, of Love, Grumpy, Rampaging, Jaunty, Clever, Shadow of, Stone of, giant, classy, professional, ascended, crippled, ultimate, winged, creaky, grim, fateful, all-powerful, holy, ghostly, extreme, fabulous, adamant, enigmatic, lonely, savage, omnipotent, obvious, omniscient, cantankerous, special, loose, whimsical, vibrant, Creaking, Mambo, Bandos?s, Armadyl's, Saradomin's, Kharshai?s, Sliske's, Zamorak?s, Zaros?, Tuska?s, Destroyer, Defence of, Bronze, Iron, Mithril, Steel, Rune, Unholy, Crimson];
	enumType.size = 215;
	break;

case 7182:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4];
	enumType.size = 215;
	break;

case 7183:
	enumType.valueType = STRING;
	enumType.defaultstr = "Filter by...";
	enumType.keyType = INT;
	enumType.valueArray = [General, Personalities/Moods, People/Professions, Attributes/Dedications, Colours, Properties/Attributes, Actions, Places, Sentient Races, Nouns, various];
	enumType.size = 10;
	break;

case 7186:
	enumType.valueMap = {26336=<col=ff0000>Your superior seasinger's robe bottom has run out charges and will need to be repaired., 26340=<col=ff0000>Your seasinger's headband has run out of charges and crumbled to dust., 26341=<col=ff0000>Your seasinger's robe top has run out of charges and crumbled to dust., 26342=<col=ff0000>Your seasinger's robe bottom has run out of charges and crumbled to dust., 26349=<col=ff0000>Your Death Lotus hood has run out of charges and crumbled to dust., 26350=<col=ff0000>Your Death Lotus chestplate has run out of charges and crumbled to dust., 26351=<col=ff0000>Your Death Lotus legs have run out of charges and crumbled to dust., 26352=<col=ff0000>Your superior Death Lotus hood has run out charges and will need to be repaired., 26353=<col=ff0000>Your superior Death Lotus chestplate has run out charges and will need to be repaired., 26322=<col=ff0000>Your superior tetsu helm has run out charges and will need to be repaired., 26354=<col=ff0000>Your superior Death Lotus legs have run out charges and will need to be repaired., 26323=<col=ff0000>Your superior tetsu body has run out charges and will need to be repaired., 26324=<col=ff0000>Your superior tetsu platelegs have run out charges and will need to be repaired., 26328=<col=ff0000>Your tetsu helm has run out of charges and crumbled to dust., 26329=<col=ff0000>Your tetsu Body has run out of charges and crumbled to dust., 26330=<col=ff0000>Your tetsu platelegs have run out of charges and crumbled to dust., 26334=<col=ff0000>Your superior seasinger's headband has run out charges and will need to be repaired., 26335=<col=ff0000>Your superior seasinger's robe top has run out charges and will need to be repaired.};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = OBJ;
	enumType.size = 18;
	break;

case 7187:
	enumType.valueMap = {26336=<col=ffcc00>WARNING: your superior seasinger's robe bottom is about to degrade. When degraded, it will not offer any armour rating or life point boost., 26340=<col=ffcc00>WARNING: your seasinger's headband is about to degrade. When fully degraded, it will be destroyed., 26341=<col=ffcc00>WARNING: your seasinger's robe top is about to degrade. When fully degraded, it will be destroyed., 26342=<col=ffcc00>WARNING: your seasinger's robe bottom is about to degrade. When fully degraded, it will be destroyed., 26349=<col=ffcc00>WARNING: your Death Lotus hood is about to degrade. When fully degraded, it will be destroyed., 26350=<col=ffcc00>WARNING: your Death Lotus chestplate is about to degrade. When fully degraded, it will be destroyed., 26351=<col=ffcc00>WARNING: your Death Lotus legs are about to degrade. When fully degraded, they will be destroyed., 26352=<col=ffcc00>WARNING: your superior Death Lotus hood is about to degrade. When degraded, it will not offer any armour rating or life point boost., 26353=<col=ffcc00>WARNING: your superior Death Lotus chestplate is about to degrade. When degraded, it will not offer any armour rating or life point boost., 26322=<col=ffcc00>WARNING: your superior tetsu helm is about to degrade. When degraded, it will not offer any armour rating or life point boost., 26354=<col=ffcc00>WARNING: your superior Death Lotus legs are about to degrade. When degraded, they will not offer any armour rating or life point boost., 26323=<col=ffcc00>WARNING: your superior tetsu body is about to degrade. When degraded, it will not offer any armour rating or life point boost., 26324=<col=ffcc00>WARNING: your superior tetsu platelegs are about to degrade. When degraded, they will not offer any armour rating or life point boost., 26328=<col=ffcc00>WARNING: your tetsu helm is about to degrade. When fully degraded, it will be destroyed., 26329=<col=ffcc00>WARNING: your tetsu body is about to degrade. When fully degraded, it will be destroyed., 26330=<col=ffcc00>WARNING: your tetsu platelegs are about to degrade. When fully degraded, they will be destroyed., 26334=<col=ffcc00>WARNING: your superior seasinger's headband is about to degrade. When degraded, it will not offer any armour rating or life point boost., 26335=<col=ffcc00>WARNING: your superior seasinger's robe top is about to degrade. When degraded, it will not offer any armour rating or life point boost.};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = OBJ;
	enumType.size = 18;
	break;

case 7188:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 9, 9, 6, 6, 6, 6, 6, 8, 8, 8];
	enumType.size = 140;
	break;

case 7189:
	enumType.valueType = STRING;
	enumType.defaultstr = "Filter by...";
	enumType.keyType = INT;
	enumType.valueArray = [name1_filtername_de_1, name1_filtername_de_2, name1_filtername_de_3, name1_filtername_de_4, name1_filtername_de_5, name1_filtername_de_6, name1_filtername_de_7, name1_filtername_de_8, name1_filtername_de_9, name1_filtername_de_10];
	enumType.size = 10;
	break;

case 7190:
	enumType.valueMap = {14932=<col=ffcc00>Your scrimshaw has disturbed a divine impling., 7845=<col=ffcc00>Your scrimshaw has disturbed a pirate impling., 6053=<col=ffcc00>Your scrimshaw has disturbed a ninja impling., 20102=<col=ffcc00>Your scrimshaw has disturbed a crystal impling., 6054=<col=ffcc00>Your scrimshaw has disturbed a dragon impling., 1032=<col=ffcc00>Your scrimshaw has disturbed an essence impling., 1033=<col=ffcc00>Your scrimshaw has disturbed an eclectic impling., 1034=<col=ffcc00>Your scrimshaw has disturbed a nature impling., 7866=<col=ffcc00>Your scrimshaw has disturbed a spirit impling., 1035=<col=ffcc00>Your scrimshaw has disturbed a magpie impling., 7902=<col=ffcc00>Your scrimshaw has disturbed a zombie impling., 7903=<col=ffcc00>Your scrimshaw has disturbed a kingly impling.};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = NPC;
	enumType.size = 12;
	break;

case 7204:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26402, null, null, null, 26404, null, null, 26406, null, 26408, 26410];
	enumType.size = 5;
	break;

case 7205:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26390, null, null, null, 26392, null, null, 26394, null, 26396, 26398];
	enumType.size = 5;
	break;

case 7206:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26414, null, null, null, 26416, null, null, 26418, null, 26420, 26422];
	enumType.size = 5;
	break;

case 7207:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26426, null, null, null, 26428, null, null, 26430, null, 26432, 26434];
	enumType.size = 5;
	break;

case 7208:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26450, null, null, null, 26452, null, null, 26454, null, 26456, 26458];
	enumType.size = 5;
	break;

case 7209:
	enumType.valueMap = {9=26472, 10=26470, 4=26466, 7=26468};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7210:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26464, null, null, null, 26466, null, null, 26468, null, 26472, 26470];
	enumType.size = 5;
	break;

case 7211:
	enumType.valueMap = {5=26478, 3=26476};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 7212:
	enumType.valueMap = {5=26474};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7213:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 15701;
	enumType.keyType = INT;
	enumType.valueArray = [null, 15701, 15701, 15701, 15701, 15701, 15701, 15701, 15701, 15701, 15701, 15702, null, 15703, 15703, 15703, null, null, 15704, 15704, 15704, null, null, 15705, 15705, 15705];
	enumType.size = 20;
	break;

case 7224:
	enumType.valueType = STRING;
	enumType.defaultstr = "Default Name";
	enumType.keyType = INT;
	enumType.valueArray = [Default Name, Fido, Pepper, Sparky, Tiny, Abaddon, Ahriman, Azazel, Cerberus, Diabolos, Kitty, Liono, Leandros, Leonidas, Lionel, Leonard, Crispy, Toasty, Roasty, Ash, Igneous, Immy, Moley, Arc, Nemea, Simurgh, Arezzo, Lycia, Pixiu, Kirin, Linus, Riddle, Draconis, Drake, Firebelly, Drago, Loup, Bernard, Bernie, Brimstone, Magma, Magnus, Combustio, Sanguis, Dracul, Grimalkin, Red Fang, Thirsty, Bakeneko, Phantom, Chernobog, Fluffy, Snowy, Dusty, Cocoa, Patch, Spot, Sleepy, Nibbles, Pooky, Fifi, Crush, Fling, Shatter, Trample, Firestarter, Mr Punchy, Ms Punchy, Mr Stampy, Ms Stampy, Bombarde, Bulwark, Broadside, Ballista, Breach, Sunder, Trebuchet, Bop, Forge, Rocky, Ember, Pearl, Jet, Silverlight, Darklight, Charlie, Nova, Pandora, Treasure Holder, Casey, Boxy, Casketteer, Drifter, Puffy, Led, Dirge, Blemp, Shinetales, Phox, Kitsune, Reynard, Pinyin, Skelesaur, Barney, Boneshi, Rex, Dino, Zhe, Lei, Xiongmao, Tiankong, Zhu, Sifu, Cyclops, Polyphemus, Claude, Deathbreath, Sawbones, Fangs, Speedy, Forrest, Legs, Whitebearrrd, Peggy, Matey, Hoppy, Grog, Boomer, Stan, Tiddles, Sparks, Jane, Flopsy, Peter, Nuke, Kibbles, Daisy, Jack, Timmy, Ruth, Penny, Woobie, Squishy, Widget, Snookums, Chloe, Fury];
	enumType.size = 147;
	break;

case 7225:
	enumType.valueMap = {29953=29954, 28163=28164, 29699=29700, 29955=29956, 24196=24197, 28165=28166, 29957=29958, 24199=24200, 29959=29960, 28168=28169, 29961=29962, 29963=29964, 29965=29966, 29967=29968, 14992=21110, 29840=29841, 30736=30737, 14993=14994, 29969=29970, 23186=23187, 29971=29972, 29973=29974, 29975=29976, 29977=29978, 31257=31258, 29338=29339, 29851=29852, 28444=28445, 28957=28958, 28447=28448, 28321=28322, 28449=28450, 24353=24354, 28962=29157, 26659=26660, 28323=28324, 31651=31652, 26532=26533, 24356=24357, 28325=28326, 31653=31654, 24359=24360, 31655=31656, 31657=31658, 32042=32043, 32044=32045, 32046=32047, 32048=32049, 31666=31667, 20281=20282, 30395=30396, 29767=29768, 30537=30538, 31818=31381, 19019=19020, 31819=31382, 30541=30551, 19022=19023, 19025=19026, 30801=30802, 6230=6233, 29786=29787, 26590=26591, 31966=31967, 29791=29792, 21088=21089, 31968=31969, 31970=31971, 21091=21092, 7013=14990, 29158=29159, 29929=29930, 29931=29932, 31340=31342, 29933=29934, 31341=31343, 29935=29936, 29937=29938, 28787=28788, 29939=29940, 19061=19062, 21109=21225, 28789=28790, 29941=29942, 28791=28792, 29943=29944, 28793=28794, 29945=29946, 28795=28796, 29947=29948, 28797=28798, 29949=29950, 29951=29952};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = STRUCT;
	enumType.size = 93;
	break;

case 7229:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19019, 19022, 19025, 19061, 21088, 21091, 20281, 23186, 24196, 24199, 14993, 21109, 7013, 14992, 26532, 26590, 26659, 28165, 28168, 28163, 28321, 28323, 28325, 28444, 28447, 28449, 28787, 28789, 28791, 28793, 28795, 28797, 24353, 24356, 24359, 28957, 29338, 29158, 28962, 29699, 29767, 29786, 29791, 29840, 29851, 29929, 29931, 29933, 29935, 29937, 29939, 29941, 29943, 29945, 29947, 29949, 29951, 29953, 29955, 29957, 29959, 29961, 29963, 29965, 29967, 29969, 29971, 29973, 29975, 29977, 30395, 30537, 30736, 30801, 30541, 31257, 31340, 31341, 6230, 31651, 31653, 31655, 31657, 31666, 31966, 31968, 31970, 31818, 31819, 32042, 32044, 32046, 32048];
	enumType.size = 93;
	break;

case 7230:
	enumType.valueType = STRING;
	enumType.defaultstr = "Free & Members";
	enumType.keyType = INT;
	enumType.valueArray = [Free & Members, Members only, Free only];
	enumType.size = 3;
	break;

case 7231:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [null, Legendary Pets, Companion Pets, Follower Pets];
	enumType.size = 3;
	break;

case 7254:
	enumType.valueMap = {1792=4, 1793=5, 1794=12, 1795=8, 1796=0, 1797=1, 28421=173, 1798=9, 19211=124, 1804=7, 19212=125, 29196=179, 1805=20, 1806=27, 10516=108, 1817=24, 1818=25, 1819=26, 1820=17, 1821=18, 1822=13, 1823=14, 1824=15, 30752=187, 1825=10, 1826=19, 1827=11, 1828=21, 1829=6, 1830=22, 1831=23, 1832=35, 1833=33, 1834=32, 1835=34, 1836=30, 1837=31, 1838=28, 1839=29, 1840=36, 1841=38, 1842=39, 1843=40, 13875=120, 1844=41, 9780=104, 13876=121, 1845=42, 9781=105, 1846=43, 9782=106, 1847=44, 9783=107, 1848=45, 1849=46, 1850=47, 1851=48, 1852=50, 28732=174, 1853=49, 28733=175, 1854=63, 1855=37, 25670=160, 29766=184, 25671=161, 22600=156, 25672=162, 22601=157, 25673=163, 25674=164, 25675=165, 21071=149, 21072=150, 21073=151, 21074=152, 21075=153, 21076=154, 19541=128, 21077=155, 19542=129, 19543=130, 19544=131, 19545=132, 2650=58, 19546=133, 2651=53, 19547=134, 2652=54, 19548=135, 2653=57, 19549=136, 2654=52, 19550=137, 2655=61, 19551=138, 2656=62, 19552=139, 2657=55, 19553=140, 7265=169, 2658=51, 19554=141, 31586=188, 2659=59, 19555=142, 31587=189, 2660=60, 19556=143, 31588=190, 31844=191, 2661=56, 19557=144, 2662=64, 2663=65, 19559=148, 2664=66, 2665=67, 2666=68, 2667=69, 14966=126, 2935=95, 2936=96, 2937=97, 2938=98, 2939=99, 11387=115, 2940=100, 11388=116, 2941=101, 2942=102, 2687=70, 2943=103, 2688=71, 2689=72, 2690=73, 28034=170, 2691=74, 28035=171, 2692=75, 28036=172, 2693=76, 2694=77, 19334=127, 2695=78, 2696=79, 2697=80, 2698=81, 2699=82, 25739=166, 2700=83, 2701=84, 2702=87, 2703=88, 2704=89, 11408=118, 2705=92, 11409=119, 2706=90, 11410=117, 2707=91, 2708=85, 2709=86, 11187=109, 11188=110, 11189=111, 26549=167, 11190=112, 26550=168, 11191=113, 5559=122, 11192=114, 2749=93, 9925=123, 24283=176, 29404=180, 29405=181, 9693=185, 29406=182, 9694=186, 29407=183, 24033=159, 19684=158, 19431=145, 19432=146, 29164=178, 19437=147, 29165=177, 1783=2, 2812=94, 1790=3, 1791=16};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = STRUCT;
	enumType.size = 192;
	break;

case 7255:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27075, 27076, null, null, 27077, null, null, 27079, null, 27078, 27080];
	enumType.size = 6;
	break;

case 7256:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27083, 27084, null, null, 27085, null, null, 27087, null, 27086, 27088];
	enumType.size = 6;
	break;

case 7259:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27120, 27130, null, null, 27122, null, null, 27124, null, 27126, 27128];
	enumType.size = 6;
	break;

case 7260:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27134, null, null, null, 27136, null, null, 27138, null, 27140, 27142];
	enumType.size = 5;
	break;

case 7261:
	enumType.valueMap = {5=27144};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7263:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27146];
	enumType.size = 1;
	break;

case 7264:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 27147];
	enumType.size = 1;
	break;

case 7265:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 41132;
	enumType.keyType = INT;
	enumType.valueArray = [41132, 41131];
	enumType.size = 2;
	break;

case 7266:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 25529;
	enumType.keyType = INT;
	enumType.valueArray = [25529, 25532, 25530, 25531];
	enumType.size = 4;
	break;

case 7267:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 25525;
	enumType.keyType = INT;
	enumType.valueArray = [25525, 25518, 25511, 25519, 25520, 25517, 25514];
	enumType.size = 7;
	break;

case 7268:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 25521;
	enumType.keyType = INT;
	enumType.valueArray = [25521, 25509, 25515, 25524, 25510, 25512, 25516];
	enumType.size = 7;
	break;

case 7269:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 25528;
	enumType.keyType = INT;
	enumType.valueArray = [25528, 25527];
	enumType.size = 2;
	break;

case 7270:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 25522;
	enumType.keyType = INT;
	enumType.valueArray = [25522, 25526];
	enumType.size = 2;
	break;

case 7271:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 25513;
	enumType.keyType = INT;
	enumType.valueArray = [25513, 25523];
	enumType.size = 2;
	break;

case 7272:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 41079;
	enumType.keyType = INT;
	enumType.valueArray = [41079, 41116, 41120, 41121, 41133, 41080, 41123];
	enumType.size = 7;
	break;

case 7273:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 25503;
	enumType.keyType = INT;
	enumType.valueArray = [25536, 25534, 25533, 25541, 25539, 25537, 25540, 25543, 25535, 25538, 25542];
	enumType.size = 11;
	break;

case 7274:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 41115;
	enumType.keyType = INT;
	enumType.valueArray = [41115, 41108, 41118, 41098];
	enumType.size = 4;
	break;

case 7275:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21779];
	enumType.size = 1;
	break;

case 7276:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21780];
	enumType.size = 1;
	break;

case 7277:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21781];
	enumType.size = 1;
	break;

case 7278:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21782];
	enumType.size = 1;
	break;

case 7292:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27189, null, null, null, 27190, null, null, 27191, null, 27192, 27193];
	enumType.size = 5;
	break;

case 7293:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27205, 27210, null, null, 27206, null, null, 27207, null, 27208, 27209];
	enumType.size = 6;
	break;

case 7294:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27198, null, null, null, 27199, null, null, 27200, null, 27202, 27201];
	enumType.size = 5;
	break;

case 7295:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27220, null, null, null, 27222, null, null, 27224, null, 27226, 27228];
	enumType.size = 5;
	break;

case 7317:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Combat totems, Exploratory totems, Resources];
	enumType.size = 3;
	break;

case 7318:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Trading Mantis, Trading Leech, Cloning Mosquito, Whimsical Bunyip, Protecting Titan, Thieving Locust, Consistent Yak, Scavenging Meerkat, Reversing Phoenix, Preening Ibis, Beguiling Smoke Devil];
	enumType.size = 11;
	break;

case 7320:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19055, 19056, 19057, 19058, 19063, 19064, 19066, 19067, 19068, 19198, 19199, 19200, 19201, 19202, 19203, 19204];
	enumType.size = 16;
	break;

case 7321:
	enumType.valueMap = {48=342, 52=1060, 38=146, 39=39, 40=459, 41=459, 42=1286, 46=955};
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.size = 8;
	break;

case 7322:
	enumType.valueMap = {48=162, 52=549, 38=210, 39=61, 40=222, 41=318, 42=766, 46=356};
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.size = 8;
	break;

case 7333:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Lower floor, Middle floor, Upper floor];
	enumType.size = 3;
	break;

case 7334:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27419, null, null, null, 27421, null, null, 27423, null, 27425, 27427];
	enumType.size = 5;
	break;

case 7335:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27431, null, null, null, 27433, null, null, 27435, null, 27437, 27439];
	enumType.size = 5;
	break;

case 7336:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27443, null, null, null, 27445, null, null, 27447, null, 27449, 27451];
	enumType.size = 5;
	break;

case 7337:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27455, null, null, null, 27457, null, null, 27459, null, 27461, 27463];
	enumType.size = 5;
	break;

case 7338:
	enumType.valueMap = {9729=159, 519=34, 8206=149, 1040=57, 2577=92, 4116=113, 536=35, 16408=193, 2074=83, 3100=100, 1566=72, 5153=124, 11810=171, 3620=107, 9253=156, 553=36, 1070=58, 13361=179, 5683=129, 4660=119, 571=37, 14399=184, 1608=73, 15946=191, 1101=59, 2125=84, 590=38, 2639=93, 7247=142, 6736=138, 12376=174, 8793=153, 609=39, 3171=101, 7784=146, 4203=114, 1132=60, 6252=134, 110=1, 1650=74, 3699=108, 628=40, 120=2, 130=3, 2178=85, 15493=189, 648=41, 5256=125, 140=4, 1164=61, 2701=94, 4756=120, 150=5, 10391=163, 13977=182, 668=42, 10909=166, 1694=75, 8350=150, 160=6, 12960=177, 5794=130, 9892=160, 3242=102, 171=7, 1197=62, 689=43, 11444=169, 18100=200, 181=8, 2232=86, 191=9, 9410=157, 3780=109, 4292=115, 17605=198, 710=44, 15048=187, 202=10, 1738=76, 2765=95, 6861=139, 1230=63, 7378=143, 213=11, 732=45, 11997=172, 223=12, 17119=196, 6371=135, 234=13, 2287=87, 1264=64, 5361=126, 8945=154, 755=46, 3315=103, 7923=147, 245=14, 4853=121, 1783=77, 13564=180, 257=15, 16643=194, 778=47, 268=16, 2829=96, 5906=131, 1299=65, 14613=185, 3862=110, 280=17, 12569=175, 4382=116, 801=48, 292=18, 1829=78, 2343=88, 304=19, 8496=151, 16176=192, 1335=66, 825=49, 316=20, 3390=104, 10562=164, 329=21, 10057=161, 6988=140, 11085=167, 2895=97, 850=50, 1876=79, 341=22, 4952=122, 7512=144, 5467=127, 6491=136, 1372=67, 2400=89, 9569=158, 354=23, 15718=190, 13160=178, 3945=111, 11626=170, 875=51, 14187=183, 368=24, 4473=117, 381=25, 8064=148, 1409=68, 1924=80, 6020=132, 901=52, 3465=105, 9098=155, 395=26, 2962=98, 409=27, 12185=173, 2458=90, 928=53, 15269=188, 1447=69, 424=28, 1973=81, 439=29, 955=54, 17851=199, 5052=123, 4030=112, 8644=152, 454=30, 5574=128, 13769=181, 7116=141, 1486=70, 17361=197, 2517=91, 6613=137, 470=31, 3542=106, 4566=118, 983=55, 3031=99, 12764=176, 7647=145, 486=32, 2023=82, 10734=165, 14830=186, 10223=162, 16880=195, 1011=56, 502=33, 1526=71, 6135=133, 11263=168};
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.size = 200;
	break;

case 7339:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 110, 120, 130, 140, 150, 160, 171, 181, 191, 202, 213, 223, 234, 245, 257, 268, 280, 292, 304, 316, 329, 341, 354, 368, 381, 395, 409, 424, 439, 454, 470, 486, 502, 519, 536, 553, 571, 590, 609, 628, 648, 668, 689, 710, 732, 755, 778, 801, 825, 850, 875, 901, 928, 955, 983, 1011, 1040, 1070, 1101, 1132, 1164, 1197, 1230, 1264, 1299, 1335, 1372, 1409, 1447, 1486, 1526, 1566, 1608, 1650, 1694, 1738, 1783, 1829, 1876, 1924, 1973, 2023, 2074, 2125, 2178, 2232, 2287, 2343, 2400, 2458, 2517, 2577, 2639, 2701, 2765, 2829, 2895, 2962, 3031, 3100, 3171, 3242, 3315, 3390, 3465, 3542, 3620, 3699, 3780, 3862, 3945, 4030, 4116, 4203, 4292, 4382, 4473, 4566, 4660, 4756, 4853, 4952, 5052, 5153, 5256, 5361, 5467, 5574, 5683, 5794, 5906, 6020, 6135, 6252, 6371, 6491, 6613, 6736, 6861, 6988, 7116, 7247, 7378, 7512, 7647, 7784, 7923, 8064, 8206, 8350, 8496, 8644, 8793, 8945, 9098, 9253, 9410, 9569, 9729, 9892, 10057, 10223, 10391, 10562, 10734, 10909, 11085, 11263, 11444, 11626, 11810, 11997, 12185, 12376, 12569, 12764, 12960, 13160, 13361, 13564, 13769, 13977, 14187, 14399, 14613, 14830, 15048, 15269, 15493, 15718, 15946, 16176, 16408, 16643, 16880, 17119, 17361, 17605, 17851, 18100];
	enumType.size = 200;
	break;

case 7347:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Death is a fast and skilled lone fighter. He would run circles around a larger enemy. He primarily uses his own discipline of magic, but is a capable melee combatant., Chaeldar's size means she can move very quickly, and would be well suited to a large, slow enemy. Thaerisk - although not as experienced as the other fighters - has a wealth of knowledge and can use this to outsmart any less intelligent opponents., Cres himself is no fighter, as he is slow and fragile. He will use his creations to fight for him, so would be a good match for multiple smaller enemies. He wouldn't be a match for anyone too physically strong., The Valluta and Fiara are both large creatures, and are slow-moving fighters. They also both have a high magic resistance, so would be well suited against an opponent who specialises in it.];
	enumType.size = 4;
	break;

case 7349:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Whoever is coming through this wing is very big, and slow. It sounds like they are using their immense strength to force their way through the rock. Perhaps they don't have the intelligence to try any other way., It sounds like there are a lot of enemies breaking through here, and the foul stench of the undead can be smelled. Whoever is leading these troops must have an immense talent to undermine death itself., This enemy sounds large, slow and heavy, but they are using more than their strength to break through. The impact of magic can be heard alongside demonic chanting, so they must have some intelligence., Whoever is coming through here sounds small and nimble. They seem to be using only magic, so it could be assumed they'll have a high resistance to magic used against them. Their attacks sound extremely aggressive, as if they're beyond determined.];
	enumType.size = 4;
	break;

case 7350:
	enumType.valueMap = {14937=19750, 14930=19752, 14931=19751, 14932=19750, 14933=19750, 14926=19749};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 19748;
	enumType.keyType = STRUCT;
	enumType.size = 6;
	break;

case 7365:
	enumType.valueMap = {14921=0, 14922=0, 14923=0, 14924=0, 14925=0, 14926=0, 14927=0, 14928=0, 14929=0, 14930=1, 14931=1, 14932=1, 14933=1, 14934=0, 14935=0, 14937=2, 14938=3, 14939=4, 14940=4, 14941=5, 14942=4, 14943=5, 14944=5, 14945=5, 14946=5, 14947=5};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = STRUCT;
	enumType.size = 26;
	break;

case 7366:
	enumType.valueMap = {14944=7, 14945=7, 14946=7, 19303=8, 14921=6, 19305=10, 14922=6, 14923=6, 14924=6, 14925=6, 14926=6, 14927=6, 14929=6, 14934=6, 19415=9, 14941=7, 14943=7};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = STRUCT;
	enumType.size = 17;
	break;

case 7372:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27580, null, null, null, 27581, null, null, 27583, null, 27582, 27584];
	enumType.size = 5;
	break;

case 7373:
	enumType.valueMap = {14942=20001};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 19999;
	enumType.keyType = STRUCT;
	enumType.size = 1;
	break;

case 7374:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Citadel Tier 1, Citadel Tier 2, Citadel Tier 3, Citadel Tier 4, Citadel Tier 5, Citadel Tier 6, Citadel Tier 7, No Citadel, Citadel work required, Citadel work not required, 1 Avatar, 2 Avatars, 3 Avatars];
	enumType.size = 13;
	break;

case 7375:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19344, 19345, 19346, 19347, 19348, 19349, 19350, 19351, 19352, 19353];
	enumType.size = 10;
	break;

case 7376:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19386, 19387, 19388, 19389, 19390, 19391, 19392, 19393, 19394, 19395, 19396, 19397];
	enumType.size = 12;
	break;

case 7377:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19354, 19355, 19356, 19357, 19358, 19359, 19360, 19361, 19362, 19363];
	enumType.size = 10;
	break;

case 7378:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19379, 19380, 19381, 19382, 19383, 19384, 19385];
	enumType.size = 7;
	break;

case 7379:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19364, 19365, 19366, 19367, 19368, 19369, 19370, 19371];
	enumType.size = 8;
	break;

case 7380:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19372, 19373, 19374, 19375, 19376, 19377, 19378];
	enumType.size = 7;
	break;

case 7381:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19398, 19399, 19400, 19401, 19402, 19403, 19404, 19405, 19406, 19407];
	enumType.size = 10;
	break;

case 7382:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27610];
	enumType.size = 1;
	break;

case 7383:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27612];
	enumType.size = 1;
	break;

case 7384:
	enumType.valueMap = {3=27614};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7385:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [near the Lava Maze, near Red dragon Isle, near the Dark warriors fortress];
	enumType.size = 3;
	break;

case 7386:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [interrupt the magic beam, summon in reinforcements, kill the bandits, loot the tents, kill people, run, get out of the Wilderness, hand in the rewards];
	enumType.size = 8;
	break;

case 7387:
	enumType.valueType = TILE;
	enumType.defaultint = 51351295;
	enumType.keyType = INT;
	enumType.valueArray = [51351295, 49810952, 54234811];
	enumType.size = 3;
	break;

case 7388:
	enumType.valueType = STRING;
	enumType.defaultstr = "There is a camp in the Wilderness somewhere.";
	enumType.keyType = INT;
	enumType.valueArray = [I sense a camp east of the Lava Maze., I sense a camp south of the Dark Warriors' Fortress, not far from here., I sense a camp south-east of Red Dragon Isle.];
	enumType.size = 3;
	break;

case 7389:
	enumType.valueType = STRING;
	enumType.defaultstr = "<col=ffff00>News: A warband camp has been sighted in the Wilderness.";
	enumType.keyType = INT;
	enumType.valueArray = [<col=ffff00>News: A warband camp has been sighted east of the Lava Maze., <col=ffff00>News: A warband camp has been sighted south of the Dark Warriors' Fortress., <col=ffff00>News: A warband camp has been sighted south-east of Red Dragon Isle.];
	enumType.size = 3;
	break;

case 7390:
	enumType.valueType = NPC;
	enumType.defaultint = 17066;
	enumType.keyType = INT;
	enumType.valueArray = [null, 17067, 17068, 17066];
	enumType.size = 3;
	break;

case 7391:
	enumType.valueType = NPC;
	enumType.defaultint = 17070;
	enumType.keyType = INT;
	enumType.valueArray = [null, 17071, 17072, 17070];
	enumType.size = 3;
	break;

case 7392:
	enumType.valueType = NPC;
	enumType.defaultint = 17066;
	enumType.keyType = INT;
	enumType.valueArray = [null, 17075, 17076, 17074];
	enumType.size = 3;
	break;

case 7393:
	enumType.valueType = NPC;
	enumType.defaultint = 17070;
	enumType.keyType = INT;
	enumType.valueArray = [null, 17079, 17080, 17078];
	enumType.size = 3;
	break;

case 7394:
	enumType.valueType = NPC;
	enumType.defaultint = 17069;
	enumType.keyType = INT;
	enumType.valueArray = [17069, 17073, 17077, 17081];
	enumType.size = 4;
	break;

case 7395:
	enumType.valueType = LOCATION;
	enumType.defaultint = 83305;
	enumType.keyType = INT;
	enumType.valueArray = [83305, 83307, 83306, 83308];
	enumType.size = 4;
	break;

case 7396:
	enumType.valueType = LOCATION;
	enumType.defaultint = 83314;
	enumType.keyType = INT;
	enumType.valueArray = [83314, 83316, 83315, 83317];
	enumType.size = 4;
	break;

case 7397:
	enumType.valueType = LOCATION;
	enumType.defaultint = 83323;
	enumType.keyType = INT;
	enumType.valueArray = [83323, 83325, 83324, 83326];
	enumType.size = 4;
	break;

case 7398:
	enumType.valueType = LOCATION;
	enumType.defaultint = 83332;
	enumType.keyType = INT;
	enumType.valueArray = [83332, 83334, 83333, 83335];
	enumType.size = 4;
	break;

case 7399:
	enumType.valueType = LOCATION;
	enumType.defaultint = 83340;
	enumType.keyType = INT;
	enumType.valueArray = [83340, 83342, 83341, 83343];
	enumType.size = 4;
	break;

case 7400:
	enumType.valueType = LOCATION;
	enumType.defaultint = 83347;
	enumType.keyType = INT;
	enumType.valueArray = [83347, 83345, 83346, 83348];
	enumType.size = 4;
	break;

case 7401:
	enumType.valueType = LOCATION;
	enumType.defaultint = 83368;
	enumType.keyType = INT;
	enumType.valueArray = [83368, 83370, 83367, 83369];
	enumType.size = 4;
	break;

case 7402:
	enumType.valueType = LOCATION;
	enumType.defaultint = 83358;
	enumType.keyType = INT;
	enumType.valueArray = [83358, 83361, 83359, 83360];
	enumType.size = 4;
	break;

case 7414:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28001, null, null, null, 28003, null, null, 28007, null, 28005, 28009];
	enumType.size = 5;
	break;

case 7415:
	enumType.valueMap = {3=28011};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7419:
	enumType.valueMap = {4513=0, 4514=0, 4515=0, 4068=0, 4516=0, 4069=0, 4070=0, 4071=0, 4072=0, 18731=0, 18735=0, 18739=0, 18740=0, 18741=0, 18710=0, 18742=0, 18711=0, 18743=0, 18712=0, 18713=0, 18714=0, 18715=0, 21531=0};
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = OBJ;
	enumType.size = 23;
	break;

case 7422:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28070, null, null, null, 28071, null, null, 28073, null, 28072, 28074];
	enumType.size = 5;
	break;

case 7423:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [830, 19589, 838, 19590, 19592, 19593, 21215, 844, 2840, 19591, 21214];
	enumType.size = 11;
	break;

case 7424:
	enumType.valueType = STRING;
	enumType.defaultstr = "N/A";
	enumType.keyType = INT;
	enumType.valueArray = [None, Dynamic];
	enumType.size = 2;
	break;

case 7425:
	enumType.valueType = STRING;
	enumType.defaultstr = "N/A";
	enumType.keyType = INT;
	enumType.valueArray = [Off, FXAA];
	enumType.size = 2;
	break;

case 7426:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Audio, Clans, Combat, Graphics, Minigames and D&Ds, Quest, Technical, Recent updates, Skill, Text];
	enumType.size = 10;
	break;

case 7427:
	enumType.valueMap = {0=7428, 9=7430, 2=7431, 3=7429};
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7428:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Atmospheric, Jukebox, Music, Voice Over, Other];
	enumType.size = 5;
	break;

case 7429:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Animation, Atmospheric effects, Characters, Environment, Interfaces, Objects, Textures];
	enumType.size = 7;
	break;

case 7430:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, In-game, Other];
	enumType.size = 2;
	break;

case 7431:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, PVE, PVP];
	enumType.size = 2;
	break;

case 7432:
	enumType.valueMap = {19824=15, 19809=15, 19819=15, 28085=255, 19814=15};
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = OBJ;
	enumType.size = 5;
	break;

case 7433:
	enumType.valueMap = {9740=16968, 9741=16968, 9742=16968, 9743=16968, 6674=16968, 6677=16975, 6678=16975, 6679=16969, 7739=16968, 9814=16969, 8791=16976, 8792=16976, 8793=16976, 8794=16976, 8795=16976, 8796=16976, 6761=16974, 6762=16974, 7275=16974, 7276=16974, 6764=16974, 7277=16974, 6765=16974, 7278=16974, 6766=16974, 6767=16974, 6768=16975, 6769=16975, 6770=16975, 6771=16975, 6772=16975, 6773=16975, 6774=16975, 6775=16975, 6776=16975, 6777=16975, 6778=16975, 7802=20391, 6779=16975, 7803=20391, 7804=20391, 7805=20391, 6782=16968, 7806=20391, 6783=16968, 7807=20391, 7808=20391, 7809=20391, 6786=16968, 7810=20391, 6787=16968, 7811=20391, 6788=16968, 6789=16968, 6790=16968, 7814=20391, 6791=16968, 7815=20391, 6792=16968, 7816=20391, 6793=16968, 7817=20391, 8330=16972, 7818=20391, 8331=16969, 7819=20391, 6796=16968, 8332=16969, 7820=20391, 6797=16968, 7821=20391, 6798=16968, 7822=20391, 6799=16968, 5775=16972, 7823=20391, 6800=16968, 5776=16972, 7824=20391, 6801=16968, 7825=20391, 6802=16968, 6805=16968, 6806=16968, 6807=16968, 6808=16968, 6811=16968, 6812=16968, 9884=16972, 6813=16968, 6814=16968, 6815=16968, 6825=16970, 6826=16970, 6827=16970, 6828=16970, 6829=16970, 6830=16971, 6831=16971, 6834=16973, 6835=16968, 6836=16973, 6837=16973, 6840=16973, 6841=16973, 6842=16973, 6843=16973, 6844=16973, 6845=16973, 6846=16973, 6847=16973, 6850=16975, 6851=16975, 6856=16968, 6857=16968, 6858=16968, 6859=16968, 6860=16968, 6863=16973, 6864=16973, 6865=16973, 6866=16973, 6867=16973, 6871=16977, 6872=16977, 6873=16977, 6874=16977, 6875=16977, 6876=16977, 6881=16972, 3298=16977, 6882=16972, 6883=16972, 6884=16972, 3300=20391, 6885=16972, 6886=16972, 6887=16972, 6888=16972, 6889=16972, 6890=16972, 6891=16972, 9964=16968, 6892=16972, 6893=16972, 6898=16969, 6899=16969, 6900=16969, 6901=16969, 6902=16969, 6903=16969, 6904=16969, 6905=16969, 6906=16969, 9467=16969, 6907=16969, 9468=16969, 6908=16969, 9469=16969, 6909=16969, 9470=16973, 6910=16969, 6911=16969, 6912=16969, 6913=16969, 9473=16976, 6914=16969, 9474=16976, 6915=16969, 9475=16976, 6916=16969, 9476=16976, 6917=16969, 9477=16976, 6918=16969, 6921=16976, 6922=16976, 6923=16976, 6924=16976, 6925=16976, 6926=16976, 6927=16976, 6928=16976, 6929=16976, 6930=16976, 6931=16976, 6934=16977, 6935=16977, 6936=16977, 6937=16977, 6938=16977, 6947=16972, 6948=16972, 6949=16972, 6950=16972, 6951=16972, 6952=16972, 6953=16972, 6954=16972, 6955=16972, 6956=16972, 6957=16972, 6958=16972, 6959=16972, 6960=16972, 6961=16972, 6962=16972, 6963=16972, 6964=16972, 6965=16972, 6966=16972, 6967=16972, 6968=16972, 6969=16972, 6970=16969, 7994=16972, 6971=16969, 6972=16969, 6973=16969, 6974=16969, 6975=16969, 6976=16969, 6977=16969, 6978=16969, 8002=16969, 6979=16969, 6980=16969, 6983=16969, 6984=16969, 6985=16969, 6986=16969, 6989=16969, 6990=16969, 6991=16969, 6992=16969, 6993=16969, 6994=16969, 6995=16969, 6996=16969, 6997=16969, 6998=16969, 6999=16969, 7000=16969, 7512=16975, 10072=16976, 7001=16969, 7002=16969, 7003=16969, 9056=16969, 7014=16969, 7015=16969, 7016=16969, 7017=16969, 7018=16969, 7019=16969, 7020=16969, 7021=16969, 7022=16969, 7023=16969, 7024=16969, 7025=16969, 7026=16969, 7027=16969, 7028=16969, 7029=16969, 7030=16969, 7031=16969, 7032=16969, 9592=16969, 7033=16969, 9593=16969, 7034=16969, 9594=16969, 7035=16969, 9595=16969, 7036=16980, 7037=16980, 7038=16980, 7039=16980, 7552=16968, 7040=16980, 7041=16980, 7554=16968, 7555=16968, 7044=16969, 7556=16977, 7045=16969, 9605=24974, 7046=16969, 7047=16978, 7048=16980, 7049=16973, 7050=16980, 8076=16976, 7053=16981, 7054=16981, 7055=16981, 8083=16974, 7063=16976, 7064=16976, 7065=16976, 7066=16976, 7067=16976, 7068=16976, 7069=16976, 7070=16976, 7071=16976, 7072=16976, 7073=16976, 7074=16976, 7075=16976, 7076=16976, 7077=16976, 7078=16976, 7083=16976, 7084=16976, 7085=16976, 7086=16976, 7087=16976, 7088=16976, 7089=16976, 7090=16976, 7091=16976, 7092=16976, 7093=16976, 7096=16976, 7097=16976, 7098=16976, 7099=16976, 7100=16976, 7101=16976, 7102=16976, 7103=16976, 7104=16976, 7105=16976, 7106=16976, 7112=16969, 7115=16976, 7116=16976, 7652=16976};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = ENUM;
	enumType.size = 342;
	break;

case 7436:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [, The , Frigate , Galleon , Caravel , Corvette , Sailboat ];
	enumType.size = 7;
	break;

case 7437:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [, Chaser , Watcher , Nomad , Loner , Lament , Jack , Roger , Nigel , John , Robert , Alex , Grinder , Diamond , Engine , Hulk , Whip , Heart , Bone , Crusher , Hammer , Ruby , Axe , Penguin , Kitten , Dragon , Narwhal , Shark , Salmon , Lion , Duck , Octupus , Tentacle , Pig , Monkey , Camel , Dog , Dolphin , Leopard , Tuna , Hawk , Albatross , Pelican , Goose , Warrior , Mage , Ranger , Buccaneer , Knight , Corsair , Prince , Servant , Hunter , Slayer , Fisherman , Craftsman , King , Prince , Count , Duke , Baron , Emperor , Kaiser , Khan , Gnome , Demon , Troll , Vampyre , Werewolf , Devil , Dwarf , Elf , Chaos , Void , Sky , Sun , Blow , Coral , Wind , Nerve , Cannon , Aegis , Crow , Smith , Priest , Alchemist , Miner , Challenger , Inventor , Thief , Farmer , Builder , Diviner , Woodcutter , Smuggler , Acrobat , Mole , Diver , Ghost , Drakewing , Monster , Cabbage , Popsicle ];
	enumType.size = 103;
	break;

case 7438:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 8, 8];
	enumType.size = 103;
	break;

case 7439:
	enumType.valueType = STRING;
	enumType.defaultstr = "Filter by...";
	enumType.keyType = INT;
	enumType.valueArray = [General, Properties/Attributes, Names, Items/Objects, Animals, People/Professions, Nobles, Sentient Races, Nouns, various];
	enumType.size = 9;
	break;

case 7440:
	enumType.valueType = STRING;
	enumType.defaultstr = "Nameless";
	enumType.keyType = INT;
	enumType.valueArray = [Nameless, Saucy, Happy, Nervous, Brave, Wily, Merry, Angry, Morbid, Honest, Jolly, Sad, Serene, Fearful, Proud, of the Queen, of the Prince, of the Gods, of the King, of the Lords, of the Princess, of the Countess, of Zamorak, of Bandos, of Guthix, of Zaros, of Saradomin, of Armadyl, of the Spirits, of Revenge, of Sin, of Death, of the Elements, of Scourge, of the Storm, of Wisdom, of Bane, of Vision, of Fear, of Demise, of Light, Black, Blue, Purple, White, Green, Brown, Red, Yellow, Grey, Cursed, Lusty, Broken, Skilled, Filthy, Mad, Swift, Indomitable, Implacable, Plundering, Solar, Easterly, Salty, Misty, Bloody, Noisome, Threadbare, Fervent, Gangrenous, Beautiful, Shameful, Naughty, Scurvy, Foul, Vile, Hot, Mighty, Deadly, Unimaginable, Excessive, Rising, Unwanted, Lunar, Westerly, Gorgeous, Frivolous, Galant, Earnest, Scornful, Fierce, Terrible, Burning, Rabid, Disgraceful, Cold, Trusty, Massive, Unbearable, Illustrious, Pure, Dark, Northerly, Southerly, Sturdy, Seasick, Rusty, Piebald, Ribald, Toothless, Laughing, Flying, Weeping, Reeking, Wandering, Smiling, Terrifying, Prancing, of Lumbridge, of Ardougne, of Kharyrll, of Sarim, of Falador, of Lletya, of Musa, of Gielinor, of Varrock, of Ghorrock, of Brimhaven, of RuneScape, of Morytania, of Kandarin, of Goblins, of Elves, of Faeries, of Trolls, of Humans, of Monkeys, of Vampyres, of Dawn, of the Evening, of the Oceans, of the Waves, of the Moon, of the Storm, of Dreams, of Despair, of the Daylight, of the Twilight, of the Seas, of the Wind, of the Rainbow, of the Rain, of Nightmares, of the Mist, of the Lights, of the Night, of Clouds, of the Sun, of the Fog, of the Tide, of Hope, of Love, Vibrant, Whimsical, of Kharshai, of Sliske, of Bronze, of Iron, of Steel, of Mithril, of Adamant, of Rune, of Daddy, of Destruction, Crimson, Clever, Grim, Omnipotent, Omniscient, All-powerful, Extreme, Fateful, Unholy, Holy, Lonely, Creaky, Enigmatic, Savage];
	enumType.size = 188;
	break;

case 7441:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
	enumType.size = 188;
	break;

case 7442:
	enumType.valueType = STRING;
	enumType.defaultstr = "Filter by...";
	enumType.keyType = INT;
	enumType.valueArray = [General, Personalities/Moods, Nobles/Gods, Attributes/Dedications, Colours, Properties/Attributes, Actions, Places, Sentient Races, Nouns, various];
	enumType.size = 10;
	break;

case 7443:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [96, 96, 192, 288, 384, 480, 576, 672, 768, 864, 960, 1056, 1152, 1248, 1344, 1440, 1536, 1632, 1728, 1824, 1920, 2016, 2112, 2208, 2304, 2400, 2496, 2592, 2688, 2784, 2880, 2976, 3072, 3168, 3264, 3360, 3456, 3552, 3648, 3744, 3840, 3936, 4032, 4128, 4224, 4320, 4416, 4512, 4608, 4704, 4800, 4896, 4992, 5088, 5184, 5280, 5376, 5472, 5568, 5664, 5760, 5856, 5952, 6048, 6144, 6240, 6336, 6432, 6528, 6624, 6720, 6816, 6912, 7008, 7104, 7200, 7296, 7392, 7488, 7584, 7680, 7776, 7872, 7968, 8064, 8160, 8256, 8352, 8448, 8544, 8640, 8736, 8832, 8928, 9024, 9120, 9216, 9312, 9408, 9504];
	enumType.size = 100;
	break;

case 7448:
	enumType.valueType = LOCATION;
	enumType.defaultint = 84097;
	enumType.keyType = INT;
	enumType.valueArray = [null, 84097, 84093, 84089, 84101];
	enumType.size = 4;
	break;

case 7449:
	enumType.valueType = LOCATION;
	enumType.defaultint = 84098;
	enumType.keyType = INT;
	enumType.valueArray = [null, 84098, 84094, 84090, 84102];
	enumType.size = 4;
	break;

case 7450:
	enumType.valueType = LOCATION;
	enumType.defaultint = 84099;
	enumType.keyType = INT;
	enumType.valueArray = [null, 84099, 84095, 84091, 84103];
	enumType.size = 4;
	break;

case 7451:
	enumType.valueType = LOCATION;
	enumType.defaultint = 84100;
	enumType.keyType = INT;
	enumType.valueArray = [null, 84100, 84096, 84092, 84104];
	enumType.size = 4;
	break;

case 7452:
	enumType.valueType = LOCATION;
	enumType.defaultint = 84121;
	enumType.keyType = INT;
	enumType.valueArray = [null, 84121, 84117, 84113, 84125];
	enumType.size = 4;
	break;

case 7453:
	enumType.valueType = LOCATION;
	enumType.defaultint = 84122;
	enumType.keyType = INT;
	enumType.valueArray = [null, 84122, 84118, 84114, 84126];
	enumType.size = 4;
	break;

case 7454:
	enumType.valueType = LOCATION;
	enumType.defaultint = 84123;
	enumType.keyType = INT;
	enumType.valueArray = [null, 84123, 84119, 84115, 84127];
	enumType.size = 4;
	break;

case 7455:
	enumType.valueType = LOCATION;
	enumType.defaultint = 84124;
	enumType.keyType = INT;
	enumType.valueArray = [null, 84124, 84120, 84116, 84128];
	enumType.size = 4;
	break;

case 7456:
	enumType.valueType = STRING;
	enumType.defaultstr = "fealty";
	enumType.keyType = INT;
	enumType.valueArray = [null, fealty, battle, order, chaos];
	enumType.size = 4;
	break;

case 7457:
	enumType.valueType = INT;
	enumType.defaultint = 210;
	enumType.keyType = INT;
	enumType.valueArray = [20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80, 80, 90, 90, 100, 100, 110, 110, 120, 120, 130, 130, 140, 140, 150, 150, 160, 160, 170, 170, 180, 180, 190, 190, 200, 200, 210, 210];
	enumType.size = 40;
	break;

case 7458:
	enumType.valueType = INT;
	enumType.defaultint = 21;
	enumType.keyType = INT;
	enumType.valueArray = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21];
	enumType.size = 40;
	break;

case 7459:
	enumType.valueType = INT;
	enumType.defaultint = 1294;
	enumType.keyType = INT;
	enumType.valueArray = [168, 168, 224, 224, 280, 280, 336, 336, 392, 392, 448, 448, 504, 504, 560, 560, 616, 616, 678, 678, 739, 739, 800, 800, 862, 862, 924, 924, 986, 986, 1047, 1047, 1109, 1109, 1170, 1170, 1232, 1232, 1294, 1294];
	enumType.size = 40;
	break;

case 7481:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28428, null, null, 28429, 28431, 28430, null, 28432, null, 28433, 28434];
	enumType.size = 7;
	break;

case 7498:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [None, Council0, Council1, High Council0, High Council1, Elder0, Elder1, Advisor0, Advisor1, Ambassador0, Ambassador1, PvP Leader0, PvP Leader1, PvM Leader0, PvM Leader1, Skilling Leader0, Skilling Leader1, Courier0, Courier1, Warmonger0, Warmonger1, Diplomat0, Diplomat1, Member of the Month0, Member of the Month1, Skill Master0, Skill Master1, Skiller0, Skiller1, Adventurer0, Adventurer1, Slayer0, Slayer1, Woodcutter0, Woodcutter1, Hunter0, Hunter1, Wizard0, Wizard1, Warrior0, Warrior1, Miner0, Miner1, Runecrafter0, Runecrafter1, Monk0, Monk1, Smith0, Smith1, Summoner0, Summoner1, Thief0, Thief1, Event Organiser0, Event Organiser1, Event Leader0, Event Leader1, Mage0, Mage1, Warlord0, Warlord1, Ranger0, Ranger1, Priest0, Priest1, Bishop0, Bishop1, Royal Knight0, Royal Knight1, Fisher0, Fisher1, Forester0, Forester1, Honour Knight0, Honour Knight1, Firemaker0, Firemaker1, Assassin0, Assassin1, Ninja0, Ninja1, Thug0, Thug1, Administrator0, Administrator1, Treasurer0, Treasurer1, Auditor0, Auditor1, Recruiter0, Recruiter1, Mayor0, Mayor1, Soldier0, Soldier1, Guide0, Guide1, Seer0, Seer1, Druid0, Druid1, Witchfinder0, Witchfinder1, Inquisitor0, Inquisitor1, Vampire Hunter0, Vampire Hunter1, Assistant Secretary0, Assistant Secretary1, Retired0, Retired1, Hero0, Hero1, Head Seer0, Head Seer1, Assistant0, Assistant1, Missionary0, Missionary1, Subgroup Leader0, Subgroup Leader1, Scout0, Scout1, Tank0, Tank1, Ancienter0, Ancienter1, Scryer0, Scryer1, Events Leader0, Events Leader1, Recruiting Leader0, Recruiting Leader1, Secretary0, Secretary1, Scapegoat0, Scapegoat1, Minigame Leader0, Minigame Leader1, Legendary Member0, Legendary Member1, Trainee0, Trainee1, Fresh Meat0, Fresh Meat1, Veteran Member0, Veteran Member1, Troll0, Troll1, Newbie0, Newbie1, Knight0, Knight1, High Priest0, High Priest1, Paladin0, Paladin1, Elite Guard0, Elite Guard1, Founder0, Founder1, New Clanmate0, New Clanmate1, New Clanmate Mentor0, New Clanmate Mentor1, Prince0, Prince1, Disciplinary0, Disciplinary1, Forum Leader0, Forum Leader1, Elite Clanmate0, Elite Clanmate1, Rookie0, Rookie1, Squire0, Squire1, Honorary Clanmate0, Honorary Clanmate1, On Vacation0, On Vacation1, Forum Bumper0, Forum Bumper1, Mentor0, Mentor1, Range Leader0, Range Leader1, Melee Leader0, Melee Leader1, War Caller0, War Caller1, Inactive Clanmate0, Inactive Clanmate1, King0, King1, Lord0, Lord1, Archchancellor0, Archchancellor1, President0, President1, Prime Minister0, Prime Minister1, Emperor0, Emperor1, Duke0, Duke1, Expert0, Expert1, Low Council0, Low Council1, Legend0, Legend1, Retired Leader0, Retired Leader1, Conflict Resolution0, Conflict Resolution1, Counciller0, Counciller1, Formal Mediator0, Formal Mediator1, Head Priest0, Head Priest1, Avatar Warden0, Avatar Warden1, Ironman0, Ironwoman1];
	enumType.size = 227;
	break;

case 7501:
	enumType.valueType = OBJ;
	enumType.defaultint = 1265;
	enumType.keyType = INT;
	enumType.valueArray = [1265, 1267, 1269, 1273, 1271, 1275, 15259, 32646];
	enumType.size = 8;
	break;

case 7502:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 17314;
	enumType.keyType = INT;
	enumType.valueArray = [null, 17314, 17315, 17316, 17317, 17313, 17318, 17319, 21423];
	enumType.size = 8;
	break;

case 7503:
	enumType.valueType = OBJ;
	enumType.defaultint = 1351;
	enumType.keyType = INT;
	enumType.valueArray = [1351, 1349, 1353, 1355, 1357, 1359, 6739, 32645];
	enumType.size = 8;
	break;

case 7504:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 17307;
	enumType.keyType = INT;
	enumType.valueArray = [null, 17307, 17308, 17309, 17310, 17306, 17311, 17312, 21422];
	enumType.size = 8;
	break;

case 7505:
	enumType.valueType = OBJ;
	enumType.defaultint = 20780;
	enumType.keyType = INT;
	enumType.valueArray = [20780, 20781, 20782, 20784, 20783, 20785, 20786, 32646];
	enumType.size = 8;
	break;

case 7512:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28608, 28611, 28614];
	enumType.size = 3;
	break;

case 7541:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Dr , Mr ];
	enumType.size = 2;
	break;

case 7542:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Harry , Derek , Abra-Ham , Albert , Hamlet , Piggy , Shank , Crackling , Pickles , Lardy , Runt , Chubby , Rocky , Spot , Lightning , Scratch , Rasher , Lucky , Napoleon , Hairy ];
	enumType.size = 20;
	break;

case 7543:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Trotter, Einswine, Pjork, Truffalo, Grunt, Wiggy, Jambon, Snuffles, Hamsworth, Tusker, Cumberland, Snout, Pigby, Oink, Bristlington, Mightfly, Pigzilla, Saddleback, Swine, Rinder];
	enumType.size = 20;
	break;

case 7544:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 52792467, 52628836, 48581941, 43617514];
	enumType.size = 4;
	break;

case 7551:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7552];
	enumType.size = 1;
	break;

case 7552:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28636, 28637, 28638, 28639];
	enumType.size = 4;
	break;

case 7553:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Bacon stacks];
	enumType.size = 1;
	break;

case 7554:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28640, 28642, 28644, 28646, 28648];
	enumType.size = 5;
	break;

case 7555:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28640, 28642, 28644, 28646, 28648];
	enumType.size = 5;
	break;

case 7556:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28697, 28699, 28698, 28696];
	enumType.size = 4;
	break;

case 7559:
	enumType.valueMap = {96=Lt, 97=Rt, 98=Up, 99=Dn, 100=Ins, 101=Del, 102=Hm, 104=PGup, 105=PGdn, 83=Sp, 84=Ent, 87=+, 88=-, 89=*, 90=/};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 15;
	break;

case 7562:
	enumType.valueMap = {3=28737};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7563:
	enumType.valueMap = {3=28738};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7564:
	enumType.valueMap = {3=28739};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7565:
	enumType.valueMap = {3=28740};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7566:
	enumType.valueMap = {3=28741};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7567:
	enumType.valueMap = {3=28742};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7568:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 20303, 20302, 20305, 20304, 20306, 20307, 20332, 20335, 20320, 20321, 20322, 20323, 20308, 20309, 20310, 20311, 20333, 20336, 20324, 20325, 20326, 20327, 20312, 20313, 20314, 20315, 20334, 20337, 20328, 20329, 20330, 20331, 20316, 20317, 20318, 20319];
	enumType.size = 36;
	break;

case 7569:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 20344, 20345, 20346, 20347, 20348, 20349, 20350, 20351];
	enumType.size = 8;
	break;

case 7572:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51989674, 51989675, 51973289];
	enumType.size = 3;
	break;

case 7573:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51858603, 51858602, 51858601];
	enumType.size = 3;
	break;

case 7574:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51842215];
	enumType.size = 1;
	break;

case 7575:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51793061];
	enumType.size = 1;
	break;

case 7576:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51645598, 51645599];
	enumType.size = 2;
	break;

case 7577:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51612824];
	enumType.size = 1;
	break;

case 7578:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51645586];
	enumType.size = 1;
	break;

case 7579:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51727507, 51711123];
	enumType.size = 2;
	break;

case 7580:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51776654, 51760271];
	enumType.size = 2;
	break;

case 7581:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51858568, 51858569, 51858570, 51858571];
	enumType.size = 4;
	break;

case 7582:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51907721];
	enumType.size = 1;
	break;

case 7583:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51989645, 52006029, 51973262];
	enumType.size = 3;
	break;

case 7584:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [52055181, 52038796];
	enumType.size = 2;
	break;

case 7585:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [52055188, 52055189, 52055190];
	enumType.size = 3;
	break;

case 7586:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [52137108, 52186261];
	enumType.size = 2;
	break;

case 7587:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [52235431, 52219047, 52219046];
	enumType.size = 3;
	break;

case 7588:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [52186285];
	enumType.size = 1;
	break;

case 7589:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [52071595, 52071596, 52071597, 52087982];
	enumType.size = 4;
	break;

case 7590:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51973288];
	enumType.size = 1;
	break;

case 7591:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51924137, 51924138, 51924139, 51924140, 51924141, 51924142, 51924143];
	enumType.size = 7;
	break;

case 7592:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51793075];
	enumType.size = 1;
	break;

case 7593:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51530915, 51547299, 51563683, 51580067, 51596451];
	enumType.size = 5;
	break;

case 7594:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51612837, 51612838, 51612839, 51612840, 51629225, 51645610];
	enumType.size = 6;
	break;

case 7595:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51645612, 51612845, 51629228, 51596461, 51580078];
	enumType.size = 5;
	break;

case 7596:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51678379, 51694763, 51711148, 51711146, 51727529, 51743912];
	enumType.size = 6;
	break;

case 7597:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51776678, 51793061, 51776676, 51776675, 51776674, 51776673, 51776672, 51776671, 51776670, 51776669];
	enumType.size = 10;
	break;

case 7598:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [51825830, 51842215, 51874984];
	enumType.size = 3;
	break;

case 7599:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [52104360, 52120745, 52137130];
	enumType.size = 3;
	break;

case 7600:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [52186279, 52202663, 52219047, 52219048, 52202665, 52202666, 52202667, 52186284];
	enumType.size = 8;
	break;

case 7601:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [52300968, 52268200, 52251815, 52235431, 52219046, 52219045, 52219044, 52202659];
	enumType.size = 8;
	break;

case 7602:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [52284572, 52268188, 52251804, 52235419, 52219038];
	enumType.size = 5;
	break;

case 7603:
	enumType.valueType = INT;
	enumType.defaultint = 2857728;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 2661120, 2856960, 3052800, 3248640, 3444480, 3640320, 3836160, 4032000, 4227840, 4423680, 4619520, 4815360, 5011200, 5207040, 5402880, 5598720, 5794560, 5990400, 6186240, 6382080, 6577920, 6773760, 6969600, 7165440, 7361280, 7557120, 7752960, 7948800, 8144640, 8340480, 8536320, 8732160, 8928000, 9123840, 9319680, 9515520, 9711360, 9907200, 10103040, 10298880, 10494720, 10690560, 10886400, 11082240, 11278848, 11475456, 11672064, 11868672, 11868672, 11868672];
	enumType.size = 50;
	break;

case 7607:
	enumType.valueType = TILE;
	enumType.defaultint = 51367068;
	enumType.keyType = INT;
	enumType.valueArray = [51563654, 52284553, 52333713, 51514552, 51449003, 51465357, 51367068];
	enumType.size = 7;
	break;

case 7608:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 499, 498, 497, 496, 495, 493, 492, 490, 488, 486, 484, 482, 479, 477, 474, 471, 468, 465, 462, 459, 456, 452, 448, 444, 440, 436, 432, 428, 423, 419, 414, 409, 404, 399, 394, 388, 383, 377, 371, 365, 359, 353, 346, 340, 333, 327, 320, 313, 306, 298, 291, 283, 276, 268, 260, 252, 244, 235, 227, 218, 209, 200, 191, 182, 173, 164, 154, 144, 135, 125, 115, 104, 95, 80, 60, 40, 20, 0];
	enumType.size = 101;
	break;

case 7609:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28822];
	enumType.size = 1;
	break;

case 7610:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28823];
	enumType.size = 1;
	break;

case 7646:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Saradomin, Zamorak, Bandos, Armadyl, Zaros, Seren, Sliske, Godless, Icthlarin, Amascut, Marimbo, Guthix, Brassica Prime, Tuska, Jas, Ful, Skargaroth, Freneskae Creator God, Elidinis, Tumeken, Apmeken, Crondis, Het, Scabaras];
	enumType.size = 24;
	break;

case 7650:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [4, 11, 12, 35, 77, 87, 137, 141, 169, 211, 212, 215, 222];
	enumType.size = 13;
	break;

case 7651:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [5, 12, 13, 35, 77, 87, 137, 141, 169, 211, 212, 215, 222];
	enumType.size = 13;
	break;

case 7652:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30005, 30008, 30011];
	enumType.size = 3;
	break;

case 7653:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29976, null, null, 29986, 29978, null, null, 29980, null, 29982, 29984];
	enumType.size = 6;
	break;

case 7654:
	enumType.valueMap = {0=29990, 18=30000, 3=30002, 4=29992, 7=29994, 9=29996, 10=29998};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 7;
	break;

case 7655:
	enumType.valueType = INT;
	enumType.defaultint = 7;
	enumType.keyType = INT;
	enumType.valueArray = [7, 11, 19, 35, 13, 21, 37, 25, 41, 49, 14, 22, 38, 26, 42, 50, 28, 44, 52, 56];
	enumType.size = 20;
	break;

case 7667:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 96797535;
	enumType.keyType = INT;
	enumType.valueArray = [96797535, 96797536, 96797537, 96797538, 96797539, 96797540, 96797541, 96797542, 96797543, 96797544, 96797545, 96797546, 96797547, 96797548, 96797549, 96797550, 96797551, 96797552, 96797553, 96797554, 96797555, 96797556, 96797557, 96797558, 96797559, 96797560, 96797561, 96797562, 96797563, 96797564, 96797565, 96797566, 96797567, 96797568, 96797569, 96797570, 96797571, 96797572, 96797573, 96797574, 96797575, 96797576, 96797577, 96797578, 96797579, 96797580, 96797581, 96797582, 96797583, 96797584];
	enumType.size = 50;
	break;

case 7674:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21111, 21112, 21113, 21114, 21115, 21116, 21117, 21118, 21119, 21120, 21121, 21122, 21123, 21124, 21125, 21126, 21127, 21128, 21129, 21130, 21131, 21132, 21133, 21134, 21135, 22754];
	enumType.size = 26;
	break;

case 7675:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [96141331, 96141333, 96141336, 96141339, 96141342, 96141345, 96141348, 96141351, 96141354, 96141357, 96141360];
	enumType.size = 11;
	break;

case 7676:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [96469011, 96469013, 96469016, 96469019, 96469022, 96469025, 96469028, 96469031, 96469034, 96469037, 96469040];
	enumType.size = 11;
	break;

case 7677:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [96403477, 96403479, 96403482, 96403485, 96403488, 96403491, 96403494, 96403497, 96403500, 96403503, 96403506];
	enumType.size = 11;
	break;

case 7678:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [96337939, 96337941, 96337944, 96337947, 96337950, 96337953, 96337956, 96337959, 96337962, 96337965, 96337968];
	enumType.size = 11;
	break;

case 7679:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [96141332, 96141334, 96141337, 96141340, 96141343, 96141346, 96141349, 96141352, 96141355, 96141358, 96141361];
	enumType.size = 11;
	break;

case 7680:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [96469012, 96469014, 96469017, 96469020, 96469023, 96469026, 96469029, 96469032, 96469035, 96469038, 96469041];
	enumType.size = 11;
	break;

case 7681:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [96403478, 96403480, 96403483, 96403486, 96403489, 96403492, 96403495, 96403498, 96403501, 96403504, 96403507];
	enumType.size = 11;
	break;

case 7682:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [96337940, 96337942, 96337945, 96337948, 96337951, 96337954, 96337957, 96337960, 96337963, 96337966, 96337969];
	enumType.size = 11;
	break;

case 7683:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [8978446, 8978462, 8978465, 8978468, 8978471, 8978474, 8978477, 8978480, 8978483, 8978486, 8978489];
	enumType.size = 11;
	break;

case 7684:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [96141319, 96141335, 96141338, 96141341, 96141344, 96141347, 96141350, 96141353, 96141356, 96141359, 96141362];
	enumType.size = 11;
	break;

case 7685:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [96468999, 96469015, 96469018, 96469021, 96469024, 96469027, 96469030, 96469033, 96469036, 96469039, 96469042];
	enumType.size = 11;
	break;

case 7686:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [96403465, 96403481, 96403484, 96403487, 96403490, 96403493, 96403496, 96403499, 96403502, 96403505, 96403508];
	enumType.size = 11;
	break;

case 7687:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [96337927, 96337943, 96337946, 96337949, 96337952, 96337955, 96337958, 96337961, 96337964, 96337967, 96337970];
	enumType.size = 11;
	break;

case 7688:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	break;

case 7689:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4, 5, 20, 21, 23, 25, 33, 2, 1, 42];
	enumType.size = 10;
	break;

case 7690:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 3, 4, 7, 5, 20, 21, 42];
	enumType.size = 9;
	break;

case 7691:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4, 5, 20, 21, 2, 42];
	enumType.size = 6;
	break;

case 7692:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7, 42];
	enumType.size = 2;
	break;

case 7693:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7, 25];
	enumType.size = 2;
	break;

case 7694:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 23];
	enumType.size = 3;
	break;

case 7695:
	enumType.valueMap = {42=8652, 4=7698, 20=7697, 5=7696};
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7696:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Action Bar Slot 1, Action Bar Slot 2, Action Bar Slot 3, Action Bar Slot 4, Action Bar Slot 5, Action Bar Slot 6, Action Bar Slot 7, Action Bar Slot 8, Action Bar Slot 9, Action Bar Slot 10, Action Bar Slot 11, Action Bar Slot 12, Action Bar Slot 13, Action Bar Slot 14, null, null, null, null, null, null, Action Bar 1, Action Bar 2, Action Bar 3, Action Bar 4, Action Bar 5, Action Bar 6, Action Bar 7, Action Bar 8, Action Bar 9, Action Bar 10, null, null, null, null, null, null, null, null, null, null, Previous Action Bar, Next Action Bar, Sheathe/Unsheathe Weapon, Quick Prayer, Quick Heal, Familiar Action, Auto-Retaliate, Special Attack];
	enumType.size = 32;
	break;

case 7697:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Lock Interface Customisation, Open World Map, Open Home Teleport, Toggle Run, Previous Home Teleport, Open World Select];
	enumType.size = 6;
	break;

case 7698:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Move Camera Up, Move Camera Down, Move Camera Left, Move Camera Right, Zoom In, Zoom Out];
	enumType.size = 6;
	break;

case 7699:
	enumType.valueMap = {0=21142, 1=21147, 2=21153, 3=21159, 4=21166, 100=28774, 5=21172, 6=21184, 7=21186, 8=21178};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 10;
	break;

case 7700:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1];
	enumType.size = 2;
	break;

case 7701:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [2, 3];
	enumType.size = 2;
	break;

case 7702:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1];
	enumType.size = 1;
	break;

case 7703:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4, 5, 6, 7, 8];
	enumType.size = 5;
	break;

case 7704:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14, 15, 16, 27, 26];
	enumType.size = 5;
	break;

case 7705:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11, 10];
	enumType.size = 2;
	break;

case 7706:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	break;

case 7707:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	break;

case 7708:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	break;

case 7709:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7733, 7712, 7732, 7734, 7715, null, null, null, null, null, null, 8077];
	enumType.size = 6;
	break;

case 7710:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 2, 3, 4, 6, 7];
	enumType.size = 7;
	break;

case 7711:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [RS3 Default, Classic, Retro, Social, Old School, My Custom 1, My Custom 2];
	enumType.size = 7;
	break;

case 7712:
	enumType.valueMap = {1024=28998, 0=21458, 1025=29981, 1=21458, 1026=30141, 2=21458, 1027=30502, 3=21458, 1028=30963, 4=21458, 1029=30827, 5=21458, 6=21458, 1030=31391, 1031=6295, 7=21458, 1032=31708, 8=21458, 9=21224, 10=21458, 11=21458, 12=21458, 14=21458, 15=21458, 16=21458, 17=21458, 18=21216, 19=21220, 20=21221, 21=21222, 22=21223, 23=3279, 24=21458, 25=28670, 26=21458, 27=21458, 2008=28059, 1000=21189, 1001=21252, 1002=21200, 1003=21206, 1004=21203, 1005=21192, 1006=21194, 1007=21197, 1008=21254, 1009=21234, 1010=21246, 1011=21238, 1012=21240, 1013=21244, 1014=21241, 1015=21248, 1016=21249, 1017=21250, 1018=21251, 1019=22999, 1020=24162, 1021=28661, 1023=28671};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 60;
	break;

case 7713:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3, 4];
	enumType.size = 2;
	break;

case 7714:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7, 3, 4];
	enumType.size = 3;
	break;

case 7715:
	enumType.valueMap = {0=21456, 1025=30964, 2=21213, 1027=30503, 3=21455, 4=21457, 1029=30828, 18=21219, 2008=28060, 1000=21190, 1002=21202, 1003=21209, 1004=21205, 1005=21193, 1006=21196, 1007=21199, 1009=21237, 1010=21472, 1011=21469, 1012=21470, 1013=21439, 1014=21471, 1015=21473, 1018=21474, 1019=23000};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 25;
	break;

case 7716:
	enumType.valueMap = {0=21293, 1024=29160, 1=21292, 1025=29982, 2=21285, 1026=30143, 3=21286, 1027=30506, 4=21291, 1028=30967, 5=21289, 1029=31389, 6=21287, 1030=31392, 7=21288, 1031=31659, 8=21290, 1032=31711, 9=21284, 10=21294, 11=21295, 12=21316, 14=21296, 15=21298, 16=21297, 17=21299, 18=21279, 19=21280, 20=21281, 21=21282, 22=21283, 23=3280, 24=24978, 25=28883, 26=24977, 27=28884, 2000=21136, 2001=21137, 2002=21138, 2003=21139, 2004=21140, 2005=21141, 2006=21318, 2007=21319, 2008=28052, 1000=21275, 1001=21301, 1002=21276, 1003=21277, 1004=21278, 1005=21302, 1006=21303, 1007=21304, 1008=21300, 1009=21313, 1010=21312, 1011=21311, 1012=21310, 1013=21309, 1014=21314, 1015=21306, 1016=21307, 1017=21308, 1018=21315, 1019=23002, 1020=24165, 1021=28660, 1022=28781, 1023=28885};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 69;
	break;

case 7717:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1002, 1003, 1004, 18, 19, 20, 21, 22, 23, 25, 9, 2, 6, 7, 5, 8, 3, 12, 1, 17, 0, 4, 10, 11, 14, 16, 15, 1005, 1006, 1007, 1008, 1009, 2008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1001, 1000, 1020, 1021, 26, 24, 1023, 27, 1024, 1025, 1026, 1027, 1028, 1030, 1029, 1031, 1032];
	enumType.size = 60;
	break;

case 7718:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1002, 1003, 1004, 18, 19, 20, 21, 22, 23, 25, 9, 2, 6, 7, 5, 8, 3, 12, 1, 17, 0, 4, 10, 11, 14, 16, 15, 26, 24, 27];
	enumType.size = 30;
	break;

case 7719:
	enumType.valueType = unknownScriptVarType4751;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	break;

case 7720:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21330];
	enumType.size = 1;
	break;

case 7721:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [13, 1, 18, 208, 8, 17, 33, 39, 20, 56, 76, 71, 99, 102, 100, 138, 105, 144, 152, 142, 188, 203, 186, 109];
	enumType.size = 24;
	break;

case 7722:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [14, 20, 22, 31, 34, 37, 48, 61, 64, 79, 82, 84, 92, 96, 98, 112, 117, 120, 132, 147, 158, 165, 168, 198];
	enumType.size = 24;
	break;

case 7723:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 20, 19, 24, 21];
	enumType.size = 24;
	break;

case 7724:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11];
	enumType.size = 12;
	break;

case 7725:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [googlemail.com, gmail.com, hotmail.com, null, yahoo.co.uk, outlook.com];
	enumType.size = 5;
	break;

case 7727:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28861, null, null, null, 28862, null, null, 28863, null, 28864, 28865];
	enumType.size = 5;
	break;

case 7728:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28868, 28873, null, null, 28869, null, null, 28870, null, 28871, 28872];
	enumType.size = 6;
	break;

case 7729:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28876, 28881, null, null, 28877, null, null, 28878, null, 28879, 28880];
	enumType.size = 6;
	break;

case 7730:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28884, null, null, null, 28885, null, null, 28886, null, 28887, 28888];
	enumType.size = 5;
	break;

case 7731:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28891, null, null, null, 28892, null, null, 28893, null, 28894, 28895];
	enumType.size = 5;
	break;

case 7732:
	enumType.valueMap = {2008=28054, 1009=21434, 1002=21165, 18=21435, 1003=21432, 1006=21433};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 6;
	break;

case 7733:
	enumType.valueMap = {1024=28999, 0=21468, 1025=30965, 1=21468, 2=21468, 1027=30504, 3=21468, 4=21468, 1029=30829, 5=21468, 6=21468, 7=21468, 1032=31709, 8=21468, 10=21468, 11=21468, 12=21468, 14=21468, 15=21468, 16=21468, 17=21468, 2008=28058, 27=21468, 1002=21460, 1003=21461, 1004=21459, 1009=21462, 1010=21464, 1014=21463, 1015=21465, 1016=21466};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 31;
	break;

case 7734:
	enumType.valueMap = {0=21456, 1025=30966, 1=21452, 2=21454, 1027=30505, 3=21455, 4=21457, 1032=31710, 9=21444, 11=21453, 14=21446, 15=21448, 16=21451, 18=21443, 19=21445, 20=21447, 21=21449, 22=21450, 23=3276, 2008=28053, 25=28800, 27=28672, 1002=21437, 1003=21461, 1004=21436, 1009=21438, 1010=21464, 1013=21439, 1014=21441, 1015=21442, 1016=21440, 1019=22998, 1021=28662};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 34;
	break;

case 7735:
	enumType.valueType = STRING;
	enumType.defaultstr = "N/A";
	enumType.keyType = INT;
	enumType.valueArray = [Low, Medium, High, Very High];
	enumType.size = 4;
	break;

case 7736:
	enumType.valueType = STRING;
	enumType.defaultstr = "N/A";
	enumType.keyType = INT;
	enumType.valueArray = [Off, Low, Medium, High, Very High];
	enumType.size = 5;
	break;

case 7737:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Saradomin, Zamorak];
	enumType.size = 2;
	break;

case 7738:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Warpriest of Saradomin gauntlets, Warpriest of Saradomin boots, Warpriest of Saradomin cuirass, Warpriest of Saradomin grieves, Warpriest of Saradomin helm, Warpriest of Saradomin cape, Warpriest of Zamorak gauntlets, Warpriest of Zamorak boots, Warpriest of Zamorak cuirass, Warpriest of Zamorak grieves, Warpriest of Zamorak helm, Warpriest of Zamorak cape, Guardian Angel consumeable, Divine Fury consumeable, Smite consumeable, Divine Inspiration consumeable, Servant of Saradomin emote, Warrior of Saradomin emote, Champion of Saradomin emote, Servant of Zamorak emote, Warrior of Zamorak emote, Champion of Zamorak emote, Acolyte title, High priest title, High priestess title, Hierophant title];
	enumType.size = 26;
	break;

case 7739:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1781, 6008, 4456, 4239, 5988];
	enumType.size = 5;
	break;

case 7742:
	enumType.valueMap = {18083=You have defeated Dawn!, 18071=Black Knight defeated, 18087=Fern fades from the world of the living., 18072=Black Knight defeated, 18073=Black Knight defeated, 18089=Zombie defeated, 18090=Zombie defeated, 18091=Skeleton warrior defeated, 18092=Skeleton warrior defeated, 18093=Skeleton archer defeated, 18030=Zombie defeated, 18094=Skeleton mage defeated};
	enumType.valueType = STRING;
	enumType.keyType = NPC;
	enumType.size = 12;
	break;

case 7743:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14677, 14699, 14683, 14686];
	enumType.size = 4;
	break;

case 7744:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14725, 14730, 14731, 14736];
	enumType.size = 4;
	break;

case 7751:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 21477, 21478, 21479, 21480, 21481];
	enumType.size = 5;
	break;

case 7780:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28941, null, null, null, 28942, null, null, 28943, null, 28944, 28945];
	enumType.size = 5;
	break;

case 7781:
	enumType.valueMap = {5=28960, 3=28958};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 7782:
	enumType.valueMap = {9=28975, 10=28977, 4=28971, 7=28973};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7783:
	enumType.valueMap = {5=28981, 3=28979};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 7784:
	enumType.valueMap = {5=28985, 3=28983};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 7785:
	enumType.valueMap = {5=28989};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7786:
	enumType.valueMap = {3=28987};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7787:
	enumType.valueType = STRING;
	enumType.defaultstr = "Everything";
	enumType.keyType = INT;
	enumType.valueArray = [Everything, Milestones, Gathering, Boons, Signs and Portents, Transmutation, Divine locations, Dungeoneering];
	enumType.size = 8;
	break;

case 7788:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21191, 21195, 21198, 21201, 21204, 21207, 22602, 22603, 22604, 22605, 22606, 22607, 28405, 28406, 28407, 28408, 22608, 22609, 22610, 22611, 22612, 22613, 22614, 22615, 22616, 22617, 22618, 22619, 22620, 22621, 22622, 22623, 22624, 22625, 22626, 22627, 22628, 22629, 22630, 22631, 22632, 22633, 22634, 22635, 22636, 22637, 22638, 22639, 22640, 22641, 22642, 22643, 22644, 22645, 22646, 22647, 22648, 22649, 22650, 22651, 22652, 22653, 22654, 22655, 22656, 22657, 22658, 22659, 22660, 22661, 22662, 22663, 22664, 22665, 22666, 22667, 22668, 22669, 22670, 26552, 26553, 26554, 26608, 26609, 26610, 26611, 27610, 27611, 22671, 22672, 22673, 22674, 22675, 22676, 22677, 22678, 22679, 22680, 22681, 22682, 22683, 22684, 22685, 22686, 22687, 22688, 22689, 22690, 22691, 22692, 22693, 22694, 22695, 22696, 22697, 22698, 22699, 22700, 22701, 22702, 22703, 22704, 22705, 22706, 22707, 22708, 22709, 22710, 22711, 28055, 28056, 28057, 28181, 28182, 28183, 28184, 28185, 28186, 28187, 28188, 28189, 28190, 28191, 28192, 28285, 28286, 28287, 28288, 29441, 29442, 29443];
	enumType.size = 151;
	break;

case 7800:
	enumType.valueType = ENUM;
	enumType.defaultint = 7802;
	enumType.keyType = INT;
	enumType.valueArray = [7802, 7803, 7804, 7805, 7806, 7807, 7808, 7809, 7810, 7811];
	enumType.size = 10;
	break;

case 7801:
	enumType.valueType = STRING;
	enumType.defaultstr = "Pale energy products";
	enumType.keyType = INT;
	enumType.valueArray = [Pale energy products, Flickering energy products, Bright energy products, Glowing energy products, Sparkling energy products, Gleaming energy products, Vibrant energy products, Lustrous energy products, Brilliant energy products, Radiant energy products];
	enumType.size = 10;
	break;

case 7802:
	enumType.valueType = OBJ;
	enumType.defaultint = 29209;
	enumType.keyType = INT;
	enumType.valueArray = [29209, 29219];
	enumType.size = 2;
	break;

case 7803:
	enumType.valueType = OBJ;
	enumType.defaultint = 29210;
	enumType.keyType = INT;
	enumType.valueArray = [29210, 29221];
	enumType.size = 2;
	break;

case 7804:
	enumType.valueType = OBJ;
	enumType.defaultint = 29211;
	enumType.keyType = INT;
	enumType.valueArray = [29211, 29223];
	enumType.size = 2;
	break;

case 7805:
	enumType.valueType = OBJ;
	enumType.defaultint = 29212;
	enumType.keyType = INT;
	enumType.valueArray = [29212, 29225];
	enumType.size = 2;
	break;

case 7806:
	enumType.valueType = OBJ;
	enumType.defaultint = 29213;
	enumType.keyType = INT;
	enumType.valueArray = [29213, 29227];
	enumType.size = 2;
	break;

case 7807:
	enumType.valueType = OBJ;
	enumType.defaultint = 29214;
	enumType.keyType = INT;
	enumType.valueArray = [29214, 29229];
	enumType.size = 2;
	break;

case 7808:
	enumType.valueType = OBJ;
	enumType.defaultint = 29215;
	enumType.keyType = INT;
	enumType.valueArray = [29215, 29231];
	enumType.size = 2;
	break;

case 7809:
	enumType.valueType = OBJ;
	enumType.defaultint = 29216;
	enumType.keyType = INT;
	enumType.valueArray = [29216, 29233];
	enumType.size = 2;
	break;

case 7810:
	enumType.valueType = OBJ;
	enumType.defaultint = 29217;
	enumType.keyType = INT;
	enumType.valueArray = [29217, 29235];
	enumType.size = 2;
	break;

case 7811:
	enumType.valueType = OBJ;
	enumType.defaultint = 29218;
	enumType.keyType = INT;
	enumType.valueArray = [29218, 29237];
	enumType.size = 2;
	break;

case 7812:
	enumType.valueType = ENUM;
	enumType.defaultint = 7814;
	enumType.keyType = INT;
	enumType.valueArray = [7814, 7815, 7816, 7817, 7818, 7819, 7820, 7821, 3300, 7822, 7823, 7824, 7825];
	enumType.size = 13;
	break;

case 7813:
	enumType.valueType = STRING;
	enumType.defaultstr = "Pale energy products";
	enumType.keyType = INT;
	enumType.valueArray = [Pale energy products, Flickering energy products, Bright energy products, Glowing energy products, Sparkling energy products, Gleaming energy products, Vibrant energy products, Lustrous energy products, Elder energy products, Brilliant energy products, Radiant energy products, Luminous energy products, Incandescent energy products];
	enumType.size = 13;
	break;

case 7814:
	enumType.valueType = OBJ;
	enumType.defaultint = 29239;
	enumType.keyType = INT;
	enumType.valueArray = [31080, 29239, 29294, 29300, 29259, 29275, 29304, 29269, 29373];
	enumType.size = 9;
	break;

case 7815:
	enumType.valueType = OBJ;
	enumType.defaultint = 31081;
	enumType.keyType = INT;
	enumType.valueArray = [31081, 29310, 1521, 29241, 335, 440, 29260, 29295, 29374];
	enumType.size = 9;
	break;

case 7816:
	enumType.valueType = OBJ;
	enumType.defaultint = 31082;
	enumType.keyType = INT;
	enumType.valueArray = [31082, 29305, 442, 29271, 29301, 29243, 1621, 29261, 29277, 453, 29375];
	enumType.size = 11;
	break;

case 7817:
	enumType.valueType = OBJ;
	enumType.defaultint = 31083;
	enumType.keyType = INT;
	enumType.valueArray = [31083, 29306, 29296, 1519, 1619, 29302, 29245, 359, 29262, 29273, 444, 29376];
	enumType.size = 12;
	break;

case 7818:
	enumType.valueType = OBJ;
	enumType.defaultint = 31084;
	enumType.keyType = INT;
	enumType.valueArray = [31084, 1617, 29307, 29247, 363, 29263, 29279, 1517, 29377];
	enumType.size = 9;
	break;

case 7819:
	enumType.valueType = OBJ;
	enumType.defaultint = 29311;
	enumType.keyType = INT;
	enumType.valueArray = [29311, 31085, 29249, 29264, 1631, 29378];
	enumType.size = 6;
	break;

case 7820:
	enumType.valueType = OBJ;
	enumType.defaultint = 29297;
	enumType.keyType = INT;
	enumType.valueArray = [29297, 29308, 447, 12159, 29303, 29251, 7944, 29265, 29281, 29287, 29379];
	enumType.size = 11;
	break;

case 7821:
	enumType.valueType = OBJ;
	enumType.defaultint = 1515;
	enumType.keyType = INT;
	enumType.valueArray = [1515, 29298, 12160, 29253, 449, 29266, 29290, 31086, 29380];
	enumType.size = 9;
	break;

case 7822:
	enumType.valueType = OBJ;
	enumType.defaultint = 29312;
	enumType.keyType = INT;
	enumType.valueArray = [29312, 29309, 12163, 29381];
	enumType.size = 4;
	break;

case 7823:
	enumType.valueType = OBJ;
	enumType.defaultint = 29255;
	enumType.keyType = INT;
	enumType.valueArray = [29255, 29267, 29283, 31087, 29382];
	enumType.size = 5;
	break;

case 7824:
	enumType.valueType = OBJ;
	enumType.defaultint = 31088;
	enumType.keyType = INT;
	enumType.valueArray = [31088, 29289, 1513, 29299, 29383];
	enumType.size = 5;
	break;

case 7825:
	enumType.valueType = OBJ;
	enumType.defaultint = 451;
	enumType.keyType = INT;
	enumType.valueArray = [451, 29257, 29268, 29285, 29292];
	enumType.size = 5;
	break;

case 7827:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [at the Lumbridge crater, near the Divination camp. (Level 1), to the north of Falador, near the Guthix memorial site. (Level 10), between Varrock and the archaeological dig to the east. (Level 20), to the south-east of Seers' Village, towards Keep Le Faye. (Level 30), to the south-east of Rellekka, near the Golden Apple Tree. (Level 40), in the centre of the Karamja jungle, north-east of Shilo Village. (Level 50), to the north of Mobilising Armies. (Level 60), north of Canifis, just to the east of the Slayer Tower. (Level 70), in the Elder Halls on Freneskae. (Level 75), to the east of the Mage Training Arena. Access to the colony can be gained from the north. (Level 80), on Dragontooth Island. A boat can be taken for free from Port Phasmatys. (Level 85), south of Sophanem. You will need something to deal with the desert heat. (Level 90), south of the Poison Waste. Access to the colony can be gained from the east, near Castle Wars. (Level 95)];
	enumType.size = 13;
	break;

case 7828:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [portent of restoration I, portent of restoration II, portent of restoration III, portent of restoration IV, portent of restoration V, portent of restoration VI, portent of restoration VII, portent of restoration VIII, portent of restoration IX, portent of restoration X, portent of restoration XI, portent of restoration XII, attuned portent of restoration I, attuned portent of restoration II, attuned portent of restoration III, attuned portent of restoration IV, attuned portent of restoration V, attuned portent of restoration VI, attuned portent of restoration VII, attuned portent of restoration VIII, attuned portent of restoration IX, attuned portent of restoration X, attuned portent of restoration XI, attuned portent of restoration XII, sign of respite I, sign of respite II, sign of respite III, sign of the porter I, sign of the porter II, sign of the porter III, sign of the porter IV, sign of the porter V, sign of the porter VI, sign of item protection, portent of item protection, sign of life, portent of life, portent of degradation I, portent of degradation II, portent of degradation III, attuned portent of degradation I, attuned portent of degradation II, attuned portent of degradation III, sign of death, portent of death];
	enumType.size = 45;
	break;

case 7829:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [oak logs, raw trout, iron ore, silver ore, coal, willow logs, uncut ruby, raw tuna, gold ore, uncut diamond, raw bass, maple logs, uncut dragonstone, mithril ore, raw monkfish, yew logs, adamantite ore, magic logs, runite ore, green charm, crimson charm, blue charm, aviansie talons, demon horn, icyene feather, vampyre fangs];
	enumType.size = 26;
	break;

case 7830:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [divine bronze rock, divine iron rock, divine coal rock, divine mithril rock, divine adamantite rock, divine runite rock, divine kebbit burrow, divine bird snare, divine deadfall trap, divine box trap, divine tree, divine oak tree, divine willow tree, divine maple tree, divine yew tree, divine magic tree, divine herb patch I, divine herb patch II, divine herb patch III, divine simulacrum I, divine simulacrum II, divine crayfish bubble, divine herring bubble, divine trout bubble, divine salmon bubble, divine lobster bubble, divine swordfish bubble, divine shark bubble, divine cavefish bubble, divine rocktail bubble];
	enumType.size = 30;
	break;

case 7831:
	enumType.valueMap = {31046=31046, 29385=29396, 29386=29397, 29387=29398, 29388=29399, 29389=29400, 29390=29401, 29391=29402, 29392=29403, 29393=29404, 29394=29405, 29395=29406, 31326=31327};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 13;
	break;

case 7885:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Apples, Asgarnian hops, Bananas, Barley, Bittercap mushrooms, Cabbages, Cactus spines, Cadavaberries, Calquat fruit, Cave nightshade, Coconuts, Curry leaves, Dwellberries, Grapes of Guthix, Grapes of Saradomin, Grapes of Zamorak, Grimy avantoe, Grimy cadantine, Grimy dwarf weed, Grimy fellstalk, Grimy guam, Grimy harralander, Grimy irit, Grimy kwuarm, Grimy lantadyme, Grimy marrentill, Grimy ranarr, Grimy snapdragon, Grimy spirit weed, Grimy tarromin, Grimy toadflax, Grimy torstol, Grimy wergali, Hammerstone hops, Jangerberries, Jute, Krandorian hops, Limpwurt root, Marigolds, Morchella mushrooms, Nasturtiums, Onions, Oranges, Papaya, Pineapple, Poison ivy berries, Potatoes, Redberries, Rosemary, Strawberries, Sweetcorn, Tomatoes, Watermelon, Whiteberries, Wildblood hops, Woad leaves, Yannilian hops];
	enumType.size = 57;
	break;

case 7886:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Frog spawn, Leaping salmon, Leaping sturgeon, Leaping trout, Raw anchovies, Raw bass, Raw cave eel, Raw cavefish, Raw cod, Raw crayfish, Raw herring, Raw karambwan, Raw karambwanji, Raw lava eel, Raw lobster, Raw mackerel, Raw monkfish, Raw pike, Raw rainbow fish, Raw rocktail, Raw salmon, Raw sardine, Raw shrimp, Raw swordfish, Raw trout, Raw tuna, Raw shark, Raw great white shark, Raw baron shark, Slimy eel];
	enumType.size = 30;
	break;

case 7887:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Barb-tail harpoon, Blue feathers, Chinchompa, Common kebbit fur, Dark kebbit fur, Dashing kebbit fur, Desert devil fur, Diseased kebbit fur, Feldip weasel fur, Grenwall spikes, Kebbit claws, Kebbit spike, Kebbit teeth, Long kebbit spike, Orange feathers, Polar kebbit fur, Raw beast meat, Raw bird meat, Raw pawya meat, Red chinchompa, Red feathers, Spotted kebbit fur, Striped feathers, Wimpy feathers, Yellow feathers, Green salamander, Orange salamander, Red salamander, Black salamander];
	enumType.size = 29;
	break;

case 7888:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Adamantite ore, Bane ore, Blurite ore, Clay, Coal, Copper ore, Elemental ore, Gold ore, Granite, Iron ore, Limestone, Living minerals, Mithril ore, Pure essence, Red sandstone, Rubium ore, Rune essence, Runite ore, Sandstone, Silver ore, Tin ore, Uncut diamond, Uncut emerald, Uncut jade, Uncut opal, Uncut red topaz, Uncut ruby, Uncut sapphire];
	enumType.size = 28;
	break;

case 7889:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Achey logs, Arctic pine logs, Blisterwood logs, Eucalyptus logs, Hollow logs, Logs, Magic logs, Elder logs, Mahogany logs, Maple logs, Oak logs, Teak logs, Willow logs, Yew logs];
	enumType.size = 14;
	break;

case 7890:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Ashes, Batwing, Bear fur, Black dragonhide, Blue dragonhide, Carapace, Chocolate bar, Cockatrice egg, Cowhide, Crushed bird nest, Eggs, Eye of newt, Flax, Frog spawn, Goat horns, Green dragonhide, Imphide, Magic roots, Mort Myre fungi, Phoenix Feather, Potato cactus, Raw chicken, Raw chompy meat, Raw jubbly meat, Raw meat, Raw oomlie meat, Raw rabbit, Raw snail meat, Red dragonhide, Red spiders' eggs, Roots, Royal dragonhide, Snail shells, Snake weed, Snakeskins, Snape grass, Spider carcass, Spider silk, Swamp tar, Toad's legs, Ugthanki meat, Unicorn horns, Willow branch, Wool, Yak hides, Yew roots];
	enumType.size = 46;
	break;

case 7891:
	enumType.valueType = INT;
	enumType.defaultint = 1290;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1290, 1320, 1340, 1370, 1390, 1420, 1440, 1460, 1490, 1740, 1780, 1820, 1860, 1900, 1940, 1980, 2020, 2060, 2100, 2340, 2390, 2440, 2500, 2550, 2600, 2650, 2700, 2760, 2800, 3510, 3600, 3680, 3760, 3840, 3910, 3990, 4070, 4140, 4210, 5280, 5410, 5530, 5650, 5770, 5890, 6000, 6120, 6230, 6330, 7370, 7540, 7720, 7880, 8050, 8210, 8360, 8520, 8660, 8800, 10030, 10280, 10530, 10770, 11000, 11220, 11440, 11650, 11860, 12050, 13620, 13940, 14240, 14540, 14820, 15090, 15350, 15600, 15830, 16040, 17390, 17830, 18180, 18450, 18630, 19690, 20130, 20480, 20730, 20890, 22290, 22760, 23120, 23370, 23500, 24100, 24640, 25030, 25260, 25320, 25320, 25320, 25320, 25320, 25320, 25320, 25320, 25320, 25320, 25320, 25320, 25320, 25320, 25320, 25320, 25320, 25320, 25320, 25320, 25320, 25320];
	enumType.size = 120;
	break;

case 7892:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Pale wisps, Flickering wisps, Bright wisps, Glowing wisps, Sparkling wisps, Gleaming wisps, Vibrant wisps, Lustrous wisps, Brilliant wisps, Radiant wisps, Luminous wisps, Incandescent wisps, null, Elder wisps];
	enumType.size = 13;
	break;

case 7893:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Requires level 1 Divination.<br>These can be found to the West of the Lumbridge crater, near the Divination camp., Requires level 10 Divination.<br>These can be found to the north of Falador, near the Guthix memorial site., Requires level 20 Divination.<br>These can be found between Varrock and the archaeological dig to the east., Requires level 30 Divination.<br>These can be found to the south-east of Seers' Village, towards Keep Le Faye., Requires level 40 Divination.<br>These can be found to the south-east of Rellekka, near the Golden Apple Tree., Requires level 50 Divination.<br>These can be found in the centre of the Karamja jungle, north-east of Shilo Village., Requires level 60 Divination.<br>These can be found to the north of Mobilising Armies., Requires level 70 Divination.<br>These can be found north of Canifis, just to the east of the Slayer Tower., Requires level 80 Divination.<br>These can be found to the east of the Mage Training Arena. Access to the colony can be gained from the north., Requires level 85 Divination.<br>These can be found on Dragontooth Island. A boat can be taken for free from Port Phasmatys., Requires level 90 Divination.<br>These can be found south of Sophanem. You will need something to deal with the desert heat., Requires level 95 Divination.<br>These can be found south of the Poison Waste. Access to the colony can be gained from the east, near Castle Wars., null, Requires level 75 Divination.<br>These can be found in the Elder Halls of Freneskae.];
	enumType.size = 13;
	break;

case 7894:
	enumType.valueMap = {29239=portent of restoration I, 29241=portent of restoration II, 29243=portent of restoration III, 29373=boon of flickering energy, 29245=portent of restoration IV, 29374=boon of bright energy, 29375=boon of glowing energy, 29247=portent of restoration V, 29376=boon of sparkling energy, 29377=boon of gleaming energy, 29249=portent of restoration VI, 29378=boon of vibrant energy, 29379=boon of lustrous energy, 29251=portent of restoration VII, 29380=boon of brilliant energy, 29381=boon of radiant energy, 29253=portent of restoration VIII, 29382=boon of luminous energy, 29383=boon of incandescent energy, 29255=portent of restoration IX, 29257=portent of restoration X, 29259=attuned portent of restoration I, 29260=attuned portent of restoration II, 29261=attuned portent of restoration III, 29262=attuned portent of restoration IV, 29263=attuned portent of restoration V, 29264=attuned portent of restoration VI, 29265=attuned portent of restoration VII, 31313=portent of degradation I, 29266=attuned portent of restoration VIII, 29267=attuned portent of restoration IX, 31315=portent of degradation II, 29268=attuned portent of restoration X, 29269=sign of respite I, 31317=portent of degradation III, 29271=sign of respite II, 31319=attuned portent of degradation I, 31320=attuned portent of degradation II, 29273=sign of respite III, 31321=attuned portent of degradation III, 31322=sign of death, 29275=sign of the porter I, 29276=active sign of the porter I, 31324=portent of death, 31325=boon of elder energy, 29277=sign of the porter II, 29278=active sign of the porter II, 29279=sign of the porter III, 29280=active sign of the porter III, 29281=sign of the porter IV, 29282=active sign of the porter IV, 29283=sign of the porter V, 29284=active sign of the porter V, 29285=sign of the porter VI, 29286=active sign of the porter VI, 29287=sign of item protection, 29289=portent of item protection, 29290=sign of life, 29292=portent of life};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = OBJ;
	enumType.size = 59;
	break;

case 7896:
	enumType.valueType = STRUCT;
	enumType.defaultint = 22986;
	enumType.keyType = INT;
	enumType.valueArray = [null, 22986, 22987, 22988, 22989, 22990, 22991, 22992, 22993, 22994, 22995, 22996, 22997, 29515, 29516, 29517];
	enumType.size = 15;
	break;

case 7898:
	enumType.valueMap = {0=29009, 10=29012, 4=29010, 7=29011};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7899:
	enumType.valueMap = {0=29015, 10=29018, 4=29016, 7=29017};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7900:
	enumType.valueMap = {0=29021, 10=29024, 4=29022, 7=29023};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7901:
	enumType.valueMap = {0=29027, 10=29030, 4=29028, 7=29029};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7902:
	enumType.valueMap = {0=29033, 10=29036, 4=29034, 7=29035};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7903:
	enumType.valueMap = {0=29039, 10=29042, 4=29040, 7=29041};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7904:
	enumType.valueMap = {0=29045, 10=29048, 4=29046, 7=29047};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7905:
	enumType.valueMap = {0=29051, 10=29054, 4=29052, 7=29053};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7906:
	enumType.valueMap = {0=29057, 10=29060, 4=29058, 7=29059};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7907:
	enumType.valueMap = {0=29063, 10=29066, 4=29064, 7=29065};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7908:
	enumType.valueMap = {0=29069, 10=29072, 4=29070, 7=29071};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7909:
	enumType.valueMap = {0=29075, 10=29078, 4=29076, 7=29077};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7910:
	enumType.valueMap = {0=29081, 10=29084, 4=29082, 7=29083};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 7911:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29087, null, null, null, 29088, null, null, 29090, null, 29089, 29091];
	enumType.size = 5;
	break;

case 7912:
	enumType.valueMap = {14=29092};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7913:
	enumType.valueMap = {14=29094};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7914:
	enumType.valueMap = {14=29096};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7915:
	enumType.valueMap = {14=29098};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7916:
	enumType.valueMap = {14=29100};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7917:
	enumType.valueMap = {14=29102};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7918:
	enumType.valueMap = {14=29104};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7919:
	enumType.valueMap = {14=29106};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7937:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29421, 29424, null, null, 29419, null, null, 29420];
	enumType.size = 4;
	break;

case 7938:
	enumType.valueMap = {5=29426, 3=29425};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 7939:
	enumType.valueMap = {5=29427};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 7940:
	enumType.valueMap = {5=29429, 3=29428};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 7941:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29431, 29436, null, null, 29432, null, null, 29433];
	enumType.size = 4;
	break;

case 7942:
	enumType.valueType = STRING;
	enumType.defaultstr = "Default Name";
	enumType.keyType = INT;
	enumType.valueArray = [Default Name, Boomer, Stan, Fluffy, Tiddles, Sparks, Jane, Flopsy, Peter, Nuke, Kibbles, Daisy, Jack, Timmy, Ruth, Penny, Woobie, Squishy, Widget, Snookums, Chloe];
	enumType.size = 21;
	break;

case 7943:
	enumType.valueMap = {29444=curried lard nuggets, 29445=pure caffeine, 29443=dried chillies};
	enumType.valueType = STRING;
	enumType.defaultstr = "food";
	enumType.keyType = OBJ;
	enumType.size = 3;
	break;

case 7944:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 14155814, 14155822, 14155830, 14155838, 14155846, 14155854, 14155862, 14155870, 14155878, 14155886, 14155894, 14155902, 14155910, 14155918, 14155926, 14155934, 14155942, 14155950, 14155958, 14155966];
	enumType.size = 20;
	break;

case 7945:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 353, 356, 359, 363, 367, 371, 376, 381, 387, 393, 400, 407, 421, 438, 457, 478, 502, 529, 559, 593, 629, 669, 713, 761, 812, 868, 928, 992, 1062, 1135, 1214, 1298, 1387, 1482, 1582, 1688, 1800, 1918, 2042, 2172, 2309, 2453, 2604, 2761, 2926, 3098, 3278, 3465, 3660, 3863, 4075, 4294, 4625, 4974, 5341, 5726, 6130, 6554, 6997, 7461, 7946, 8451, 8979, 9528, 10100, 10695, 11313, 11955, 12622, 13313, 14029, 14771, 15539, 16334, 17156, 18005, 18881, 19786, 20720, 21683, 22676, 23699, 24752, 25836, 27006, 28212, 29452, 30728, 32041, 33391, 34778, 36203, 37667, 39169, 40711, 42293, 43915, 45579, 47283];
	enumType.size = 99;
	break;

case 7946:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 705, 711, 718, 725, 734, 742, 752, 763, 774, 786, 800, 814, 842, 876, 913, 956, 1005, 1059, 1119, 1185, 1259, 1339, 1426, 1521, 1625, 1736, 1856, 1985, 2123, 2271, 2428, 2596, 2775, 2964, 3164, 3376, 3600, 3835, 4084, 4345, 4619, 4906, 5207, 5523, 5852, 6197, 6556, 6930, 7321, 7727, 8149, 8589, 9251, 9948, 10681, 11452, 12260, 13108, 13995, 14922, 15891, 16903, 17957, 19056, 20200, 21390, 22626, 23911, 25244, 26626, 28059, 29543, 31079, 32668, 34311, 36009, 37763, 39573, 41441, 43367, 45352, 47397, 49504, 51672, 54013, 56423, 58904, 61457, 64083, 66782, 69556, 72407, 75334, 78339, 81422, 84586, 87831, 91157, 94567];
	enumType.size = 99;
	break;

case 7947:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1411, 1423, 1436, 1451, 1467, 1485, 1504, 1525, 1548, 1573, 1599, 1628, 1685, 1751, 1827, 1913, 2009, 2118, 2238, 2371, 2517, 2678, 2853, 3043, 3249, 3472, 3712, 3970, 4246, 4542, 4857, 5193, 5549, 5928, 6328, 6752, 7199, 7671, 8167, 8689, 9237, 9812, 10415, 11045, 11705, 12393, 13112, 13861, 14641, 15454, 16299, 17177, 18501, 19896, 21363, 22904, 24521, 26215, 27989, 29844, 31783, 33805, 35915, 38112, 40400, 42780, 45253, 47821, 50487, 53252, 56117, 59085, 62158, 65336, 68622, 72018, 75525, 79146, 82881, 86733, 90704, 94795, 99008, 103345, 108026, 112846, 117808, 122914, 128165, 133564, 139113, 144813, 150667, 156677, 162845, 169172, 175661, 182314, 189133];
	enumType.size = 99;
	break;

case 7948:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 3527, 3557, 3590, 3627, 3668, 3712, 3761, 3813, 3870, 3932, 3998, 4069, 4212, 4378, 4567, 4782, 5024, 5294, 5595, 5927, 6293, 6694, 7132, 7607, 8123, 8680, 9280, 9925, 10616, 11354, 12142, 12981, 13873, 14819, 15821, 16880, 17999, 19177, 20418, 21723, 23094, 24531, 26037, 27613, 29261, 30983, 32779, 34652, 36604, 38635, 40747, 42943, 46253, 49740, 53407, 57260, 61302, 65539, 69973, 74611, 79456, 84513, 89787, 95281, 101000, 106949, 113132, 119553, 126218, 133130, 140293, 147713, 155394, 163340, 171556, 180045, 188813, 197864, 207203, 216833, 226760, 236987, 247520, 258362, 270064, 282115, 294521, 307285, 320413, 333911, 347782, 362033, 376668, 391693, 407111, 422930, 439153, 455785, 472833];
	enumType.size = 99;
	break;

case 7949:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7053, 7113, 7180, 7254, 7335, 7424, 7521, 7627, 7741, 7864, 7996, 8138, 8424, 8755, 9134, 9564, 10047, 10588, 11190, 11855, 12586, 13388, 14263, 15215, 16246, 17360, 18560, 19849, 21231, 22708, 24285, 25963, 27746, 29638, 31642, 33761, 35997, 38355, 40837, 43447, 46187, 49062, 52074, 55227, 58523, 61966, 65559, 69305, 73207, 77270, 81495, 85886, 92507, 99480, 106815, 114520, 122604, 131077, 139947, 149222, 158913, 169027, 179573, 190561, 202000, 213898, 226264, 239107, 252436, 266259, 280587, 295427, 310788, 326680, 343111, 360090, 377627, 395729, 414406, 433667, 453520, 473975, 495040, 516724, 540129, 564230, 589042, 614569, 640826, 667821, 695564, 724065, 753337, 783385, 814223, 845861, 878306, 911571, 945667];
	enumType.size = 99;
	break;

case 7950:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 20455, 20628, 20822, 21036, 21272, 21530, 21812, 22118, 22449, 22805, 23189, 23600, 24431, 25391, 26489, 27735, 29137, 30706, 32450, 34378, 36500, 38826, 41363, 44123, 47113, 50344, 53824, 57563, 61570, 65854, 70426, 75293, 80465, 85952, 91762, 97906, 104391, 111229, 118427, 125996, 133944, 142280, 151015, 160157, 169716, 179700, 190120, 200984, 212301, 224082, 236335, 249069, 268269, 288492, 309763, 332108, 355553, 380123, 405845, 432744, 460847, 490177, 520763, 552628, 585800, 620304, 656165, 693409, 732063, 772152, 813701, 856737, 901286, 947372, 995022, 1044262, 1095117, 1147614, 1201777, 1257633, 1315208, 1374527, 1435616, 1498501, 1566373, 1636268, 1708221, 1782252, 1858394, 1936682, 2017136, 2099789, 2184676, 2271817, 2361246, 2452996, 2547088, 2643556, 2742433];
	enumType.size = 99;
	break;

case 7951:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 14221332, 14221343, 14221354, 14221365, 14221376, 14221387];
	enumType.size = 6;
	break;

case 7952:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 14221320, 14221321, 14221322, 14221323, 14221324, 14221325];
	enumType.size = 6;
	break;

case 7953:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 3766, 3767, 3768, 3769, 3770, 3771];
	enumType.size = 6;
	break;

case 7954:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 3773, 3774, 3772, 3775, 3782, 3783];
	enumType.size = 6;
	break;

case 7955:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 3776, 3777, 3778, 3779, 3780, 3781];
	enumType.size = 6;
	break;

case 7956:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 3784, 3785, 3786, 3787, 3788, 3789];
	enumType.size = 6;
	break;

case 7957:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 3790, 3791, 3792, 3793, 3794, 3795];
	enumType.size = 6;
	break;

case 7990:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29561, 29571, null, null, 29563, null, null, 29565, null, 29567, 29569];
	enumType.size = 6;
	break;

case 7991:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29575, null, null, null, 29577, null, null, 29579, null, 29581, 29583];
	enumType.size = 5;
	break;

case 7992:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29587, 29597, null, null, 29589, null, null, 29591, null, 29593, 29595];
	enumType.size = 6;
	break;

case 7993:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29601, null, null, null, 29603, null, null, 29605, null, 29607, 29609];
	enumType.size = 5;
	break;

case 7994:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34677, 29736, 29734];
	enumType.size = 3;
	break;

case 7995:
	enumType.valueMap = {14096=0, 14097=0, 14114=6, 14115=6, 14116=6, 14117=6, 14118=4, 14119=4, 14120=4, 14121=4, 14094=0, 14095=0};
	enumType.valueType = SKILL;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 12;
	break;

case 7999:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29762];
	enumType.size = 1;
	break;

case 8000:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29766, null, null, 29776, 29768, 29778, null, 29770, null, 29772, 29774];
	enumType.size = 7;
	break;

case 8001:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29782, 29792, null, 29794, 29784, 29796, null, 29786, null, 29788, 29790];
	enumType.size = 8;
	break;

case 8002:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29854, 29857, 29860];
	enumType.size = 3;
	break;

case 8010:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 29943];
	enumType.size = 1;
	break;

case 8011:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29944];
	enumType.size = 1;
	break;

case 8012:
	enumType.valueMap = {3=29945};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8013:
	enumType.valueMap = {3=29946};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8014:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1657, 1661, 24037, 24035, 24120, 1648, 11490, 19037, 24121, 24036, 24119, 24122, 1647, 1652, 1646, 1651, 28247, 28358, 29001, 29198, 31557, 31558, 31697];
	enumType.size = 23;
	break;

case 8015:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1666, 1664, 1658, 1653, 11514, 1670, 1674, 1676, 1663, 24123, 1673, 1659, 24124, 1675, 11513, 1660, 18797, 3107, 28049, 16568, 16569, 1679, 31393, 31394];
	enumType.size = 24;
	break;

case 8016:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1666, 1664, 1670, 1674, 1676, 1663, 24123, 1673, 1659, 24124, 11513, 1660, 28049, 16568, 16569];
	enumType.size = 15;
	break;

case 8017:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1653, 1658, 11514, 1675, 18797, 3107, 1679, 31393, 31394];
	enumType.size = 9;
	break;

case 8018:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24144;
	enumType.keyType = INT;
	enumType.valueArray = [24144];
	enumType.size = 1;
	break;

case 8019:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24145;
	enumType.keyType = INT;
	enumType.valueArray = [24145];
	enumType.size = 1;
	break;

case 8020:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24146;
	enumType.keyType = INT;
	enumType.valueArray = [24146];
	enumType.size = 1;
	break;

case 8021:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24147;
	enumType.keyType = INT;
	enumType.valueArray = [24147];
	enumType.size = 1;
	break;

case 8022:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24148;
	enumType.keyType = INT;
	enumType.valueArray = [24148];
	enumType.size = 1;
	break;

case 8023:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24149;
	enumType.keyType = INT;
	enumType.valueArray = [24149];
	enumType.size = 1;
	break;

case 8024:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24150;
	enumType.keyType = INT;
	enumType.valueArray = [24150];
	enumType.size = 1;
	break;

case 8025:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24151;
	enumType.keyType = INT;
	enumType.valueArray = [24151];
	enumType.size = 1;
	break;

case 8026:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24152;
	enumType.keyType = INT;
	enumType.valueArray = [24152];
	enumType.size = 1;
	break;

case 8027:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24153;
	enumType.keyType = INT;
	enumType.valueArray = [24153];
	enumType.size = 1;
	break;

case 8028:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24154;
	enumType.keyType = INT;
	enumType.valueArray = [24154];
	enumType.size = 1;
	break;

case 8029:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24155;
	enumType.keyType = INT;
	enumType.valueArray = [24155];
	enumType.size = 1;
	break;

case 8030:
	enumType.valueType = STRUCT;
	enumType.defaultint = 24156;
	enumType.keyType = INT;
	enumType.valueArray = [24156];
	enumType.size = 1;
	break;

case 8031:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6158, 6159, 6160, 8018, 8019, 8020, 8021, 8022, 8023, 8024, 8025, 8026, null, null, null, null, null, null, null, null, null, null, null, null, 8027, 8028, 8029, 8030];
	enumType.size = 16;
	break;

case 8032:
	enumType.valueMap = {13845=2, 13846=2, 13847=2, 13848=2, 13849=2, 13850=2, 13851=2, 13852=2, 28445=1, 13853=2, 13854=2, 28447=1, 13855=2, 13856=2, 28449=1, 13857=2, 28451=1, 28453=1, 15398=1, 33830=3, 7975=1, 28455=1, 33831=3, 7976=1, 33832=3, 7977=1, 28457=2, 33833=3, 7978=1, 28458=2, 33834=3, 7979=1, 28459=2, 7980=1, 28460=2, 33836=3, 7981=1, 28461=2, 33837=3, 28462=2, 33838=3, 33840=3, 33841=3, 33842=3, 33843=3, 33844=3, 33845=3, 33846=3, 33847=3, 33848=3, 33849=3, 33850=3, 33851=3, 33852=3, 18757=1, 30288=2, 30289=2, 30290=2, 28755=2, 30291=2, 28756=2, 30292=2, 28757=2, 30293=2, 28758=2, 30294=2, 28759=2, 30295=2, 28760=2, 30296=2, 28761=2, 30297=2, 18778=2, 28762=2, 30298=2, 28763=2, 30299=2, 28764=2, 30300=2, 28765=2, 30301=2, 28766=2, 30302=2, 28767=2, 30303=2, 28768=2, 30304=2, 28769=2, 30305=2, 27490=2, 28770=2, 30306=2, 32610=2, 28771=2, 30307=2, 32611=2, 28772=2, 30308=2, 32612=2, 28773=2, 30309=2, 28774=2, 30310=2, 28775=2, 30311=2, 28776=2, 30312=2, 28777=2, 30313=2, 28778=2, 30314=2, 28779=2, 30315=2, 28780=2, 30316=2, 28781=2, 30317=2, 28782=2, 30318=2, 17263=1, 28783=2, 30319=2, 28784=2, 30320=2, 28785=2, 30321=2, 28786=2, 30322=2, 28787=2, 30323=2, 28788=2, 28789=2, 28790=2, 17279=2, 17289=1, 17291=2, 17293=1, 6798=2, 6799=2, 17295=2, 6800=2, 6801=2, 6802=2, 6803=2, 6804=2, 6805=2, 6806=2, 6807=2, 6808=2, 19864=3, 34972=2, 34974=2, 34976=2, 33716=3, 12477=1, 12478=1, 12479=1, 12480=1, 32706=2, 28626=3, 28128=1, 28129=1, 28130=1, 28131=1, 25316=1, 25318=1, 31465=2, 31466=1, 15355=2, 15356=2, 15357=2, 15358=2, 15359=2};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 173;
	break;

case 8033:
	enumType.valueMap = {28627=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 1;
	break;

case 8035:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30408890, 30408892, 30408895, 30408898, 30408901, 30408904, 30408907, 30408910, 30408913, 30408916, 30408919];
	enumType.size = 11;
	break;

case 8036:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30408891, 30408893, 30408896, 30408899, 30408902, 30408905, 30408908, 30408911, 30408914, 30408917, 30408920];
	enumType.size = 11;
	break;

case 8037:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30408878, 30408894, 30408897, 30408900, 30408903, 30408906, 30408909, 30408912, 30408915, 30408918, 30408921];
	enumType.size = 11;
	break;

case 8038:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 30038];
	enumType.size = 1;
	break;

case 8039:
	enumType.valueMap = {4=30039};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8040:
	enumType.valueMap = {7=30040};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8041:
	enumType.valueMap = {10=30041};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8042:
	enumType.valueMap = {9=30042};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8043:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27146, 27147, 30038, null, 30039, null, null, 30040, null, 30042, 30041];
	enumType.size = 7;
	break;

case 8046:
	enumType.valueMap = {18=30048};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8073:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14663, 14710, 14669, 14674];
	enumType.size = 4;
	break;

case 8074:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14725, 14710, 14731, 14736];
	enumType.size = 4;
	break;

case 8075:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14677, 14699, 14710, 14683, 14686];
	enumType.size = 5;
	break;

case 8076:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30061];
	enumType.size = 1;
	break;

case 8077:
	enumType.valueMap = {1024=21458, 0=21458, 1=21458, 2=21100, 3=21101, 4=21458, 1029=21458, 5=21458, 6=21458, 7=21458, 8=21458, 9=21458, 10=21458, 11=21458, 12=21458, 14=21458, 15=21458, 16=21458, 17=21458, 18=21458, 19=21458, 20=21458, 21=21458, 22=21458, 23=21458, 25=21458, 27=21458, 1000=21189, 1002=28151, 1003=28152, 1004=21099, 1008=21458, 1009=21458, 1010=21458, 1011=21458, 1012=21458, 1013=21458, 1014=21458, 1015=21458, 1016=21458, 1019=21458};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 42;
	break;

case 8079:
	enumType.valueMap = {512=24395, 1=24202, 513=28832, 2=24203, 3=24217, 4=24228, 5=24216, 6=24219, 7=24204, 8=24205, 520=24301, 9=24206, 521=24396, 10=24209, 522=28833, 11=24220, 523=28834, 12=24218, 524=28835, 13=24230, 14=24212, 15=24213, 16=24207, 17=24210, 18=24221, 530=24302, 19=24208, 531=24397, 20=24211, 532=24398, 21=24222, 533=28836, 22=24214, 23=24215, 24=24223, 25=24226, 26=24227, 27=24231, 28=24236, 540=24303, 3100=29341, 541=28837, 3101=29342, 30=24224, 542=28838, 3102=29343, 31=24382, 543=28839, 32=24383, 33=24384, 34=24225, 35=24388, 36=24389, 37=28104, 38=28113, 550=24304, 39=26417, 551=24399, 40=28105, 552=24400, 553=24401, 554=28841, 560=24305, 561=24402, 50=24232, 562=24403, 51=26418, 563=24404, 52=28801, 53=28802, 54=28803, 55=28804, 56=28805, 57=28806, 58=28807, 570=24306, 59=28808, 571=24405, 60=24246, 572=24406, 61=24247, 573=24407, 62=24248, 63=28809, 64=28810, 65=28811, 66=28812, 67=24253, 68=24254, 580=24307, 69=28813, 581=24408, 70=28814, 582=24409, 71=28815, 583=24410, 72=28816, 73=28106, 74=28107, 75=28817, 76=28818, 1100=25714, 77=28819, 1101=25706, 78=28820, 590=27818, 1102=25707, 3150=30833, 591=27819, 1103=25708, 80=26573, 592=27820, 1104=25709, 81=26574, 593=27821, 1105=25710, 82=28108, 594=27822, 1106=25711, 83=28109, 595=27823, 1107=25712, 84=28110, 596=27824, 1108=25713, 1109=25716, 1111=25715, 88=28827, 600=24308, 1112=25717, 89=28828, 601=28842, 1113=25718, 90=28821, 1114=25719, 91=28822, 1115=25720, 92=28823, 93=28824, 94=28825, 95=28826, 96=26569, 97=26570, 98=26571, 610=24309, 99=26572, 611=24411, 100=28829, 612=24412, 101=28830, 620=28843, 621=28844, 622=28845, 623=28846, 624=28847, 630=24310, 631=24414, 632=24415, 640=28848, 641=28849, 642=28850, 643=28851, 644=28852, 645=28853, 646=28854, 647=28855, 650=24311, 651=24416, 652=24417, 660=24312, 661=24418, 662=24419, 670=28856, 671=28857, 672=28858, 673=28859, 680=26432, 681=26433, 682=26434, 683=26435, 684=26436, 685=26437, 686=26530, 1200=28039, 1201=28040, 690=24313, 1202=28041, 691=24420, 1203=28042, 692=24421, 1204=28043, 693=24422, 1205=28044, 1206=28045, 1207=28046, 1208=28047, 1209=28048, 700=24314, 701=24320, 702=24321, 710=24315, 711=24423, 712=24424, 720=24316, 721=24425, 722=24426, 723=24427, 724=31376, 730=24274, 731=24323, 732=24324, 733=24325, 734=24326, 735=24327, 740=24229, 741=24390, 742=24391, 743=24392, 744=28860, 745=28861, 746=28862, 750=24298, 751=24428, 752=28863, 753=28864, 754=28865, 755=28866, 756=28867, 757=24339, 758=24340, 759=24341, 760=24342, 761=31575, 762=31576, 763=31577, 764=31578, 765=31579, 766=31580, 767=31581, 768=31582, 769=30823, 1300=24265, 1301=28868, 1302=28869, 1303=28870, 3000=24263, 3001=24276, 3002=28871, 3003=28872, 3004=24278, 3005=24317, 3006=28241, 3007=28242, 3008=28243, 3009=28244, 3010=28245, 3011=28246, 3012=28886, 3013=28887, 3014=28888, 3015=28889, 3016=28890, 3017=28891, 3018=28892, 1000=26535, 1001=26536, 1002=26537, 3050=29185, 1003=26538, 3051=29186, 1004=26539, 3052=29187, 1005=30473, 1007=31377, 1008=31378, 1009=32193, 500=24299, 501=24393, 502=28831, 510=24300, 511=24394};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 282;
	break;

case 8080:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 24950];
	enumType.size = 1;
	break;

case 8081:
	enumType.valueMap = {32=26575, 33=28114, 34=28875, 3=24951, 35=28876, 24=24954, 1002=24957};
	enumType.valueType = STRUCT;
	enumType.defaultint = 24959;
	enumType.keyType = INT;
	enumType.size = 7;
	break;

case 8082:
	enumType.valueType = INT;
	enumType.defaultint = 1000;
	enumType.keyType = INT;
	enumType.valueArray = [3, 24, 34, 35, 32, 33, 1002];
	enumType.size = 7;
	break;

case 8083:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [8007, 8008, 8009, 8010, 8011, 8012, 8013, 31665, 8014, 8015, 8016, 8017, 8018, 8019, 8020, 8021];
	enumType.size = 16;
	break;

case 8085:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 28209, 28210, 28211, 28212, 28213, 28214, 28215, 28216, 28217, 28218, 28219, 28220];
	enumType.size = 12;
	break;

case 8086:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 1123, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 351, 352, 353, 354, 355, 356, 357, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 309, 310, 311, 312, 313, 314, 315, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 428, 316, 317, 318, 319, 320, 321, 322, 323, 417, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 324, 325, 326, 327, 328, 329, 330, 331, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 332, 333, 334, 335, 336, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 337, 338, 339, 340, 341, 342, 343, 344, 345, 362, 363, 358, 359, 360, 361, 412, 413, 414, 415, 416, 367, 368, 369, 370, 371, 372, 374, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 418, 346, 347, 348, 350, 440, 441, 442, 573, 551, 545, 564, 571, 570, 451, 544, 546, 550, 555, 556, 557, 563, 566, 567, 568, 572, 574, 577, 578, 579, 580, 581, 582, 583, 940, 365, 366, 385, 549, 562, 419, 420, 426, 427, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 1010, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258];
	enumType.size = 657;
	break;

case 8087:
	enumType.valueType = OBJ;
	enumType.defaultint = 526;
	enumType.keyType = INT;
	enumType.valueArray = [null, 12231, 12225, 12236, 12255, 12226, 12286, 12256, 12240, 12290, 12245, 12241, 12237, 12276, 12227, 12246, 12232, 12282, 12284, 12285, 12283, 12264, 12243, 12228, 12229, 12266, 30133, 30134, 30135, 30136, 30137, 30138, 30128, 12288, 12235, 12259, 12238, 12258, 12257, 30129, 12233, 12274, 12289, 12275, 12267, 12239, 12234, 12254, 12265, 30130, 12252, 12253, 12262, 12230, 12244, 12249, 14625, 12279, 12242, 12247, 12291, 30131, 12261, 12269, 12271, 12273, 12272, 12263, 12260, 12277, 12270, 30132, 12250, 12280, 12268, 12281, 12287, 12251, 12278, 31333, 31405, 31406, 31407, 31408, 32831, 34143, 34144, 34145, 34854];
	enumType.size = 88;
	break;

case 8088:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30461, 30466, null, null, 30462, null, null, 30463, null, 30464, 30465];
	enumType.size = 6;
	break;

case 8089:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30469, null, null, null, 30470, null, null, 30471, null, 30472, 30473];
	enumType.size = 5;
	break;

case 8090:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30476, 30481, null, null, 30477, null, null, 30478, null, 30480, 30479];
	enumType.size = 6;
	break;

case 8091:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30484, null, null, null, 30485, null, null, 30487, null, 30486, 30488];
	enumType.size = 5;
	break;

case 8092:
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [89046, 89047, 89048, 89049, 89050, 89051, 89052, 89053, 89054, 89055, 89056, 89057, 89058];
	enumType.size = 13;
	break;

case 8093:
	enumType.valueMap = {89057=11, 89056=10, 89058=12, 89047=1, 89046=0, 89049=3, 89048=2, 89051=5, 89050=4, 89053=7, 89052=6, 89055=9, 89054=8};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = LOCATION;
	enumType.size = 13;
	break;

case 8095:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30147, null, null, null, 30149, null, null, 30151, null, 30153, 30155];
	enumType.size = 5;
	break;

case 8096:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30159, null, null, null, 30161, null, null, 30163, null, 30153, 30155];
	enumType.size = 5;
	break;

case 8097:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30167, null, null, null, 30169, null, null, 30171, null, 30153, 30155];
	enumType.size = 5;
	break;

case 8098:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30175, null, null, null, 30177, null, null, 30179, null, 30153, 30155];
	enumType.size = 5;
	break;

case 8099:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30183, null, null, null, 30185, null, null, 30187, null, 30153, 30155];
	enumType.size = 5;
	break;

case 8100:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30191, null, null, null, 30193, null, null, 30194, null, 30195, 30196];
	enumType.size = 5;
	break;

case 8101:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30199, null, null, null, 30201, null, null, 30202, null, 30195, 30196];
	enumType.size = 5;
	break;

case 8102:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30205, null, null, null, 30207, null, null, 30208, null, 30195, 30196];
	enumType.size = 5;
	break;

case 8103:
	enumType.valueMap = {0=4, 1=4, 2=4, 18=1, 3=4, 4=4, 6=4};
	enumType.valueType = INT;
	enumType.keyType = SKILL;
	enumType.size = 7;
	break;

case 8107:
	enumType.valueMap = {14930=4507, 14931=4508, 14932=4506, 14933=4506};
	enumType.valueType = SPOT;
	enumType.defaultint = 4505;
	enumType.keyType = STRUCT;
	enumType.size = 4;
	break;

case 8108:
	enumType.valueMap = {14930=22340, 14931=22344, 14932=22339, 14933=22339, 14937=22343, 14939=22341, 14942=22342};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 22338;
	enumType.keyType = STRUCT;
	enumType.size = 7;
	break;

case 8109:
	enumType.valueMap = {14930=4499, 14931=4498, 14932=4497, 14933=4497, 14937=4496, 14939=4501, 14942=4500};
	enumType.valueType = SPOT;
	enumType.defaultint = 4495;
	enumType.keyType = STRUCT;
	enumType.size = 7;
	break;

case 8112:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Goblin Village, North of Falador, Central Falador, Port Sarim, South of Falador, North Barbarian Village, Edgeville, East of Falador, Draynor Village, South of Draynor Manor, South of Barbarian Village, West of Varrock, East of Draynor Manor, Lumbridge, South-west of Varrock, Central Varrock, North of Lumbridge, South-east of Varrock];
	enumType.size = 18;
	break;

case 8114:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25029, 25030, 25031, 25032, 25033, 25034, 25035, 25036, 25037, 25038, 25039, 25040, 25041, 25042, 25043, 25044, 25045, 25046];
	enumType.size = 18;
	break;

case 8211:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 25068, 25067, 25070, 25069, 25071, 25072, 25073, 25076, 25083, 25079, 25080, 25081, 25082, 25074, 25077, 25084, 25079, 25080, 25081, 25082, 25075, 25078, 25085, 25079, 25080, 25081, 25082];
	enumType.size = 27;
	break;

case 8212:
	enumType.valueMap = {3=30345};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8213:
	enumType.valueMap = {3=30346};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8214:
	enumType.valueMap = {3=30337};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8215:
	enumType.valueMap = {3=30339};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8216:
	enumType.valueMap = {5=30338};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8217:
	enumType.valueMap = {5=30340};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8218:
	enumType.valueMap = {3=30341};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8219:
	enumType.valueMap = {3=30343};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8220:
	enumType.valueMap = {5=30342};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8221:
	enumType.valueMap = {5=30344};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8222:
	enumType.valueMap = {5=30347};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8223:
	enumType.valueMap = {5=30348};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8224:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 25640, 25641, 25642, 25643, 25644, 25645, 25646, 25647];
	enumType.size = 8;
	break;

case 8278:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30359];
	enumType.size = 1;
	break;

case 8279:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30361];
	enumType.size = 1;
	break;

case 8280:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [14, 1, 19, 221, 18, 36, 39, 21, 65, 85, 80, 108, 111, 109, 147, 114, 153, 161, 151, 198, 216, 196, 118];
	enumType.size = 23;
	break;

case 8281:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [14, 20, 31, 37, 48, 61, 64, 84, 92, 132, 158, 168, 198];
	enumType.size = 13;
	break;

case 8282:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 5, 6, 7, 8, 9, 20, 19, 24, 21];
	enumType.size = 10;
	break;

case 8283:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13217, 13210, 13201, 13203, 13206, 13198, 13208, 13211, 13212, 13200, 13207, 13204, 13213, 13209, 13202];
	enumType.size = 15;
	break;

case 8284:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Agility, Herblore, Thieving, Crafting, Runecrafting, Mining, Smithing, Fishing, Cooking, Firemaking, Woodcutting, Fletching, Farming, Construction, Hunter];
	enumType.size = 15;
	break;

case 8285:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24158, 24159, 25017, 25018, 25019, 25020, 25021, 25022, 25023, 25733, 25734, 25735, 25736, 25737, 25738, 26600];
	enumType.size = 16;
	break;

case 8289:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [8290, 8295, null, null, 8291, null, null, 8292, null, 8293, 8294, null, 8296];
	enumType.size = 7;
	break;

case 8290:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 220, 240, 260, 280, 300, 320, 342, 362, 382, 404, 426, 446, 468, 490, 514, 536, 560, 584, 608, 632, 658, 682, 708, 736, 762, 790, 818, 848, 878, 908, 940, 972, 1004, 1038, 1072, 1106, 1142, 1180, 1218, 1256, 1296, 1336, 1378, 1420, 1464, 1510, 1556, 1602, 1650, 1700, 1750, 1802, 1856, 1910, 1966, 2022, 2080, 2140, 2202, 2264, 2328, 2394, 2460, 2528, 2598, 2670, 2744, 2818, 2894, 2972, 3052, 3132, 3216, 3300, 3388, 3476, 3566, 3658, 3752, 3848, 3946, 4046, 4148, 4250, 4356, 4464, 4574, 4686, 4800, 4916, 5034, 5154, 5278, 5402, 5530, 5658, 5790, 5924, 6062];
	enumType.size = 100;
	break;

case 8291:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 253, 276, 299, 322, 345, 368, 393, 416, 439, 464, 489, 512, 538, 563, 591, 616, 644, 671, 699, 726, 756, 784, 814, 846, 876, 908, 940, 975, 1009, 1044, 1081, 1117, 1154, 1193, 1232, 1271, 1313, 1357, 1400, 1444, 1490, 1536, 1584, 1633, 1683, 1736, 1789, 1842, 1897, 1955, 2012, 2072, 2134, 2196, 2260, 2325, 2392, 2461, 2532, 2603, 2677, 2753, 2829, 2907, 2987, 3070, 3155, 3240, 3328, 3417, 3509, 3601, 3698, 3795, 3896, 3997, 4100, 4206, 4314, 4425, 4537, 4652, 4770, 4887, 5009, 5133, 5260, 5388, 5520, 5653, 5789, 5927, 6069, 6212, 6359, 6506, 6658, 6812, 6971];
	enumType.size = 100;
	break;

case 8292:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 242, 264, 286, 308, 330, 352, 376, 398, 420, 444, 468, 490, 514, 539, 565, 589, 616, 642, 668, 695, 723, 750, 778, 809, 838, 869, 899, 932, 965, 998, 1034, 1069, 1104, 1141, 1179, 1216, 1256, 1298, 1339, 1381, 1425, 1469, 1515, 1562, 1610, 1661, 1711, 1762, 1815, 1870, 1925, 1982, 2041, 2101, 2162, 2224, 2288, 2354, 2422, 2490, 2560, 2633, 2706, 2780, 2857, 2937, 3018, 3099, 3183, 3269, 3357, 3445, 3537, 3630, 3726, 3823, 3922, 4023, 4127, 4232, 4340, 4450, 4562, 4675, 4791, 4910, 5031, 5154, 5280, 5407, 5537, 5669, 5805, 5942, 6083, 6223, 6369, 6516, 6668];
	enumType.size = 100;
	break;

case 8293:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 55, 60, 65, 70, 75, 80, 85, 90, 95, 101, 106, 111, 117, 122, 128, 134, 140, 146, 152, 158, 164, 170, 177, 184, 190, 197, 204, 212, 219, 227, 235, 243, 251, 259, 268, 276, 285, 295, 304, 314, 324, 334, 344, 355, 366, 377, 389, 400, 412, 425, 437, 450, 464, 477, 491, 505, 520, 535, 550, 566, 582, 598, 615, 632, 649, 667, 686, 704, 723, 743, 763, 783, 804, 825, 847, 869, 891, 914, 938, 962, 986, 1011, 1037, 1062, 1089, 1116, 1143, 1171, 1200, 1229, 1258, 1288, 1319, 1350, 1382, 1414, 1447, 1481, 1515];
	enumType.size = 100;
	break;

case 8294:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 55, 60, 65, 70, 75, 80, 85, 90, 95, 101, 106, 111, 117, 122, 128, 134, 140, 146, 152, 158, 164, 170, 177, 184, 190, 197, 204, 212, 219, 227, 235, 243, 251, 259, 268, 276, 285, 295, 304, 314, 324, 334, 344, 355, 366, 377, 389, 400, 412, 425, 437, 450, 464, 477, 491, 505, 520, 535, 550, 566, 582, 598, 615, 632, 649, 667, 686, 704, 723, 743, 763, 783, 804, 825, 847, 869, 891, 914, 938, 962, 986, 1011, 1037, 1062, 1089, 1116, 1143, 1171, 1200, 1229, 1258, 1288, 1319, 1350, 1382, 1414, 1447, 1481, 1515];
	enumType.size = 100;
	break;

case 8295:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 73, 77, 80, 84, 87, 91, 94, 98, 102, 106, 110, 114, 118, 122, 127, 131, 136, 141, 145, 150, 155, 160, 165, 171, 177, 182, 188, 194, 200, 206, 213, 219, 226, 233, 240, 247, 255, 262, 270, 278, 286, 294, 303, 312, 321, 330, 339, 349, 359, 369, 379, 389, 400, 411, 422, 434, 445, 457, 469, 482, 495, 508, 521, 534, 548, 562, 577, 591, 606, 622, 637, 653, 669, 686, 702, 720, 737, 755, 773, 791, 810, 829, 848, 868, 888, 909];
	enumType.size = 100;
	break;

case 8296:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 49, 51, 53, 56, 58, 60, 63, 65, 68, 70, 73, 76, 79, 81, 84, 87, 90, 94, 97, 100, 103, 107, 110, 114, 118, 121, 125, 129, 133, 137, 142, 146, 151, 155, 160, 165, 170, 175, 180, 185, 191, 196, 202, 208, 214, 220, 226, 232, 239, 246, 252, 259, 267, 274, 281, 289, 297, 305, 313, 321, 330, 338, 347, 356, 365, 375, 384, 394, 404, 414, 425, 435, 446, 457, 468, 480, 491, 503, 515, 527, 540, 553, 565, 579, 592, 606];
	enumType.size = 100;
	break;

case 8298:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30417, 30427, null, null, 30419, null, null, 30421, null, 30423, 30425];
	enumType.size = 6;
	break;

case 8299:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30433, 30445, null, null, 30437, null, null, 30439, null, 30441, 30443];
	enumType.size = 6;
	break;

case 8300:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30433, 30445, null, null, 30437, null, null, 30439, null, 30441, 30443];
	enumType.size = 6;
	break;

case 8301:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30431, 30445, null, null, 30437, null, null, 30439, null, 30441, 30443];
	enumType.size = 6;
	break;

case 8302:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30433];
	enumType.size = 1;
	break;

case 8303:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30431];
	enumType.size = 1;
	break;

case 8304:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [A cog. It looks a little worn, but should still work., A bottle of rum. It's not the best stuff, but they won't notice., A sturdy looking rope, not frayed at all., A hammer. It's hit quite a few nails on the head., A marlinspike. Great for untangling knots., A fine oak plank., A lantern. Will probably need a new candle soon, but will do for now., A well crafted cutlass. I'm surprised someone has misplaced this., A hefty cannonball. Could do some serious damage to ships, or toes if you drop it., A simple saw, still sharp though., A bolt of cloth, similar to sail material., A length of chain. Great for jobs that rope can't handle., A good rod. It's not super or anything.];
	enumType.size = 13;
	break;

case 8305:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Some of our loading equipment has had a part stolen, we need to find a spare part for the turning mechanism., The sailors love their drink. Surula needs restocking of the usual stuff., The lines on the ship are always getting damaged. Get some fresh lines so the they can secure the cargo., One of the repairmen dropped a tool into the sea while working. All I know is that he was attempting to nail up a sign., The sailors have got themselves in a pickle - they've knotted all the rope into a big mess. Find them a tool to help them out., Someone in the dry dock underestimated how much wood they would need for a job. I think we have some extra in here., Some of the crews have reported that they need more light on deck during night watch., Some sailors feel they need to be better armed. We have some spare weapons in here., Ammo for the ship weapons is running low. I'm sure I saw some being sent up here., The dry dock workers need some extra tools to correct the length of some misordered planks., We need to patch a hole in a sail. Find something suitable., We've received a new anchor, but nothing to attach it to the ship. The inventory for the warehouse said it was sent here., Food supplies on the voyages can be extended by letting the sailors catch their own meals.];
	enumType.size = 13;
	break;

case 8306:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 8309, 8312, 8315, 8318, 8321, 8324, 8327, 9651];
	enumType.size = 8;
	break;

case 8307:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 8310, 8313, 8316, 8319, 8322, 8325, 8328, 9650];
	enumType.size = 8;
	break;

case 8308:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 8311, 8314, 8317, 8320, 8323, 8326, 8329];
	enumType.size = 7;
	break;

case 8309:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 608, 617, 626, 647, 668, 689, 473, 567];
	enumType.size = 8;
	break;

case 8310:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 609, 618, 627, 648, 669, 690, 474, 568];
	enumType.size = 8;
	break;

case 8311:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 610, 619, 628, 649, 670, 691, 475, 569];
	enumType.size = 8;
	break;

case 8312:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 611, 620, 629, 650, 671, 692, 479, 573];
	enumType.size = 8;
	break;

case 8313:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 612, 621, 630, 651, 672, 693, 480, 574];
	enumType.size = 8;
	break;

case 8314:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 613, 622, 631, 652, 673, 694, 481, 575];
	enumType.size = 8;
	break;

case 8315:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 638, 659, 680, 701, 503, 597];
	enumType.size = 6;
	break;

case 8316:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 639, 660, 681, 702, 504, 598];
	enumType.size = 6;
	break;

case 8317:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 640, 661, 682, 703, 505, 599];
	enumType.size = 6;
	break;

case 8318:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 641, 662, 683, 704, 509, 603];
	enumType.size = 6;
	break;

case 8319:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 642, 663, 684, 705, 510, 604];
	enumType.size = 6;
	break;

case 8320:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 643, 664, 685, 706, 511, 605];
	enumType.size = 6;
	break;

case 8321:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 632, 653, 674, 695, 488, 582];
	enumType.size = 6;
	break;

case 8322:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 633, 654, 675, 696, 489, 583];
	enumType.size = 6;
	break;

case 8323:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 634, 655, 676, 697, 490, 584];
	enumType.size = 6;
	break;

case 8324:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 635, 656, 677, 698, 494, 588];
	enumType.size = 6;
	break;

case 8325:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 636, 657, 678, 699, 495, 589];
	enumType.size = 6;
	break;

case 8326:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 637, 658, 679, 700, 496, 590];
	enumType.size = 6;
	break;

case 8327:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 614, 623, 644, 665, 686, 464, 558];
	enumType.size = 7;
	break;

case 8328:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 615, 624, 645, 666, 687, 465, 559];
	enumType.size = 7;
	break;

case 8329:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 616, 625, 646, 667, 688, 466, 560];
	enumType.size = 7;
	break;

case 8330:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30574, 30575];
	enumType.size = 2;
	break;

case 8331:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30568, 30576];
	enumType.size = 2;
	break;

case 8332:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30571, 30579];
	enumType.size = 2;
	break;

case 8344:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14677, 14699, 14710, 14683, 14686];
	enumType.size = 5;
	break;

case 8345:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14677, 14699, 14710, 14683, 14686];
	enumType.size = 5;
	break;

case 8346:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14677, 14699, 14710, 14683, 14686];
	enumType.size = 5;
	break;

case 8347:
	enumType.valueMap = {0=30597, 18=30602, 3=30603, 4=30598, 7=30599, 9=30601, 10=30600};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 7;
	break;

case 8348:
	enumType.valueMap = {0=30606, 18=30611, 3=30612, 4=30607, 7=30608, 9=30610, 10=30609};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 7;
	break;

case 8349:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30613];
	enumType.size = 1;
	break;

case 8350:
	enumType.valueMap = {3=30614};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8351:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [-1, 8353, 8352, -1, -1];
	enumType.size = 5;
	break;

case 8352:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Weapons, Armour, General Goods, Skills/Crafting];
	enumType.size = 4;
	break;

case 8353:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Minigames, D&Ds, Skill Tutors];
	enumType.size = 3;
	break;

case 8354:
	enumType.valueMap = {0=30617, 4=30618, 7=30619};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 3;
	break;

case 8355:
	enumType.valueMap = {0=30622, 4=30623, 7=30624};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 3;
	break;

case 8356:
	enumType.valueMap = {0=30627, 4=30628, 7=30629};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 3;
	break;

case 8357:
	enumType.valueMap = {5=30630};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8358:
	enumType.valueMap = {4=30635, 7=30632};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 8359:
	enumType.valueMap = {7=30633};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8360:
	enumType.valueMap = {7=30634};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8363:
	enumType.valueMap = {1=26477, 2=26478, 3=26482, 4=26486, 5=26490, 6=26487, 7=26488, 8=26489, 9=26491, 10=26481, 11=26483, 12=26484, 13=26485, 14=26480, 15=26479, 16=29099, 17=29100, 18=29101, 19=29102, 20=29103, 21=29104, 22=29105, 23=29106, 24=29110, 25=29107, 26=29108, 27=29109, 28=29111, 29=29112, 30=29114, 31=29115, 32=29116, 33=29117, 34=29118, 35=29119, 36=29120, 37=29121, 38=29122, 39=29123, 40=29124, 41=29125, 42=29126, 43=29127, 44=29128, 300=30470, 45=29129, 46=29130, 47=29132, 48=29134, 49=29135, 50=26492, 51=26493, 52=26494, 53=26495, 54=26496, 55=26497, 56=26498, 57=26499, 58=26500, 59=26501, 60=26502, 61=26503, 62=26504, 63=26505, 64=28422, 65=29136, 66=30436, 67=30437, 68=30438, 69=30439, 70=30440, 71=30441, 72=30442, 73=30443, 74=30444, 75=30445, 76=30446, 77=30447, 78=30448, 79=30449, 100=26506, 101=30450, 102=30451, 200=30452, 201=30453, 202=30454, 203=30455, 204=30456, 205=30457, 206=30458, 207=30459, 208=30460, 209=30461, 210=30462, 211=30463, 212=30464, 213=30465, 214=30466, 215=30467, 216=30468, 217=30469};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 101;
	break;

case 8459:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Normal mode, Ironman mode, Hardcore ironman mode];
	enumType.size = 3;
	break;

case 8460:
	enumType.valueMap = {29776=9568, 29777=9569, 28546=8461, 28676=8462, 28677=8463, 29775=9567};
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = STRUCT;
	enumType.size = 6;
	break;

case 8461:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25699, 28964, 28965];
	enumType.size = 3;
	break;

case 8462:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28388, 28390, 28391];
	enumType.size = 3;
	break;

case 8463:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28543, 28544, 28545];
	enumType.size = 3;
	break;

case 8464:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [8471, 8465, 8857, 8861, 9344, 8474, null, 8473, null, 8470, 8468, null, null, null, 8467, null, null, null, 9345, 8472, 8469, 8466];
	enumType.size = 14;
	break;

case 8465:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19140, 11134, 11140, 11147, 11396, 14502, 5524, 19043, 19050, 19154, 19173, 19131, 19208, 21380, 21387, 21406, 21413, 23203, 23216, 23115, 23125, 24057, 25751, 25761, 25680, 25781, 24038, 27791, 28031, 28032, 28033, 28161, 28417, 28357, 29785, 30390, 30404, 30536, 31673, 31684, 31661, 31815, 11129, 13678, 13684, 13690, 13693, 19147, 24286, 24287, 29372, 29380, 29388, 29396, 32001];
	enumType.size = 55;
	break;

case 8466:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11177, 11178, 11179, 11180, 11181, 11182, 11183, 11184, 11185, 11186, 21317, 24294];
	enumType.size = 12;
	break;

case 8467:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [23074, 23075, 23076, 23077, 23078, 23079, 23080, 23081, 29764];
	enumType.size = 9;
	break;

case 8468:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21102, 11117, 11123, 11128, 11133, 11139, 11145, 11402, 7238, 7246, 12329, 13679, 13685, 13691, 13868, 11393, 14495, 14501, 3122, 3138, 16553, 16559, 16565, 17299, 17311, 17305, 17317, 18792, 19047, 19054, 14964, 19152, 19160, 19172, 19165, 19130, 19137, 19060, 19217, 19223, 19229, 19235, 19313, 19320, 19326, 19333, 19307, 19539, 19566, 19572, 19578, 19584, 21379, 21386, 21393, 21399, 21405, 21412, 21419, 21425, 22582, 22592, 23007, 23012, 23017, 23022, 23027, 23032, 23037, 23042, 23047, 23052, 23057, 23062, 23067, 23073, 23202, 23209, 23215, 23222, 19650, 22570, 11056, 24048, 24056, 24140, 24171, 24178, 24981, 25003, 25750, 25760, 25679, 25766, 25780, 25787, 26404, 26412, 19272, 26583, 26599, 26623, 26631, 27782, 27790, 27759, 27768, 28077, 28097, 28160, 28376, 28384, 24292, 28898, 28904, 29085, 29091, 29097, 29370, 29378, 29386, 29394, 29784, 29846, 29927, 30388, 30402, 30546, 30792, 30800, 30771, 30778, 30750, 30901, 31682, 31231, 31371, 31357, 31699, 31999, 32197];
	enumType.size = 141;
	break;

case 8469:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5692, 11113, 11119, 11124, 11130, 11135, 11141, 11398, 7231, 7239, 7247, 13674, 13680, 13686, 13863, 14490, 14496, 975, 3128, 16548, 16554, 16560, 17294, 17306, 17300, 17312, 17330, 17331, 383, 19048, 13697, 19148, 19155, 19167, 19161, 19125, 19132, 9891, 19196, 19218, 19224, 19230, 19308, 19315, 19321, 19328, 19195, 19534, 19561, 19567, 19573, 19579, 20301, 21381, 21388, 21394, 21400, 21407, 21414, 21420, 22576, 22586, 22571, 23008, 23013, 23018, 23023, 23028, 23033, 23038, 23043, 23048, 23053, 23058, 23063, 23068, 23197, 23204, 23210, 23217, 19614, 22565, 23111, 23121, 11051, 24043, 24051, 24125, 24166, 24173, 24191, 24982, 24986, 24990, 24994, 24998, 25004, 25008, 25745, 25752, 6975, 25681, 25767, 25782, 26399, 26407, 26394, 26460, 26464, 7271, 26510, 26595, 26616, 26624, 26632, 27775, 27786, 27753, 27762, 28070, 28078, 28084, 28090, 28094, 28156, 28171, 28379, 28625, 28631, 24288, 28893, 28899, 28945, 29086, 29092, 29365, 29373, 29381, 29389, 29760, 29779, 29842, 29808, 29813, 29818, 29823, 29828, 29834, 29923, 30147, 30398, 30542, 30783, 30787, 30796, 30767, 30774, 30897, 31677, 31225, 31367, 31353, 18708, 31821, 31995, 5689];
	enumType.size = 166;
	break;

case 8470:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21103, 11118, 11146, 7235, 7244, 12327, 13867, 11394, 14494, 14500, 3121, 3134, 16552, 16558, 16564, 17298, 17310, 17304, 17316, 18793, 19045, 19052, 19153, 19159, 19171, 19166, 19129, 19136, 19059, 19216, 19222, 19228, 19234, 19311, 19318, 19324, 19331, 19210, 19537, 19564, 19570, 19576, 19582, 21378, 21385, 21392, 21398, 21404, 21411, 21418, 21424, 22581, 22591, 23072, 23201, 23208, 23214, 23221, 19649, 22569, 11055, 24047, 24055, 24139, 24170, 24177, 24980, 25002, 25749, 25759, 25678, 25765, 25775, 25786, 26403, 26411, 27781, 27789, 27758, 27767, 28076, 28162, 28202, 28383, 28637, 24293, 28897, 28903, 28961, 29090, 29096, 29369, 29377, 29385, 29393, 29783, 29847, 29928, 30389, 30403, 30547, 30791, 30765, 30772, 30779, 30902, 31683, 31232, 31370, 31358, 31698, 32000, 32198];
	enumType.size = 113;
	break;

case 8471:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19139, 11114, 11120, 11125, 11136, 11142, 11149, 11150, 11151, 11399, 11403, 7233, 7240, 7249, 13675, 13681, 13687, 13692, 13694, 13864, 11390, 11397, 14491, 14497, 3110, 16549, 16555, 16561, 17295, 17307, 17301, 17313, 17332, 19042, 19049, 14961, 19149, 19156, 19168, 19162, 19126, 19133, 14509, 19213, 19219, 19225, 19231, 14289, 19309, 19316, 19322, 19329, 19417, 19418, 19419, 19421, 19420, 19422, 19197, 19535, 19562, 19568, 19574, 19580, 21375, 21382, 21389, 21395, 21401, 21408, 21415, 21421, 21064, 21065, 23004, 23009, 23014, 23019, 23024, 23029, 23034, 23039, 23044, 23049, 23054, 23059, 23064, 23069, 23198, 23205, 23211, 23218, 19644, 22566, 23112, 23122, 11052, 24044, 24052, 24136, 24042, 24167, 24174, 24192, 24983, 24987, 24991, 24995, 24999, 25005, 25009, 25697, 25698, 25746, 25755, 25026, 25682, 25772, 25783, 26400, 26408, 26457, 26461, 26465, 24039, 26415, 7272, 26511, 26596, 26619, 26627, 26635, 26661, 21324, 21325, 27778, 28071, 28079, 28085, 28091, 28157, 28172, 28380, 28632, 28633, 28634, 24289, 28894, 28900, 28946, 29087, 29093, 29366, 29374, 29382, 29390, 28923, 29761, 29780, 29789, 29809, 29814, 29819, 29824, 29829, 29835, 29843, 29924, 30385, 30399, 30543, 30738, 30784, 30788, 30797, 30768, 30775, 30898, 31679, 31226, 31227, 31228, 31354, 31663, 18709, 31812, 31813, 31814, 31996, 32194];
	enumType.size = 190;
	break;

case 8472:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28519, 28520, 28521, 28522, 28523, 28524, 28525, 28526, 28527, 28528, 28529, 28530, 28531, 28532, 28533, 28534, 28535, 28536, 28537, 28538, 32106, 32107, 32108, 32109, 32110, 32111, 32112, 32113, 32114, 32115];
	enumType.size = 30;
	break;

case 8473:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21097, 11116, 11122, 11127, 11132, 11138, 11144, 11401, 7237, 7245, 12328, 13677, 13683, 13689, 13866, 11392, 14493, 14499, 3120, 3132, 16551, 16557, 16563, 17297, 17309, 17303, 17315, 17334, 19046, 19053, 14963, 19151, 19158, 19170, 19164, 19128, 19135, 14511, 19215, 19221, 19227, 19233, 19312, 19319, 19325, 19332, 19306, 19538, 19565, 19571, 19577, 19583, 21377, 21384, 21391, 21397, 21403, 21410, 21417, 21423, 22580, 22590, 23006, 23011, 23016, 23021, 23026, 23031, 23036, 23041, 23046, 23051, 23056, 23061, 23066, 23071, 23200, 23207, 23213, 23220, 19648, 22568, 23114, 23124, 11054, 24046, 24054, 24138, 24169, 24176, 24194, 24985, 24989, 24993, 24997, 25001, 26470, 25007, 26471, 25011, 26472, 25748, 25758, 25677, 25684, 25774, 25785, 26402, 26410, 26459, 26463, 26467, 16590, 26582, 26598, 26622, 26630, 26638, 26640, 27780, 27788, 27757, 27766, 28073, 28074, 28081, 28082, 28087, 28088, 28093, 28096, 28159, 28201, 28382, 28627, 28630, 24291, 28896, 28902, 28960, 29089, 29095, 29368, 29376, 29384, 29392, 29763, 29782, 29845, 29811, 29816, 29821, 29826, 29831, 29837, 29926, 30387, 30401, 30545, 30786, 30790, 30799, 30770, 30777, 30900, 31681, 31230, 31369, 31356, 26382, 31823, 31998, 32196];
	enumType.size = 173;
	break;

case 8474:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [9924, 9921, 9914, 22596, 27772, 29153, 32094, 9918, 9919, 9904, 9917, 9916, 18795, 22594, 19646, 27770, 28255, 30781, 30836, 30838, 30840, 31809, 9912, 22584, 24059, 27761, 29833, 32201, 9923, 9922, 9910, 11062, 23117, 25058, 25060, 29151, 9920, 9905, 9907, 24050, 29149, 23120, 25062, 25064, 28257, 31811, 32097, 11424, 13871, 18796, 22598, 23118, 25065, 25066, 26468, 27774, 28075, 28083, 28089, 28635, 30793, 30782, 31664, 19138, 28253, 29347, 30795, 31574];
	enumType.size = 68;
	break;

case 8512:
	enumType.valueMap = {30833=0, 30834=2, 30835=4, 30836=6, 30837=8, 30838=10};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 6;
	break;

case 8514:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6336, 26387, 26388, 26389, 26507];
	enumType.size = 5;
	break;

case 8519:
	enumType.valueType = STRING;
	enumType.defaultstr = "Unknown";
	enumType.keyType = INT;
	enumType.valueArray = [null, Ranged, Magic, Constitution, Prayer, Crafting, Smithing, Cooking, Firemaking, Runecrafting, Herblore, Fletching, Farming, Construction, Summoning, Attack, Strength, Defence, Mining, Fishing, Woodcutting, Dungeoneering, Agility, Thieving, Slayer, Hunter, Divination, Extras, Cosmetic items, Useful items, Prismatic, Lucky, Super rare, Promotional, Promotional, Promotional, Promotional, Promotional, Promotional];
	enumType.size = 38;
	break;

case 8520:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 13196, 13205, 13199, 13197, 13203, 13208, 13212, 13200, 13206, 13210, 13204, 13213, 13209, 13216, 13193, 13194, 13195, 13198, 13211, 13207, 13215, 13217, 13201, 13214, 13202, 13218, 22153, 22154, 22158, 22156, 22155, 22157, 22160, 22160, 22160, 22160, 22160, 22160];
	enumType.size = 38;
	break;

case 8521:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 21303;
	enumType.keyType = INT;
	enumType.valueArray = [21303, 21322, 21297, 21309, 21310];
	enumType.size = 5;
	break;

case 8547:
	enumType.valueMap = {554=1, 555=1, 556=1, 557=1, 558=1, 559=1, 560=16, 561=30, 562=7, 563=30, 9075=17, 564=18, 565=40, 566=30, 4694=6, 4695=6, 4696=6, 4697=6, 4698=6, 4699=6};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 20;
	break;

case 8548:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 1478;
	enumType.keyType = INT;
	enumType.valueArray = [null, 13193, 13194, 13196, 13205, 13195, 13199, 13197, 13217, 13210, 13201, 13203, 13206, 13198, 13208, 13211, 13212, 13200, 13207, 13204, 13214, 13213, 13209, 13202, 13216, 13215, 13218];
	enumType.size = 26;
	break;

case 8549:
	enumType.valueMap = {20452=11, 17992=12, 17993=15, 17994=21, 17995=27, 494=11, 495=12, 17809=13, 497=8, 17810=15, 17811=18, 17812=25, 17813=11, 17814=13, 17815=15, 21207=17, 20280=13, 21208=19, 21209=24, 20281=11, 20282=12, 18943=18};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = unknownScriptVarType4681;
	enumType.size = 22;
	break;

case 8552:
	enumType.valueMap = {18=30893};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8553:
	enumType.valueMap = {18=30895};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8554:
	enumType.valueMap = {18=30899};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8555:
	enumType.valueMap = {18=30897};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8556:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Boss, General, FFA Split, FFA, Lootshare, Coinshare, Competition Starts, Competition Ends];
	enumType.size = 8;
	break;

case 8557:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Agility, Attack, Constitution, Construction, Cooking, Crafting, Defence, Dungeoneering, Farming, Firemaking, Fishing, Fletching, Herblore, Hunter, Magic, Mining, Prayer, Ranged, Runecrafting, Slayer, Smithing, Strength, Summoning, Thieving, Woodcutting, Any skill, Divination, Competition, Total Skill Gain, Competition Starts, Competition Ends];
	enumType.size = 31;
	break;

case 8558:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Ardougne, Falador, Fremennik, Karamja, Lumbridge, Seers, Varrock, Desert, Morytania];
	enumType.size = 9;
	break;

case 8559:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Barbarian Assault, Barrows, Burgh de Rott Ramble, Castle Wars, Clan Wars, Duel Arena, Fist of Guthix, Mage Arena, Mobilising Armies, Temple Trekking, TzHaar Fight Cave, TzHaar Fight Pit, Beacon Network, Blast Furnace, Brimhaven Agility Arena, Fishing Trawler, Gnome Ball, Gnome Restaurant, Great Orb Project, Herblore Habitat, Impetuous Impulses, Mage Training Arena, Pyramid Plunder, Ranging Guild, Rogues' Den, Trouble Brewing, Vinesweeper, Shades of Mort'ton, Stealing Creation, Tai Bwo Wannai Cleanup, Burthorpe Games Room, Rat Pits, Rogue Trader, God Wars, Soul Wars, Pest Control, Dominion Tower, Conquest, Fight Cauldron, Fight Kiln, Runespan, Sorceress's Garden, Player-owned Port, Heist, Cabbage Facepunch];
	enumType.size = 45;
	break;

case 8584:
	enumType.valueMap = {20452=12, 17992=25, 17993=23, 17994=26, 17995=31, 494=10, 495=12, 17809=36, 497=15, 17810=28, 17811=28, 17812=41, 17813=12, 17814=21, 17815=26, 21207=23, 20280=22, 21208=23, 21209=26, 20281=12, 20282=0, 18943=28};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = unknownScriptVarType4681;
	enumType.size = 22;
	break;

case 8585:
	enumType.valueMap = {20452=14, 17992=18, 17993=17, 17994=24, 17995=30, 494=12, 495=16, 17809=20, 497=20, 17810=19, 17811=24, 17812=32, 17813=14, 17814=15, 17815=22, 21207=21, 20280=15, 21208=22, 21209=28, 20281=14, 20282=16, 18943=24};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = unknownScriptVarType4681;
	enumType.size = 22;
	break;

case 8586:
	enumType.valueMap = {2560=7277, 2561=7278, 2562=7279, 2563=7280, 2564=7281, 2565=7282, 2566=7283, 2567=7284, 2568=7285, 2569=7286, 2570=7287, 2571=7288, 2572=7289, 2573=7290, 2574=7291, 2575=7292, 2576=7293, 2577=7294, 2578=7295, 2579=7259, 2580=7274, 2098=1727, 2613=9779, 2873=19207, 1369=283, 2926=19611, 2935=19598, 2173=1813, 2174=7275, 2175=1814, 2176=1815, 2177=1816, 1156=410, 1157=411, 1158=412, 1159=413, 1160=414, 1161=415, 1162=416, 2442=2722, 1163=418, 1164=419, 1165=420, 1166=421, 1167=422, 1168=423, 1169=424, 1170=425, 1171=426, 1172=427, 1173=428, 1174=429, 1175=430, 1176=431, 1177=432, 1178=433, 1179=434, 1180=435, 1181=436, 1182=437, 1183=438, 1184=439, 1185=440, 1186=441, 1187=442, 1188=443, 1189=444, 1190=445, 1191=446, 2728=26438, 1192=447, 1193=448, 1194=449, 1195=450, 1196=451, 1197=452, 1198=453, 1199=454, 1200=455, 1201=456, 1202=457, 1203=459, 1204=460, 949=417, 1205=458, 1206=461, 1207=463, 951=405, 1208=464, 952=406, 1209=465, 953=407, 954=408, 1210=466, 955=409, 1211=467, 1212=468, 1214=462, 1215=469, 1216=470, 1217=471, 1218=472, 1219=473, 1220=474, 1221=475, 1222=476, 1223=480, 1224=477, 1225=479, 1226=481, 1227=482, 1228=478, 1240=775, 3032=22752, 3033=22753, 2270=2944, 1260=483, 1270=485, 2559=7276};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = UNKNOWN1;
	enumType.size = 119;
	break;

case 8587:
	enumType.valueMap = {3=30949};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8588:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30952, null, null, 30956, 30953, null, null, 30954, null, null, 30955];
	enumType.size = 5;
	break;

case 8589:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30959, null, null, 30963, 30960, null, null, 30961, null, null, 30962];
	enumType.size = 5;
	break;

case 8590:
	enumType.valueMap = {0=30967, 10=30966, 4=30964, 7=30965};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 8591:
	enumType.valueMap = {0=30974, 10=30986, 4=30980, 7=30983};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 8592:
	enumType.valueMap = {0=30974, 10=30986, 4=30980, 7=30983};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 8593:
	enumType.valueMap = {0=30976, 10=30987, 4=30981, 7=30984};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 8594:
	enumType.valueMap = {0=30976, 10=30987, 4=30981, 7=30984};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 8595:
	enumType.valueMap = {0=30978, 4=30982, 7=30985};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 3;
	break;

case 8596:
	enumType.valueMap = {0=30978, 4=30982, 7=30985};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 3;
	break;

case 8597:
	enumType.valueMap = {0=30975, 10=30986, 4=30980, 7=30983};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 8598:
	enumType.valueMap = {0=30977, 10=30987, 4=30981, 7=30984};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 8599:
	enumType.valueMap = {0=30979, 4=30982, 7=30985};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 3;
	break;

case 8600:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30974];
	enumType.size = 1;
	break;

case 8601:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30976];
	enumType.size = 1;
	break;

case 8602:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30978];
	enumType.size = 1;
	break;

case 8603:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30975];
	enumType.size = 1;
	break;

case 8604:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30977];
	enumType.size = 1;
	break;

case 8605:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30979];
	enumType.size = 1;
	break;

case 8606:
	enumType.valueMap = {4=30988};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8607:
	enumType.valueMap = {7=30989};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8609:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31028];
	enumType.size = 1;
	break;

case 8610:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27586, 27587, 27589, 27588, 27590, null, 27593, 27592, 27591];
	enumType.size = 8;
	break;

case 8611:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27594, 27595, 27596, 27597, 27598, 27599, 27600, 27601, 27602, 28508, 27607, 27606, null, null, 27603, 27604, 27605, 28509, null, null, null, null, null, null, null, null, 28558, 28669];
	enumType.size = 18;
	break;

case 8612:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Costume pieces are awarded based on your score when completing a performance.<br><br>Each costume piece worn during your performance will boost the amount of points you receive for the first action in that performance, allowing you to unlock costume pieces that require higher scores.<br><br>Costumes do not affect the XP you earn., Pay attention to the audience nearest your performance. They will tell you what they want to see! Doing the requested action will gain you more points.<br><br>Be careful, though - performing the same action more than once will cause the audience to become bored, losing you points.<br><br>The audience's mood will not affect the XP you earn., In each performance, you can choose from a range of actions. For example, in the magic performance you can choose from a variety of objects to levitate, alchemise, teleport or blast.<br><br>You can attempt any of the actions, but you will have more success performing actions suitable to your level.<br><br>You will only receive XP for a successful action once per<br>level and performance, so it does not pay to repeat actions., Performing emotes during your agility, magic or ranged performances can add to your score.<br><br>To avoid the audience becoming bored, you should avoid re-using the same emote.<br><br>Emotes will not affect the XP you earn during the performance.];
	enumType.size = 4;
	break;

case 8615:
	enumType.valueType = STRING;
	enumType.defaultstr = "do";
	enumType.keyType = INT;
	enumType.valueArray = [null, Juggle, Do a];
	enumType.size = 2;
	break;

case 8616:
	enumType.valueType = STRING;
	enumType.defaultstr = "something";
	enumType.keyType = INT;
	enumType.valueArray = [null, Blast, Levitate, Teleport, Alchemise];
	enumType.size = 4;
	break;

case 8617:
	enumType.valueType = STRING;
	enumType.defaultstr = "Shoot:";
	enumType.keyType = INT;
	enumType.valueArray = [null, Bullseye:, Popinjay:];
	enumType.size = 2;
	break;

case 8621:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31039];
	enumType.size = 1;
	break;

case 8622:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31040];
	enumType.size = 1;
	break;

case 8651:
	enumType.valueMap = {49335440=Keyboard Shortcut : P, 41487160=Keyboard Shortcut : O, 34164555=Keyboard Shortcut : ALT + L, 51498548=Keyboard Shortcut : W, 43158805=Keyboard Shortcut : ALT + A, 52661131=Keyboard Shortcut : ALT + B, 54021233=Keyboard Shortcut : A, 48614732=Keyboard Shortcut : F, 304614689=Keyboard Shortcut : ALT + P, 50875619=Keyboard Shortcut : D, 50253234=Keyboard Shortcut : E, 47500761=Keyboard Shortcut : B, 41438231=Keyboard Shortcut : Y, 52661553=Keyboard Shortcut : V, 57626044=Keyboard Shortcut : ALT + C, 38768024=Keyboard Shortcut : ALT + E, 44437086=Keyboard Shortcut : ALT + F, 44060059=Keyboard Shortcut : S, 47156595=Keyboard Shortcut : T, 36932686=Keyboard Shortcut : ALT + T, 52972694=Keyboard Shortcut : L, 45239372=Keyboard Shortcut : K, 46386556=Keyboard Shortcut : C, 577407637=Keyboard Shortcut : SHIFT + A};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = TILE;
	enumType.size = 24;
	break;

case 8652:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Global Mute, Music Mute, Sound Effects Mute, Ambient Sounds Mute, Voice Mute];
	enumType.size = 5;
	break;

case 8657:
	enumType.valueType = STRING;
	enumType.defaultstr = "Preset";
	enumType.keyType = INT;
	enumType.valueArray = [null, Melee, Melee - Dual Wield, Melee - 2h, Melee - 1h + Shield, Ranged, Ranged - Dual Wield, Ranged - 2h, Ranged - 1h + Shield, Magic, Magic - Dual Wield, Magic - 2h, Magic - 1h + Shield, Araxxor, Barrows, Barrows - RotS, Corporeal Beast, Dagannoth Kings, Godwars - Graardor, Godwars - Kree'arra, Godwars - Nex, Godwars - Zilyana, Godwars - K'ril, Kalphite King, Kalphite Queen, King Black Dragon, Queen Black Dragon, Tormented Demons, Vorago, Agility, Construction, Cooking, Crafting, Divination, Dungeoneering, Farming, Firemaking, Fishing, Fletching, Herblore, Hunter, Mining, Prayer, Runecrafting, Slayer, Slayer - Melee, Slayer - Ranged, Slayer - Magic, Smithing, Summoning, Thieving, Woodcutting, Invention, Sailing, Minigame 1, Minigame 2, Minigame 3, Minigame 4, Minigame 5, Minigame 6, Minigame 7, Minigame 8, Minigame 9, Minigame 10, D&D 1, D&D 2, D&D 3, D&D 4, D&D 5, D&D 6, D&D 7, D&D 8, D&D 9, D&D 10, Wilderness 1, Wilderness 2, Wilderness 3, Clan 1, Clan 2, Clan 3, Armadyl, Bandos, Guthix, Saradomin, Seren, Sliske, Zamorak, Zaros, Easter, Halloween, Thanksgiving, Christmas, Party, Cosmetic 1, Cosmetic 2, Cosmetic 3, Bank Standing, Machinima, Questing, Riot, Roleplaying, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, Raiding - Durzag, Raiding - Yakamaru];
	enumType.size = 112;
	break;

case 8659:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 4, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 7, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 16, 27, 28, 29];
	enumType.size = 30;
	break;

case 8660:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27716, 27743, 27717, 27718, 27719, 27720, 27721, 27742, 27722, 27723, 27724, 27725, 27726, 27727, 27728, 27729, 27730, 27731, 27732, 27733, 27734, 27735, 27736, 27737, 27738, 27739, 27740, 27741, 27744, 27830];
	enumType.size = 30;
	break;

case 8661:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 2, 3, 4, 5];
	enumType.size = 6;
	break;

case 8662:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Citadel, Admin, Events, Avatar, Join/Leave, Settings];
	enumType.size = 6;
	break;

case 8663:
	enumType.valueType = STRING;
	enumType.defaultstr = "Empty plot";
	enumType.keyType = INT;
	enumType.valueArray = [null, Woodcutter, Stone mine, Furnace, Metal ore mine, Metal bar furnace, Precious ore mine, Precious bar furnace, Loom, Barbecue, Obelisk];
	enumType.size = 10;
	break;

case 8664:
	enumType.valueType = STRING;
	enumType.defaultstr = "something";
	enumType.keyType = INT;
	enumType.valueArray = [null, a bank preset, an action bar layout];
	enumType.size = 2;
	break;

case 8665:
	enumType.valueType = STRING;
	enumType.defaultstr = "preset";
	enumType.keyType = INT;
	enumType.valueArray = [null, bank preset, action bar layout];
	enumType.size = 2;
	break;

case 8666:
	enumType.valueMap = {9=31113, 10=31114, 4=31111, 7=31112};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 8667:
	enumType.valueMap = {5=31116, 3=31115};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 8668:
	enumType.valueMap = {9=31120, 10=31121, 4=31118, 7=31119};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 8669:
	enumType.valueMap = {5=31123, 3=31122};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 8670:
	enumType.valueMap = {5=31125, 3=31124};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 8671:
	enumType.valueMap = {5=31127};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8672:
	enumType.valueMap = {3=31126};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8673:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31128, null, null, null, 31129, null, null, 31130, null, 31131, 31132];
	enumType.size = 5;
	break;

case 8674:
	enumType.valueMap = {3=31133};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8675:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 31139, null, null, 31135, null, null, 31136, null, 31137, 31138];
	enumType.size = 5;
	break;

case 8676:
	enumType.valueMap = {3=31140};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8677:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7261, 7262, 7263, 7264, 21305, 27793, 27794, 27795, 27796, 27797, 27841, 27842, 27843, 27844, 27845];
	enumType.size = 15;
	break;

case 8678:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 3, 9, 6, 15, 5, 8, 7, 4, 10, 11, 12, 13, 14];
	enumType.size = 15;
	break;

case 8679:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [68354267, 68354268, 68354266];
	enumType.size = 3;
	break;

case 8682:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 2, 3, 4, 5, 6, 7];
	enumType.size = 8;
	break;

case 8683:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [8, 9, 10, 11, 12, 13, 14];
	enumType.size = 7;
	break;

case 8684:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
	enumType.size = 17;
	break;

case 8685:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32, 33, 34, 35, 36, 37, 38, 39, 71];
	enumType.size = 9;
	break;

case 8686:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [40, 41, 42, 43, 44, 45, 46, 47, 48, 49];
	enumType.size = 10;
	break;

case 8687:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [50, 51, 52, 53, 54, 55, 56, 57];
	enumType.size = 8;
	break;

case 8688:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [58, 59, 60, 61, 62, 63];
	enumType.size = 6;
	break;

case 8689:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [64, 65, 66, 67, 68, 69, 70];
	enumType.size = 7;
	break;

case 8690:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 31182];
	enumType.size = 1;
	break;

case 8691:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 31183];
	enumType.size = 1;
	break;

case 8692:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 31184];
	enumType.size = 1;
	break;

case 8710:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31211, null, null, null, 31212, null, null, 31213, null, 31216, 31217];
	enumType.size = 5;
	break;

case 8711:
	enumType.valueMap = {5=31215};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8712:
	enumType.valueMap = {7=31214};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8713:
	enumType.valueMap = {0=31219, 4=31220, 7=31221};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 3;
	break;

case 8714:
	enumType.valueMap = {5=31223};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8715:
	enumType.valueMap = {7=31222};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8716:
	enumType.valueMap = {0=31225, 4=31226, 7=31227};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 3;
	break;

case 8717:
	enumType.valueMap = {5=31229};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8718:
	enumType.valueMap = {7=31228};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8719:
	enumType.valueMap = {0=31232, 4=31233, 7=31234};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 3;
	break;

case 8720:
	enumType.valueMap = {4=31237, 10=31239, 7=31238};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 3;
	break;

case 8721:
	enumType.valueMap = {3=31240};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8722:
	enumType.valueMap = {3=31241};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8723:
	enumType.valueMap = {3=31242};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8724:
	enumType.valueMap = {3=31243};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8726:
	enumType.valueMap = {103848145=52972694, 103848140=47500761, 103848148=47156595, 103848149=52661553};
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = TILE;
	enumType.size = 4;
	break;

case 8727:
	enumType.valueMap = {32=4, 33=5, 34=2, 3=0, 35=3, 24=1, 1002=6};
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.size = 7;
	break;

case 8732:
	enumType.valueType = STRING;
	enumType.defaultstr = "Comfy boots";
	enumType.keyType = INT;
	enumType.valueArray = [Carbatines, Loafers, Cowskin waders, Butterfly mukluks, Platypode boots, Mage boots, Warlock boots, Pegged shoes, Monks, Cuffed brogues, Tethered boots, Beastmaster boots, Steel-toed mukluks, Wolpertinger boots, Kebbit-skin pumps, Pantobles];
	enumType.size = 16;
	break;

case 8733:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 20058;
	enumType.keyType = INT;
	enumType.valueArray = [20071, 20066, 20059, 20065, 20058, 20072, 20064, 20069, 20070, 20063, 20062, 20061, 20067, 20073, 20068, 20060];
	enumType.size = 16;
	break;

case 8734:
	enumType.valueType = STRING;
	enumType.defaultstr = "Comfy boots";
	enumType.keyType = INT;
	enumType.valueArray = [Alpargatas, Loafers, Cowskin waders, Butterfly mukluks, Rimmed brogues, Mage boots, Witch boots, Pegged shoes, Monks, Cuffed brogues, Tethered boots, Beastmaster boots, Toecapped pumps, Wolpertinger boots, Broad pumps, Pantobles];
	enumType.size = 16;
	break;

case 8735:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 19902;
	enumType.keyType = INT;
	enumType.valueArray = [19918, 19914, 19912, 19915, 19902, 19907, 19910, 19903, 19911, 19913, 19916, 19908, 19906, 19905, 19904, 19909];
	enumType.size = 16;
	break;

case 8736:
	enumType.valueType = STRING;
	enumType.defaultstr = "Casual";
	enumType.keyType = INT;
	enumType.valueArray = [Workman's halfcoat, Cook's overalls, Waxed tunic, Nettle-weave jacket, Hunter's bandolier, Archmage smock, Warlock doublet, Meshed crew neck, Missionary tunic, Longstride top, Ranger gear, Bearskin, Smither's kurta, Wolf-fur vest, Assassin gear, Tunic and studded belt];
	enumType.size = 16;
	break;

case 8737:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 3580;
	enumType.keyType = INT;
	enumType.valueArray = [19978, 19999, 19981, 19987, 19992, 20000, 20001, 19980, 20009, 19998, 19997, 19991, 19990, 19989, 19984, 19994];
	enumType.size = 16;
	break;

case 8738:
	enumType.valueType = STRING;
	enumType.defaultstr = "Casual";
	enumType.keyType = INT;
	enumType.valueArray = [Labourer's apron, Chef's bloomers, Wading shorts, Herbalist's robe, Huntsman's shorts, Pleated mage robe, Warlock split coat, Mining breeches, Ceremonial robe, Cut-off pantaloons, Rumpled breeches, Slayer steel caps, Smith's breeches, Summoner buckskins, Thief's overkilt, Plate-shin longshorts];
	enumType.size = 16;
	break;

case 8739:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 3660;
	enumType.keyType = INT;
	enumType.valueArray = [20018, 20039, 20021, 20027, 20032, 20040, 20041, 20020, 20049, 20038, 20037, 20031, 20030, 20029, 20024, 20034];
	enumType.size = 16;
	break;

case 8740:
	enumType.valueType = STRING;
	enumType.defaultstr = "Casual";
	enumType.keyType = INT;
	enumType.valueArray = [Builder's bodice, Chef's skivvies, Fishing waxskin, Herbalist's gansey, Kebbitskin cowl, Mage's choli, Witch's shawl, Mining overalls, Reinforced tunic, Marion tunic, Ropesleeve chemise, Beastmaster gear, Smithee's waistplate, Druidic smock, Stealthy gear, Rugged tunic];
	enumType.size = 16;
	break;

case 8741:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 3516;
	enumType.keyType = INT;
	enumType.valueArray = [19822, 19843, 19825, 19831, 19836, 19844, 19845, 19824, 19853, 19842, 19841, 19835, 19834, 19833, 19828, 19838];
	enumType.size = 16;
	break;

case 8742:
	enumType.valueType = STRING;
	enumType.defaultstr = "Casual";
	enumType.keyType = INT;
	enumType.valueArray = [Labourer's apron, Chef's fustanella, Fishing piupiu, Herbalist's apron, Platypode leggings, Mage's divided skirt, Witch's full skirt, Mining longs horts, Ceremonial robe skirt, Archer's chaps, Tethered buckskins, Slaybelt, Smith's short apron, Wolf-fur sarong, Spiked leggings, Belted skirt];
	enumType.size = 16;
	break;

case 8743:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 3548;
	enumType.keyType = INT;
	enumType.valueArray = [19862, 19883, 19865, 19871, 19876, 19884, 19885, 19864, 19893, 19882, 19881, 19875, 19874, 19873, 19868, 19878];
	enumType.size = 16;
	break;

case 8789:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 28222, 28223, 28873, 28874, 28225, 28226, 28227, 28224, 28228, 28229, 28230];
	enumType.size = 11;
	break;

case 8790:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 28232, 28233, 28234, 28235, 28236, 28237, 28238, 28239];
	enumType.size = 8;
	break;

case 8791:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31351];
	enumType.size = 1;
	break;

case 8792:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31352];
	enumType.size = 1;
	break;

case 8793:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31353];
	enumType.size = 1;
	break;

case 8794:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31354];
	enumType.size = 1;
	break;

case 8795:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31355];
	enumType.size = 1;
	break;

case 8796:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31356];
	enumType.size = 1;
	break;

case 8797:
	enumType.valueMap = {3=31357};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8798:
	enumType.valueMap = {3=31359};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8799:
	enumType.valueMap = {5=31361};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8800:
	enumType.valueMap = {5=31365, 3=31363};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 8801:
	enumType.valueMap = {5=31368, 3=31366};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 8802:
	enumType.valueMap = {3=31369};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8804:
	enumType.valueMap = {14936=23642, 14930=23217, 14931=23220, 14932=23218, 14933=23218, 14935=23221};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 23642;
	enumType.keyType = STRUCT;
	enumType.size = 6;
	break;

case 8805:
	enumType.valueMap = {14936=23641, 14937=23218};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 23641;
	enumType.keyType = STRUCT;
	enumType.size = 2;
	break;

case 8806:
	enumType.valueMap = {14936=23631, 14942=23219, 14939=23222};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 23631;
	enumType.keyType = STRUCT;
	enumType.size = 3;
	break;

case 8807:
	enumType.valueMap = {14930=23223, 14931=23226, 14933=23224, 14935=23227, 14936=23207, 14939=23228, 14942=23225};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 23207;
	enumType.keyType = STRUCT;
	enumType.size = 7;
	break;

case 8808:
	enumType.valueMap = {48103490=48103752, 48103488=48103750, 48103489=48103751, 48103454=48103717, 48103455=48103718, 48103452=48103715, 48103453=48103716, 48103450=48103713, 48103451=48103714, 48103448=48103711, 48103449=48103712, 48103446=48103709, 48103447=48103710, 48103444=48103707, 48103445=48103708, 48103442=48103705, 48103443=48103706, 48103440=48103703, 48103441=48103704, 48103438=48103701, 48103439=48103702, 48103436=48103699, 48103437=48103700, 48103434=48103697, 48103435=48103698, 48103432=48103695, 48103433=48103696, 48103430=48103693, 48103431=48103694, 48103428=48103691, 48103429=48103692, 48103426=48103689, 48103427=48103690, 48103424=48103688, 48103425=48103687, 48103486=48103748, 48103487=48103749, 48103484=48103746, 48103485=48103747, 48103482=48103744, 48103483=48103745, 48103480=48103742, 48103481=48103743, 48103478=48103740, 48103479=48103741, 48103476=48103738, 48103477=48103739, 48103474=48103736, 48103475=48103737, 48103472=48103734, 48103473=48103735, 48103470=48103732, 48103471=48103733, 48103468=48103730, 48103469=48103731, 48103466=48103728, 48103467=48103729, 48103464=48103726, 48103465=48103727, 48103462=48103724, 48103463=48103725, 48103460=48103722, 48103461=48103723, 48103458=48103720, 48103459=48103721, 48103456=48103551, 48103457=48103719};
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 67;
	break;

case 8809:
	enumType.valueMap = {48103532=A I P, 48103582=B L R, 48103583=B L S, 48103580=B L P, 48103581=B L Q, 48103578=B K R, 48103579=B K S, 48103576=B K P, 48103577=B K Q, 48103574=B J R, 48103575=B J S, 48103572=B J P, 48103573=B J Q, 48103570=B I R, 48103571=B I S, 48103568=B I P, 48103569=B I Q, 48103566=A L R, 48103567=A L S, 48103564=A L P, 48103565=A L Q, 48103562=A K R, 48103563=A K S, 48103560=A K P, 48103561=A K Q, 48103558=A J R, 48103559=A J S, 48103556=A J P, 48103557=A J Q, 48103554=A I R, 48103555=A I S, 48103553=A I Q, 48103614=D L R, 48103615=D L S, 48103612=D L P, 48103613=D L Q, 48103610=D K R, 48103611=D K S, 48103608=D K P, 48103609=D K Q, 48103606=D J R, 48103607=D J S, 48103604=D J P, 48103605=D J Q, 48103602=D I R, 48103603=D I S, 48103600=D I P, 48103601=D I Q, 48103598=C L R, 48103599=C L S, 48103596=C L P, 48103597=C L Q, 48103594=C K R, 48103595=C K S, 48103592=C K P, 48103593=C K Q, 48103590=C J R, 48103591=C J S, 48103588=C J P, 48103589=C J Q, 48103586=C I R, 48103587=C I S, 48103584=C I P, 48103585=C I Q};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INTERFACE;
	enumType.size = 64;
	break;

case 8810:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [48103532, 48103555, 48103554, 48103553, 48103564, 48103567, 48103566, 48103565, 48103560, 48103563, 48103562, 48103561, 48103556, 48103559, 48103558, 48103557, 48103600, 48103603, 48103602, 48103601, 48103612, 48103615, 48103614, 48103613, 48103608, 48103611, 48103610, 48103609, 48103604, 48103607, 48103606, 48103605, 48103584, 48103587, 48103586, 48103585, 48103596, 48103599, 48103598, 48103597, 48103592, 48103595, 48103594, 48103593, 48103588, 48103591, 48103590, 48103589, 48103568, 48103571, 48103570, 48103569, 48103580, 48103583, 48103582, 48103581, 48103576, 48103579, 48103578, 48103577, 48103572, 48103575, 48103574, 48103573, 48103616, 48103617, 48103618];
	enumType.size = 67;
	break;

case 8811:
	enumType.valueMap = {48103618=48103686, 48103616=48103684, 48103617=48103685, 48103532=48103622, 48103582=48103651, 48103583=48103652, 48103580=48103649, 48103581=48103650, 48103578=48103647, 48103579=48103648, 48103576=48103645, 48103577=48103646, 48103574=48103643, 48103575=48103644, 48103572=48103641, 48103573=48103642, 48103570=48103639, 48103571=48103640, 48103568=48103637, 48103569=48103638, 48103566=48103635, 48103567=48103636, 48103564=48103633, 48103565=48103634, 48103562=48103631, 48103563=48103632, 48103560=48103629, 48103561=48103630, 48103558=48103627, 48103559=48103628, 48103556=48103625, 48103557=48103626, 48103554=48103623, 48103555=48103624, 48103553=48103621, 48103614=48103682, 48103615=48103683, 48103612=48103680, 48103613=48103681, 48103610=48103678, 48103611=48103679, 48103608=48103676, 48103609=48103677, 48103606=48103674, 48103607=48103675, 48103604=48103672, 48103605=48103673, 48103602=48103670, 48103603=48103671, 48103600=48103668, 48103601=48103669, 48103598=48103666, 48103599=48103667, 48103596=48103664, 48103597=48103665, 48103594=48103662, 48103595=48103663, 48103592=48103660, 48103593=48103661, 48103590=48103658, 48103591=48103659, 48103588=48103656, 48103589=48103657, 48103586=48103654, 48103587=48103655, 48103584=48103620, 48103585=48103653};
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 67;
	break;

case 8819:
	enumType.valueMap = {61604141=61604143, 61604271=61604273, 61604521=61604523, 61604011=61604013, 61604261=61604263, 61604391=61604393, 61604001=61604002, 61604131=61604133, 61604541=61604543, 61604031=61604033, 61604281=61604283, 61604411=61604413, 61604021=61604023, 61604151=61604153, 61604401=61604403, 61604531=61604533, 61604111=61604113, 61604361=61604363, 61604491=61604493, 61604101=61604103, 61604231=61604233, 61604481=61604483, 61604381=61604383, 61604511=61604513, 61604121=61604123, 61604251=61604253, 61604501=61604503, 61603991=61603993, 61604241=61604243, 61604371=61604373, 61604461=61604463, 61604201=61604203, 61604331=61604333, 61604071=61604073, 61604321=61604323, 61604451=61604453, 61604221=61604223, 61604351=61604353, 61604091=61604093, 61604341=61604343, 61604471=61604473, 61604081=61604083, 61604211=61604213, 61604301=61604303, 61604431=61604433, 61604041=61604043, 61604171=61604173, 61604421=61604423, 61604551=61604553, 61604161=61604163, 61604291=61604293, 61604061=61604063, 61604191=61604193, 61604441=61604443, 61604571=61604573, 61604181=61604183, 61604311=61604313, 61603921=61603973, 61604561=61604563, 61604051=61604053};
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 60;
	break;

case 8820:
	enumType.valueMap = {61604141=61604145, 61604271=61604275, 61604521=61604525, 61604011=61604015, 61604261=61604265, 61604391=61604395, 61604001=61604004, 61604131=61604135, 61604541=61604545, 61604031=61604035, 61604281=61604285, 61604411=61604415, 61604021=61604025, 61604151=61604155, 61604401=61604405, 61604531=61604535, 61604111=61604115, 61604361=61604365, 61604491=61604495, 61604101=61604105, 61604231=61604235, 61604481=61604485, 61604381=61604385, 61604511=61604515, 61604121=61604125, 61604251=61604255, 61604501=61604505, 61603991=61603995, 61604241=61604245, 61604371=61604375, 61604461=61604465, 61604201=61604205, 61604331=61604335, 61604071=61604075, 61604321=61604325, 61604451=61604455, 61604221=61604225, 61604351=61604355, 61604091=61604095, 61604341=61604345, 61604471=61604475, 61604081=61604085, 61604211=61604215, 61604301=61604305, 61604431=61604435, 61604041=61604045, 61604171=61604175, 61604421=61604425, 61604551=61604555, 61604161=61604165, 61604291=61604295, 61604061=61604065, 61604191=61604195, 61604441=61604445, 61604571=61604575, 61604181=61604185, 61604311=61604315, 61603921=61603975, 61604561=61604565, 61604051=61604055};
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 60;
	break;

case 8821:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [61603973, 61603993, 61604002, 61604013, 61604023, 61604033, 61604043, 61604053, 61604063, 61604073, 61604083, 61604093, 61604103, 61604113, 61604123, 61604133, 61604143, 61604153, 61604163, 61604173, 61604183, 61604193, 61604203, 61604213, 61604223, 61604233, 61604243, 61604253, 61604263, 61604273, 61604283, 61604293, 61604303, 61604313, 61604323, 61604333, 61604343, 61604353, 61604363, 61604373, 61604383, 61604393, 61604403, 61604413, 61604423, 61604433, 61604443, 61604453, 61604463, 61604473, 61604483, 61604493, 61604503, 61604513, 61604523, 61604533, 61604543, 61604553, 61604563, 61604573];
	enumType.size = 60;
	break;

case 8822:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [61603975, 61603995, 61604004, 61604015, 61604025, 61604035, 61604045, 61604055, 61604065, 61604075, 61604085, 61604095, 61604105, 61604115, 61604125, 61604135, 61604145, 61604155, 61604165, 61604175, 61604185, 61604195, 61604205, 61604215, 61604225, 61604235, 61604245, 61604255, 61604265, 61604275, 61604285, 61604295, 61604305, 61604315, 61604325, 61604335, 61604345, 61604355, 61604365, 61604375, 61604385, 61604395, 61604405, 61604415, 61604425, 61604435, 61604445, 61604455, 61604465, 61604475, 61604485, 61604495, 61604505, 61604515, 61604525, 61604535, 61604545, 61604555, 61604565, 61604575];
	enumType.size = 60;
	break;

case 8823:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [61603920, 61603990, 61604000, 61604010, 61604020, 61604030, 61604040, 61604050, 61604060, 61604070, 61604080, 61604090, 61604100, 61604110, 61604120, 61604130, 61604140, 61604150, 61604160, 61604170, 61604180, 61604190, 61604200, 61604210, 61604220, 61604230, 61604240, 61604250, 61604260, 61604270, 61604280, 61604290, 61604300, 61604310, 61604320, 61604330, 61604340, 61604350, 61604360, 61604370, 61604380, 61604390, 61604400, 61604410, 61604420, 61604430, 61604440, 61604450, 61604460, 61604470, 61604480, 61604490, 61604500, 61604510, 61604520, 61604530, 61604540, 61604550, 61604560, 61604570];
	enumType.size = 60;
	break;

case 8824:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [61603922, 61603992, 61604006, 61604012, 61604022, 61604032, 61604042, 61604052, 61604062, 61604072, 61604082, 61604092, 61604102, 61604112, 61604122, 61604132, 61604142, 61604152, 61604162, 61604172, 61604182, 61604192, 61604202, 61604212, 61604222, 61604232, 61604242, 61604252, 61604262, 61604272, 61604282, 61604292, 61604302, 61604312, 61604322, 61604332, 61604342, 61604352, 61604362, 61604372, 61604382, 61604392, 61604402, 61604412, 61604422, 61604432, 61604442, 61604452, 61604462, 61604472, 61604482, 61604492, 61604502, 61604512, 61604522, 61604532, 61604542, 61604552, 61604562, 61604572];
	enumType.size = 60;
	break;

case 8826:
	enumType.valueMap = {3=31519};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8827:
	enumType.valueMap = {3=31520};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 8839:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [75038720, 75038733, 75038735, 75038737, 75038739, 75038741, 75038743, 75038745, 75038747, 75038749];
	enumType.size = 10;
	break;

case 8840:
	enumType.valueMap = {0=31536, 18=31543, 3=31541, 4=31537, 7=31538, 9=31540, 10=31539};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 7;
	break;

case 8841:
	enumType.valueMap = {0=31546, 18=31551, 3=31552, 4=31547, 7=31548, 9=31549, 10=31550};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 7;
	break;

case 8843:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31563, 31562, 31559, 31561, 31565, 31560, 31566, 31564];
	enumType.size = 8;
	break;

case 8844:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31568, 31570, 31569, 31571, 31572, 31567, 31573, 31574];
	enumType.size = 8;
	break;

case 8846:
	enumType.valueMap = {29696=1, 29697=1, 29698=1, 29699=1, 24579=1, 29700=1, 29701=1, 29702=1, 29703=1, 29704=1, 29705=1, 29706=1, 29707=1, 29708=1, 1037=1, 29709=1, 15374=1, 29710=1, 29711=1, 29712=1, 29713=1, 29714=1, 29715=1, 29716=1, 29717=1, 29718=1, 29719=1, 29720=1, 29721=1, 29722=1, 29723=1, 29724=1, 29725=1, 29726=1, 29727=1, 29728=1, 15422=1, 15423=1, 15425=1, 15426=1, 23661=1, 23664=1, 23665=1, 23666=1, 23667=1, 23668=1, 23669=1, 23670=1, 23671=1, 30839=1, 23672=1, 30840=1, 23673=1, 30841=1, 23675=1, 23676=1, 23677=1, 33917=1, 23678=1, 33918=1, 30847=1, 33919=1, 33920=1, 24713=1, 24714=1, 24715=1, 24716=1, 24717=1, 24718=1, 24719=1, 24720=1, 24721=1, 24722=1, 24723=1, 24724=1, 24725=1, 24726=1, 24727=1, 24728=1, 24729=1, 24730=1, 24731=1, 24732=1, 24733=1, 29853=1, 24734=1, 30878=1, 24735=1, 24736=1, 30880=1, 24737=1, 24738=1, 30882=1, 24739=1, 24740=1, 30884=1, 24741=1, 24742=1, 24743=1, 24744=1, 24745=1, 29865=1, 24746=1, 29866=1, 24747=1, 29867=1, 24748=1, 29868=1, 24749=1, 29869=1, 24750=1, 24751=1, 24752=1, 24753=1, 24754=1, 24755=1, 24756=1, 24757=1, 24758=1, 24759=1, 24760=1, 24761=1, 24762=1, 14537=1, 28898=1, 28900=1, 28902=1, 29928=1, 29929=1, 18667=1, 20727=1, 20728=1, 19705=1, 19706=1, 19707=1, 19708=1, 29952=1, 29954=1, 14599=1, 14600=1, 14601=1, 14602=1, 23818=1, 10507=1, 14603=1, 10508=1, 14604=1, 14605=1, 24848=1, 24849=1, 29972=1, 29973=1, 15673=1, 28995=1, 28996=1, 28997=1, 28998=1, 28999=1, 29000=1, 24924=1, 24925=1, 24926=1, 24927=1, 24928=1, 24929=1, 32097=1, 24930=1, 24931=1, 32099=1, 12645=1, 32101=1, 32102=1, 32103=1, 32104=1, 32105=1, 32106=1, 32107=1, 32108=1, 32109=1, 32110=1, 32111=1, 28016=1, 32112=1, 28017=1, 28018=1, 28019=1, 28020=1, 28021=1, 28022=1, 28023=1, 19832=1, 28024=1, 28025=1, 28026=1, 28027=1, 28028=1, 14728=1, 1419=1, 24971=1, 24973=1, 29108=1, 29110=1, 22966=1, 29112=1, 22968=1, 29114=1, 29116=1, 22973=1, 29118=1, 28095=1, 29120=1, 20929=1, 29122=1, 31170=1, 28099=1, 31171=1, 29124=1, 31173=1, 29126=1, 31174=1, 28103=1, 31175=1, 31176=1, 22985=1, 31177=1, 31178=1, 31179=1, 31180=1, 31181=1, 27089=1, 4566=1, 25055=1, 31199=1, 31200=1, 31201=1, 28142=1, 28145=1, 23028=1, 23029=1, 28165=1, 28166=1, 28167=1, 28168=1, 28169=1, 28170=1, 28171=1, 27148=1, 28172=1, 11789=1, 27149=1, 28173=1, 27150=1, 28174=1, 27151=1, 27152=1, 28185=1, 6722=1, 26192=1, 24146=1, 24149=1, 24150=1, 25180=1, 25181=1, 25182=1, 25183=1, 25184=1, 25185=1, 25186=1, 25187=1, 25188=1, 25189=1, 25190=1, 25191=1, 25192=1, 25193=1, 25194=1, 25195=1, 25196=1, 20077=1, 25197=1, 20078=1, 25198=1, 25199=1, 31343=1, 31344=1, 31345=1, 31346=1, 20083=1, 31347=1, 31348=1, 25211=1, 20113=1, 30380=1, 11950=1, 30395=1, 30396=1, 9920=1, 9921=1, 9922=1, 9923=1, 9924=1, 9925=1, 6856=1, 6857=1, 6858=1, 6859=1, 6860=1, 6861=1, 6862=1, 6863=1, 6865=1, 20177=1, 6866=1, 6867=1, 29407=1, 29411=1, 29412=1, 29413=1, 24294=1, 27366=1, 27367=1, 24296=1, 27368=1, 24297=1, 24298=1, 25322=1, 24299=1, 27375=1, 27381=1, 7927=1, 14076=1, 14077=1, 24317=1, 14078=1, 14079=1, 14080=1, 14081=1, 24324=1, 24325=1, 24326=1, 24327=1, 24328=1, 24329=1, 24330=1, 25354=1, 11019=1, 24331=1, 11020=1, 24332=1, 25356=1, 11021=1, 24333=1, 25357=1, 11022=1, 25358=1, 24334=1, 25359=1, 25360=1, 25361=1, 25362=1, 25363=1, 25364=1, 25365=1, 25366=1, 25367=1, 25370=1, 25371=1, 22320=1, 22321=1, 22322=1, 22324=1, 22327=1, 22328=1, 24387=1, 25440=1, 24418=1, 25442=1, 24419=1, 25444=1, 25446=1, 25448=1, 25450=1, 29553=1, 24433=1, 29554=1, 24437=1, 24439=1, 24440=1, 24441=1, 26491=1, 26492=1, 25472=1, 25473=1, 25474=1, 25475=1, 22408=1, 22412=1, 21389=1, 21390=1, 21391=1, 21392=1, 26517=1, 26518=1, 24473=1, 24474=1, 22443=1, 28593=1, 28594=1, 28595=1, 28596=1, 27586=1, 27587=1, 27588=1, 27589=1, 29638=1, 27590=1, 29639=1, 27591=1, 29640=1, 29641=1, 29642=1, 29643=1, 29644=1, 27598=1, 27599=1, 27600=1, 27616=1, 24547=1, 24548=1, 24549=1, 24550=1, 24551=1, 24552=1, 24553=1, 24554=1, 27626=1, 24555=1, 27627=1, 24556=1, 27628=1, 24557=1, 29677=1, 27629=1, 24558=1, 29678=1, 27630=1, 4079=1, 24559=1, 29679=1, 27631=1, 24560=1, 29680=1, 27632=1, 24561=1, 29681=1, 27633=1, 33777=1, 24562=1, 29682=1, 27634=1, 24563=1, 29683=1, 27635=1, 24564=1, 29684=1, 29685=1, 29686=1, 29687=1, 15352=1, 29688=1, 15353=1, 29689=1, 29690=1, 29691=1, 29692=1, 29693=1, 29694=1, 29695=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 479;
	break;

case 8847:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31591, 31576, 31581, 31586];
	enumType.size = 4;
	break;

case 8854:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 31603];
	enumType.size = 1;
	break;

case 8855:
	enumType.valueType = STRING;
	enumType.defaultstr = "Dismantle";
	enumType.keyType = INT;
	enumType.valueArray = [Dismantle, Research];
	enumType.size = 2;
	break;

case 8857:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21095, 7250, 11395, 28636, 28905, 30405];
	enumType.size = 6;
	break;

case 8861:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11428, 12331, 9913, 22595, 27771, 29152, 32093, 11148, 11152, 13869, 14503, 9915, 18794, 22593, 19645, 24040, 27769, 28254, 30780, 30835, 30837, 30839, 31808, 9911, 22583, 24058, 26509, 26594, 27760, 29832, 29838, 31665, 32200, 11426, 11419, 22597, 6334, 24172, 7270, 27773, 28099, 28098, 28100, 28101, 29778, 29919, 30794, 31674, 31685, 32002, 11404, 11427, 12330, 26416, 26406, 29822, 30391, 31602, 31603, 31604, 31605, 32095, 11425, 9909, 11061, 23116, 25057, 25059, 29150, 11422, 11423, 9908, 31807, 11154, 3123, 20338, 20339, 24180, 27783, 28251, 28386, 29812, 29920, 30392, 31675, 31686, 32098, 11421, 25055, 25056, 28252, 11420, 5544, 19423, 20342, 20343, 27792, 28378, 29921, 11153, 13870, 9906, 24049, 28258, 29148, 29827, 31676, 31687, 19540, 20340, 20341, 24041, 26414, 28266, 28360, 29848, 29765, 29817, 30751, 32199, 23119, 25061, 25063, 28256, 30393, 31810, 32096];
	enumType.size = 127;
	break;

case 8867:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 31618];
	enumType.size = 1;
	break;

case 8888:
	enumType.valueType = STRUCT;
	enumType.defaultint = 28506;
	enumType.keyType = INT;
	enumType.valueArray = [28506, 28507];
	enumType.size = 2;
	break;

case 8889:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22500, 1283];
	enumType.size = 2;
	break;

case 8890:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22502, 1284];
	enumType.size = 2;
	break;

case 8891:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22506, 1285];
	enumType.size = 2;
	break;

case 8892:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22514, 1286];
	enumType.size = 2;
	break;

case 8893:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22515, 1287];
	enumType.size = 2;
	break;

case 8894:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22458, 1288];
	enumType.size = 2;
	break;

case 8895:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22471, 1289];
	enumType.size = 2;
	break;

case 8896:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22508, 1290];
	enumType.size = 2;
	break;

case 8897:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22566, 1291];
	enumType.size = 2;
	break;

case 8898:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22552, 1292];
	enumType.size = 2;
	break;

case 8899:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22548, 1293];
	enumType.size = 2;
	break;

case 8900:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22479, 1294];
	enumType.size = 2;
	break;

case 8901:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22467, 1295];
	enumType.size = 2;
	break;

case 8902:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22504, 1296];
	enumType.size = 2;
	break;

case 8903:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22517, 1297];
	enumType.size = 2;
	break;

case 8904:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22518, 1298];
	enumType.size = 2;
	break;

case 8905:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22503, 1299];
	enumType.size = 2;
	break;

case 8906:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22501, 1300];
	enumType.size = 2;
	break;

case 8907:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22505, 1301];
	enumType.size = 2;
	break;

case 8908:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22545, 1302];
	enumType.size = 2;
	break;

case 8909:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22522, 1303];
	enumType.size = 2;
	break;

case 8910:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22512, 1304];
	enumType.size = 2;
	break;

case 8911:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22510, 1305];
	enumType.size = 2;
	break;

case 8912:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22526, 1306];
	enumType.size = 2;
	break;

case 8913:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22537, 1307];
	enumType.size = 2;
	break;

case 8914:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22521, 1308];
	enumType.size = 2;
	break;

case 8915:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22564, 1309];
	enumType.size = 2;
	break;

case 8916:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22528, 1310];
	enumType.size = 2;
	break;

case 8917:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22546, 1311];
	enumType.size = 2;
	break;

case 8918:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22538, 1312];
	enumType.size = 2;
	break;

case 8919:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22531, 1313];
	enumType.size = 2;
	break;

case 8920:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22535, 1314];
	enumType.size = 2;
	break;

case 8921:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22507, 1315];
	enumType.size = 2;
	break;

case 8922:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22550, 1316];
	enumType.size = 2;
	break;

case 8923:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22565, 1317];
	enumType.size = 2;
	break;

case 8924:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22556, 1318];
	enumType.size = 2;
	break;

case 8925:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22530, 1319];
	enumType.size = 2;
	break;

case 8926:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22525, 1320];
	enumType.size = 2;
	break;

case 8927:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22470, 1321];
	enumType.size = 2;
	break;

case 8928:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22567, 1322];
	enumType.size = 2;
	break;

case 8929:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22551, 1323];
	enumType.size = 2;
	break;

case 8930:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22519, 1324];
	enumType.size = 2;
	break;

case 8931:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22553, 1325];
	enumType.size = 2;
	break;

case 8932:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22558, 1326];
	enumType.size = 2;
	break;

case 8933:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22513, 1327];
	enumType.size = 2;
	break;

case 8934:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22516, 1328];
	enumType.size = 2;
	break;

case 8935:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22511, 1329];
	enumType.size = 2;
	break;

case 8936:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22529, 1330];
	enumType.size = 2;
	break;

case 8937:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22534, 1331];
	enumType.size = 2;
	break;

case 8938:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22495, 1332];
	enumType.size = 2;
	break;

case 8939:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22533, 1333];
	enumType.size = 2;
	break;

case 8940:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22497, 1334];
	enumType.size = 2;
	break;

case 8941:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22539, 1335];
	enumType.size = 2;
	break;

case 8942:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22570, 1336];
	enumType.size = 2;
	break;

case 8943:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22562, 1337];
	enumType.size = 2;
	break;

case 8944:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22554, 1338];
	enumType.size = 2;
	break;

case 8945:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22463, 1339];
	enumType.size = 2;
	break;

case 8946:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22461, 1340];
	enumType.size = 2;
	break;

case 8947:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22524, 1341];
	enumType.size = 2;
	break;

case 8948:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22555, 1342];
	enumType.size = 2;
	break;

case 8949:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22536, 1343];
	enumType.size = 2;
	break;

case 8950:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22549, 1344];
	enumType.size = 2;
	break;

case 8951:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22486, 1346];
	enumType.size = 2;
	break;

case 8952:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22520, 1348];
	enumType.size = 2;
	break;

case 8953:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22544, 1350];
	enumType.size = 2;
	break;

case 8954:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22557, 1351];
	enumType.size = 2;
	break;

case 8955:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22462, 1353];
	enumType.size = 2;
	break;

case 8956:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22563, 1354];
	enumType.size = 2;
	break;

case 8957:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22465, 1355];
	enumType.size = 2;
	break;

case 8958:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22569, 1356];
	enumType.size = 2;
	break;

case 8959:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22473, 1357];
	enumType.size = 2;
	break;

case 8960:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22509, 1358];
	enumType.size = 2;
	break;

case 8961:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22572, 1359];
	enumType.size = 2;
	break;

case 8962:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22523, 1360];
	enumType.size = 2;
	break;

case 8963:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22459, 1361];
	enumType.size = 2;
	break;

case 8964:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22541, 1375];
	enumType.size = 2;
	break;

case 8965:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22573, 1376];
	enumType.size = 2;
	break;

case 8966:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22468, 1377];
	enumType.size = 2;
	break;

case 8967:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22561, 1463];
	enumType.size = 2;
	break;

case 8968:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22547, 1464];
	enumType.size = 2;
	break;

case 8969:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22540, 1778];
	enumType.size = 2;
	break;

case 8970:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22543, 1783];
	enumType.size = 2;
	break;

case 8971:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22581, 6540];
	enumType.size = 2;
	break;

case 8972:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22576, 6541];
	enumType.size = 2;
	break;

case 8973:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22466, 1784];
	enumType.size = 2;
	break;

case 8974:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22575, 6542];
	enumType.size = 2;
	break;

case 8975:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22580, 6543];
	enumType.size = 2;
	break;

case 8976:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22579, 6544];
	enumType.size = 2;
	break;

case 8977:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22532, 7911];
	enumType.size = 2;
	break;

case 8978:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22542, 6305];
	enumType.size = 2;
	break;

case 8979:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22571, 9386];
	enumType.size = 2;
	break;

case 8980:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22559, 1326];
	enumType.size = 2;
	break;

case 8981:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22479, 9600];
	enumType.size = 2;
	break;

case 8982:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22495, 9599];
	enumType.size = 2;
	break;

case 8983:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22483, 9598];
	enumType.size = 2;
	break;

case 8984:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22499, 9597];
	enumType.size = 2;
	break;

case 8985:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22492, 9596];
	enumType.size = 2;
	break;

case 8986:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22481, 9595];
	enumType.size = 2;
	break;

case 8987:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22490, 9594];
	enumType.size = 2;
	break;

case 8988:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22486, 9593];
	enumType.size = 2;
	break;

case 8989:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22484, 9592];
	enumType.size = 2;
	break;

case 8990:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22497, 9591];
	enumType.size = 2;
	break;

case 8991:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22488, 9590];
	enumType.size = 2;
	break;

case 8992:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22496, 9589];
	enumType.size = 2;
	break;

case 8993:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22493, 9588];
	enumType.size = 2;
	break;

case 8994:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22489, 9587];
	enumType.size = 2;
	break;

case 8995:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22487, 9586];
	enumType.size = 2;
	break;

case 8996:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22480, 9585];
	enumType.size = 2;
	break;

case 8997:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22482, 9584];
	enumType.size = 2;
	break;

case 8998:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22498, 9583];
	enumType.size = 2;
	break;

case 8999:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22494, 9582];
	enumType.size = 2;
	break;

case 9000:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22485, 9581];
	enumType.size = 2;
	break;

case 9001:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22460, 10141];
	enumType.size = 2;
	break;

case 9002:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22560, 16363];
	enumType.size = 2;
	break;

case 9003:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22475, 17193];
	enumType.size = 2;
	break;

case 9004:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22474, 17257];
	enumType.size = 2;
	break;

case 9005:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22574, 20341];
	enumType.size = 2;
	break;

case 9006:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22491, 20358];
	enumType.size = 2;
	break;

case 9007:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22469, 13268];
	enumType.size = 2;
	break;

case 9008:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Hero, Gear, Powers, Adventures, Community];
	enumType.size = 5;
	break;

case 9009:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 2, 3, 4];
	enumType.size = 5;
	break;

case 9010:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1002, 1003, 1004, 18, 1005, 1006, 1007, 2008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1000, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 2007, 1030, 1029, 1031, 1032];
	enumType.size = 29;
	break;

case 9011:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19, 20, 21, 22, 23, 7, 8, 24];
	enumType.size = 8;
	break;

case 9012:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Stamp];
	enumType.size = 1;
	break;

case 9013:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 31325, 31326, 31327, 31328, 31329, 31330, 31332, 31331, 31333];
	enumType.size = 9;
	break;

case 9014:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 9015];
	enumType.size = 1;
	break;

case 9015:
	enumType.valueMap = {28737=28708, 31745=31763, 28547=28593, 28548=28593, 21255=28510, 28743=28714, 31751=31763, 28551=28552, 28553=28560, 28937=28938, 28554=28560, 21259=28513, 28555=28560, 28619=28618, 28556=28567, 28620=28622, 28557=28567, 28749=28720, 31757=31763, 28621=28623, 28559=28560, 28755=28726, 31767=31774, 23001=28516, 21217=28515, 28577=28567, 21218=28514, 30498=30499, 31715=31763, 30756=30830, 31781=31787, 31721=31763, 29353=29360, 26540=28593, 28782=28515, 31727=31763, 28595=28580, 28596=28587, 31733=31763, 31739=31763};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = STRUCT;
	enumType.size = 40;
	break;

case 9016:
	enumType.valueMap = {18816=29698, 16660=28970, 16661=28971, 16662=29192, 16663=29193, 16664=29194, 16665=29195, 16666=29399, 16667=29685, 16668=29686, 16734=29688, 16735=29689, 21031=31334, 21032=31335, 21033=31336, 21034=31337, 21035=31338, 21419=32038, 21036=31339, 21422=32040, 21425=32039, 17780=29690, 21428=32041, 17781=29691, 17782=29692, 4664=29687, 17786=29693, 17787=29694, 17788=29695, 18814=29696, 18815=29697};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = NPC;
	enumType.size = 31;
	break;

case 9018:
	enumType.valueMap = {4=31698, 7=31699};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 9019:
	enumType.valueMap = {4=31702, 7=31703};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 9020:
	enumType.valueMap = {5=31709, 9=31711, 2=31710};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 3;
	break;

case 9021:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31706];
	enumType.size = 1;
	break;

case 9022:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31707];
	enumType.size = 1;
	break;

case 9023:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31708];
	enumType.size = 1;
	break;

case 9026:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [72, 73, 74, 75, 76, 77, 78, 79, 80, 81];
	enumType.size = 10;
	break;

case 9029:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 24975, 28641, 28642, 28643, 28644, 28645, 28646, 28647, 28648, 28649, 28650, 28651, 28652, 28653, 28654, 28655, 28656, 28657, 28658, 28659, 31987, 31988];
	enumType.size = 22;
	break;

case 9030:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Boss Info, Boss kills, Slayer Creature kills];
	enumType.size = 3;
	break;

case 9031:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24975, 28641, 28642, 31987, 28643, 28644, 28645, 28646, 28647, 28648, 28649, 28650, 28651, 28652, 28653, 28654, 28655, 28656, 28657, 28658, 28659, 31988];
	enumType.size = 22;
	break;

case 9032:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31718, 31719, 31720, 31722, 31723, 31724, 31737, 31753, 31752, 31750, 31748, 31749, 31751, 33835, 33870];
	enumType.size = 15;
	break;

case 9033:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30004, 4708, 4712, 4714, 4710, 25652, 25672, 21736, 21752, 21760, 21744, 4716, 4720, 4722, 4718, 4724, 4728, 4730, 4726, 4732, 4736, 4738, 4734, 4740, 25918, 25895, 4745, 4749, 4751, 4747, 4753, 4757, 4759, 4755];
	enumType.size = 34;
	break;

case 9034:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30014, 30022, 30018, 30030, 30027];
	enumType.size = 5;
	break;

case 9035:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13961, 13958, 13970, 13967, 7158, 13973, 13976, 13982, 13985, 13979, 13988, 13964, 13896, 13884, 13890, 13902, 13887, 13893, 13899, 13905, 13864, 13858, 13861, 13867, 13876, 13870, 13873, 13879, 13883, 14876, 14877, 14878, 14879, 14880, 14881, 33836];
	enumType.size = 36;
	break;

case 9036:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28767, 28770, 28761, 28764, 28755, 28758, 25031, 25034, 25028, 11706, 11710, 11712, 11714, 11730, 25037, 34855, 25040, 33833];
	enumType.size = 18;
	break;

case 9037:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13734, 13752, 13746, 13750, 13748, 13754, 33837];
	enumType.size = 7;
	break;

case 9038:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6731, 6737, 6735, 6733, 6562, 6739, 6724, 33850, 33851, 33852];
	enumType.size = 10;
	break;

case 9039:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30318, 30321, 30312, 30315, 30306, 30309, 25022, 11724, 11726, 25025, 11728, 11704, 11710, 11712, 11714, 25019, 25042, 33832];
	enumType.size = 18;
	break;

case 9040:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7158, 7418, 7416, 19769, 15134, 30779, 30778, 30772, 33838];
	enumType.size = 9;
	break;

case 9041:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [23659, 31611, 31610, 6571, 33839];
	enumType.size = 5;
	break;

case 9042:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [26587, 26591, 26595, 26599, 26579, 26583, 26577, 33840];
	enumType.size = 8;
	break;

case 9043:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3140, 7158, 7981, 33841];
	enumType.size = 4;
	break;

case 9044:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25318, 25316, 11286, 7980, 25311, 25312, 25314, 33842];
	enumType.size = 8;
	break;

case 9045:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30300, 30303, 30294, 30297, 30288, 30291, 11718, 11720, 11722, 25016, 25010, 11702, 11710, 11712, 11714, 25013, 25043, 33830];
	enumType.size = 18;
	break;

case 9046:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28785, 28788, 28779, 28782, 28773, 28776, 24992, 24995, 24998, 25007, 25004, 11708, 11710, 11712, 11714, 11716, 11736, 25001, 25041, 33831];
	enumType.size = 20;
	break;

case 9047:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31203, 28457, 28458, 28459, 28460, 28461, 28462, 28467, 33843, 33844, 33845, 33846, 33847, 33848];
	enumType.size = 14;
	break;

case 9048:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [20135, 20139, 20143, 24977, 24983, 20147, 20151, 20155, 24974, 24989, 20171, 20159, 20163, 20167, 24980, 24986, 25664, 25654, 25044, 33834];
	enumType.size = 20;
	break;

case 9049:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24336, 24365, 24372, 24368, 24369, 24370, 24371, 24340, 24342, 24344, 24346, 11286, 24352, 33849];
	enumType.size = 14;
	break;

case 9050:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6570];
	enumType.size = 1;
	break;

case 9051:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28617, 28621, 28626, 33716, 28627];
	enumType.size = 5;
	break;

case 9053:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31564, 29775, 28640, 28546, 28673, 28674, 28675, 28676, 28677];
	enumType.size = 9;
	break;

case 9054:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 2, 3, 5, 7, 9, 10, 12, 14, 16, 17, 19, 21, 22, 24, 26, 28, 29, 31, 33, 34, 36, 37, 39, 41, 42, 44, 45, 47, 48, 50, 52, 53, 54, 56, 57, 59, 60, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 87, 88, 89, 90, 91, 91, 92, 93, 93, 94, 95, 95, 96, 96, 97, 97, 97, 98, 98, 98, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 99, 99, 99, 99, 98, 98, 98, 97, 97, 97, 96, 96, 95, 95, 94, 93, 93, 92, 91, 91, 90, 89, 88, 87, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 75, 74, 73, 72, 71, 69, 68, 67, 66, 64, 63, 62, 60, 59, 57, 56, 54, 53, 52, 50, 48, 47, 45, 44, 42, 41, 39, 37, 36, 34, 33, 31, 29, 28, 26, 24, 22, 21, 19, 17, 16, 14, 12, 10, 9, 7, 5, 3, 2, 0, -2, -3, -5, -7, -9, -10, -12, -14, -16, -17, -19, -21, -22, -24, -26, -28, -29, -31, -33, -34, -36, -37, -39, -41, -42, -44, -45, -47, -48, -50, -52, -53, -54, -56, -57, -59, -60, -62, -63, -64, -66, -67, -68, -69, -71, -72, -73, -74, -75, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -87, -88, -89, -90, -91, -91, -92, -93, -93, -94, -95, -95, -96, -96, -97, -97, -97, -98, -98, -98, -99, -99, -99, -99, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -100, -99, -99, -99, -99, -98, -98, -98, -97, -97, -97, -96, -96, -95, -95, -94, -93, -93, -92, -91, -91, -90, -89, -88, -87, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -75, -74, -73, -72, -71, -69, -68, -67, -66, -64, -63, -62, -60, -59, -57, -56, -54, -53, -52, -50, -48, -47, -45, -44, -42, -41, -39, -37, -36, -34, -33, -31, -29, -28, -26, -24, -22, -21, -19, -17, -16, -14, -12, -10, -9, -7, -5, -3, -2];
	enumType.size = 360;
	break;

case 9056:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31721, 31725, 31729, 31733];
	enumType.size = 4;
	break;

case 9057:
	enumType.valueMap = {100=28781};
	enumType.valueType = STRUCT;
	enumType.defaultint = 21301;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9058:
	enumType.valueType = STRING;
	enumType.defaultstr = "N/A";
	enumType.keyType = INT;
	enumType.valueArray = [Safe Mode, OpenGL?, , DirectX?];
	enumType.size = 4;
	break;

case 9059:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [99156009, 99156010, 99156011, 99156012, 99156013, 99156014, 99156015, 99156016, 99156017, 99156018, 99156019, 99156020, 99156021, 99156022, 99156023, 99156024, 99156025, 99156026, 99156027, 99156028, 99156029, 99156030, 99156031, 99156032];
	enumType.size = 24;
	break;

case 9063:
	enumType.valueType = INT;
	enumType.defaultint = 65535;
	enumType.keyType = INT;
	enumType.valueArray = [16732758, null, 45055, 255, 65280, 10485663, 28416, 16748431, 16750623, 16740096, 16776960, 15663104, 15663279, 16732159, 11501567, 0, 16777215, 12566463, 8388607, 8388608, 3158064];
	enumType.size = 20;
	break;

case 9064:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Auto, 50%, 60%, 70%, 80%, 90%, 100%];
	enumType.size = 7;
	break;

case 9065:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Auto, 50%, 60%, 70%, 80%, 90%, 100%];
	enumType.size = 7;
	break;

case 9066:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Recommended, 1500, 2000, 2500, 3000, 3500];
	enumType.size = 6;
	break;

case 9067:
	enumType.valueType = STRING;
	enumType.keyType = INT;
	enumType.valueArray = [Recommended, Lowest, Low, Medium, High, Highest];
	enumType.size = 6;
	break;

case 9079:
	enumType.valueMap = {18=31823};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9080:
	enumType.valueMap = {18=31825};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9081:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 31827];
	enumType.size = 1;
	break;

case 9082:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 31829];
	enumType.size = 1;
	break;

case 9083:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31833, null, null, null, 31834, null, null, 31835, null, 31837, 31836];
	enumType.size = 5;
	break;

case 9107:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14687];
	enumType.size = 1;
	break;

case 9108:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14674];
	enumType.size = 1;
	break;

case 9124:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [9126, 9127, 9128, 9129, 9130, 9131, 9729, 10194];
	enumType.size = 8;
	break;

case 9125:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Skills, Minigames: PvP, Minigames: PvP (Safe), Minigames: Combat, Minigames: Non-Combat, Boss Fights, World Event, Raids];
	enumType.size = 8;
	break;

case 9126:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 36];
	enumType.size = 2;
	break;

case 9127:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32, 34];
	enumType.size = 2;
	break;

case 9128:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25, 26, 27, 29, 31, 35];
	enumType.size = 6;
	break;

case 9129:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [15, 18, 39];
	enumType.size = 3;
	break;

case 9130:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [16, 17, 19, 20, 21, 22, 23, 24, 28, 30, 33, 37, 40];
	enumType.size = 13;
	break;

case 9131:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 38];
	enumType.size = 15;
	break;

case 9132:
	enumType.valueType = STRING;
	enumType.defaultstr = "No Role";
	enumType.keyType = INT;
	enumType.valueArray = [No Role, Attacker, Healer, Defender, Collector];
	enumType.size = 5;
	break;

case 9133:
	enumType.valueType = STRING;
	enumType.defaultstr = "No Team";
	enumType.keyType = INT;
	enumType.valueArray = [No Team, Red Team, Yellow Team, Green Team, Blue Team];
	enumType.size = 5;
	break;

case 9134:
	enumType.valueType = STRING;
	enumType.defaultstr = "No Team";
	enumType.keyType = INT;
	enumType.valueArray = [No Team, Red Team, Blue Team];
	enumType.size = 3;
	break;

case 9135:
	enumType.valueType = STRING;
	enumType.defaultstr = "No Team";
	enumType.keyType = INT;
	enumType.valueArray = [No Team, Team 1, Team 2];
	enumType.size = 3;
	break;

case 9136:
	enumType.valueType = STRING;
	enumType.defaultstr = "No team";
	enumType.keyType = INT;
	enumType.valueArray = [No Team, Red Team, Blue Team];
	enumType.size = 3;
	break;

case 9137:
	enumType.valueType = STRING;
	enumType.defaultstr = "No Team";
	enumType.keyType = INT;
	enumType.valueArray = [No Team, Wizard Acantha, Wizard Vief];
	enumType.size = 3;
	break;

case 9138:
	enumType.valueType = STRING;
	enumType.defaultstr = "No team";
	enumType.keyType = INT;
	enumType.valueArray = [No Team, Zamorak, Saradomin];
	enumType.size = 3;
	break;

case 9139:
	enumType.valueType = STRING;
	enumType.defaultstr = "No Team";
	enumType.keyType = INT;
	enumType.valueArray = [No Team, Guards, Robbers];
	enumType.size = 3;
	break;

case 9140:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [103, 104, 105];
	enumType.size = 3;
	break;

case 9141:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [115, 116];
	enumType.size = 2;
	break;

case 9142:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4];
	enumType.size = 1;
	break;

case 9143:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4];
	enumType.size = 1;
	break;

case 9144:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4];
	enumType.size = 1;
	break;

case 9145:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4];
	enumType.size = 1;
	break;

case 9146:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	break;

case 9147:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	break;

case 9148:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4];
	enumType.size = 1;
	break;

case 9149:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [111];
	enumType.size = 1;
	break;

case 9150:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4];
	enumType.size = 1;
	break;

case 9151:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	break;

case 9152:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [114];
	enumType.size = 1;
	break;

case 9153:
	enumType.valueType = STRING;
	enumType.defaultstr = "30";
	enumType.keyType = INT;
	enumType.valueArray = [Any Level, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500];
	enumType.size = 26;
	break;

case 9154:
	enumType.valueType = STRING;
	enumType.defaultstr = "Any Theme";
	enumType.keyType = INT;
	enumType.valueArray = [Any Theme, Frozen, Abandoned, Furnished, Abandoned 2, Occult, Warped];
	enumType.size = 7;
	break;

case 9155:
	enumType.valueType = STRING;
	enumType.defaultstr = "Any Complexity";
	enumType.keyType = INT;
	enumType.valueArray = [Any Complexity, 1, 2, 3, 4, 5, 6];
	enumType.size = 7;
	break;

case 9156:
	enumType.valueType = STRING;
	enumType.defaultstr = "Any Size";
	enumType.keyType = INT;
	enumType.valueArray = [Any Size, 2, 3, 4, 5];
	enumType.size = 5;
	break;

case 9157:
	enumType.valueType = STRING;
	enumType.defaultstr = "Any Size";
	enumType.keyType = INT;
	enumType.valueArray = [Any Size, Small, Medium, Large];
	enumType.size = 4;
	break;

case 9158:
	enumType.valueType = STRING;
	enumType.defaultstr = "Any Level";
	enumType.keyType = INT;
	enumType.valueArray = [Any Level, 2, 3, 4, 5];
	enumType.size = 5;
	break;

case 9159:
	enumType.valueType = STRING;
	enumType.defaultstr = "1";
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	enumType.size = 10;
	break;

case 9160:
	enumType.valueType = STRING;
	enumType.defaultstr = "Any Lander";
	enumType.keyType = INT;
	enumType.valueArray = [Any Lander, Easy, Intermediate, Veteran];
	enumType.size = 4;
	break;

case 9161:
	enumType.valueType = STRING;
	enumType.defaultstr = "Conflict";
	enumType.keyType = INT;
	enumType.valueArray = [Conflict, Siege, Hoard, Rescue, Any Game Mode];
	enumType.size = 5;
	break;

case 9162:
	enumType.valueType = STRING;
	enumType.defaultstr = "Any Game";
	enumType.keyType = INT;
	enumType.valueArray = [Any Game, Draughts, Runelink, Runeversi, Runesquares];
	enumType.size = 5;
	break;

case 9163:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4067, 28030];
	enumType.size = 2;
	break;

case 9164:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24444];
	enumType.size = 1;
	break;

case 9165:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6534];
	enumType.size = 1;
	break;

case 9166:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [12852];
	enumType.size = 1;
	break;

case 9167:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31188, 31187, 31186];
	enumType.size = 3;
	break;

case 9168:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [15009, 15010, 15011, 15012, 15013, 15014, 15017, 15015, 15016, 15220, 15019, 15018, 15020, 15001, 15002, 15003, 15004, 15005, 15006, 15007, 15008, 15025, 15026, 15021, 15023, 15024, 15022, 15031, 15032, 15027, 15029, 15030, 15028, 15037, 15038, 15033, 15035, 15036, 15034, 15043, 15044, 15039, 15041, 15042, 15040];
	enumType.size = 45;
	break;

case 9169:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [10564, 10548, 10551, 10553, 10547, 10550, 10555, 10552, 10549, 15438, 15485, 31922, 31924, 31923, 31925];
	enumType.size = 15;
	break;

case 9170:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11664, 11663, 11665, 8842, 8841, 8840, 8839, 12164, 12165, 12166, 12167];
	enumType.size = 11;
	break;

case 9171:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13629, 13626, 13627, 13624, 13621, 13622, 13619, 13616, 13617, 13614, 21517, 21516, 21518, 21519, 13599, 13611, 13610, 13604, 13606, 13605, 13609, 13602, 13603, 13598, 13608, 13600, 13607, 13601, 1436];
	enumType.size = 29;
	break;

case 9172:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22959, 22958, 22960, 22962, 22961];
	enumType.size = 5;
	break;

case 9173:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [12971, 12964, 12978, 12873, 12866, 12880, 12894, 12887, 12901, 12915, 12908, 12929, 12922, 12863, 12864, 12865, 35351, 35352, 35354, 35353, 12857, 12859, 35347, 12856, 12858, 35345, 35346, 12860, 35348, 12861, 35349, 35350, 12862];
	enumType.size = 33;
	break;

case 9174:
	enumType.valueType = STRING;
	enumType.defaultstr = "Group Member";
	enumType.keyType = INT;
	enumType.valueArray = [Group Member, Recruiter, Organiser, Admin, Leader];
	enumType.size = 5;
	break;

case 9175:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 10, 20, 50, 100];
	enumType.size = 5;
	break;

case 9176:
	enumType.valueMap = {0=Group Member, 10=Recruiter, 50=Admin, 20=Organiser, 100=Leader};
	enumType.valueType = STRING;
	enumType.defaultstr = "Group Member";
	enumType.keyType = INT;
	enumType.size = 5;
	break;

case 9177:
	enumType.valueType = INT;
	enumType.defaultint = 65535;
	enumType.keyType = INT;
	enumType.valueArray = [442721, null, 45055, 16732758, 65280, 10485663, 28416, 16748431, 16750623, 3158064, 16776960, 15663104, 15663279, 16732159, 11501567, 0, 16777215, 12566463, 8388607, 8388608, 255];
	enumType.size = 20;
	break;

case 9178:
	enumType.valueType = INT;
	enumType.defaultint = 65535;
	enumType.keyType = INT;
	enumType.valueArray = [8703905, null, 45055, 16732758, 65280, 10485663, 28416, 16748431, 16750623, 3158064, 16776960, 15663104, 15663279, 16732159, 11501567, 0, 16777215, 12566463, 8388607, 8388608, 255];
	enumType.size = 20;
	break;

case 9179:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [100204563, 100204565, 100204568, 100204571, 100204574, 100204577, 100204580, 100204583, 100204586, 100204589, 100204592];
	enumType.size = 11;
	break;

case 9180:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [100204564, 100204566, 100204569, 100204572, 100204575, 100204578, 100204581, 100204584, 100204587, 100204590, 100204593];
	enumType.size = 11;
	break;

case 9181:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [100204551, 100204567, 100204570, 100204573, 100204576, 100204579, 100204582, 100204585, 100204588, 100204591, 100204594];
	enumType.size = 11;
	break;

case 9182:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 9184];
	enumType.size = 1;
	break;

case 9183:
	enumType.valueType = INT;
	enumType.defaultint = 16777215;
	enumType.keyType = INT;
	enumType.valueArray = [4281695, 0, 11456736, 16777215, 16777215, 16777215, 10855845, 16763653, 16763653, 11456736, 16763653, 11456736, 7705248, 11456736, 16777215, 11456736, 16777215, 16777215, 7305340, 11456736, 0, 0, 0, 11456736, 11456736, 11456736, 16777215, 464928, 206893, 1846324, 1850176, 11456736, 10855845, 11456736, 10855845, 7705248, 16777215, 7705248, 11456736, 16777215, 16711680, 7705248, 1780788, 16763653, 11456736, 0, 16711680, 13906, 13906, 3289650, 21114, 532524, 464928, 1058869, 3551787, 3090719, 21114, null, 11456736, 16777214];
	enumType.size = 59;
	break;

case 9184:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6773323, 0, 16777215, 16504489, 16504489, 16504489, 5068631, 16763653, 16763653, 11456736, 16763653, 16504489, 16504489, 16771277, 16777215, 16777215, 16777215, 16777215, 7305340, 11456736, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 16777215, 1775893, 3551786, 3682602, 4273706, 14140279, 13157298, 16504489, 13157298, 7705248, 16777215, 7705248, 11456736, 16777215, 16711680, 7705248, 1780788, 16763653, 11456736, 0, 16711680, 6773323, 5126439, 1578515, 4141604, 3549216, 2104855, 1058869, 3551787, 3090719, 4141604, null, 16771277, 16777214];
	enumType.size = 59;
	break;

case 9185:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31975, null, null, null, 31976, null, null, 31977, null, 31978, 31979];
	enumType.size = 5;
	break;

case 9186:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31982, null, null, null, 31983, null, null, 31984, null, 31985, 31986];
	enumType.size = 5;
	break;

case 9187:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 31987];
	enumType.size = 1;
	break;

case 9192:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Agility, Hunter, Thieving, Daily Challenges];
	enumType.size = 4;
	break;

case 9193:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [8, 23, 10, -1];
	enumType.size = 4;
	break;

case 9195:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [8, 1, 22, 16, 11, 26, 25, 21, 17, 15, 19, 9, 23, 13, 7, 12, 20, 14, 24, 10, 18];
	enumType.size = 21;
	break;

case 9196:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 5513, null, null, null, null, null, 5529, 5530, 5525, 5518, 5532, 5521, 5516, 5528, 5524, 5515, 5520, 5531, 5523, 5527, 5522, 5526, 5514, 5517, 5519, 7896];
	enumType.size = 21;
	break;

case 9197:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Araxxi, The Barrows Brothers, The Barrows: Rise of the Six, Chaos Elemental, Commander Zilyana, Corporeal Beast, Dagannoth Kings, General Graardor, Giant Mole, Har-Aken, Kalphite King, Kalphite Queen, King Black Dragon, Kree'arra, K'ril Tsutsaroth, Legiones, Nex, Queen Black Dragon, TzTok-Jad, Vorago, Beastmaster Durzag, Yakamaru];
	enumType.size = 22;
	break;

case 9199:
	enumType.valueType = OBJ;
	enumType.defaultint = 556;
	enumType.keyType = INT;
	enumType.valueArray = [556, 555, 557, 554, 4696, 4699, 4695, 4698, 4697, 4694, 558, 559, 564, 562, 561, 563, 560, 9075, 565, 566];
	enumType.size = 20;
	break;

case 9200:
	enumType.valueMap = {554=Fire rune, 555=Water rune, 556=Air rune, 557=Earth rune, 558=Mind rune, 559=Body rune, 560=Death rune, 561=Nature rune, 562=Chaos rune, 563=Law rune, 9075=Astral rune, 564=Cosmic rune, 565=Blood rune, 4694=Steam rune, 566=Soul rune, 4695=Mist rune, 4696=Dust rune, 4697=Smoke rune, 4698=Mud rune, 4699=Lava rune};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = OBJ;
	enumType.size = 20;
	break;

case 9201:
	enumType.valueMap = {554=1000, 555=1000, 556=1000, 557=1000, 558=2000, 559=2000, 560=400, 561=350, 562=500, 563=300, 9075=300, 564=400, 565=350, 4694=500, 566=300, 4695=500, 4696=500, 4697=500, 4698=300, 4699=500};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 20;
	break;

case 9206:
	enumType.valueMap = {22272=12, 22913=46, 22274=13, 22915=47, 22276=14, 22917=48, 22278=15, 22919=49, 22280=16, 26120=88, 22921=50, 22282=17, 22923=51, 22284=18, 22925=52, 22286=19, 22927=36, 22288=20, 22929=37, 22290=21, 22931=38, 22292=22, 22933=53, 22294=23, 22296=24, 22298=25, 22300=26, 22302=27, 23840=60, 23842=61, 23844=62, 23846=63, 23848=56, 23850=57, 23852=58, 23854=59, 23856=64, 23858=65, 23860=66, 23862=67, 23864=68, 23866=69, 23868=70, 23870=71, 23872=72, 30784=80, 23874=55, 30786=81, 23876=54, 30788=82, 23878=73, 30790=83, 30792=84, 30794=74, 31434=87, 30796=75, 30798=76, 30800=77, 30802=78, 30804=79, 30806=85, 30808=86, 20957=0, 20958=1, 20959=9, 20961=3, 20962=5, 20963=2, 22883=33, 20964=6, 20965=7, 22885=34, 20966=8, 20967=4, 22887=35, 22889=28, 22891=30, 22893=29, 22895=32, 22897=31, 22899=39, 22901=40, 22903=41, 22905=42, 22907=43, 22268=10, 22909=44, 22270=11, 22911=45};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 89;
	break;

case 9207:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14734, 14736, 14733, 14729, 14727, 14725, 14728, 14711];
	enumType.size = 8;
	break;

case 9243:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32156, 32157, 32158, 32159, 32160, 32161, 32162, 32163, 32164, 32165, 32168, 32169, 32166, 32167, 32170, 32171, 32172, 32173, 32174, 32175, 32176, 32177, 32178, 32179, 32180, 32181, 32182, 32183, 32184, 32185, 32186, 32187];
	enumType.size = 32;
	break;

case 9244:
	enumType.valueMap = {32156=0, 32157=1, 32158=2, 32159=3, 32160=4, 32161=5, 32162=6, 32163=7, 32164=8, 32165=9, 32166=12, 32167=13, 32168=10, 32169=11, 32170=14, 32171=15, 32172=16, 32173=17, 32174=18, 32175=19, 32176=20, 32177=21, 32178=22, 32179=23, 32180=24, 32181=25, 32182=26, 32183=27, 32184=28, 32185=29, 32186=30, 32187=31};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 32;
	break;

case 9245:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Agility, Agility, Construction, Construction, Crafting, Crafting, Divination, Divination, Dungeoneering, Dungeoneering, Farming, Farming, Herblore, Herblore, Magic, Magic, Melee, Melee, Mining, Mining, Prayer, Prayer, Ranged, Ranged, Slayer, Slayer, Smithing, Smithing, Summoning, Summoning, Woodcutting, Woodcutting];
	enumType.size = 32;
	break;

case 9246:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13217, 13209, 13203, 13218, 13215, 13213, 13210, 13205, 13193, 13198, 13197, 13196, 13214, 13208, 13216, 13207];
	enumType.size = 16;
	break;

case 9247:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Agility, Construction, Crafting, Divination, Dungeoneering, Farming, Herblore, Magic, Melee, Mining, Prayer, Ranged, Slayer, Smithing, Summoning, Woodcutting];
	enumType.size = 16;
	break;

case 9251:
	enumType.valueMap = {74=8320, 75=8720, 76=8720, 77=8720, 78=9680, 79=9680, 80=9250, 81=9250, 82=10170, 83=10170, 84=10170, 85=11100, 86=11100, 87=11100, 88=11100, 89=12020, 90=12230, 91=12230, 92=13170, 93=13170, 94=13170, 95=13860, 96=13860, 97=13860, 98=14780, 99=14780};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 26;
	break;

case 9252:
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 8120, 8230, 8350, 8460, 8570, 8670, 8780, 8780, 8780, 8780, 8780, 8780, 8780, 8780, 8780, 9010, 9070, 9140, 9200, 9270, 9370, 9490, 9610, 9770, 9890, 10010, 10130, 10170, 10260, 10390, 10510, 10640, 10760, 11350, 11490, 11700, 11840, 11990, 12130, 12270, 12410, 12670, 12810, 12960, 13300, 13440, 14140, 14290, 14440, 14590, 14740, 14890, 14890];
	enumType.size = 53;
	break;

case 9253:
	enumType.valueMap = {74=8320, 75=8720, 76=8720, 77=8720, 78=9680, 79=9680, 80=9250, 81=9250, 82=10170, 83=10170, 84=10170, 85=11100, 86=11100, 87=11100, 88=11100, 89=12020, 90=12230, 91=12230, 92=13170, 93=13170, 94=13170, 95=13860, 96=13860, 97=13860, 98=14780, 99=14780};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 26;
	break;

case 9254:
	enumType.valueMap = {64=8570, 65=8760, 66=8940, 67=9120, 68=9310, 69=9490, 70=9670, 71=9860, 72=10040, 73=10220, 74=10410, 75=10590, 76=10780, 77=10960, 78=11140, 79=11330, 80=11510, 81=11690, 82=11880, 83=12060, 84=12240, 85=12430, 86=12610, 87=12800, 88=12980, 89=13160, 90=13350, 91=13530, 92=13710, 93=13900, 94=14080, 95=14270, 96=14450, 97=14630, 98=14820, 99=15000, 59=7650, 60=7840, 61=8020, 62=8200, 63=8390};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 41;
	break;

case 9255:
	enumType.valueMap = {72=10480, 73=10480, 74=10980, 75=10980, 76=10980, 77=10980, 78=10980, 79=10980, 80=14980, 81=14980, 82=14980, 83=14980, 84=14980, 85=14980, 86=14980, 87=14980, 88=14980, 89=14980, 90=14980, 91=14980, 92=14980, 93=14980, 94=14980, 95=14980, 96=14980, 97=14980, 98=14980, 99=14980};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 28;
	break;

case 9256:
	enumType.valueMap = {74=8320, 75=8720, 76=8720, 77=8720, 78=9680, 79=9680, 80=9250, 81=9250, 82=10170, 83=10170, 84=10170, 85=11100, 86=11100, 87=11100, 88=11100, 89=12020, 90=12230, 91=12230, 92=13170, 93=13170, 94=13170, 95=13860, 96=13860, 97=13860, 98=14780, 99=14780};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 26;
	break;

case 9257:
	enumType.valueMap = {69=7600, 70=7800, 71=8000, 72=8200, 73=8410, 74=8620, 75=8830, 76=9050, 77=9270, 78=9490, 79=9710, 80=9940, 81=10170, 82=10400, 83=10640, 84=10880, 85=11120, 86=11360, 87=11610, 88=11860, 89=12110, 90=12370, 91=12630, 92=12890, 93=13150, 94=13420, 95=13690, 96=13960, 97=14240, 98=14520, 99=14800};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 31;
	break;

case 9258:
	enumType.valueMap = {73=7530, 74=7530, 75=7980, 76=7980, 77=8450, 78=8450, 79=8930, 80=8930, 81=9440, 82=9440, 83=9960, 84=9960, 85=10510, 86=10510, 87=11080, 88=11080, 89=11670, 90=11670, 91=12280, 92=12280, 93=12910, 94=12910, 95=13570, 96=13570, 97=14260, 98=14260, 99=14960, 100=14960, 101=14960, 102=14960, 103=14960, 104=14960, 105=14960, 106=14960, 107=14960, 108=14960, 109=14960, 110=14960, 111=14960, 112=14960, 113=14960, 114=14960, 115=14960, 116=14960, 117=14960, 118=14960, 119=14960, 120=14960};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 48;
	break;

case 9259:
	enumType.valueMap = {64=9320, 65=9320, 66=9320, 67=9320, 68=10870, 69=10870, 70=11730, 71=11730, 72=11730, 73=11730, 74=11730, 75=13990, 76=13990, 77=13990, 78=13990, 79=13990, 80=14850, 81=14850, 82=14850, 83=14850, 84=14850, 85=14850, 86=14850, 87=14850, 88=14850, 89=14850, 90=14850, 91=14850, 92=14850, 93=14850, 94=14850, 95=14850, 96=14850, 97=14850, 98=14850, 99=14850, 60=9320, 61=9320, 62=9320, 63=9320};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 40;
	break;

case 9260:
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 11960, 11960, 11960, 11960, 11960, 11960, 11960, 11960, 11960, 11960, 11960, 11960, 16190, 16190, 16190, 17630, 17630, 17630, 17630, 17630, 17680, 17810, 17930, 17930, 18060, 18010, 18140, 18140, 18260, 18390, 18610, 18610, 18690, 18820, 18940, 18900, 19020, 19150, 19280, 19280, 19400, 19530, 19660, 19660, 19780, 19940, 19940, 20070, 20200, 20330, 21140, 21140, 21140, 24680, 24680, 24680, 24680, 24680, 24680, 24680, 24680, 24680, 24680, 24680, 24680, 24680, 24680, 24680, 24680, 24680];
	enumType.size = 70;
	break;

case 9261:
	enumType.valueMap = {64=10010, 65=10150, 66=10290, 67=10430, 68=10570, 69=10720, 70=10730, 71=10880, 72=11020, 73=11170, 74=11310, 75=11460, 76=11640, 77=11790, 78=11940, 79=12090, 80=12250, 81=12430, 82=12590, 83=12740, 84=12750, 85=12830, 86=12990, 87=13140, 88=13300, 89=13460, 90=13620, 91=13780, 92=13940, 93=14100, 94=14260, 95=14430, 96=14590, 97=14760, 98=14760, 99=14920, 62=9730, 63=9870};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 38;
	break;

case 9262:
	enumType.valueMap = {64=9020, 65=9020, 66=9020, 67=9020, 68=9020, 69=9020, 70=9020, 71=9020, 72=9960, 73=9960, 74=9960, 75=9960, 76=9960, 77=10990, 78=10990, 79=10990, 80=10990, 81=10990, 82=10990, 83=12130, 84=12130, 85=12130, 86=12130, 87=12130, 88=12130, 89=12130, 90=12130, 91=12130, 92=14790, 93=14790, 94=14790, 95=14790, 96=14790, 97=15060, 98=15060, 99=15060, 57=8170, 58=8170, 59=8170, 60=8170, 61=8170, 62=8170, 63=9020};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 43;
	break;

case 9263:
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 7920, 8750, 9570, 9570, 9570, 9570, 10020, 10020, 10020, 10020, 10020, 10020, 10020, 10020, 10020, 10020, 10020, 10020, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 11330, 14520, 14520, 14520, 14520, 14520, 14520, 14520, 14520, 14520, 14520, 14520, 14520, 14520, 14520, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110, 15110];
	enumType.size = 80;
	break;

case 9264:
	enumType.valueMap = {64=9120, 65=9250, 66=9380, 67=9520, 68=9650, 69=9790, 70=9920, 71=10090, 72=10220, 73=10350, 74=10480, 75=10640, 76=10710, 77=10840, 78=10970, 79=11110, 80=11240, 81=11370, 82=11500, 83=11640, 84=11770, 85=11900, 86=12070, 87=12270, 88=12470, 89=12670, 90=12880, 91=13080, 92=13280, 93=13480, 94=13680, 95=13880, 96=14080, 97=14310, 98=14710, 99=15100, 53=7590, 54=7730, 55=7860, 56=8060, 57=8210, 58=8340, 59=8470, 60=8610, 61=8740, 62=8850, 63=8990};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 47;
	break;

case 9265:
	enumType.valueMap = {70=7550, 71=7550, 72=7550, 73=7550, 74=8490, 75=8900, 76=8900, 77=8900, 78=9890, 79=9890, 80=9440, 81=9440, 82=10380, 83=10380, 84=10380, 85=11330, 86=11330, 87=11330, 88=11330, 89=12270, 90=12480, 91=12480, 92=13440, 93=13440, 94=13440, 95=14150, 96=14150, 97=14150, 98=15090, 99=15090};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 30;
	break;

case 9266:
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 7600, 7800, 8000, 8200, 8400, 8600, 8800, 9000, 9200, 9400, 9600, 9800, 10010, 10210, 10410, 10610, 10810, 11010, 11210, 11410, 11610, 11810, 12010, 12210, 12410, 12620, 12820, 13020, 13220, 13420, 13620, 13820, 14020, 14220, 14420, 14620, 14820, 15020, 15230, 15430, 15630, 15830, 16030, 16230, 16430, 16630, 16830, 17030, 17230, 17430, 17630, 17840, 18040, 18240, 18440, 18640, 18840, 19040, 19240, 19440, 19640, 19840, 20040];
	enumType.size = 63;
	break;

case 9267:
	enumType.valueMap = {65=7620, 66=7620, 67=7620, 68=7620, 69=7620, 70=10450, 71=10450, 72=10450, 73=10450, 74=11760, 75=9800, 76=9800, 77=9800, 78=10890, 79=10890, 80=10890, 81=10890, 82=11980, 83=11980, 84=11980, 85=13070, 86=13070, 87=13070, 88=13070, 89=14160, 90=14160, 91=14160, 92=15250, 93=15250, 94=15250, 95=16340, 96=16340, 97=16340, 98=17420, 99=17420};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 35;
	break;

case 9268:
	enumType.valueMap = {70=7550, 71=7550, 72=7550, 73=7550, 74=8490, 75=8900, 76=8900, 77=8900, 78=9890, 79=9890, 80=9440, 81=9440, 82=10380, 83=10380, 84=10380, 85=11330, 86=11330, 87=11330, 88=11330, 89=12270, 90=12480, 91=12480, 92=13440, 93=13440, 94=13440, 95=14150, 96=14150, 97=14150, 98=15090, 99=15090};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 30;
	break;

case 9269:
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 7800, 8080, 8230, 8380, 8530, 8670, 8820, 8970, 9120, 9280, 9410, 9560, 9710, 9860, 10020, 10170, 10360, 10430, 10530, 10620, 10710, 10790, 10880, 10970, 11070, 11160, 11250, 11340, 11190, 11360, 11520, 11690, 11850, 12020, 12180, 12340, 12510, 12670, 12840, 13000, 13170, 13330, 13540, 13740, 13950, 14160, 14360, 14570, 14780, 14990, 15190];
	enumType.size = 51;
	break;

case 9270:
	enumType.valueMap = {64=7630, 65=7660, 66=7690, 67=7720, 68=7760, 69=7790, 70=7850, 71=7890, 72=7930, 73=7970, 74=8010, 75=8050, 76=8090, 77=8130, 78=8170, 79=8210, 80=8250, 81=8630, 82=9010, 83=9390, 84=9770, 85=10150, 86=10530, 87=10910, 88=11290, 89=11670, 90=12050, 91=12370, 92=12700, 93=13020, 94=13350, 95=13670, 96=14000, 97=14320, 98=14650, 99=15060, 61=7530, 62=7560, 63=7600};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 39;
	break;

case 9271:
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 7710, 7710, 7710, 7710, 7710, 7710, 7710, 7710, 7710, 7710, 7710, 7710, 7710, 7710, 7710, 7710, 7710, 7710, 9440, 9440, 9440, 9440, 9440, 9440, 9440, 9440, 9440, 9440, 9440, 9440, 9440, 9440, 9440, 9440, 9440, 11210, 11210, 11210, 11210, 11210, 11510, 11510, 11510, 11510, 11510, 11510, 11510, 11510, 11510, 11510, 11510, 11510, 11510, 15060, 15060, 15060, 15060, 15060, 15060, 15060, 15060, 15060, 15060, 15060, 15060];
	enumType.size = 65;
	break;

case 9272:
	enumType.valueMap = {70=7510, 71=7510, 72=7510, 73=7510, 74=8450, 75=8860, 76=8860, 77=8860, 78=9850, 79=9850, 80=9400, 81=9400, 82=10340, 83=10340, 84=10340, 85=11280, 86=11280, 87=11280, 88=11280, 89=12220, 90=12430, 91=12430, 92=13390, 93=13390, 94=13390, 95=14090, 96=14090, 97=14090, 98=15030, 99=15030};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 30;
	break;

case 9273:
	enumType.valueMap = {70=7660, 71=8110, 72=8730, 74=9440, 75=9560, 76=10100, 77=10100, 78=10310, 79=12100, 80=12250, 81=12250, 82=12250, 83=12700, 84=12700, 85=13000, 86=13170, 87=13170, 88=13430, 89=13630, 90=13630, 91=13630, 92=14090, 93=14090, 94=14090, 95=14530, 96=14700, 97=14700, 98=14700, 99=15140};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 29;
	break;

case 9274:
	enumType.valueMap = {74=7520, 75=7640, 76=7780, 77=7940, 78=8090, 79=8250, 80=8460, 81=11390, 82=11390, 83=11390, 84=11390, 85=11390, 86=11390, 87=11390, 88=11390, 89=11390, 90=11390, 91=15100, 92=15100, 93=15100, 94=15100, 95=15100, 96=15100, 97=15100, 98=15100, 99=15100};
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.size = 26;
	break;

case 9275:
	enumType.valueType = INT;
	enumType.defaultint = 7500;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 8290, 8380, 8470, 8550, 8770, 8850, 8940, 9030, 9110, 8930, 9010, 9090, 9170, 9560, 9860, 9970, 10080, 9920, 9750, 10180, 10950, 11060, 11540, 11650, 11770, 11880, 12000, 12410, 12480, 12550, 12620, 12690, 12760, 12830, 12290, 12390, 12500, 12610, 12710, 13010, 13120, 13220, 13330, 13440, 13540, 13650, 13750, 13850, 13960, 14060, 14160, 14270, 14370, 14470, 14570, 14670, 14780, 14880, 14980];
	enumType.size = 59;
	break;

case 9276:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32315, null, null, null, 32316, null, null, 32317, null, 32319, 32318];
	enumType.size = 5;
	break;

case 9277:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32322, null, null, null, 32323, null, null, 32324, null, 32326, 32325];
	enumType.size = 5;
	break;

case 9278:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32329, null, null, null, 32330, null, null, 32331, null, 32333, 32332];
	enumType.size = 5;
	break;

case 9342:
	enumType.valueMap = {2952=1, 22414=1, 22415=1, 22416=1, 22417=1, 2963=1, 27412=1, 27413=1, 27414=1, 4250=1, 7453=1, 7454=1, 28575=1, 7455=1, 7456=1, 7457=1, 7458=1, 7459=1, 19748=1, 7460=1, 19749=1, 7461=1, 7462=1, 552=1, 19757=1, 19763=1, 19766=1, 21820=1, 24134=1, 24135=1, 14663=1, 21576=1, 24136=1, 24137=1, 21580=1, 21581=1, 21582=1, 27093=1, 27094=1, 27095=1, 27096=1, 13660=1, 21596=1, 21597=1, 21598=1, 21599=1, 27495=1, 14572=1, 11757=1, 14573=1, 11758=1, 7409=1, 15347=1, 14579=1, 15349=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 55;
	break;

case 9343:
	enumType.valueMap = {26124=1, 26125=1, 26126=1, 26127=1, 26128=1, 26129=1, 26130=1, 26131=1, 27412=1, 26132=1, 27413=1, 26133=1, 27414=1, 26134=1, 26135=1, 26136=1, 26137=1, 26138=1, 26139=1, 26140=1, 7453=1, 26141=1, 7454=1, 7455=1, 7456=1, 7457=1, 7458=1, 7459=1, 7460=1, 31524=1, 19748=1, 7461=1, 19749=1, 7462=1, 31526=1, 19754=1, 15403=1, 1580=1, 19757=1, 19763=1, 19766=1, 21820=1, 24134=1, 24135=1, 14663=1, 21576=1, 24136=1, 24137=1, 15434=1, 15435=1, 21580=1, 21581=1, 21582=1, 29522=1, 29523=1, 10836=1, 10837=1, 10838=1, 10839=1, 21596=1, 21597=1, 21598=1, 21599=1, 20064=1, 20065=1, 20066=1, 20067=1, 20068=1, 30053=1, 27495=1, 9068=1, 9069=1, 9070=1, 9071=1, 9072=1, 9073=1, 9074=1, 9084=1, 12668=1, 12669=1, 11138=1, 11140=1, 9096=1, 9097=1, 9098=1, 9099=1, 9100=1, 9101=1, 9102=1, 2963=1, 28575=1, 3748=1, 31141=1, 31142=1, 3757=1, 3758=1, 4021=1, 4035=1, 22219=1, 22221=1, 22223=1, 22225=1, 30929=1, 22227=1, 22229=1, 22231=1, 4567=1, 27095=1, 27096=1, 22233=1, 22235=1, 22237=1, 30942=1, 22239=1, 22241=1, 30945=1, 22243=1, 22245=1, 15590=1, 22247=1, 22249=1, 746=1, 22251=1, 747=1, 15596=1, 14572=1, 15597=1, 22253=1, 11757=1, 14573=1, 15598=1, 11758=1, 22255=1, 7409=1, 22257=1, 22259=1, 22261=1, 15349=1, 22263=1, 22265=1};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 140;
	break;

case 9344:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21096, 11115, 11121, 11126, 11131, 11137, 11143, 11400, 7234, 7241, 12326, 13676, 13682, 13688, 13865, 11391, 14492, 14498, 3119, 3131, 16550, 16556, 16562, 17296, 17308, 17302, 17314, 17333, 19044, 19051, 14962, 19150, 19157, 19169, 19163, 19127, 19134, 14510, 19214, 19220, 19226, 19232, 19310, 19317, 19323, 19330, 19209, 19536, 19563, 19569, 19575, 19581, 21376, 21383, 21390, 21396, 21402, 21409, 21416, 21422, 22579, 22589, 23005, 23010, 23015, 23020, 23025, 23030, 23035, 23040, 23045, 23050, 23055, 23060, 23065, 23070, 23199, 23206, 23212, 23219, 19647, 22567, 23113, 23123, 11053, 24045, 24053, 24137, 24168, 24175, 24193, 24984, 24988, 24992, 24996, 25000, 26469, 25006, 25010, 25747, 25757, 25027, 25683, 25773, 25784, 26401, 26409, 26458, 26462, 26466, 26508, 7273, 26521, 26597, 26621, 26629, 26637, 26639, 27779, 27787, 27756, 27765, 28072, 28080, 28086, 28092, 28095, 28158, 28200, 28381, 28626, 28629, 24290, 28895, 28901, 28947, 29088, 29094, 29344, 29345, 29346, 29367, 29375, 29383, 29391, 29762, 29781, 29844, 29810, 29815, 29820, 29825, 29830, 29836, 29925, 30386, 30400, 30544, 30785, 30789, 30798, 30769, 30776, 30899, 31680, 31229, 31368, 31355, 26381, 31822, 31997, 32195];
	enumType.size = 172;
	break;

case 9345:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24179, 21104, 21105, 21106, 21107, 26405, 26413, 24277, 24329, 24330, 26581, 28377, 28385, 24284, 24285, 29371, 29379, 29387, 29395, 29790, 29979, 30411, 30412, 30413, 30414, 30416, 30417, 30418, 30419, 30420, 30421];
	enumType.size = 31;
	break;

case 9346:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0];
	enumType.size = 1;
	break;

case 9347:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 100];
	enumType.size = 2;
	break;

case 9348:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 100, 101];
	enumType.size = 3;
	break;

case 9349:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 100, 102];
	enumType.size = 3;
	break;

case 9350:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 100, 103];
	enumType.size = 3;
	break;

case 9351:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 100, 104];
	enumType.size = 3;
	break;

case 9352:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 100, 105];
	enumType.size = 3;
	break;

case 9353:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 100, 106];
	enumType.size = 3;
	break;

case 9354:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 100, 107];
	enumType.size = 3;
	break;

case 9355:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 100, 108];
	enumType.size = 3;
	break;

case 9356:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 100, 109];
	enumType.size = 3;
	break;

case 9357:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 100, 110];
	enumType.size = 3;
	break;

case 9358:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 200];
	enumType.size = 2;
	break;

case 9359:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 200, 201];
	enumType.size = 3;
	break;

case 9360:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 200, 202];
	enumType.size = 3;
	break;

case 9361:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 200, 203];
	enumType.size = 3;
	break;

case 9362:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 200, 204];
	enumType.size = 3;
	break;

case 9363:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 300];
	enumType.size = 2;
	break;

case 9364:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 300, 301];
	enumType.size = 3;
	break;

case 9365:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 300, 302];
	enumType.size = 3;
	break;

case 9366:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 300, 303];
	enumType.size = 3;
	break;

case 9367:
	enumType.valueMap = {0=24497, 100=23360, 101=24479, 102=24480, 103=24481, 104=24482, 200=23362, 105=24483, 201=24489, 106=24484, 202=24490, 107=24485, 203=24491, 108=24486, 204=24492, 300=23364, 109=24487, 301=24493, 110=24488, 302=24494, 303=24495};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 9286;
	enumType.keyType = INT;
	enumType.size = 21;
	break;

case 9368:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32358, 32343, 32348, 32353];
	enumType.size = 4;
	break;

case 9376:
	enumType.valueMap = {5=32394, 3=32392};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 9377:
	enumType.valueMap = {5=32398, 3=32396};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 9378:
	enumType.valueMap = {5=32402, 3=32400};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 9385:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32410, 32405, 32420];
	enumType.size = 3;
	break;

case 9386:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32415, 32425, 32435, 32430];
	enumType.size = 4;
	break;

case 9387:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32415, 32425, 32435, 32430, 32410, 32405, 32420];
	enumType.size = 7;
	break;

case 9388:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Lumbridge, Draynor, Catherby, Al Kharid, Varrock, Falador, Edgeville, Yanille, Seer's Village, Ardougne];
	enumType.size = 10;
	break;

case 9394:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 33, 34, 35, 36, 36, 37, 38, 39, 40, 50, 51, 52, 53, 54, 55, 56, 57, 58, 58, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 81, 84, 86, 89, 92, 95, 97, 100, 103, 105, 142, 144, 147, 150, 153, 156, 158, 161, 163, 166, 208, 213, 219, 225, 230, 236, 241, 246, 251, 256, 278, 285, 291, 298, 305, 311, 317, 323, 329, 334, 358, 368, 377, 386, 395, 404, 412, 420, 428, 435, 461, 470, 477, 482, 484, 509, 519, 527, 533, 536, 566, 579, 589, 595, 599, 679, 700, 716, 728, 734];
	enumType.size = 100;
	break;

case 9396:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29207, 29208, 29209, 29210, 29211];
	enumType.size = 5;
	break;

case 9397:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29214, 29215, 29216, 29217, 29218, 29219];
	enumType.size = 6;
	break;

case 9398:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29222, 29223, 29224, 29225, 29226, 29227];
	enumType.size = 6;
	break;

case 9399:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29230, 29231, 29232, 29233, 29234, 29235];
	enumType.size = 6;
	break;

case 9400:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29238, 29239, 29240, 29241, 29242, 29243];
	enumType.size = 6;
	break;

case 9401:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29246, 29247, 29248, 29249, 29250, 29251];
	enumType.size = 6;
	break;

case 9407:
	enumType.valueMap = {4=32527};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9408:
	enumType.valueMap = {4=32529};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9409:
	enumType.valueMap = {4=32531};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9411:
	enumType.valueMap = {0=32543, 1=32549, 18=32548, 4=32544, 7=32545, 9=32547, 10=32546};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 7;
	break;

case 9412:
	enumType.valueMap = {0=32551, 1=32557, 18=32556, 4=32552, 7=32553, 9=32555, 10=32554};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 7;
	break;

case 9413:
	enumType.valueMap = {0=32560, 1=32566, 18=32565, 4=32561, 7=32562, 9=32564, 10=32563};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 7;
	break;

case 9414:
	enumType.valueMap = {0=32568, 1=32574, 18=32573, 4=32569, 7=32570, 9=32572, 10=32571};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 7;
	break;

case 9416:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4];
	enumType.size = 1;
	break;

case 9417:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4];
	enumType.size = 1;
	break;

case 9418:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4];
	enumType.size = 1;
	break;

case 9419:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4];
	enumType.size = 1;
	break;

case 9420:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4];
	enumType.size = 1;
	break;

case 9421:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4];
	enumType.size = 1;
	break;

case 9422:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	break;

case 9423:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4];
	enumType.size = 1;
	break;

case 9424:
	enumType.valueType = STRING;
	enumType.defaultstr = "50";
	enumType.keyType = INT;
	enumType.valueArray = [Any Size, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50];
	enumType.size = 14;
	break;

case 9425:
	enumType.valueType = STRING;
	enumType.defaultstr = "Any setting";
	enumType.keyType = INT;
	enumType.valueArray = [Any setting, Lootshare, Coinshare, Off];
	enumType.size = 4;
	break;

case 9431:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 2901;
	enumType.keyType = INT;
	enumType.valueArray = [2901, 531, 532, 533, 534, 535, 536];
	enumType.size = 7;
	break;

case 9432:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 530;
	enumType.keyType = INT;
	enumType.valueArray = [530];
	enumType.size = 1;
	break;

case 9433:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 534;
	enumType.keyType = INT;
	enumType.valueArray = [534, 538];
	enumType.size = 2;
	break;

case 9434:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 532;
	enumType.keyType = INT;
	enumType.valueArray = [532, 536];
	enumType.size = 2;
	break;

case 9435:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 531;
	enumType.keyType = INT;
	enumType.valueArray = [531, 533];
	enumType.size = 2;
	break;

case 9436:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 538;
	enumType.keyType = INT;
	enumType.valueArray = [538, 534];
	enumType.size = 2;
	break;

case 9437:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 532;
	enumType.keyType = INT;
	enumType.valueArray = [532, 538, 536];
	enumType.size = 3;
	break;

case 9438:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 531;
	enumType.keyType = INT;
	enumType.valueArray = [531];
	enumType.size = 1;
	break;

case 9439:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 534;
	enumType.keyType = INT;
	enumType.valueArray = [534, 2901];
	enumType.size = 2;
	break;

case 9440:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 530;
	enumType.keyType = INT;
	enumType.valueArray = [530];
	enumType.size = 1;
	break;

case 9441:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 534;
	enumType.keyType = INT;
	enumType.valueArray = [534, 2901, 538];
	enumType.size = 3;
	break;

case 9442:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 532;
	enumType.keyType = INT;
	enumType.valueArray = [532, 536];
	enumType.size = 2;
	break;

case 9443:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 531;
	enumType.keyType = INT;
	enumType.valueArray = [531, 536, 533];
	enumType.size = 3;
	break;

case 9444:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 538;
	enumType.keyType = INT;
	enumType.valueArray = [538, 534];
	enumType.size = 2;
	break;

case 9445:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 532;
	enumType.keyType = INT;
	enumType.valueArray = [532, 538, 536];
	enumType.size = 3;
	break;

case 9446:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 531;
	enumType.keyType = INT;
	enumType.valueArray = [531];
	enumType.size = 1;
	break;

case 9447:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 534;
	enumType.keyType = INT;
	enumType.valueArray = [534, 536, 538, 532];
	enumType.size = 4;
	break;

case 9448:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32958, 32970, 32982, 32994, 33006, 33018, 33030, 33042, 33054, 33066, 33078, 33090, 33102, 33114, 33126, 33138, 33150, 33162, 33174, 33186, 33246, 33258, 33198, 33210, 33222, 33234];
	enumType.size = 26;
	break;

case 9449:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [9450, 9451, 9452, 9453, 9454, 9455];
	enumType.size = 6;
	break;

case 9450:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29310, 29311, 29312, 29312];
	enumType.size = 4;
	break;

case 9451:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31080, 31081, 31082, 31083, 31084, 31085, 31086, 31087, 31088, 31086, 31087, 31088];
	enumType.size = 12;
	break;

case 9452:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29300, 29301, 29302, 29303, 29303];
	enumType.size = 5;
	break;

case 9453:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29294, 29295, 29296, 29297, 29298, 29299, 29298, 29299];
	enumType.size = 8;
	break;

case 9454:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29304, 29305, 29306, 29307, 29308, 29309, 29309, 29309];
	enumType.size = 8;
	break;

case 9455:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31310, 31311, 31311];
	enumType.size = 3;
	break;

case 9456:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32712, 32715, 32713, 32709, 32710, 32714, 32711, 32725, 32722, 32717, 32728, 32723, 32721, 32720, 32718, 32724, 32729, 32719, 32727, 32726];
	enumType.size = 20;
	break;

case 9457:
	enumType.valueMap = {32709=Increases damage dealt to nihil creatures by 10%., 32710=Increases damage dealt to the Queen Black Dragon by 10%., 32711=Increases damage dealt to creatures within the Tzhaar Fight Kiln by 10%., 32712=Increases damage dealt to airut creatures by 10%., 32713=Increases damage dealt to creatures within the Dominion Tower by 10%., 32714=Increases damage dealt to creatures within the Rush of Blood minigame by 10%., 32715=Increases damage dealt to Cadarn warriors by 10%., 32717=Doubles the amount of tickets earned, when eligible for a golden ticket., 32718=Doubles produce points gained from all actions on Livid Farm., 32719=Activate to receive a random event reward item for Player-Owned Ports., 32720=Guarantees a dark beast assignment from Morvran., 32721=Doubles the amount of kills a chompy bird counts for., 32722=Doubles the role points gained within Barbarian Assault., 32723=Doubles the length of time a chimp-ice is frozen for after casting ice spells on it., 32724=Doubles rank gained from Mobilising Armies, unless the game is won by other players forfeiting., 32725=Doubles the respect gained from the Artisans' Workshop., 32726=Doubles the amount of kills a Black Knight counts for., 32727=Doubles the amount of points gained from Fish Flingers., 32728=Increases the drop rate for Champion's scrolls by 20%., 32729=If you die while fighting the boss monsters on Morvran's challenge you will be resurrected.};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = OBJ;
	enumType.size = 20;
	break;

case 9458:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26];
	enumType.size = 26;
	break;

case 9467:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [23193, 32845];
	enumType.size = 2;
	break;

case 9468:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1783, 9943];
	enumType.size = 2;
	break;

case 9469:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32694, 32697, 32700, 32703];
	enumType.size = 4;
	break;

case 9470:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32958, 32970, 32982, 32994, 33006, 33018, 33030, 33042, 33054, 33066, 33078, 33090, 33102, 33114, 33126, 33138, 33150, 33162, 33174, 33186, 33246, 33258, 33198, 33210, 33222, 33234];
	enumType.size = 26;
	break;

case 9471:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [9473, 9474, 9475, 9476, 9477];
	enumType.size = 5;
	break;

case 9472:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Crystal Weapons, Crystal Armour, Crystal Tools, Crystal-Attuned Weapons, Crystal-Attuned Armour];
	enumType.size = 5;
	break;

case 9473:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32219, 32222, 32225, 32228, 32231, 32234, 32210, 32213, 32216];
	enumType.size = 9;
	break;

case 9474:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32240, 32243, 32237];
	enumType.size = 3;
	break;

case 9475:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32633, 32635, 32637, 32640, 32642, 32644, 6099];
	enumType.size = 7;
	break;

case 9476:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32647, 32649, 32651, 32653, 32655, 32657, 32659, 32661, 32663];
	enumType.size = 9;
	break;

case 9477:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32627, 32629, 32631];
	enumType.size = 3;
	break;

case 9480:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Show All, Game Updates, Website, Support, Technical, Community, Behind the Scenes, Shop, Future Updates, Solomon's Store, Treasure Hunter, Your Feedback, Events];
	enumType.size = 13;
	break;

case 9540:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11149, 11150, 11151];
	enumType.size = 3;
	break;

case 9541:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13863, 13869, 13870, 13871, 13872, 13873, 13874];
	enumType.size = 7;
	break;

case 9542:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [975, 3123, 3124, 3109, 1534];
	enumType.size = 5;
	break;

case 9543:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3128, 5544, 5552, 3126, 3125];
	enumType.size = 5;
	break;

case 9544:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19419, 19420, 19421, 19422];
	enumType.size = 4;
	break;

case 9545:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22576, 22583, 22585, 22577, 22578];
	enumType.size = 5;
	break;

case 9546:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [22586, 22593, 22595, 22597, 22598, 22599, 22587, 22588];
	enumType.size = 8;
	break;

case 9547:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24191, 24982, 24986, 24990, 24994];
	enumType.size = 5;
	break;

case 9548:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24998, 26470, 25004, 26471, 25008, 26472];
	enumType.size = 6;
	break;

case 9549:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28070, 28074, 28075, 28078, 28082, 28083, 28084, 28088, 28089];
	enumType.size = 9;
	break;

case 9550:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28099, 28098, 28100, 28101];
	enumType.size = 4;
	break;

case 9551:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27753, 27760, 27754, 27755];
	enumType.size = 4;
	break;

case 9552:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27762, 27769, 27771, 27773, 27774, 27763, 27764];
	enumType.size = 7;
	break;

case 9553:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27775, 27783, 27777, 27776];
	enumType.size = 4;
	break;

case 9554:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27786, 27792, 27785, 27784];
	enumType.size = 4;
	break;

case 9555:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [12330, 12331];
	enumType.size = 2;
	break;

case 9556:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28631, 28632, 28633, 28634];
	enumType.size = 4;
	break;

case 9557:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28893, 28899, 28905, 28906, 28907, 28908, 28909, 28910, 28911, 28912, 28913, 28914, 28915];
	enumType.size = 13;
	break;

case 9558:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29365, 29373];
	enumType.size = 2;
	break;

case 9559:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29381, 29389];
	enumType.size = 2;
	break;

case 9562:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33587];
	enumType.size = 1;
	break;

case 9563:
	enumType.valueType = STRUCT;
	enumType.defaultint = 29398;
	enumType.keyType = INT;
	enumType.valueArray = [29398, 29401, 29402, 29403, 29748, 29749, 29750, 29751, 29752, 29753, 29754, 29755, 29756, 29757, 29758, 29759];
	enumType.size = 16;
	break;

case 9564:
	enumType.valueMap = {0=33593, 10=33633, 3=33597, 4=33594, 14=33596, 7=33595};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 6;
	break;

case 9567:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29769, 29770, 29771];
	enumType.size = 3;
	break;

case 9568:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29772, 29773];
	enumType.size = 2;
	break;

case 9569:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29774];
	enumType.size = 1;
	break;

case 9570:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33637, 33642, null, null, 33638, null, null, 33639, null, 33641, 33640];
	enumType.size = 6;
	break;

case 9571:
	enumType.valueMap = {3=33634};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9572:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33654];
	enumType.size = 1;
	break;

case 9573:
	enumType.valueMap = {18=33655};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9579:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33674, null, null, 33677, 33675, null, null, 33676];
	enumType.size = 4;
	break;

case 9580:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33680, null, null, 33683, 33681, null, null, 33682];
	enumType.size = 4;
	break;

case 9581:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33686, null, null, 33689, 33687, null, null, 33688];
	enumType.size = 4;
	break;

case 9582:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33692, null, null, 33695, 33693, null, null, 33694];
	enumType.size = 4;
	break;

case 9583:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33698, null, null, 33701, 33699, 33702, null, 33700];
	enumType.size = 5;
	break;

case 9584:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33705, null, null, 33708, 33706, null, null, 33707];
	enumType.size = 4;
	break;

case 9588:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33711, null, null, 33709, 33712, null, null, 33713, null, 33715, 33714];
	enumType.size = 6;
	break;

case 9589:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Normal, Lady Hefin, Lady Ithell, Lady Meilyr, Lady Trahaearn, Lord Amlodd, Arianwyn, Lord Crwys, Lord Iorwerth];
	enumType.size = 9;
	break;

case 9590:
	enumType.valueType = NPC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 20272, 20282, 20286, 19927, 20229, 19813, 19882, 19873];
	enumType.size = 8;
	break;

case 9592:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33741];
	enumType.size = 1;
	break;

case 9593:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33742];
	enumType.size = 1;
	break;

case 9594:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33743];
	enumType.size = 1;
	break;

case 9595:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33744];
	enumType.size = 1;
	break;

case 9600:
	enumType.valueMap = {3=33747};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9601:
	enumType.valueMap = {3=33749};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9602:
	enumType.valueMap = {3=33751};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9603:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29923];
	enumType.size = 1;
	break;

case 9604:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33755, null, null, null, 33756, null, null, 33757, null, 33759, 33758];
	enumType.size = 5;
	break;

case 9605:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [33769];
	enumType.size = 1;
	break;

case 9610:
	enumType.valueMap = {18=33853};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9616:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [UTC Clock - Off, UTC Clock - On (full background), UTC Clock - On (border only)];
	enumType.size = 3;
	break;

case 9617:
	enumType.valueType = STRUCT;
	enumType.defaultint = 9695;
	enumType.keyType = INT;
	enumType.valueArray = [9695, 9696, 9697, 29794, 29795, 29796, 29797, 29798, 29988, 29989, 29990, 29991, 29992, 29993, 29994, 29995, 29996, 29997, 29998, 29999, 30000, 30001, 30002, 30003, 30004, 30005, 30006, 30007, 30008, 28974, 28975, 29745, 29746, 30381, 30480, 30481, 30482, 30483, 30484, 30485, 30486, 30487, 30488, 30489, 30490, 30491, 30492, 30493, 30494, 30495, 30496, 30497];
	enumType.size = 52;
	break;

case 9618:
	enumType.valueType = STRUCT;
	enumType.defaultint = 30009;
	enumType.keyType = INT;
	enumType.valueArray = [30009, 30010, 30011, 30012, 30013, 30014, 30015, 30016, 30017, 30018, 30019, 30020, 30021, 30022, 30023, 30024, 30025, 30026, 30027, 30028, 30029, 30030, 30031, 30032, 30033, 30034, 30035, 30036, 30037, 30038, 30039, 30040, 30041, 30042, 30043, 30044, 30045, 30046, 30047, 30048, 30049, 30050, 30051, 30052, 30053, 30054, 30055, 30056, 30057, 30058, 30059, 30060, 30061, 30062, 30063, 30064, 30065, 30066, 30067, 30068, 30069, 30070, 30071, 30072, 30073, 30074, 30075, 30076, 30077, 30078];
	enumType.size = 70;
	break;

case 9619:
	enumType.valueType = STRUCT;
	enumType.defaultint = 30079;
	enumType.keyType = INT;
	enumType.valueArray = [30079, 30080, 30081, 30082, 30083, 30084, 30085, 30086, 30087, 30088, 30089, 30090, 30091, 30092, 30093, 30094, 30095, 30096, 30097, 30098, 30099, 30100, 30101, 30102, 30103, 30104, 30105, 30106, 30107, 30108, 30109, 30110, 30111, 30112, 30113, 30114, 30115, 30116, 30117, 30118, 30119, 30120, 30121, 30122, 30123, 30124, 30125, 30126, 30127, 30128, 30129, 30130, 30131, 30132, 30133, 30134, 30135, 30136, 30137];
	enumType.size = 59;
	break;

case 9620:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 1, 2, 3, 4, 5, 6, 9, 12, 13, 14, 15, 16];
	enumType.size = 12;
	break;

case 9621:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Game Updates, Website, Support, Technical, Community, Behind the Scenes, null, null, Shop, null, null, Future Updates, Solomon's Store, Treasure Hunter, Your Feedback, Events];
	enumType.size = 12;
	break;

case 9622:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [59441235, 59441237, 59441239, 59441241, 59441243, 59441245, 59441247, 59441249, 59441251, 59441253, 59441255, 59441257];
	enumType.size = 12;
	break;

case 9623:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [59441203, 59441236, 59441238, 59441240, 59441242, 59441244, 59441246, 59441248, 59441250, 59441252, 59441254, 59441256];
	enumType.size = 12;
	break;

case 9624:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1];
	enumType.size = 34;
	break;

case 9625:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 7, 21, 50, 100, 200, 400, 800, 1500, 2300, 4000];
	enumType.size = 10;
	break;

case 9626:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 9629, 9632, 9635, 9638, 9641, 9644, 9647, 9653];
	enumType.size = 8;
	break;

case 9627:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 9630, 9633, 9636, 9639, 9642, 9645, 9648, 9654];
	enumType.size = 8;
	break;

case 9628:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 9631, 9634, 9637, 9640, 9643, 9646, 9649, 9655];
	enumType.size = 8;
	break;

case 9629:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 730, 731, 732, 733, 734, 735, 736, 737];
	enumType.size = 8;
	break;

case 9630:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 738, 739, 740, 741, 742, 743, 744, 745];
	enumType.size = 8;
	break;

case 9631:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 746, 747, 748, 749, 750, 751, 752, 753];
	enumType.size = 8;
	break;

case 9632:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 754, 755, 756, 757, 758, 759, 760, 761];
	enumType.size = 8;
	break;

case 9633:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 762, 763, 764, 765, 766, 767, 768, 769];
	enumType.size = 8;
	break;

case 9634:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 770, 771, 772, 773, 774, 775, 776, 777];
	enumType.size = 8;
	break;

case 9635:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 778, 779, 780, 781, 782, 783];
	enumType.size = 6;
	break;

case 9636:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 784, 785, 786, 787, 788, 789];
	enumType.size = 6;
	break;

case 9637:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 790, 791, 792, 793, 794, 795];
	enumType.size = 6;
	break;

case 9638:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 796, 797, 798, 799, 800, 801];
	enumType.size = 6;
	break;

case 9639:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 802, 803, 804, 805, 806, 807];
	enumType.size = 6;
	break;

case 9640:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 808, 809, 810, 811, 812, 813];
	enumType.size = 6;
	break;

case 9641:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 814, 815, 816, 817, 818, 819];
	enumType.size = 6;
	break;

case 9642:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 820, 821, 822, 823, 824, 825];
	enumType.size = 6;
	break;

case 9643:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 826, 827, 828, 829, 830, 831];
	enumType.size = 6;
	break;

case 9644:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 832, 833, 834, 835, 836, 837];
	enumType.size = 6;
	break;

case 9645:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 838, 839, 840, 841, 842, 843];
	enumType.size = 6;
	break;

case 9646:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, 844, 845, 846, 847, 848, 849];
	enumType.size = 6;
	break;

case 9647:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 850, 851, 852, 853, 854, 855, 856];
	enumType.size = 7;
	break;

case 9648:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 857, 858, 859, 860, 861, 862, 863];
	enumType.size = 7;
	break;

case 9649:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 864, 865, 866, 867, 868, 869, 870];
	enumType.size = 7;
	break;

case 9650:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 873, 874, 875, 876, 877, 878, 879, 880, 881];
	enumType.size = 9;
	break;

case 9651:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 882, 883, 884, 885, 886, 887, 888, 889, 890];
	enumType.size = 9;
	break;

case 9652:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 891, 892, 893, 894, 895, 896, 897, 898, 899];
	enumType.size = 9;
	break;

case 9653:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 900, 901, 902, 903];
	enumType.size = 4;
	break;

case 9654:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 904, 905, 906, 907];
	enumType.size = 4;
	break;

case 9655:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 908, 909, 910, 911];
	enumType.size = 4;
	break;

case 9661:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27368, 27375, 29642, 29643, null, null, 30841, 30847, 30839, 30840];
	enumType.size = 8;
	break;

case 9662:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [225, 225, 150, 150, 450, 450, 200, 200, 125, 125, 400, 400];
	enumType.size = 12;
	break;

case 9663:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Cupid's bow (2013), the rosethorn wand (2013), the lovestruck pendant (2013), the heartbreak pendant (2013), the 'Love at First Sight' emote (2013), the 'Jealous Rage' emote (2013), the staff of adoration (2014), the spear of despite (2014), the crown of hearts (2014), the crown of misery (2014), the 'Loved Up' emote (2014), the 'Down to Earth' emote (2014)];
	enumType.size = 12;
	break;

case 9664:
	enumType.valueType = OBJ;
	enumType.defaultint = 34030;
	enumType.keyType = INT;
	enumType.valueArray = [34030, 34031, 34032, 34033, 34034, 34035, 34036];
	enumType.size = 7;
	break;

case 9665:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Tasty Treat, Jelly Treat, Growth Surge, Buy more treats];
	enumType.size = 4;
	break;

case 9666:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30147, 30393, 30392, 30394];
	enumType.size = 4;
	break;

case 9667:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30395];
	enumType.size = 1;
	break;

case 9668:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34099, 34104, null, 34105, 34100, null, null, 34101, null, 34103, 34102];
	enumType.size = 7;
	break;

case 9669:
	enumType.valueMap = {3=34106};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9670:
	enumType.valueMap = {3=34107};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9671:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30398];
	enumType.size = 1;
	break;

case 9672:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34114, 34119, 34120, null, 34115, null, null, 34116, null, 34118, 34117];
	enumType.size = 7;
	break;

case 9673:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30411, 30412, 30413, 30414];
	enumType.size = 4;
	break;

case 9674:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30416, 30417, 30418, 30419];
	enumType.size = 4;
	break;

case 9675:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30420];
	enumType.size = 1;
	break;

case 9676:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30421];
	enumType.size = 1;
	break;

case 9677:
	enumType.valueMap = {18=34123};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9678:
	enumType.valueMap = {18=34124};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9679:
	enumType.valueMap = {18=34125};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9680:
	enumType.valueMap = {18=34126};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9681:
	enumType.valueMap = {18=34129};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9682:
	enumType.valueMap = {18=34130};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9683:
	enumType.valueMap = {18=34131};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9684:
	enumType.valueMap = {18=34132};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9685:
	enumType.valueMap = {18=34133};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9686:
	enumType.valueMap = {18=34135};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9728:
	enumType.valueType = STRING;
	enumType.defaultstr = "All";
	enumType.keyType = INT;
	enumType.valueArray = [All, Lootshare only, Non-lootshare only];
	enumType.size = 3;
	break;

case 9729:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [40];
	enumType.size = 1;
	break;

case 9734:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [All skills total, Attack, Strength, Ranged, Magic, Defence, Constitution, Prayer, Agility, Herblore, Thieving, Crafting, Runecrafting, Mining, Smithing, Fishing, Cooking, Firemaking, Woodcutting, Fletching, Slayer, Farming, Construction, Hunter, Summoning, Dungeoneering, Divination, null, null, null, All combat skills total, Wealth, Combat];
	enumType.size = 30;
	break;

case 9737:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, 19386, 19385];
	enumType.size = 2;
	break;

case 9738:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [9740, 9741, 9742, 9743];
	enumType.size = 4;
	break;

case 9739:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Gnome cocktails, Gnome battas, Gnome crunchies, Gnome bowls];
	enumType.size = 4;
	break;

case 9740:
	enumType.valueType = OBJ;
	enumType.defaultint = 9568;
	enumType.keyType = INT;
	enumType.valueArray = [9568, 9569, 9566, 9567, 9574, 9571, 9570];
	enumType.size = 7;
	break;

case 9741:
	enumType.valueType = OBJ;
	enumType.defaultint = 9478;
	enumType.keyType = INT;
	enumType.valueArray = [9478, 9482, 9480, 9485, 9483];
	enumType.size = 5;
	break;

case 9742:
	enumType.valueType = OBJ;
	enumType.defaultint = 9581;
	enumType.keyType = INT;
	enumType.valueArray = [9581, 9579, 9583, 9577];
	enumType.size = 4;
	break;

case 9743:
	enumType.valueType = OBJ;
	enumType.defaultint = 9559;
	enumType.keyType = INT;
	enumType.valueArray = [9559, 9561, 9558, 9563];
	enumType.size = 4;
	break;

case 9767:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30536];
	enumType.size = 1;
	break;

case 9768:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 34195];
	enumType.size = 1;
	break;

case 9770:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31596, 31597, 31598, 31599, 31600, 31601, -1, 31606, 31607, 31608, 31609, 31610, -1, 31615, 31616, 31617, 31618, -1, 31643, 31644, 31645, 31646, 31613];
	enumType.size = 23;
	break;

case 9771:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34201, 34206, 34211, 34216];
	enumType.size = 4;
	break;

case 9773:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30542, 30548, 30549, 30550];
	enumType.size = 4;
	break;

case 9774:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34222, null, null, null, 34223, null, null, 34224, null, 34226, 34225];
	enumType.size = 5;
	break;

case 9784:
	enumType.valueMap = {19586=15307, 19594=19427, 19587=19428, 23131=19829, 26451=26450, 19588=19429};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = STRUCT;
	enumType.size = 6;
	break;

case 9785:
	enumType.valueMap = {26450=26451, 15307=19586, 19427=19594, 19428=19587, 19429=19588, 19829=23131};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = STRUCT;
	enumType.size = 6;
	break;

case 9786:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30560, 30561, 30562, 30563, 30564, 30565, 30566, 30567, 30568, 30569, 30570, 30571, 30572];
	enumType.size = 13;
	break;

case 9787:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30573, 30574, 30575, 30576, 30577, 30578, 30579, 30580];
	enumType.size = 8;
	break;

case 9788:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30581, 30582, 30583, 30584, 30585, 30586, 30587, 30588, 30589, 30590, 30591, 30592, 30593, 30594, 30595, 30596, 30597, 30598, 30599, 30600, 30601, 30602, 30603, 30604, 30605, 30606, 30607, 30608, 30609];
	enumType.size = 29;
	break;

case 9789:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30610, 30611, 30612];
	enumType.size = 3;
	break;

case 9790:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30613, 30614, 30615, 30616, 30617];
	enumType.size = 5;
	break;

case 9791:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30618, 30619, 30620, 30621, 30622, 30623];
	enumType.size = 6;
	break;

case 9792:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30624, 30625, 30626, 30627];
	enumType.size = 4;
	break;

case 9793:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30628, 30629, 30630, 30631, 30632];
	enumType.size = 5;
	break;

case 9794:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30633, 30634, 30635, 30636, 30637];
	enumType.size = 5;
	break;

case 9795:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30638, 30639];
	enumType.size = 2;
	break;

case 9796:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30640, 30641, 30642, 30643, 30644, 30645, 30646, 30647];
	enumType.size = 8;
	break;

case 9797:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30648, 30649, 30650, 30651, 30652];
	enumType.size = 5;
	break;

case 9798:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30653, 30654, 30655, 30656, 30657];
	enumType.size = 5;
	break;

case 9799:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30658, 30659, 30660, 30661, 30662, 30663];
	enumType.size = 6;
	break;

case 9800:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30664, 30665, 30666, 30667, 30668, 30669, 30670];
	enumType.size = 7;
	break;

case 9801:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30671, 30672, 30673, 30674, 30675, 30676];
	enumType.size = 6;
	break;

case 9802:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30677, 30678, 30679, 30680, 30681, 30682, 30683, 30684, 30685, 30686, 30687, 30688, 30689, 30690, 30691, 30692, 30693, 30694, 30695, 30696, 30697];
	enumType.size = 21;
	break;

case 9803:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30698, 30699, 30700, 30701, 30702, 30703, 30704, 30705, 30706, 30707];
	enumType.size = 10;
	break;

case 9804:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30708, 30709, 30710, 30711];
	enumType.size = 4;
	break;

case 9805:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30712, 30713, 30714, 30715, 30716, 30717, 30718, 30719, 30720, 30721, 30722, 30723, 30724, 30725, 30726, 30727, 30728, 30729, 30730, 30731, 30732, 32140, 32141, 30733, 30734, 30735];
	enumType.size = 26;
	break;

case 9806:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34244];
	enumType.size = 1;
	break;

case 9808:
	enumType.valueMap = {29185=34292, 29186=34293, 29188=34292, 12169=34296, 12170=34297, 10639=34246, 10640=34248, 10641=34250, 10642=34252, 9747=34246, 10643=34254, 9748=34247, 10644=34256, 10645=34258, 9750=34248, 10646=34260, 9751=34249, 10647=34262, 10648=34264, 9753=34250, 10649=34266, 9754=34251, 10650=34268, 10651=34270, 9756=34252, 10652=34272, 9757=34253, 10653=34274, 10654=34276, 9759=34254, 10655=34278, 9760=34255, 10656=34280, 10657=34282, 9762=34256, 10658=34284, 9763=34257, 10659=34286, 10660=34288, 9765=34258, 10661=34290, 9766=34259, 9768=34262, 9769=34263, 9771=34264, 9772=34265, 9774=34266, 9775=34267, 9777=34268, 9778=34269, 9780=34270, 9781=34271, 9783=34272, 9784=34273, 9786=34274, 9787=34275, 9789=34276, 9790=34277, 9792=34278, 9793=34279, 9795=34280, 9796=34281, 9798=34282, 9799=34283, 9801=34284, 9802=34285, 9804=34286, 18508=34294, 9805=34287, 18509=34295, 9807=34288, 9808=34289, 9810=34290, 9811=34291, 9813=34670, 15706=34294, 9948=34260, 9949=34261, 12524=34296};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 79;
	break;

case 9809:
	enumType.valueMap = {29185=26, 29186=26, 29188=26, 9747=1, 9748=1, 9750=2, 9751=2, 9753=5, 9754=5, 9756=3, 9757=3, 9759=7, 9760=7, 9762=4, 9763=4, 9765=12, 9766=12, 9768=6, 9769=6, 9771=8, 9772=8, 9774=9, 9775=9, 9777=10, 9778=10, 9780=11, 9781=11, 9783=19, 9784=19, 9786=20, 9787=20, 9789=22, 9790=22, 9792=13, 9793=13, 9795=14, 9796=14, 9798=15, 9799=15, 9801=16, 9802=16, 9804=17, 18508=25, 9805=17, 18509=25, 9807=18, 9808=18, 9810=21, 9811=21, 9813=31, 15706=25, 34670=31, 12169=24, 12170=24, 10639=1, 10640=2, 10641=5, 10642=3, 10643=7, 10644=4, 10645=12, 10646=23, 10647=6, 10648=8, 10649=9, 10650=10, 10651=11, 10652=19, 10653=20, 10654=22, 10655=13, 10656=14, 10657=15, 10658=16, 10659=17, 10660=18, 10661=21, 34246=1, 34247=1, 34248=2, 34249=2, 34250=5, 34251=5, 34252=3, 34253=3, 34254=7, 34255=7, 34256=4, 34257=4, 34258=12, 34259=12, 34260=23, 34261=23, 34262=6, 34263=6, 34264=8, 34265=8, 34266=9, 34267=9, 9948=23, 34268=10, 9949=23, 34269=10, 34270=11, 34271=11, 34272=19, 34273=19, 34274=20, 34275=20, 34276=22, 34277=22, 34278=13, 34279=13, 34280=14, 34281=14, 34282=15, 34283=15, 34284=16, 12524=24, 34285=16, 34286=17, 34287=17, 34288=18, 34289=18, 34290=21, 34291=21, 34292=26, 34293=26, 34294=25, 34295=25, 34296=24, 34297=24};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 132;
	break;

case 9810:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, 104464426, 104464425, 104464424, 104464423, 104464422, 104464421, 104464420, 104464419, null, null, 104464577, 104464417, 104464416, 104464415, 104464414, 104464413, 104464412, 104464411, null, null, 104464589, 104464409, 104464408, 104464407, 104464406, 104464405, 104464404, 104464403, null, null, 104464601, 104464401, 104464400, 104464399, 104464398, 104464397, 104464396, 104464395];
	enumType.size = 32;
	break;

case 9811:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, 104464472, 104464507, 104464518, 104464529, 104464540, 104464551, 104464562, 104464573, null, null, 104464585, 104464620, 104464631, 104464642, 104464653, 104464664, 104464675, 104464686, null, null, 104464597, 104464697, 104464708, 104464719, 104464730, 104464741, 104464752, 104464763, null, null, 104464609, 104464774, 104464785, 104464796, 104464807, 104464818, 104464829, 104464840];
	enumType.size = 32;
	break;

case 9812:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, 104464473, 104464508, 104464519, 104464530, 104464541, 104464552, 104464563, 104464574, null, null, 104464586, 104464621, 104464632, 104464643, 104464654, 104464665, 104464676, 104464687, null, null, 104464598, 104464698, 104464709, 104464720, 104464731, 104464742, 104464753, 104464764, null, null, 104464610, 104464775, 104464786, 104464797, 104464808, 104464819, 104464830, 104464841];
	enumType.size = 32;
	break;

case 9813:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, 104464475, 104464510, 104464521, 104464532, 104464543, 104464554, 104464565, 104464576, null, null, 104464588, 104464623, 104464634, 104464645, 104464656, 104464667, 104464678, 104464689, null, null, 104464600, 104464700, 104464711, 104464722, 104464733, 104464744, 104464755, 104464766, null, null, 104464612, 104464777, 104464788, 104464799, 104464810, 104464821, 104464832, 104464843];
	enumType.size = 32;
	break;

case 9814:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34299, 34300];
	enumType.size = 2;
	break;

case 9815:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30765];
	enumType.size = 1;
	break;

case 9816:
	enumType.valueMap = {9=34301};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9817:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30767];
	enumType.size = 1;
	break;

case 9818:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34304, null, null, null, 34305, null, null, 34306, null, 34308, 34307];
	enumType.size = 5;
	break;

case 9819:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30774, 30780, 30781, 30782];
	enumType.size = 4;
	break;

case 9820:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34310, null, null, null, 34311, null, null, 34312, null, 34314, 34313];
	enumType.size = 5;
	break;

case 9821:
	enumType.valueMap = {5=34316, 3=34315};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 9822:
	enumType.valueMap = {5=34317};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9823:
	enumType.valueMap = {0=34319, 4=34320, 7=34321};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 3;
	break;

case 9824:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34323, null, null, null, 34324, null, null, 34325, null, 34326, 34327];
	enumType.size = 5;
	break;

case 9825:
	enumType.valueMap = {5=34328};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9826:
	enumType.valueMap = {0=34329, 10=34332, 4=34330, 7=34331};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 9827:
	enumType.valueMap = {3=34333};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9828:
	enumType.valueMap = {5=34334};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9835:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14677, 25028, 14683, 14699, 28432, 14710, 14686, 14700, 14715, 14682, 14690, 14698, 28505, 14718, 28429, 14701, 14712, 14721, 14678, 14711, 14707, 14679, 14713, 14720, 14704, 14717];
	enumType.size = 26;
	break;

case 9836:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14677, 25028, 14683, 14699, 28432, 14710, 14686, 14700, 14715, 14682, 14690, 14698, 28505, 14718, 28429, 14701, 14712, 14691, 14721, 14678, 14711, 14707, 14679, 14713, 14720, 14704, 14717, 14714];
	enumType.size = 28;
	break;

case 9841:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30808, 30841, 30810, 30811, 30809, -1, 30842, 30813, 30812, 30814, 30817, 30816, 30815, 30818];
	enumType.size = 14;
	break;

case 9847:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Strength, Size, Speed, Agility, Stamina, Temperament];
	enumType.size = 6;
	break;

case 9848:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, very pale , fairly pale , pale , medium , fairly bright , bright , very bright ];
	enumType.size = 7;
	break;

case 9849:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34482, 34483, 34484, 34485, 34486, 34487, 34488, 34489, 34490, 34491, 34492];
	enumType.size = 11;
	break;

case 9851:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30750];
	enumType.size = 1;
	break;

case 9852:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30751];
	enumType.size = 1;
	break;

case 9853:
	enumType.valueMap = {10=34502};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9854:
	enumType.valueMap = {3=34503};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9859:
	enumType.valueType = unknownScriptVarType4712;
	enumType.defaultint = 4282;
	enumType.keyType = INT;
	enumType.valueArray = [4282, 4278, 4283, 4285, 4279, 4276, 4281, 4277, 4284, 4280];
	enumType.size = 10;
	break;

case 9860:
	enumType.valueMap = {5=34512, 3=34511};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 9861:
	enumType.valueMap = {5=34514, 3=34513};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 9862:
	enumType.valueMap = {5=34516, 3=34515};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 9863:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30824, 30825, 30826, 30846, 30847, 30848, 30849, 30850, -1, 30851, 30852, 30853, 30854, 30855, 30856, 30857, 30858, -1, 30859, 30860, 30861, 30862, 30863, 30864, -1, 30865, 30866, 30867, 30868, 30869];
	enumType.size = 30;
	break;

case 9864:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25185, 25186, 25187, 25189, 25188];
	enumType.size = 5;
	break;

case 9865:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25195, 25196, 25197, 25199, 25198];
	enumType.size = 5;
	break;

case 9866:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25190, 25191, 25192, 25194, 25193];
	enumType.size = 5;
	break;

case 9867:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [29865, 29866, 29867, 29869, 29868];
	enumType.size = 5;
	break;

case 9868:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31347, 31346, 31345, 31344, 31343];
	enumType.size = 5;
	break;

case 9869:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [27587, 27589, 27590, 27588, 27591];
	enumType.size = 5;
	break;

case 9870:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28995, 28996, 28997, 28998, 28999];
	enumType.size = 5;
	break;

case 9871:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [25180, 25181, 25182, 25184, 25183];
	enumType.size = 5;
	break;

case 9872:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31580, 31581, 31582, 31583, 31584];
	enumType.size = 5;
	break;

case 9873:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31585, 31586, 31587, 31588, 31589];
	enumType.size = 5;
	break;

case 9874:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31575, 31576, 31577, 31578, 31579];
	enumType.size = 5;
	break;

case 9875:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32347, 32348, 32349, 32350, 32351];
	enumType.size = 5;
	break;

case 9876:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32352, 32353, 32354, 32355, 32356];
	enumType.size = 5;
	break;

case 9877:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32342, 32343, 32344, 32345, 32346];
	enumType.size = 5;
	break;

case 9878:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28400, 28396, 28404, 28410, 28388, 28392, 28412, 28414, 28402, 28420, 28384, 28422, 28408, 28416];
	enumType.size = 14;
	break;

case 9882:
	enumType.valueType = STRING;
	enumType.defaultstr = "Protean logs";
	enumType.keyType = INT;
	enumType.valueArray = [Protean logs];
	enumType.size = 1;
	break;

case 9883:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [9884];
	enumType.size = 1;
	break;

case 9884:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34529, 34531];
	enumType.size = 2;
	break;

case 9885:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30897];
	enumType.size = 1;
	break;

case 9886:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34535, null, null, null, 34536, null, null, 34537, null, 34539, 34538];
	enumType.size = 5;
	break;

case 9896:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [107347988, 107347987, 107347986, 107347985, 107347984, 107347983, 107347982, 107347981, 107347980, 107347979];
	enumType.size = 10;
	break;

case 9897:
	enumType.valueType = STRING;
	enumType.defaultstr = "Entry fee";
	enumType.keyType = INT;
	enumType.valueArray = [Just for fun, 5 000, 10 000, 25 000, 50 000, 100 000, 250 000, 500 000, 1 000 000];
	enumType.size = 9;
	break;

case 9898:
	enumType.valueType = STRING;
	enumType.defaultstr = "Entry fee";
	enumType.keyType = INT;
	enumType.valueArray = [Just for fun, 5.000, 10.000, 25.000, 50.000, 100.000, 250.000, 500.000, 1.000.000];
	enumType.size = 9;
	break;

case 9901:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34999, null, null, null, 35000, null, null, 35001, null, 35002, 35003];
	enumType.size = 5;
	break;

case 9902:
	enumType.valueMap = {2438=2541, 2439=2546, 2503=2886, 2440=2551, 2504=2906, 2441=2556, 2505=2896, 2506=2916, 2612=9752, 2262=1868, 2263=1878, 2264=1873, 2265=1883, 991=9742};
	enumType.valueType = STRUCT;
	enumType.defaultint = 1868;
	enumType.keyType = UNKNOWN1;
	enumType.size = 14;
	break;

case 9903:
	enumType.valueMap = {2438=2561, 2439=2566, 2503=2891, 2440=2571, 2504=2911, 2441=2576, 2505=2901, 2506=2921, 2612=9757, 2262=1888, 2263=1898, 2264=1893, 2265=1903, 991=9747};
	enumType.valueType = STRUCT;
	enumType.defaultint = 1888;
	enumType.keyType = UNKNOWN1;
	enumType.size = 14;
	break;

case 9904:
	enumType.valueMap = {29185=34655, 29186=34657, 29187=34659, 9747=34540, 9748=34542, 9749=34544, 9750=34545, 9751=34547, 9752=34549, 9753=34550, 9754=34552, 9755=34554, 9756=34555, 9757=34557, 9758=34559, 9759=34560, 9760=34562, 9761=34564, 9762=34565, 9763=34567, 9764=34569, 9765=34570, 9766=34572, 9767=34574, 9768=34580, 9769=34582, 9770=34584, 9771=34585, 9772=34587, 9773=34589, 9774=34590, 9775=34592, 9776=34594, 9777=34595, 9778=34597, 9779=34599, 9780=34600, 9781=34602, 9782=34604, 9783=34605, 9784=34607, 9785=34609, 9786=34610, 9787=34612, 9788=34614, 9789=34615, 9790=34617, 9791=34619, 9792=34620, 9793=34622, 9794=34624, 9795=34625, 9796=34627, 9797=34629, 9798=34630, 9799=34632, 9800=34634, 9801=34635, 9802=34637, 9803=34639, 9804=34640, 18508=34660, 9805=34642, 18509=34662, 9806=34644, 18510=34664, 9807=34645, 9808=34647, 9809=34649, 9810=34650, 9811=34652, 9812=34654, 9813=34967, 9814=34968, 34670=34969, 12169=34665, 12170=34667, 12171=34669, 34246=34541, 34247=34543, 34248=34546, 34249=34548, 34250=34551, 34251=34553, 34252=34556, 34253=34558, 34254=34561, 34255=34563, 34256=34566, 34257=34568, 34258=34571, 34259=34573, 34260=34576, 34261=34578, 34262=34581, 34263=34583, 34264=34586, 34265=34588, 34266=34591, 34267=34593, 9948=34575, 34268=34596, 9949=34577, 34269=34598, 34270=34601, 9950=34579, 34271=34603, 34272=34606, 34273=34608, 34274=34611, 34275=34613, 34276=34616, 34277=34618, 34278=34621, 34279=34623, 34280=34626, 34281=34628, 34282=34631, 34283=34633, 34284=34636, 34285=34638, 34286=34641, 34287=34643, 34288=34646, 34289=34648, 34290=34651, 34291=34653, 34292=34656, 34293=34658, 34294=34661, 34295=34663, 34296=34666, 34297=34668};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 133;
	break;

case 9905:
	enumType.valueMap = {34560=9759, 34561=34254, 34562=9760, 34563=34255, 34564=9761, 34565=9762, 34566=34256, 34567=9763, 34568=34257, 34569=9764, 34570=9765, 34571=34258, 34572=9766, 34573=34259, 34574=9767, 34575=9948, 34576=34260, 34577=9949, 34578=34261, 34579=9950, 34580=9768, 34581=34262, 34582=9769, 34583=34263, 34584=9770, 34585=9771, 34586=34264, 34587=9772, 34588=34265, 34589=9773, 34590=9774, 34591=34266, 34592=9775, 34593=34267, 34594=9776, 34595=9777, 34596=34268, 34597=9778, 34598=34269, 34599=9779, 34600=9780, 34601=34270, 34602=9781, 34603=34271, 34604=9782, 34605=9783, 34606=34272, 34607=9784, 34608=34273, 34609=9785, 34610=9786, 34611=34274, 34612=9787, 34613=34275, 34614=9788, 34615=9789, 34616=34276, 34617=9790, 34618=34277, 34619=9791, 34620=9792, 34621=34278, 34622=9793, 34623=34279, 34624=9794, 34625=9795, 34626=34280, 34627=9796, 34628=34281, 34629=9797, 34630=9798, 34631=34282, 34632=9799, 34633=34283, 34634=9800, 34635=9801, 34636=34284, 34637=9802, 34638=34285, 34639=9803, 34640=9804, 34641=34286, 34642=9805, 34643=34287, 34644=9806, 34645=9807, 34646=34288, 34647=9808, 34648=34289, 34649=9809, 34650=9810, 34651=34290, 34652=9811, 34653=34291, 34654=9812, 34655=29185, 34656=34292, 34657=29186, 34658=34293, 34659=29187, 34660=18508, 34661=34294, 34662=18509, 34663=34295, 34664=18510, 34665=12169, 34666=34296, 34667=12170, 34668=34297, 34669=12171, 34967=9813, 34968=9814, 34969=34670, 34540=9747, 34541=34246, 34542=9748, 34543=34247, 34544=9749, 34545=9750, 34546=34248, 34547=9751, 34548=34249, 34549=9752, 34550=9753, 34551=34250, 34552=9754, 34553=34251, 34554=9755, 34555=9756, 34556=34252, 34557=9757, 34558=34253, 34559=9758};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = OBJ;
	enumType.size = 133;
	break;

case 9908:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [-1, 30944, 30943, 30942, 30941, 30940, 30939, 30938, 30937, 30936, 30935, 30934, 30933, 30932, 30931, 32057, null, 31324, 31390, 31554];
	enumType.size = 19;
	break;

case 9909:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 15];
	enumType.size = 19;
	break;

case 9910:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Spawn NPCs, Custom Spawn NPCs, Kill NPCs];
	enumType.size = 3;
	break;

case 9911:
	enumType.valueType = NPC;
	enumType.defaultint = 14232;
	enumType.keyType = INT;
	enumType.valueArray = [14232, 14233, 14234, 14235];
	enumType.size = 4;
	break;

case 9912:
	enumType.valueType = NPC;
	enumType.defaultint = 14227;
	enumType.keyType = INT;
	enumType.valueArray = [14227, 14228, 14229, 14230, 14231];
	enumType.size = 5;
	break;

case 9913:
	enumType.valueMap = {14227=1, 14228=2, 14229=2, 14230=2, 14231=2};
	enumType.valueType = INT;
	enumType.keyType = NPC;
	enumType.size = 5;
	break;

case 9914:
	enumType.valueType = NPC;
	enumType.defaultint = 15215;
	enumType.keyType = INT;
	enumType.valueArray = [15215, 15216, 15217, 15218];
	enumType.size = 4;
	break;

case 9915:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Spawn Dancers, Carnival time, Let them eat...hats?, Remove NPCs];
	enumType.size = 4;
	break;

case 9916:
	enumType.valueType = NPC;
	enumType.defaultint = 14217;
	enumType.keyType = INT;
	enumType.valueArray = [14217, 14218, 14219, 14220, 14221];
	enumType.size = 5;
	break;

case 9917:
	enumType.valueMap = {14217=1, 14218=1, 14219=1, 14220=1, 14221=2};
	enumType.valueType = INT;
	enumType.keyType = NPC;
	enumType.size = 5;
	break;

case 9918:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 15, 1];
	enumType.size = 2;
	break;

case 9919:
	enumType.valueType = NPC;
	enumType.defaultint = 15559;
	enumType.keyType = INT;
	enumType.valueArray = [15559];
	enumType.size = 1;
	break;

case 9920:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Drop the Balloons, Clear up invisible balloons];
	enumType.size = 2;
	break;

case 9921:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [6];
	enumType.size = 1;
	break;

case 9922:
	enumType.valueType = NPC;
	enumType.defaultint = 14222;
	enumType.keyType = INT;
	enumType.valueArray = [14222, 14223, 14224, 14225, 14226];
	enumType.size = 5;
	break;

case 9923:
	enumType.valueMap = {0=170, 1026=170, 515=200, 1027=170, 4=170, 1028=170, 1029=170, 1030=170, 8=180, 1034=180, 16=170, 17=140, 1043=160, 1044=200, 1045=170, 1046=160, 1047=160, 1048=160, 25=180, 1049=160, 1050=200, 1051=200, 29=180, 31=180, 1057=100, 34=170, 1058=100, 36=170, 48=160, 1079=100, 1081=110, 58=130, 1102=100, 1103=100, 1104=100, 1105=100, 1107=100, 1110=110, 1111=100, 1112=100, 603=180, 93=170, 1117=90, 1118=90, 607=190, 1119=90, 1120=90, 1121=100, 99=160, 1123=100, 1124=100, 1125=100, 1126=100, 1127=100, 617=140, 626=190, 627=190, 628=190, 635=190, 1147=190, 1149=190, 1150=180, 1151=180, 1152=190, 1153=165, 1155=190, 648=180, 649=180, 660=170, 1176=200, 1180=135, 1186=155, 1187=155, 164=200, 1188=155, 1199=180, 694=170, 1208=190, 1213=190, 1218=190, 1220=190, 1223=200, 1224=190, 1225=170, 1228=200, 1230=155, 1231=155, 1232=155, 1233=155, 1234=155, 1235=155, 1236=155, 1237=155, 214=140, 1238=200, 1239=155, 1241=155, 1242=155, 1243=155, 1244=155, 1245=155, 1246=155, 1247=155, 1248=185, 1249=200, 1251=190, 231=140, 232=130, 233=130, 745=160, 235=130, 1260=190, 1261=155, 1263=155, 240=170, 1266=190, 1267=110, 1269=200, 247=200, 759=220, 1273=210, 1274=170, 1275=130, 1276=200, 255=130, 260=170, 784=165, 785=165, 786=165, 787=165, 788=165, 789=165, 790=165, 279=120, 791=165, 792=165, 793=165, 794=165, 795=165, 796=165, 285=160, 797=165, 286=200, 798=165, 287=170, 799=165, 295=170, 296=170, 304=170, 816=165, 817=165, 818=165, 819=165, 820=165, 821=165, 822=165, 823=165, 824=165, 825=165, 826=165, 827=165, 828=165, 829=165, 830=165, 831=165, 848=165, 849=165, 850=165, 851=165, 852=165, 853=165, 342=180, 854=165, 855=165, 856=165, 857=165, 858=165, 859=165, 860=165, 861=165, 862=165, 863=165, 896=165, 897=165, 898=165, 899=165, 900=165, 901=165, 902=165, 903=165, 904=165, 905=165, 906=165, 907=165, 908=165, 909=165, 910=165, 911=165, 912=165, 401=200, 913=165, 914=165, 915=165, 916=165, 917=165, 918=165, 407=190, 919=165, 920=165, 921=165, 922=165, 923=165, 924=165, 925=165, 926=165, 927=165, 417=200, 945=110, 948=100, 953=170, 442=190, 972=190, 974=190, 976=230, 983=190, 984=190, 473=150, 985=180, 987=200, 988=200, 989=200, 990=180, 481=170, 490=200, 491=200, 492=200, 493=200, 494=200, 504=160, 1023=140};
	enumType.valueType = INT;
	enumType.defaultint = 150;
	enumType.keyType = INT;
	enumType.size = 240;
	break;

case 9924:
	enumType.valueType = NPC;
	enumType.defaultint = 14204;
	enumType.keyType = INT;
	enumType.valueArray = [14204, 14205, 14206];
	enumType.size = 3;
	break;

case 9925:
	enumType.valueType = NPC;
	enumType.defaultint = 15505;
	enumType.keyType = INT;
	enumType.valueArray = [15505];
	enumType.size = 1;
	break;

case 9926:
	enumType.valueMap = {164=200};
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 9927:
	enumType.valueType = NPC;
	enumType.defaultint = 14211;
	enumType.keyType = INT;
	enumType.valueArray = [14211, 14212, 14213, 14214, 14215, 14216];
	enumType.size = 6;
	break;

case 9928:
	enumType.valueMap = {14216=2, 14211=1, 14212=1, 14213=2, 14214=2, 14215=2};
	enumType.valueType = INT;
	enumType.keyType = NPC;
	enumType.size = 6;
	break;

case 9929:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [null, 10, 10];
	enumType.size = 2;
	break;

case 9930:
	enumType.valueType = NPC;
	enumType.defaultint = 14207;
	enumType.keyType = INT;
	enumType.valueArray = [14207, 14208, 14209, 14210];
	enumType.size = 4;
	break;

case 9931:
	enumType.valueType = NPC;
	enumType.defaultint = 20463;
	enumType.keyType = INT;
	enumType.valueArray = [20463, 20464, 20465, 20466];
	enumType.size = 4;
	break;

case 9932:
	enumType.valueType = NPC;
	enumType.defaultint = 14236;
	enumType.keyType = INT;
	enumType.valueArray = [14236];
	enumType.size = 1;
	break;

case 9933:
	enumType.valueType = NPC;
	enumType.defaultint = 14839;
	enumType.keyType = INT;
	enumType.valueArray = [14839, 14840, 14841];
	enumType.size = 3;
	break;

case 9934:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Spawn Fenris Wolves, Snow and Emote, Just snow, Kill Wolves/Snow];
	enumType.size = 4;
	break;

case 9935:
	enumType.valueType = NPC;
	enumType.defaultint = 15504;
	enumType.keyType = INT;
	enumType.valueArray = [15504];
	enumType.size = 1;
	break;

case 9936:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [You'll need to contact Player Support for an answer to that., You can contact our support team via the RuneScape website., That seems like a bug - can you submit a bug report?, Sorry, JMods can't do that!, Sounds like a cool idea, put it on RuneLabs!, Please report any bots you see so our team can take a look., Don't forget to follow @RuneScape on Twitter., Great to hear your feedback. I'll be sure to pass it on to the right people!, You can't apply to be a P-Mod - if chosen we contact you via game inbox., We select players who are friendly, helpful and who follow the rules for P-Mod., Head to the Events & Competitions forum to find out about JMod run events., You can submit a bug report by clicking on the flag on your chat box., Please stop spamming.];
	enumType.size = 13;
	break;

case 9937:
	enumType.valueMap = {0= None, 1=Zombie, 2=Zombie 2, 3=Zombie 3, 4=Zogre - Fally, 5=Zogre - Kharid, 6=Zogre - Barbarian, 7=Crawling Hand, 8=Snow ranger, 9=White Squirrel, 10=Red Squirrel, 11=Grey Squirrel, 12=Xmas Tree, 13=Burning Xmas Tree, 14=Good Reindeer, 15=Evil Reindeer, 16=Rory Reindeer (Adult), 17=Rory Reindeer (Juvi), 18=Rory Reindeer (Baby), 22=Squirrel, 23=Squirrel, 24=Squirrel, 25=Squirrel, 26=Normal Monkey, 27=Black Santa Hat, 28=Black Party Hat, 29=Araxxor - Melee, 30=Araxxor - Magic, 31=Araxxor - Ranged, 32=Araxxi, 33=Vorago, 34=KBD, 35=Nex, 36=General Graardor, 37=Kree'arra, 38=Chaos Elemental, 39=Commander Zilyana, 40=K'ril Tsutsaroth, 41=TzTok-Jad, 42=Deposit Box, 43=Pack Yak, 44=Meat Pizza, 45=Cup of Tea, 46=Rainbow Lootbeam, 47=Kalphite King, 48=Mega Ducklings, 49=Lootbeam, 50=Wizard Chambers, 999=Signature NPC};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 49;
	break;

case 9938:
	enumType.valueMap = {0=-1, 1=14196, 2=14197, 3=14198, 4=14199, 5=14200, 6=14201, 7=14202, 8=14207, 9=3283, 10=3284, 11=3285, 12=17206, 13=17207, 14=18837, 15=18838, 16=18816, 17=18815, 18=18814, 22=6920, 23=7302, 24=7304, 25=7306, 26=1487, 27=18879, 28=19274, 29=20998, 30=20999, 31=21000, 32=21001, 33=21002, 34=21003, 35=21004, 36=21005, 37=21006, 38=21007, 39=21075, 40=21076, 41=21077, 42=21078, 43=21079, 44=21080, 45=21081, 46=21082, 47=21084, 48=21085, 49=21083, 50=21074, 999=-1};
	enumType.valueType = NPC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 49;
	break;

case 9939:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30947, 30948, 30949];
	enumType.size = 3;
	break;

case 9940:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30951, 30952, 30953, 30954];
	enumType.size = 4;
	break;

case 9941:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30955, 30956];
	enumType.size = 2;
	break;

case 9942:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30957, 30958, 30959];
	enumType.size = 3;
	break;

case 9943:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30960];
	enumType.size = 1;
	break;

case 9944:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [30961, 30962];
	enumType.size = 2;
	break;

case 9962:
	enumType.valueType = TILE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 52661131, 34164555, 54021233, 43158805, 47500761, 46386556, 50875619, 50253234, 48614732, 52972694, 49335440, 44060059, 47156595, 52661553, 41438231, 57626044, 38768024, 44437086, 45239372, 41487160, 36932686, 51498548, 577407637, 304614689];
	enumType.size = 24;
	break;

case 9963:
	enumType.valueMap = {103=170, 104=170, 105=170, 106=170, 107=170, 77=145, 109=190, 78=170, 79=135, 80=170, 81=155, 82=170, 83=155, 84=170, 87=190, 119=110, 120=110};
	enumType.valueType = INT;
	enumType.defaultint = 150;
	enumType.keyType = INT;
	enumType.size = 17;
	break;

case 9964:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34734, 34736];
	enumType.size = 2;
	break;

case 9965:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [95551529, 95485995];
	enumType.size = 2;
	break;

case 9966:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34678, null, null, null, 34681, null, null, 34682, null, 34684, 34683];
	enumType.size = 5;
	break;

case 9967:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34679];
	enumType.size = 1;
	break;

case 9968:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34680];
	enumType.size = 1;
	break;

case 9969:
	enumType.valueMap = {1=96678, 2=96680, 3=96682, 4=96684, 5=96686, 6=96702, 7=96703, 8=96701, 9=96698, 10=96700, 11=96696, 12=96695, 13=96697, 14=96694, 15=96699, 16=96693, 17=96688, 18=96692, 19=96691, 20=96689, 21=96690, 22=96675, 23=96676, 24=96677, 59=96679, 60=96681, 61=96683, 62=96685, 63=96687};
	enumType.valueType = LOCATION;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 29;
	break;

case 9970:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 105709594, 105709595, 105709596, 105709597, 105709598, 105709599, 105709600, 105709601, 105709602, 105709603, 105709604, 105709605, 105709606, 105709607, 105709610, 105709611, 105709612, 105709613, 105709614, 105709615, 105709616, 105709617, 105709618, 105709619, 105709620, 105709621, 105709622, 105709623, 105709624, 105709625];
	enumType.size = 30;
	break;

case 9971:
	enumType.valueType = STRING;
	enumType.defaultstr = "Select an object to place";
	enumType.keyType = INT;
	enumType.valueArray = [null, Seaweed, Kelp, Oyster, Mermaid's Purse, Treasure Chest, Ship's Bow, Ship's Stern, Coral Reef, Boot, Rocks, Cracked Pots, Cannon, Anchor, Stone Head, Castle, White Wolf Mountain, Vorago Statue, Fremennik Longboat, Sea Troll Eggs, Fishing Guild Arch, Tribal Mask, Plug, Chinchompa Plug, Stone of Jas Plug];
	enumType.size = 24;
	break;

case 9972:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 26345549, 26345558, 26345736, 26345737, 26345739, 26345741, 26345740, 26345740, 26345743, 26345743, 26345747, 26345738, 26345745, 26345748, 26345750, 26345752, 26345753, 26345754, 26345755, 26345757, 26345749, 26345742, 26345746, 26345744, 26345756, 26345751];
	enumType.size = 26;
	break;

case 9979:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [6236, 31259, 31260, 31261, 31262];
	enumType.size = 5;
	break;

case 9980:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31263, 31264, 31265, 31266, 31267];
	enumType.size = 5;
	break;

case 9981:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31268, 31269, 31270, 31271, 31272];
	enumType.size = 5;
	break;

case 9982:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31273, 31274, 31275, 31276, 31277];
	enumType.size = 5;
	break;

case 9983:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Skilling, Combat, Social/Minigame, Miscellaneous];
	enumType.size = 4;
	break;

case 9986:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 7, 3, 49];
	enumType.size = 4;
	break;

case 9987:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 49, 3, 4, 7, 5, 20, 42];
	enumType.size = 8;
	break;

case 9988:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 3, 4, 7, 20, 21, 42];
	enumType.size = 8;
	break;

case 9989:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 49, 3, 4, 7, 20, 42];
	enumType.size = 7;
	break;

case 9990:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [98762770, 98762771, 98762772, 98762773, 98762774, 98762775, 98762776, 98762777];
	enumType.size = 8;
	break;

case 9991:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [98762778, 98762779, 98762780, 98762781, 98762782, 98762783, 98762784, 98762785];
	enumType.size = 8;
	break;

case 9992:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1129, 1131, 6322, 1135, 2499, 2501, 2503, 2349, 2351, 2353, 2357, 2359, 2361, 2363, 1117, 1115, 1119, 1121, 1123, 1127, 1291, 1293, 1295, 1299, 1301, 1303, 839, 845, 847, 851, 855, 859, 9174, 9177, 9179, 9181, 9183, 9185, 1692, 1694, 1696, 1698, 1700, 1702, 1397];
	enumType.size = 45;
	break;

case 9993:
	enumType.valueMap = {105841096=105841095, 105841160=105841159, 105841224=105841223, 105841288=105841287, 105841352=105841351, 105841416=105841415, 105841088=105841087, 105841152=105841151, 105841216=105841215, 105841280=105841279, 105841344=105841343, 105841408=105841407, 105841112=105841111, 105841176=105841175, 105841240=105841239, 105841304=105841303, 105841368=105841367, 105841432=105841431, 105841104=105841103, 105841168=105841167, 105841232=105841231, 105841296=105841295, 105841360=105841359, 105841424=105841423, 105841128=105841127, 105841192=105841191, 105841256=105841255, 105841320=105841319, 105841384=105841383, 105841120=105841119, 105841184=105841183, 105841248=105841247, 105841312=105841311, 105841376=105841375, 105841440=105841439, 105841144=105841143, 105841208=105841207, 105841272=105841271, 105841336=105841335, 105841400=105841399, 105841136=105841135, 105841200=105841199, 105841264=105841263, 105841328=105841327, 105841392=105841391};
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 45;
	break;

case 9994:
	enumType.valueMap = {105841096=105841444, 105841160=105841452, 105841224=105841460, 105841288=105841468, 105841352=105841476, 105841416=105841484, 105841088=105840818, 105841152=105841451, 105841216=105841459, 105841280=105841467, 105841344=105841475, 105841408=105841483, 105841112=105841446, 105841176=105841454, 105841240=105841462, 105841304=105841470, 105841368=105841478, 105841432=105841486, 105841104=105841445, 105841168=105841453, 105841232=105841461, 105841296=105841469, 105841360=105841477, 105841424=105841485, 105841128=105841448, 105841192=105841456, 105841256=105841464, 105841320=105841472, 105841384=105841480, 105841120=105841447, 105841184=105841455, 105841248=105841463, 105841312=105841471, 105841376=105841479, 105841440=105841487, 105841144=105841450, 105841208=105841458, 105841272=105841466, 105841336=105841474, 105841400=105841482, 105841136=105841449, 105841200=105841457, 105841264=105841465, 105841328=105841473, 105841392=105841481};
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INTERFACE;
	enumType.size = 45;
	break;

case 9995:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [24920, 24921, 24922, 24923, 25170, 25171, null, 25172, null, 25173, 25383, null, 25169, 25384, 25385, 25386, null, null, 25388];
	enumType.size = 14;
	break;

case 9996:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 25387, null, 25389, 25390, 25391, 25392];
	enumType.size = 5;
	break;

case 9997:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31353];
	enumType.size = 1;
	break;

case 9998:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34790, null, null, null, 34791, null, null, 34792, null, 34794, 34793];
	enumType.size = 5;
	break;

case 9999:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [1, 0, 7, 2, 13, 9, 8, 5, 10, 12, 11, 6, 4, 3];
	enumType.size = 14;
	break;

case 10000:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Salmon, Trout, Rainbow fish, Rocktail, Cavefish, Lava eel, Shark, Tuna, Swordfish, Leaping trout, Leaping salmon, Leaping sturgeon, Monkfish, Lobster];
	enumType.size = 14;
	break;

case 10004:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31367];
	enumType.size = 1;
	break;

case 10005:
	enumType.valueMap = {9=34813, 10=34814, 4=34811, 7=34812};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 4;
	break;

case 10006:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4089, 4099, 4109, 6137, 6916, 3385, 6106, 9069, 9096, 13625, 13620, 13615, 14497, 15021, 15027, 15033, 15039, 21509];
	enumType.size = 18;
	break;

case 10007:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [4069, 8839, 5554, 6131, 6128, 6335, 6337, 6339, 6617, 5575, 9674, 6065, 10049, 10043, 10037, 10065, 10057, 10053, 10061, 20046, 10862, 10939, 9944, 4298, 11665, 11664, 11663, 19712, 19787, 19788, 8956, 8952, 8955, 8953, 8958, 8957, 8954, 14492, 15503, 15590, 15599, 20125, 20789, 21446, 21537, 21547, 21557, 21534, 21517, 22416, 22949, 24427, 27354, 26124, 26126, 26128, 26130, 26132, 26134, 26136, 26138, 26140, 28761, 32024, 28779, 32030, 30294, 32036, 30312, 32042, 34866, 28912, 28933, 14936, 24206, 31262, 31641, 31646, 31644, 31645, 31649, 31650, 31816, 32380, 10551, 10549, 10550, 10547, 10553, 27161, 30933, 7534, 6786, 6353, 6343, 6373, 6363, 26323, 26335, 26353, 9640, 9634];
	enumType.size = 102;
	break;

case 10008:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [3057, 6186, 6188, 7592, 6654, 6180, 546, 19776, 21596, 22314, 32192, 32618, 32732, 20980, 21052, 21116, 21188, 21897, 21977, 22057, 22137, 22578, 22653, 22733, 22813, 23922, 24002];
	enumType.size = 27;
	break;

case 10009:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1052, 6568, 6570, 4315, 2413, 9747, 9753, 9750, 9768, 9771, 9801, 9789, 9780, 9810, 9804, 9798, 9783, 9774, 9762, 9792, 9759, 9756, 9765, 9786, 9795, 9777, 9807, 9948, 9813, 12169, 18508, 19709, 29185, 10069, 10071, 15435, 20708, 20754, 20755, 20756, 20757, 20758, 20759, 20760, 20761, 20762, 20763, 20765, 20767, 20769, 21435, 23659, 31610, 31611, 18739, 18740, 18741, 18742, 18743, 4516, 4514, 4515, 4513, 24709, 19748, 19893, 31396, 31392, 31393, 31394, 31395, 32052, 32053, 32054, 32055, 32198, 32199, 32200, 32201, 32202, 32203, 32204, 32205, 33861, 10498, 10499, 20068, 30571];
	enumType.size = 88;
	break;

case 10010:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19167, 19188, 19209, 19230, 19251, 7362, 7364, 7390, 7392, 2583, 2591, 2631, 2633, 2635, 2637, 10366, 10396, 10392, 10394, 10398, 10316, 10318, 10320, 10322, 10324, 10404, 10412, 10408, 11282, 13095, 13105, 10280];
	enumType.size = 32;
	break;

case 10011:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [7319, 7321, 7323, 7325, 7327, 19173, 19194, 19215, 19236, 19257, 7370, 7372, 2577, 2599, 2607, 2645, 2647, 2649, 10364, 10400, 10416, 2579, 13097, 13107, 13111, 13115, 13109, 13113, 13103, 22552, 22558, 22554, 22556, 10282];
	enumType.size = 34;
	break;

case 10012:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19179, 19200, 19221, 19242, 19263, 7374, 7376, 7399, 2581, 2615, 2623, 2639, 2641, 2643, 2651, 2653, 2661, 2669, 3481, 10362, 10458, 10462, 10460, 10386, 10378, 10370, 11280, 13099, 13101, 24108, 24112, 24110, 24114, 19272, 19275, 19278, 19281, 19284, 19287, 21258, 21260, 21262, 21264, 10284];
	enumType.size = 44;
	break;

case 10013:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19290, 19293, 19296, 19299, 19302, 19305, 19335, 19337, 19342, 19380, 19384, 19382, 19413, 19428, 19398, 19461, 19453, 19445, 19327, 19329, 19323, 19331, 19325, 19146, 19143, 19149];
	enumType.size = 26;
	break;

case 10014:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13599, 13600, 13601, 13602, 13603, 13604, 13605, 13606, 13607, 13611, 13608, 13609, 13610, 13598];
	enumType.size = 14;
	break;

case 10015:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13629, 1437];
	enumType.size = 2;
	break;

case 10016:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [1659, 1676, 1674, 1666, 1653, 31393, 1658, 11514, 1660, 1675, 28049, 3107, 1679, 1666, 1653, 1674, 1660, 1659, 1676, 31393, 1658, 11514, 1675, 28049, 3107, 31394, 1660];
	enumType.size = 27;
	break;

case 10018:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31395, 31396, 31397, 31398, 31399, 31400, 31401, 31402, 31403, 31404, 31405, 31406, 31407, 31408, 31409, 31410, 31411, 31412, 31413, 31414, 31415, 31416, 31417, 31418, 31419, 31420, 31421, 31422, 31423, 31424, 31425, 31426, 31427, 31428, 31429, 31430, 31431, 31432, 31433];
	enumType.size = 39;
	break;

case 10019:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31522, 31523, 31524, 31525, 31526, 31527, 31528, 31529, 31530, 31531, 31532, 31533, 31534, 31535, 31536, 31537, 31538, 31539, 31540, 31541, 31542, 31543, 31544, 31545, 31546, 31547, 31548, 31549, 31550, 31551, 31552];
	enumType.size = 31;
	break;

case 10020:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31507, 31508, 31509, 31510, 31511, 31512, 31513, 31514, 31515, 31516, 31474, 31475, 31476, 31517, 31518, 31519, 31520, 31521];
	enumType.size = 18;
	break;

case 10021:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31434, 31435, 31436, 31437, 31438, 31439, 31440, 31441, 31442, 31443, 31444, 31445, 31446, 31447, 31448, 31449, 31450, 31451, 31452, 31453, 31454, 31455, 31456, 31457, 31458, 31459, 31460, 31461, 31462, 31463, 31464, 31465, 31466, 31467, 31468, 31469, 31470, 31471, 31472, 31473, 31477, 31478, 31479, 31480, 31481, 31482, 31483, 31484, 31485, 31486, 31487, 31488, 31489, 31490, 31491, 31492, 31493, 31494, 31495, 31496, 31497, 31498, 31499, 31500, 31501, 31502, 31503, 31504, 31505, 31506];
	enumType.size = 70;
	break;

case 10036:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec];
	enumType.size = 12;
	break;

case 10037:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [January, February, March, April, May, June, July, August, September, October, November, December];
	enumType.size = 12;
	break;

case 10038:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Give Tea];
	enumType.size = 1;
	break;

case 10039:
	enumType.valueMap = {1=XP, 17=DPM, 33=Drops, 2=XP/hr, 18=Potential DPM, 19=Accuracy, 35=GP/hr, 4=ETA, 11=Max hit, 13=NPC kills, 15=Dmg, 31=Change};
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.size = 12;
	break;

case 10040:
	enumType.valueType = OBJ;
	enumType.defaultint = 975;
	enumType.keyType = INT;
	enumType.valueArray = [975, 6313, 6315, 6317];
	enumType.size = 4;
	break;

case 10041:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = 25482;
	enumType.keyType = INT;
	enumType.valueArray = [null, 25482, 25483, 25484, 25485];
	enumType.size = 4;
	break;

case 10045:
	enumType.valueType = STRING;
	enumType.defaultstr = "\"\";";
	enumType.keyType = INT;
	enumType.valueArray = [Leprechaun, Imp, Goblin, Skeleton, Zombie, Hobgoblin, Giant, Banshee, Ghoul, Earth Warrior, Aberrant Spectre, Human, Jogre, Mummy, Lesser Demon, Gnome];
	enumType.size = 16;
	break;

case 10046:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31, 5, 3, 8, 9, 4, 2, 11, 1, 0, 12, 10, 6, 13, 7, 14];
	enumType.size = 16;
	break;

case 10047:
	enumType.valueMap = {16=31571, 17=31572};
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 10048:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31572, 31571];
	enumType.size = 2;
	break;

case 10049:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Completed all Quests., Completed all Tasks., Unlock spell: Bones to Peaches., Unlock spell: Tune bane ore., Unlock spell: Teleport to South Falador., Unlock spell: Repair Rune Pouch., Unlock spell: Teleport to North Ardougne., Unlock spell: Remote Farming., Unlock spell: Spiritualise Food., Unlock spell: Make Leather., Unlock spell: Disruption Shield., Unlock spell: Vengeance Group., Unlock spell: Teleport to Trollheim., Unlock spell: Teleport Group to Trollheim., Unlock spell: Borrowed Power., Unlock spell: Ourania Teleport., Unlock prayers: Chivalry, Piety, Rigour, Augury., Unlock prayer: Rapid Renewal., You must have reached full Kudos with Varrock Museum., You need to unlock 1 more piece of music., You must have unlocked access to the Abyss., You must have uncovered the ghostly backstory around Desert Treasure., You must have buried all of the goblin priests in Yu'biusk., You must have completed the Fight Kiln., You must have found out about Tarn Razorlor's secrets., You must have laid Clarence the mage to rest., You must have fully completed the Stronghold of Player Safety., You must have fully completed the Stronghold of Security., You must have completed all the unabridged Fremennik Sagas., You must have hunted the Thalassus ten times after the Deadliest Catch quest., You must have defeated the Queen Black Dragon and obtained the first Dragonkin journal., You must have claimed a reward from Claus for doing him a favour after completing Carnillean Rising., , You must have completed What's Mine is Yours and all of Doric's tasks., You must earn 'the Annihilator' title by fighting all four nihil at once, during or after Fate of the Gods., You must find all of Zaros's memoriam crystals on Freneskae., You must find all of Seren's memoriam crystals on Freneskae., You must complete the Player Owned Port tutorial., You must unlock the enhanced Yaktwee stick by catching 1000 charm sprites., You must construct a Tuska mask., Complete the Hyu-Ji, Quin, Eastern Curiosities or Guardians of the World storylines from your port., You must find all the pieces of the Reefwalker's Cape forgotten scroll., You must recover all 15 Mahjarrat memories for Kharshai., You must recover all 14 of Bandos's memories on Yu'biusk., You must have defeated every boss at least once to earn the title 'the Reaper'., You must earn the title 'of the Amlodd'., You must earn the title 'of the Cadarn'., You must earn the title 'of the Crwys'., You must earn the title 'of the Hefin'., You must earn the title 'of the Iorwerth'., You must earn the title 'of the Ithell'., You must earn the title 'of the Meilyr'., You must earn the title 'of the Trahaearn'., You must find all of the memoriam crystals in Prifddinas., You must aid Lord Amlodd in cleansing shadow cores., You must reconnect the Prifddinas spirit tree with her brethren., You must help Lady Ithell with crystal singing research., You must start helping Lady Meilyr to retrieve her lost potion recipes., You must do well enough in Rush of Blood to impress Morvran., You must aid Lady Trahaearn in removing some corruption., You must have fully built the statue of Rhiannon in the Tower of Voices at least once., You must earn the title 'Slayer Master' from Morvran's platinum Rush of Blood challenge., You must earn the title 'The Famous' by completing Morvran's Slayer challenge to collect dark crystals from boss monsters., You must collect one of each impling for Daffyd in Prifddinas., You must unlock all of the combination potion recipes from Clan Meilyr in Prifddinas., You must find the journal page for Clan Amlodd from the Hefin Agility Course in Prifddinas., You must find the journal page for Clan Cadarn from the Hefin Agility Course in Prifddinas., You must find the journal page for Clan Crwys from the Hefin Agility Course in Prifddinas., You must find the journal page for Clan Hefin from the Hefin Agility Course in Prifddinas., You must find the journal page for Clan Iorwerth from the Hefin Agility Course in Prifddinas., You must find the journal page for Clan Ithell from the Hefin Agility Course in Prifddinas., You must find the journal page for Clan Meilyr from the Hefin Agility Course in Prifddinas., You must find the journal page for Clan Trahaearn from the Hefin Agility Course in Prifddinas., You must complete all of Tiny Zemouregal's Achievements while in Dimension of Disaster's New Varrock., You must gain all the Prawn Perks from your Aquarium.];
	enumType.size = 75;
	break;

case 10050:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [4,000 chompy kills., Scabarite research complete., Highest rune shop unlocked from Ali Morrisane., All hot-air balloon travel routes unlocked., Eagle transport routes fully unlocked., Thieves' Guild fully unlocked., All Smoking Kills sub-bosses defeated., Unlock ability to craft all Slayer items, including fused helmets, and to deliver killing blows quicker., Unlock the upgrade to the ferocious ring, to use it in Morvran's arena., Agile top and legs rewards from advanced Agility courses unlocked., Master White Knight rank obtained., Flying broomstick unlocked., Witch's Potion mini quest completed., Sheep Shearer mini quest completed., Found all hidden treasure from Making History., Achieve 1,250+ Conquest rank., Sobered up Skippy., Unlocked the full power of the Ivandis Flail., You need to show a full set of profound armour to Lanthus., Unlocked maximum access to Mobilising Armies rewards., Defeated all champions., Achieve maximum rank in each Barbarian Assault role., Complete all court cases., Complete 25 chimp ice deliveries., Complete all barbarian training with Otto., Find all barbarian notes in the Ancient Cavern., Unlock all rewards from the Artisans' Workshop., Obtain all circus clothing., Complete the Dahmaroc statue in your player-owned house., Unlock the 'Scroll of Life' trait., Unlock the 'Scroll of Efficiency' trait., Unlock the 'Scroll of Cleansing' trait., Unlock the 'Scroll of Daemonheim' trait., Unlock the 'Scroll of Proficiency' trait., Unlock the 'Scroll of Dexterity' trait., Unlock the 'Wild Card' trait., Fully upgrade all Temple Trekking NPCs., Complete all achievements in the Dominion Tower and slay the Sunfreet., Create Char's most treasured symbol in her training cave., Obtain rank 1 esteem from Wizard Finix., Purchase the champion's tackle box from the Fish Flingers fisherman., Obtain Song from the Depths' hidden rewards., Defeat the Queen Black Dragon and obtain all four Dragonkin journals., Explore the Eastern Lands as far as the Shield from your port., Complete the Hyu-Ji, Quin, Eastern Curiosities and Guardians of the World storylines from your port., You must have personally poked Vorago's eye out., You must have survived the Shadow beneath the barrows., You must have earned the right to wear the title 'of Daemonheim'., You must unlock all ten elder chronicle entries., Unlock all permanent effects from Death's Store., You need to kill the penance king in Barbarian Assault at least once.,  , You must complete the replica statue of Rhiannon in the Max Guild garden., You need to complete all three additional challenges from Maria in the Broken Home quest., You need to gain all possible Prawn Perk Points for your Aquarium.];
	enumType.size = 55;
	break;

case 10051:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Champion's Challenge: Defeat a champion., Court Cases: Complete a case or speak to the clerk if you have completed them all., Phoenix Lair: Defeat the phoenix., Familiarisation: Collect your familiarisation rewards from Pikkenmix., Treasure Trails: Complete a treasure trail., Shooting Star: Collect your rewards from the star sprite., Big Chinchompa: Complete a game of big chinchompa., God Statues: Earn Prayer or Slayer XP at a God statue., Troll Invasion: Complete a game of troll invasion., Fish Flingers: Complete a game of fish flingers., Sinkholes: Complete a game of sinkholes., Wilderness Warbands: Hand a supply into Quercus., Evil Tree: Collect your rewards from the evil tree., Tears of Guthix: Complete a game of tears of Guthix., Penguin Hide and Seek: Spot a penguin., The Circus: Complete an event in the circus., Agoroth: Defeat Agoroth., Rune Goldberg Machine: Collect some viswax., Rush of Blood: Complete a reward run of rush of blood., Guthixian Caches: Complete a full round of Guthixian caches., Bork: Defeat Bork., Skeletal Horror: Defeat the Skeletal Horror.];
	enumType.size = 22;
	break;

case 10052:
	enumType.valueMap = {5=34850};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10053:
	enumType.valueType = OBJ;
	enumType.defaultint = 526;
	enumType.keyType = INT;
	enumType.valueArray = [null, 12425, 12445, 12428, 12459, 12533, 12838, 12460, 12432, 12839, 12430, 12446, 12440, 12834, 12447, 12433, 12429, 12443, 12443, 12443, 12443, 12461, 12431, 12422, 12448, 12458, 12458, 12458, 12458, 12458, 12458, 12458, 12462, 12829, 12426, 12444, 12441, 12454, 12453, 12463, 12424, 12836, 12840, 12835, 12455, 12468, 12427, 12436, 12467, 12464, 12452, 12439, 12438, 12423, 12830, 12451, 14622, 12826, 12449, 12450, 12841, 12465, 12831, 12457, 12824, 12824, 12824, 12442, 12456, 12837, 12832, 12466, 12434, 12833, 12437, 12827, 12828, 12435, 12825, 31332, 31401, 31401, 31401, 31401, 32832, 34146];
	enumType.size = 85;
	break;

case 10054:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31619, 31620, 31621, 31622, 31623, 31624, -1, 31625, 31626, 31627, 31628, 31629, 31630, -1, 31631, 31632, 31633, 31634, 31635, 31636, -1, 31637, 31638, 31639, 31640, 31641, 31642, -1];
	enumType.size = 28;
	break;

case 10055:
	enumType.valueMap = {3=34878};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10056:
	enumType.valueMap = {3=34879};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10057:
	enumType.valueMap = {3=34880};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10058:
	enumType.valueMap = {3=34881};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10059:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 106823741;
	enumType.keyType = INT;
	enumType.valueArray = [106823741, 106823741, 106823744, 106823747, 106823750, 106823753, 106823756, 106823759, 106823762, 106823765, 106823769, 106823772, 106823775, 106823778, 106823781, 106823784, 106823787, 106823790, 106823793, 106823796, 106823799, 106823802, 106823805, 106823808, 106823811, 106823814, 106823817, 106823820, 106823823, 106823826, 106823829];
	enumType.size = 31;
	break;

case 10060:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 106823740;
	enumType.keyType = INT;
	enumType.valueArray = [106823740, 106823740, 106823742, 106823745, 106823748, 106823751, 106823754, 106823757, 106823760, 106823763, 106823766, 106823770, 106823773, 106823776, 106823779, 106823782, 106823785, 106823788, 106823791, 106823794, 106823797, 106823800, 106823803, 106823806, 106823809, 106823812, 106823815, 106823818, 106823821, 106823824, 106823827];
	enumType.size = 31;
	break;

case 10066:
	enumType.valueType = TILE;
	enumType.defaultint = 62915328;
	enumType.keyType = INT;
	enumType.valueArray = [62915328, 63963904, 65012480, 66061056];
	enumType.size = 4;
	break;

case 10067:
	enumType.valueType = TILE;
	enumType.defaultint = 63439616;
	enumType.keyType = INT;
	enumType.valueArray = [63439616, 64488192, 65536768, 66585344];
	enumType.size = 4;
	break;

case 10068:
	enumType.valueType = TILE;
	enumType.defaultint = 63439648;
	enumType.keyType = INT;
	enumType.valueArray = [63439648, 64488224, 65536800, 66585376];
	enumType.size = 4;
	break;

case 10069:
	enumType.valueType = TILE;
	enumType.defaultint = 62915360;
	enumType.keyType = INT;
	enumType.valueArray = [62915360, 63963936, 65012512, 66061088];
	enumType.size = 4;
	break;

case 10070:
	enumType.valueMap = {14930=18357, 14931=18381, 14932=18356, 14933=18356, 14937=18379, 14939=18382, 14940=18382};
	enumType.valueType = ANIMATION;
	enumType.defaultint = 18355;
	enumType.keyType = STRUCT;
	enumType.size = 7;
	break;

case 10071:
	enumType.valueType = SPOT;
	enumType.defaultint = 5520;
	enumType.keyType = INT;
	enumType.valueArray = [5520, 5522, 5521, 5523];
	enumType.size = 4;
	break;

case 10072:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [35013, 35014, 35015, 35016, 35017];
	enumType.size = 5;
	break;

case 10073:
	enumType.valueType = OBJ;
	enumType.defaultint = 34896;
	enumType.keyType = INT;
	enumType.valueArray = [34896, 34896, 34896, 34897, 34898, 34899, 34900, 34901, 34902, 34903, 34904, 34905, 34907, 34909, 34911, 34915, 34916, 34914, 34913, 34917];
	enumType.size = 20;
	break;

case 10074:
	enumType.valueType = INT;
	enumType.defaultint = 4;
	enumType.keyType = INT;
	enumType.valueArray = [2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	enumType.size = 20;
	break;

case 10075:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [4915330, 4915330, 4915330, 4915330, 4915330];
	enumType.size = 5;
	break;

case 10076:
	enumType.valueType = STRING;
	enumType.defaultstr = "Click to see the items available on day 1";
	enumType.keyType = INT;
	enumType.valueArray = [Click to see the items available on day 1, Click to see the items available on day 2, Click to see the items available on day 3, Click to see the items available on day 4, Click to see the items available on day 5, Click to see the items available on day 6, Click to see the items available on day 7, Click to see the items available on day 8, Click to see the items available on day 9, Click to see the items available on day 10, Click to see the items available on day 11, Click to see the items available on day 12, Click to see the items available on day 13, Click to see the items available on day 14];
	enumType.size = 14;
	break;

case 10077:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 82117564;
	enumType.keyType = INT;
	enumType.valueArray = [82117564, 82117563, 82117562, 82117561, 82117560, 82117559, 82117558, 82117557, 82117556, 82117555, 82117554, 82117553, 82117552, 82117551];
	enumType.size = 14;
	break;

case 10078:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 82117466;
	enumType.keyType = INT;
	enumType.valueArray = [82117466, 82117470, 82117474, 82117478, 82117482, 82117486, 82117490, 82117494, 82117498, 82117502, 82117506, 82117510, 82117514, 82117518, 82117522, 82117526, 82117530, 82117534, 82117538, 82117542];
	enumType.size = 20;
	break;

case 10079:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 82117468;
	enumType.keyType = INT;
	enumType.valueArray = [82117468, 82117472, 82117476, 82117480, 82117484, 82117488, 82117492, 82117496, 82117500, 82117504, 82117508, 82117512, 82117516, 82117520, 82117524, 82117528, 82117532, 82117536, 82117540, 82117544];
	enumType.size = 20;
	break;

case 10080:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 82117467;
	enumType.keyType = INT;
	enumType.valueArray = [82117467, 82117471, 82117475, 82117479, 82117483, 82117487, 82117491, 82117495, 82117499, 82117503, 82117507, 82117511, 82117515, 82117519, 82117523, 82117527, 82117531, 82117535, 82117539, 82117543];
	enumType.size = 20;
	break;

case 10081:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 82117465;
	enumType.keyType = INT;
	enumType.valueArray = [82117465, 82117469, 82117473, 82117477, 82117481, 82117485, 82117489, 82117493, 82117497, 82117501, 82117505, 82117509, 82117513, 82117517, 82117521, 82117525, 82117529, 82117533, 82117537, 82117541];
	enumType.size = 20;
	break;

case 10083:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 25516, 25517, 25518, 25519, 25520, 25522, 25523, 25528, 25524, 25526, 25525, 25527];
	enumType.size = 12;
	break;

case 10084:
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 25529, 25530, 25531, 25532, 25533, 25535, 25536, 25541, 25537, 25539, 25538, 25540];
	enumType.size = 12;
	break;

case 10085:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 4162, 34960, 34961, 34962, 34963, 10952, 32644, 21451, 18337, 31188, 27996, 19675];
	enumType.size = 12;
	break;

case 10086:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31661];
	enumType.size = 1;
	break;

case 10087:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 34930];
	enumType.size = 1;
	break;

case 10088:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31663];
	enumType.size = 1;
	break;

case 10089:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34931];
	enumType.size = 1;
	break;

case 10090:
	enumType.valueMap = {5=34934};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10091:
	enumType.valueMap = {3=34935};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10092:
	enumType.valueType = OBJ;
	enumType.defaultint = 34919;
	enumType.keyType = INT;
	enumType.valueArray = [34919, 34922, 34920, 34921];
	enumType.size = 4;
	break;

case 10093:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [2, 2, 2, 2];
	enumType.size = 4;
	break;

case 10094:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [4915330, 4915330, 4915330, 4915330];
	enumType.size = 4;
	break;

case 10095:
	enumType.valueType = OBJ;
	enumType.defaultint = 34927;
	enumType.keyType = INT;
	enumType.valueArray = [34927, 34927, 34927];
	enumType.size = 3;
	break;

case 10096:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [2, 3, 4];
	enumType.size = 3;
	break;

case 10097:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [4915330, 4915330, 4915330, 4915330, 4915330];
	enumType.size = 5;
	break;

case 10098:
	enumType.valueType = OBJ;
	enumType.defaultint = 34918;
	enumType.keyType = INT;
	enumType.valueArray = [34918, 34918, 34918];
	enumType.size = 3;
	break;

case 10099:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [2, 3, 4];
	enumType.size = 3;
	break;

case 10100:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [2, 4, 8];
	enumType.size = 3;
	break;

case 10101:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [4915330, 4915330, 4915330, 4915330];
	enumType.size = 4;
	break;

case 10102:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31672, 31674, 31675];
	enumType.size = 3;
	break;

case 10103:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 34943, null, 34946];
	enumType.size = 4;
	break;

case 10104:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 34943];
	enumType.size = 1;
	break;

case 10105:
	enumType.valueMap = {3=34944};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10106:
	enumType.valueMap = {3=34945};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10107:
	enumType.valueMap = {3=34946};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10108:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [34948, null, null, null, 34949, null, null, 34950, null, 34952, 34951];
	enumType.size = 5;
	break;

case 10109:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 34953, null, 34956];
	enumType.size = 4;
	break;

case 10110:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 34953];
	enumType.size = 1;
	break;

case 10111:
	enumType.valueMap = {3=34954};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10112:
	enumType.valueMap = {3=34955};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10113:
	enumType.valueMap = {3=34956};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10114:
	enumType.valueType = STRING;
	enumType.defaultstr = "Select a skill";
	enumType.keyType = INT;
	enumType.valueArray = [Agility, Attack, Constitution, Construction, Cooking, Crafting, Defence, Divination, Dungeoneering, Farming, Firemaking, Fishing, Fletching, Herblore, Hunter, Magic, Mining, Prayer, Ranged, Runecrafting, Slayer, Smithing, Strength, Summoning, Thieving, Woodcutting];
	enumType.size = 26;
	break;

case 10115:
	enumType.valueType = SKILL;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [16, 0, 3, 22, 7, 12, 1, 25, 24, 19, 11, 10, 9, 15, 21, 6, 14, 5, 4, 20, 18, 13, 2, 23, 17, 8];
	enumType.size = 26;
	break;

case 10116:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [0, 5000, 10000, 25000, 50000, 100000, 250000, 500000, 1000000];
	enumType.size = 9;
	break;

case 10117:
	enumType.valueType = STRING;
	enumType.defaultstr = "Entry fee";
	enumType.keyType = INT;
	enumType.valueArray = [Just for fun, 5,000, 10,000, 25,000, 50,000, 100,000, 250,000, 500,000, 1,000,000];
	enumType.size = 9;
	break;

case 10118:
	enumType.valueType = STRING;
	enumType.defaultstr = "Time limit";
	enumType.keyType = INT;
	enumType.valueArray = [5 mins, 10 mins, 15 mins, 20 mins, 30 mins];
	enumType.size = 5;
	break;

case 10119:
	enumType.valueType = STRING;
	enumType.defaultstr = "Start delay";
	enumType.keyType = INT;
	enumType.valueArray = [1 min, 3 mins, 5 mins];
	enumType.size = 3;
	break;

case 10120:
	enumType.valueType = INT;
	enumType.defaultint = 500;
	enumType.keyType = INT;
	enumType.valueArray = [500, 1000, 1500, 2000, 3000];
	enumType.size = 5;
	break;

case 10121:
	enumType.valueType = INT;
	enumType.defaultint = 100;
	enumType.keyType = INT;
	enumType.valueArray = [100, 300, 500];
	enumType.size = 3;
	break;

case 10123:
	enumType.valueType = STRING;
	enumType.defaultstr = "Iron ingot I";
	enumType.keyType = INT;
	enumType.valueArray = [Iron ingot I, Steel ingot I, Mithril ingot I, Adamant ingot I, Rune ingot I, Iron ingot II, Steel ingot II, Mithril ingot II, Adamant ingot II, Rune ingot II, Iron ingot III, Steel ingot III, Mithril ingot III, Adamant ingot III, Rune ingot III];
	enumType.size = 15;
	break;

case 10124:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [107544643, 107544651, 107544655, 107544659, 107544663, 107544667, 107544671, 107544675, 107544679, 107544683, 107544688, 107544694, 107544700, 107544706, 107544712, 107544718, 107544879, 107544884, 107544890];
	enumType.size = 19;
	break;

case 10125:
	enumType.valueType = INTERFACE;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [107544645, 107544653, 107544657, 107544661, 107544665, 107544669, 107544673, 107544677, 107544681, 107544685, 107544690, 107544696, 107544702, 107544708, 107544714, 107544720, 107544881, 107544886, 107544892];
	enumType.size = 19;
	break;

case 10126:
	enumType.valueMap = {-1=Sorry, this system is offline at the moment. Please try again later.};
	enumType.valueType = STRING;
	enumType.defaultstr = "Unexpected error.";
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10127:
	enumType.valueMap = {-1=Sorry, the Bond redemption system is offline at the moment. Please try again later., 1=Sorry, you are already buying something. Please wait a moment., 2=Sorry, the Bond redemption system has just gone offline. Please try again later., 3=, 10=Bank PIN invalid., 11=We are currently processing a previous request. Please wait., 12=Sorry, there are Bonds still waiting to be redeemed at the moment., 15="Sorry, your balance changed recently. The transaction has been aborted. Please try again.";};
	enumType.valueType = STRING;
	enumType.defaultstr = "Sorry, we are currently unable to process your request. Your Bonds were not redeemed. Please try again later.";
	enumType.keyType = INT;
	enumType.size = 8;
	break;

case 10128:
	enumType.valueType = STRING;
	enumType.defaultstr = "Sorry, something went wrong. Please check back later.";
	enumType.keyType = INT;
	enumType.valueArray = [null, Sorry, your purchase timed out. Either your Bonds will be returned, or you will receive your RuneCoins., RuneCoins have been added to your account., RuneCoins will be added to your account shortly., Sorry, we were unable to process your request. Please try again later., Sorry, we were unable to process your request. Please try again later.];
	enumType.size = 5;
	break;

case 10129:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, null, Please click 'CONTINUE' now., Please click 'CONTINUE' and wait a few moments for it to take effect.];
	enumType.size = 2;
	break;

case 10130:
	enumType.valueType = STRING;
	enumType.defaultstr = "Sorry, we are currently unable to process your request. Please try again later.";
	enumType.keyType = INT;
	enumType.valueArray = [null, Sorry, you are already buying something. Please wait a moment., Sorry, this system has just gone offline. Please try again later., , Sorry, you have insufficient funds for your purchase., Sorry, this offer is no longer available. Please try again.];
	enumType.size = 5;
	break;

case 10131:
	enumType.valueType = STRING;
	enumType.defaultstr = "Sorry, something went wrong. Please check back later.";
	enumType.keyType = INT;
	enumType.valueArray = [null, Sorry, your purchase timed out. Either your currency will be returned, or you will receive your purchase., Your purchase has been successful., Your purchase has been successful. The item will be added to your account shortly., Sorry, you have insufficient funds for your purchase., Sorry, there has been a problem with your purchase. Please try again., Sorry, you can't purchase any more of this item., Sorry, there has been a problem with your purchase.];
	enumType.size = 7;
	break;

case 10132:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, null, Please click 'DONE' for it to take effect., Please click 'DONE' and wait a few moments for it to take effect.];
	enumType.size = 2;
	break;

case 10139:
	enumType.valueMap = {3=35082};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10140:
	enumType.valueMap = {3=35083};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10141:
	enumType.valueMap = {5=35084};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10142:
	enumType.valueMap = {5=35086, 3=35085};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 10143:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [35087];
	enumType.size = 1;
	break;

case 10144:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [35088];
	enumType.size = 1;
	break;

case 10145:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [35089];
	enumType.size = 1;
	break;

case 10146:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 35097];
	enumType.size = 1;
	break;

case 10147:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31821];
	enumType.size = 1;
	break;

case 10148:
	enumType.valueMap = {4=35100, 7=35101};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 10149:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31827, 31828, 31829, 31830, 31831, 31832, 31833];
	enumType.size = 7;
	break;

case 10150:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31836, 31837, 31834, 31835, 31838, 31839, 31840, 31841];
	enumType.size = 8;
	break;

case 10151:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31842, 31843];
	enumType.size = 2;
	break;

case 10153:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 10154];
	enumType.size = 1;
	break;

case 10154:
	enumType.valueMap = {25767=25766};
	enumType.valueType = GRAPHIC;
	enumType.defaultint = -1;
	enumType.keyType = GRAPHIC;
	enumType.size = 1;
	break;

case 10155:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 25700, 31847, 31848, 31849, 31850, 31851, 31852, 31853, 31854, 31855];
	enumType.size = 10;
	break;

case 10156:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31861, 31867, 31868];
	enumType.size = 3;
	break;

case 10157:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31856, 31857, 31858, 31859, 31860, 31862, 31863, 31864, 31865, 31866];
	enumType.size = 10;
	break;

case 10158:
	enumType.valueType = ENUM;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [10156, 10157];
	enumType.size = 2;
	break;

case 10159:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13674, 13859, 13848];
	enumType.size = 3;
	break;

case 10160:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13680, 13858, 13847];
	enumType.size = 3;
	break;

case 10161:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [13686, 13857, 13846];
	enumType.size = 3;
	break;

case 10162:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [11141, 11169, 11166];
	enumType.size = 3;
	break;

case 10163:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14531, 14532];
	enumType.size = 2;
	break;

case 10164:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19308, 19314];
	enumType.size = 2;
	break;

case 10165:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [19321, 19327];
	enumType.size = 2;
	break;

case 10166:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21212, 23185];
	enumType.size = 2;
	break;

case 10167:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21187, 21321];
	enumType.size = 2;
	break;

case 10168:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21322, 21323];
	enumType.size = 2;
	break;

case 10169:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [28919, 28944];
	enumType.size = 2;
	break;

case 10170:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [14536, 14537];
	enumType.size = 2;
	break;

case 10177:
	enumType.valueType = STRING;
	enumType.defaultstr = "Pick an Answer";
	enumType.keyType = INT;
	enumType.valueArray = [Pick an Answer, The ballad of the black dragon., None - V hates music., The ballad of the giant basilisk., The ballad of the giant jelly., The ballad of the giant pyrefiend.];
	enumType.size = 6;
	break;

case 10178:
	enumType.valueType = STRING;
	enumType.defaultstr = "Pick an Answer";
	enumType.keyType = INT;
	enumType.valueArray = [Pick an Answer, Winter's Eye., Frost's Bloom., Ice Tulips., None - V has hay fever., Autumn Drumsticks.];
	enumType.size = 6;
	break;

case 10179:
	enumType.valueType = STRING;
	enumType.defaultstr = "Pick an Answer";
	enumType.keyType = INT;
	enumType.valueArray = [Pick an Answer, No - Magic is an abomination., Yes - The more the better., No - V is allergic to spells., Yes - Simple air and water magic., No - Magic does not exist.];
	enumType.size = 6;
	break;

case 10180:
	enumType.valueType = STRING;
	enumType.defaultstr = "Pick an Answer";
	enumType.keyType = INT;
	enumType.valueArray = [Pick an Answer, A drunken pub crawl., A victory feast., None - V fasted., A wedding feast., A funeral feast.];
	enumType.size = 6;
	break;

case 10181:
	enumType.valueType = STRING;
	enumType.defaultstr = "Pick an Answer";
	enumType.keyType = INT;
	enumType.valueArray = [Pick an Answer, As a god., As a mere mortal., As a criminal who divided the tribes., As a powerful mage., As a returning hero.];
	enumType.size = 6;
	break;

case 10182:
	enumType.valueType = STRING;
	enumType.defaultstr = "Pick an Answer";
	enumType.keyType = INT;
	enumType.valueArray = [Pick an Answer, At the end of the Third Age., After touching the Stone of Jas., During the God Wars., Shortly before Guthix woke., He never left.];
	enumType.size = 6;
	break;

case 10183:
	enumType.valueType = STRING;
	enumType.defaultstr = "Pick an Answer";
	enumType.keyType = INT;
	enumType.valueArray = [Pick an Answer, He feared Guthix., Out of respect for Guthix., He was fleeing Bandos., He left with Saradomin., He lost a bet.];
	enumType.size = 6;
	break;

case 10184:
	enumType.valueMap = {107806765=13, 107806764=12, 107806767=15, 107806766=14, 107806761=9, 107806760=8, 107806763=11, 107806762=10, 107806757=5, 107806756=4, 107806759=7, 107806758=6, 107806753=1, 107806752=50, 107806755=3, 107806754=2, 107806777=25, 107806776=24, 107806773=21, 107806772=20, 107806775=23, 107806774=22, 107806769=17, 107806768=16, 107806771=19, 107806770=18, 107806735=33, 107806734=32, 107806729=29, 107806728=28, 107806731=31, 107806730=30, 107806727=27, 107806726=26, 107806749=47, 107806748=46, 107806751=49, 107806750=48, 107806745=43, 107806744=42, 107806747=45, 107806746=44, 107806741=39, 107806740=38, 107806743=41, 107806742=40, 107806737=35, 107806736=34, 107806739=37, 107806738=36};
	enumType.valueType = INT;
	enumType.keyType = INTERFACE;
	enumType.size = 50;
	break;

case 10185:
	enumType.valueType = INTERFACE;
	enumType.defaultint = 107806753;
	enumType.keyType = INT;
	enumType.valueArray = [null, 107806753, 107806754, 107806755, 107806756, 107806757, 107806758, 107806759, 107806760, 107806761, 107806762, 107806763, 107806764, 107806765, 107806766, 107806767, 107806768, 107806769, 107806770, 107806771, 107806772, 107806773, 107806774, 107806775, 107806776, 107806777];
	enumType.size = 25;
	break;

case 10188:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [4915330, 4915330, 4915330, 4915330, 4915330];
	enumType.size = 5;
	break;

case 10189:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [unranked, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];
	enumType.size = 11;
	break;

case 10191:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [21174];
	enumType.size = 1;
	break;

case 10192:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31380];
	enumType.size = 1;
	break;

case 10194:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [41];
	enumType.size = 1;
	break;

case 10195:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [118];
	enumType.size = 1;
	break;

case 10196:
	enumType.valueType = STRING;
	enumType.defaultstr = "Any Boss";
	enumType.keyType = INT;
	enumType.valueArray = [Beastmaster Durzag, Yakamaru];
	enumType.size = 2;
	break;

case 10197:
	enumType.valueType = INT;
	enumType.defaultint = 41952;
	enumType.keyType = INT;
	enumType.valueArray = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 41952, 46200, 46200, 46200, 46200, 92400, 92400, 92400, 92400, 92400, 92400, 92400, 92400, 138600, 138600, 138600, 138600, 138600, 138600, 184800, 184800, 184800, 184800, 184800, 184800, 231000, 231000, 231000, 231000, 231000, 277200, 277200, 277200, 277200, 277200, 323400, 323400, 323400, 323400, 323400, 369600, 369600, 369600, 369600, 415800, 415800, 415800, 415800, 462000, 462000, 462000, 462000, 508200, 508200, 508200, 554400, 554400, 554400, 554400, 600600, 600600, 600600, 646800, 646800, 646800, 693000, 693000, 693000, 739200, 739200];
	enumType.size = 70;
	break;

case 10214:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31936, 31937, 31938, 31939, 31940, -1, 31941, 31942, 31943, 31944, 31945, -1, 31946, 31947, 31948, 31949, 31950, -1, 31951, 31952, 31953, 31954, 31955];
	enumType.size = 23;
	break;

case 10215:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31956, 31957, 31958, 31959, 31960, 31961, 31962, 31963, 31964, 31965];
	enumType.size = 10;
	break;

case 10216:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [null, Beastmaster Durzag, Yakamaru];
	enumType.size = 2;
	break;

case 10219:
	enumType.valueMap = {3024=10000, 3040=12000, 2436=8000, 2440=12000, 2442=6500, 12140=10000, 2444=12000, 35199=5000};
	enumType.valueType = INT;
	enumType.keyType = OBJ;
	enumType.size = 8;
	break;

case 10234:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 31972, 31973, 31974, 31975, 31976, 31977, 31978, 31979, 31980, 31981];
	enumType.size = 10;
	break;

case 10235:
	enumType.valueType = ANIMATION;
	enumType.defaultint = 26960;
	enumType.keyType = STRUCT;
	break;

case 10236:
	enumType.valueType = ANIMATION;
	enumType.defaultint = 26979;
	enumType.keyType = STRUCT;
	break;

case 10237:
	enumType.valueType = ANIMATION;
	enumType.defaultint = 26980;
	enumType.keyType = STRUCT;
	break;

case 10238:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [35161, 35163, 35159, 35167, 35165, 35191, 35193, 35189, 35197, 35195, 35176, 35178, 35174, 35182, 35180, 35148];
	enumType.size = 16;
	break;

case 10239:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [35161, 35163, 35159, 35167, 35165, 35191, 35193, 35189, 35197, 35195, 35176, 35178, 35174, 35182, 35180, 35148, 35217];
	enumType.size = 17;
	break;

case 10240:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [35161, 35163, 35159, 35167, 35165, 35191, 35193, 35189, 35197, 35195, 35176, 35178, 35174, 35182, 35180, 35148];
	enumType.size = 16;
	break;

case 10241:
	enumType.valueType = OBJ;
	enumType.defaultint = 34026;
	enumType.keyType = INT;
	enumType.valueArray = [34026, 34026, 34026, 35226, 35228, 35227];
	enumType.size = 6;
	break;

case 10242:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [2, 3, 4, 0, 0, 0];
	enumType.size = 6;
	break;

case 10243:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 4, 1, 1, 1];
	enumType.size = 6;
	break;

case 10244:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [31995];
	enumType.size = 1;
	break;

case 10245:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [35231, 35236, null, 35237, 35232, null, null, 35233, null, 35235, 35234];
	enumType.size = 7;
	break;

case 10246:
	enumType.valueType = STRING;
	enumType.defaultstr = "Receive invites from everyone";
	enumType.keyType = INT;
	enumType.valueArray = [Receive invites from everyone, Receive invites from friends, Receive invites from friends and clan, Receive no invites];
	enumType.size = 4;
	break;

case 10247:
	enumType.valueType = STRUCT;
	enumType.defaultint = 31914;
	enumType.keyType = INT;
	enumType.valueArray = [31914, 31915, 31916, 32007];
	enumType.size = 4;
	break;

case 10248:
	enumType.valueType = STRUCT;
	enumType.defaultint = 32008;
	enumType.keyType = INT;
	enumType.valueArray = [32008, 32009, 32010, 32011];
	enumType.size = 4;
	break;

case 10249:
	enumType.valueType = STRUCT;
	enumType.defaultint = 32012;
	enumType.keyType = INT;
	enumType.valueArray = [32012, 32013, 32014, 32015];
	enumType.size = 4;
	break;

case 10250:
	enumType.valueType = STRUCT;
	enumType.defaultint = 32016;
	enumType.keyType = INT;
	enumType.valueArray = [32016, 32017, 32018, 32019];
	enumType.size = 4;
	break;

case 10251:
	enumType.valueType = STRUCT;
	enumType.defaultint = 32020;
	enumType.keyType = INT;
	enumType.valueArray = [32020, 32021, 32022, 32023];
	enumType.size = 4;
	break;

case 10252:
	enumType.valueType = STRUCT;
	enumType.defaultint = 32024;
	enumType.keyType = INT;
	enumType.valueArray = [32024, 32025, 32026, 32027];
	enumType.size = 4;
	break;

case 10253:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32029, 32031, 32030, 32032, -1, 32033, 32034, 32035, 32036, 32037];
	enumType.size = 10;
	break;

case 10255:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [1, 2, 3, 4, 5, 6, 7, 8];
	enumType.size = 8;
	break;

case 10257:
	enumType.valueType = STRING;
	enumType.defaultstr = "None";
	enumType.keyType = INT;
	enumType.valueArray = [null, Armadyl, Bandos, Saradomin, Zamorak, Brassica Prime, Marimbo, Zaros, Seren];
	enumType.size = 8;
	break;

case 10269:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [null, 32058, 32059, 32060, 32061, 32062];
	enumType.size = 5;
	break;

case 10270:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [5, 1, 2, 3, 4];
	enumType.size = 5;
	break;

case 10281:
	enumType.valueType = OBJ;
	enumType.defaultint = 35277;
	enumType.keyType = INT;
	enumType.valueArray = [35277, 35281, 35283, 35285, 35287, 35289];
	enumType.size = 6;
	break;

case 10282:
	enumType.valueType = INT;
	enumType.defaultint = 4;
	enumType.keyType = INT;
	break;

case 10283:
	enumType.valueType = INT;
	enumType.defaultint = 1;
	enumType.keyType = INT;
	break;

case 10285:
	enumType.valueMap = {5=35312, 3=35311};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 10286:
	enumType.valueMap = {3=35313};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10287:
	enumType.valueMap = {5=35315, 3=35314};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;

case 10288:
	enumType.valueMap = {3=35316};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10289:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [35298, 35309, 35301, 35305];
	enumType.size = 4;
	break;

case 10290:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [35297, 35307, 35299, 35303];
	enumType.size = 4;
	break;

case 10291:
	enumType.valueType = OBJ;
	enumType.defaultint = 35293;
	enumType.keyType = INT;
	enumType.valueArray = [35293, 35293, 35293, 35317, 35314, 35312, 35313, 35316, 35295, 35296, 35294, 35298, 35297, 35305, 35303, 35301, 35299, 35309, 35307];
	enumType.size = 19;
	break;

case 10292:
	enumType.valueType = INT;
	enumType.defaultint = 4;
	enumType.keyType = INT;
	enumType.valueArray = [2, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	enumType.size = 20;
	break;

case 10293:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [2, 2, 2];
	enumType.size = 3;
	break;

case 10294:
	enumType.valueType = OBJ;
	enumType.defaultint = 35318;
	enumType.keyType = INT;
	enumType.valueArray = [35318, 35318, 35318, 35321, 35322];
	enumType.size = 5;
	break;

case 10295:
	enumType.valueType = INT;
	enumType.defaultint = 2;
	enumType.keyType = INT;
	enumType.valueArray = [2, 3, 4, 4, 4];
	enumType.size = 5;
	break;

case 10296:
	enumType.valueType = INT;
	enumType.keyType = INT;
	enumType.valueArray = [3, 6, 12, 1, 1];
	enumType.size = 5;
	break;

case 10301:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 1, 2, 3, 4, 5, 6, 7];
	enumType.size = 8;
	break;

case 10302:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 3, 4, 7];
	enumType.size = 4;
	break;

case 10303:
	enumType.valueType = INT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [0, 3, 4, 5, 7];
	enumType.size = 5;
	break;

case 10304:
	enumType.valueType = STRING;
	enumType.defaultstr = "";
	enumType.keyType = INT;
	enumType.valueArray = [Follower details, Special move, Attack, Call follower, Dismiss follower, Take BoB, Renew familiar, Interact];
	enumType.size = 8;
	break;

case 10305:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [32159, 32160, 32161, 32162, 32163, 32164, 32165, 32166, 32167, 32168, 32169, 32170, 32171, 32172, 32173, 32174, 32175, 32176, 32177, 32178, 32179, 32180, 32182, 32181, 32183, 32184, 32185, 32186, 32187, 32188, 32189, 32190, 32191];
	enumType.size = 33;
	break;

case 10306:
	enumType.valueType = OBJ;
	enumType.defaultint = 35355;
	enumType.keyType = INT;
	enumType.valueArray = [35355, 35356];
	enumType.size = 2;
	break;

case 10307:
	enumType.valueType = INT;
	enumType.defaultint = 4;
	enumType.keyType = INT;
	enumType.valueArray = [4, 4];
	enumType.size = 2;
	break;

case 10308:
	enumType.valueType = STRUCT;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [5689, 32199, 32200, 32202];
	enumType.size = 4;
	break;

case 10309:
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.valueArray = [35369, null, null, null, 35370, null, null, 35371, null, 35373, 35372];
	enumType.size = 5;
	break;

case 10310:
	enumType.valueMap = {3=35374};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 1;
	break;

case 10311:
	enumType.valueMap = {5=35376, 3=35375};
	enumType.valueType = OBJ;
	enumType.defaultint = -1;
	enumType.keyType = INT;
	enumType.size = 2;
	break;
